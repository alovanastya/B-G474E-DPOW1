
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e500  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800e6d8  0800e6d8  0000f6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8f8  0800e8f8  0001000c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e8f8  0800e8f8  0000f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e900  0800e900  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e900  0800e900  0000f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e904  0800e904  0000f904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800e908  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2000000c  0800e914  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800e914  00010848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002541b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  00035457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  00039228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018b8  00000000  00000000  0003b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee29  00000000  00000000  0003ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023091  00000000  00000000  0006b8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014cb0c  00000000  00000000  0008e942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db44e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f80  00000000  00000000  001db494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001e4414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e6c0 	.word	0x0800e6c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800e6c0 	.word	0x0800e6c0

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b988 	b.w	8000eec <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	468e      	mov	lr, r1
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4688      	mov	r8, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14a      	bne.n	8000c9a <__udivmoddi4+0xa6>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	4617      	mov	r7, r2
 8000c08:	d962      	bls.n	8000cd0 <__udivmoddi4+0xdc>
 8000c0a:	fab2 f682 	clz	r6, r2
 8000c0e:	b14e      	cbz	r6, 8000c24 <__udivmoddi4+0x30>
 8000c10:	f1c6 0320 	rsb	r3, r6, #32
 8000c14:	fa01 f806 	lsl.w	r8, r1, r6
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	ea43 0808 	orr.w	r8, r3, r8
 8000c22:	40b4      	lsls	r4, r6
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x62>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c48:	f080 80ea 	bcs.w	8000e20 <__udivmoddi4+0x22c>
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f240 80e7 	bls.w	8000e20 <__udivmoddi4+0x22c>
 8000c52:	3902      	subs	r1, #2
 8000c54:	443b      	add	r3, r7
 8000c56:	1a9a      	subs	r2, r3, r2
 8000c58:	b2a3      	uxth	r3, r4
 8000c5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6a:	459c      	cmp	ip, r3
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0x8e>
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c74:	f080 80d6 	bcs.w	8000e24 <__udivmoddi4+0x230>
 8000c78:	459c      	cmp	ip, r3
 8000c7a:	f240 80d3 	bls.w	8000e24 <__udivmoddi4+0x230>
 8000c7e:	443b      	add	r3, r7
 8000c80:	3802      	subs	r0, #2
 8000c82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c86:	eba3 030c 	sub.w	r3, r3, ip
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	b11d      	cbz	r5, 8000c96 <__udivmoddi4+0xa2>
 8000c8e:	40f3      	lsrs	r3, r6
 8000c90:	2200      	movs	r2, #0
 8000c92:	e9c5 3200 	strd	r3, r2, [r5]
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d905      	bls.n	8000caa <__udivmoddi4+0xb6>
 8000c9e:	b10d      	cbz	r5, 8000ca4 <__udivmoddi4+0xb0>
 8000ca0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e7f5      	b.n	8000c96 <__udivmoddi4+0xa2>
 8000caa:	fab3 f183 	clz	r1, r3
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d146      	bne.n	8000d40 <__udivmoddi4+0x14c>
 8000cb2:	4573      	cmp	r3, lr
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xc8>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 8105 	bhi.w	8000ec6 <__udivmoddi4+0x2d2>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4690      	mov	r8, r2
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e5      	beq.n	8000c96 <__udivmoddi4+0xa2>
 8000cca:	e9c5 4800 	strd	r4, r8, [r5]
 8000cce:	e7e2      	b.n	8000c96 <__udivmoddi4+0xa2>
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f000 8090 	beq.w	8000df6 <__udivmoddi4+0x202>
 8000cd6:	fab2 f682 	clz	r6, r2
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	f040 80a4 	bne.w	8000e28 <__udivmoddi4+0x234>
 8000ce0:	1a8a      	subs	r2, r1, r2
 8000ce2:	0c03      	lsrs	r3, r0, #16
 8000ce4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x11e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x11c>
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	f200 80e0 	bhi.w	8000ed0 <__udivmoddi4+0x2dc>
 8000d10:	46c4      	mov	ip, r8
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d20:	fb02 f404 	mul.w	r4, r2, r4
 8000d24:	429c      	cmp	r4, r3
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x144>
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x142>
 8000d30:	429c      	cmp	r4, r3
 8000d32:	f200 80ca 	bhi.w	8000eca <__udivmoddi4+0x2d6>
 8000d36:	4602      	mov	r2, r0
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0x98>
 8000d40:	f1c1 0620 	rsb	r6, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	431f      	orrs	r7, r3
 8000d4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d50:	fa20 f306 	lsr.w	r3, r0, r6
 8000d54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	fa1f fc87 	uxth.w	ip, r7
 8000d66:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x1a0>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d86:	f080 809c 	bcs.w	8000ec2 <__udivmoddi4+0x2ce>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8099 	bls.w	8000ec2 <__udivmoddi4+0x2ce>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	fa1f fe83 	uxth.w	lr, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dac:	45a4      	cmp	ip, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1ce>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000db6:	f080 8082 	bcs.w	8000ebe <__udivmoddi4+0x2ca>
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d97f      	bls.n	8000ebe <__udivmoddi4+0x2ca>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dce:	4564      	cmp	r4, ip
 8000dd0:	4673      	mov	r3, lr
 8000dd2:	46e1      	mov	r9, ip
 8000dd4:	d362      	bcc.n	8000e9c <__udivmoddi4+0x2a8>
 8000dd6:	d05f      	beq.n	8000e98 <__udivmoddi4+0x2a4>
 8000dd8:	b15d      	cbz	r5, 8000df2 <__udivmoddi4+0x1fe>
 8000dda:	ebb8 0203 	subs.w	r2, r8, r3
 8000dde:	eb64 0409 	sbc.w	r4, r4, r9
 8000de2:	fa04 f606 	lsl.w	r6, r4, r6
 8000de6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dea:	431e      	orrs	r6, r3
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	e9c5 6400 	strd	r6, r4, [r5]
 8000df2:	2100      	movs	r1, #0
 8000df4:	e74f      	b.n	8000c96 <__udivmoddi4+0xa2>
 8000df6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfa:	0c01      	lsrs	r1, r0, #16
 8000dfc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e00:	b280      	uxth	r0, r0
 8000e02:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e06:	463b      	mov	r3, r7
 8000e08:	4638      	mov	r0, r7
 8000e0a:	463c      	mov	r4, r7
 8000e0c:	46b8      	mov	r8, r7
 8000e0e:	46be      	mov	lr, r7
 8000e10:	2620      	movs	r6, #32
 8000e12:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e16:	eba2 0208 	sub.w	r2, r2, r8
 8000e1a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e1e:	e766      	b.n	8000cee <__udivmoddi4+0xfa>
 8000e20:	4601      	mov	r1, r0
 8000e22:	e718      	b.n	8000c56 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e72c      	b.n	8000c82 <__udivmoddi4+0x8e>
 8000e28:	f1c6 0220 	rsb	r2, r6, #32
 8000e2c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e30:	40b7      	lsls	r7, r6
 8000e32:	40b1      	lsls	r1, r6
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e42:	b2bc      	uxth	r4, r7
 8000e44:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb08 f904 	mul.w	r9, r8, r4
 8000e52:	40b0      	lsls	r0, r6
 8000e54:	4589      	cmp	r9, r1
 8000e56:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5a:	b280      	uxth	r0, r0
 8000e5c:	d93e      	bls.n	8000edc <__udivmoddi4+0x2e8>
 8000e5e:	1879      	adds	r1, r7, r1
 8000e60:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e64:	d201      	bcs.n	8000e6a <__udivmoddi4+0x276>
 8000e66:	4589      	cmp	r9, r1
 8000e68:	d81f      	bhi.n	8000eaa <__udivmoddi4+0x2b6>
 8000e6a:	eba1 0109 	sub.w	r1, r1, r9
 8000e6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e72:	fb09 f804 	mul.w	r8, r9, r4
 8000e76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d229      	bcs.n	8000ed8 <__udivmoddi4+0x2e4>
 8000e84:	18ba      	adds	r2, r7, r2
 8000e86:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8a:	d2c4      	bcs.n	8000e16 <__udivmoddi4+0x222>
 8000e8c:	4542      	cmp	r2, r8
 8000e8e:	d2c2      	bcs.n	8000e16 <__udivmoddi4+0x222>
 8000e90:	f1a9 0102 	sub.w	r1, r9, #2
 8000e94:	443a      	add	r2, r7
 8000e96:	e7be      	b.n	8000e16 <__udivmoddi4+0x222>
 8000e98:	45f0      	cmp	r8, lr
 8000e9a:	d29d      	bcs.n	8000dd8 <__udivmoddi4+0x1e4>
 8000e9c:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	e796      	b.n	8000dd8 <__udivmoddi4+0x1e4>
 8000eaa:	eba7 0909 	sub.w	r9, r7, r9
 8000eae:	4449      	add	r1, r9
 8000eb0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb8:	fb09 f804 	mul.w	r8, r9, r4
 8000ebc:	e7db      	b.n	8000e76 <__udivmoddi4+0x282>
 8000ebe:	4673      	mov	r3, lr
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1ce>
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	e766      	b.n	8000d94 <__udivmoddi4+0x1a0>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e6fd      	b.n	8000cc6 <__udivmoddi4+0xd2>
 8000eca:	443b      	add	r3, r7
 8000ecc:	3a02      	subs	r2, #2
 8000ece:	e733      	b.n	8000d38 <__udivmoddi4+0x144>
 8000ed0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed4:	443b      	add	r3, r7
 8000ed6:	e71c      	b.n	8000d12 <__udivmoddi4+0x11e>
 8000ed8:	4649      	mov	r1, r9
 8000eda:	e79c      	b.n	8000e16 <__udivmoddi4+0x222>
 8000edc:	eba1 0109 	sub.w	r1, r1, r9
 8000ee0:	46c4      	mov	ip, r8
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	e7c4      	b.n	8000e76 <__udivmoddi4+0x282>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f2c:	4907      	ldr	r1, [pc, #28]	@ (8000f4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000f36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f001 fca0 	bl	800289a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f96b 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 fe55 	bl	8001c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f62:	f000 fe09 	bl	8001b78 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f66:	f000 f9b3 	bl	80012d0 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000f6a:	f000 fa29 	bl	80013c0 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000f6e:	f000 fa4d 	bl	800140c <MX_COMP3_Init>
  MX_COMP4_Init();
 8000f72:	f000 fa71 	bl	8001458 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000f76:	f000 fa95 	bl	80014a4 <MX_COMP6_Init>
  MX_DAC1_Init();
 8000f7a:	f000 fab9 	bl	80014f0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000f7e:	f000 fb01 	bl	8001584 <MX_DAC2_Init>
  MX_DAC3_Init();
 8000f82:	f000 fb39 	bl	80015f8 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 8000f86:	f000 fb7b 	bl	8001680 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 8000f8a:	f000 fd53 	bl	8001a34 <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 8000f8e:	f000 fd7f 	bl	8001a90 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000f92:	f000 fdc9 	bl	8001b28 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f96:	f000 fc83 	bl	80018a0 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000f9a:	f000 fd15 	bl	80019c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000f9e:	489a      	ldr	r0, [pc, #616]	@ (8001208 <main+0x2b8>)
 8000fa0:	f008 fd76 	bl	8009a90 <HAL_TIM_Base_Start_IT>

  __HAL_DAC_ENABLE(&hdac3, DAC_CHANNEL_1);
 8000fa4:	4b99      	ldr	r3, [pc, #612]	@ (800120c <main+0x2bc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b98      	ldr	r3, [pc, #608]	@ (800120c <main+0x2bc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_2);
 8000fb4:	4b96      	ldr	r3, [pc, #600]	@ (8001210 <main+0x2c0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b95      	ldr	r3, [pc, #596]	@ (8001210 <main+0x2c0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fc2:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	4890      	ldr	r0, [pc, #576]	@ (8001208 <main+0x2b8>)
 8000fc8:	f008 fe32 	bl	8009c30 <HAL_TIM_PWM_Start>

  char msg[] = "MEOW!\r\n";
 8000fcc:	4a91      	ldr	r2, [pc, #580]	@ (8001214 <main+0x2c4>)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd4:	e883 0003 	stmia.w	r3, {r0, r1}
  // HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f91c 	bl	8000218 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	488b      	ldr	r0, [pc, #556]	@ (8001218 <main+0x2c8>)
 8000fea:	f009 ff8d 	bl	800af08 <HAL_UART_Transmit_DMA>
  HAL_Delay(5);
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f001 fcc4 	bl	800297c <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ff4:	217f      	movs	r1, #127	@ 0x7f
 8000ff6:	4889      	ldr	r0, [pc, #548]	@ (800121c <main+0x2cc>)
 8000ff8:	f003 f84c 	bl	8004094 <HAL_ADCEx_Calibration_Start>
   HAL_TIM_Base_Start(&htim6);
   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2,(uint32_t*)sineWave_3,SAMPLE_COUNT_1,DAC_ALIGN_12B_R);

   */

  uint32_t sineWave_1[SAMPLE_COUNT];
 8000ffc:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001002:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001006:	3307      	adds	r3, #7
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	ebad 0d03 	sub.w	sp, sp, r3
 8001010:	ab02      	add	r3, sp, #8
 8001012:	3303      	adds	r3, #3
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sineWave_2[SAMPLE_COUNT];
 800101a:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001024:	3307      	adds	r3, #7
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	ebad 0d03 	sub.w	sp, sp, r3
 800102e:	ab02      	add	r3, sp, #8
 8001030:	3303      	adds	r3, #3
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t sineWave_3[SAMPLE_COUNT];
 8001038:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001042:	3307      	adds	r3, #7
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	ebad 0d03 	sub.w	sp, sp, r3
 800104c:	ab02      	add	r3, sp, #8
 800104e:	3303      	adds	r3, #3
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	617b      	str	r3, [r7, #20]
      sineWave_2[i] = (uint32_t)(2047 * (AMPLITUDE_2 * (sin((2 * M_PI * i * F2) / Fs) + 1)));
      sineWave_3[i] = (sineWave_1[i] + sineWave_2[i]) / 2;
  }
  */

  for (int i = 0; i < SAMPLE_COUNT; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800105a:	e069      	b.n	8001130 <main+0x1e0>
  {
  	float sin1 = AMPLITUDE_1 * sin(2 * M_PI * F1 * i / Fs);
 800105c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800105e:	f7ff fa35 	bl	80004cc <__aeabi_i2d>
 8001062:	a363      	add	r3, pc, #396	@ (adr r3, 80011f0 <main+0x2a0>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fa9a 	bl	80005a0 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	a360      	add	r3, pc, #384	@ (adr r3, 80011f8 <main+0x2a8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fbbb 	bl	80007f4 <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	ec43 2b17 	vmov	d7, r2, r3
 8001086:	eeb0 0a47 	vmov.f32	s0, s14
 800108a:	eef0 0a67 	vmov.f32	s1, s15
 800108e:	f00c faf3 	bl	800d678 <sin>
 8001092:	ec51 0b10 	vmov	r0, r1, d0
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <main+0x2d0>)
 800109c:	f7ff fa80 	bl	80005a0 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd3c 	bl	8000b24 <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	613b      	str	r3, [r7, #16]
  	float sin2 = AMPLITUDE_2 * sin(2 * M_PI * F2 * i / Fs);
 80010b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010b2:	f7ff fa0b 	bl	80004cc <__aeabi_i2d>
 80010b6:	a352      	add	r3, pc, #328	@ (adr r3, 8001200 <main+0x2b0>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa70 	bl	80005a0 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a34b      	add	r3, pc, #300	@ (adr r3, 80011f8 <main+0x2a8>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fb91 	bl	80007f4 <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00c fac9 	bl	800d678 <sin>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd19 	bl	8000b24 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60fb      	str	r3, [r7, #12]
  	float mul = sin1 * sin2;
 80010f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80010fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a02 	vstr	s15, [r7, #8]
  	sineWave_3[i] = (uint32_t)(2047.5f * (mul + 1.0f));
 8001106:	edd7 7a02 	vldr	s15, [r7, #8]
 800110a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800110e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001112:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001224 <main+0x2d4>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	ee17 1a90 	vmov	r1, s15
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SAMPLE_COUNT; i++)
 800112a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112c:	3301      	adds	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001132:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001136:	d391      	bcc.n	800105c <main+0x10c>
  }

  HAL_TIM_Base_Start(&htim6);
 8001138:	483b      	ldr	r0, [pc, #236]	@ (8001228 <main+0x2d8>)
 800113a:	f008 fc39 	bl	80099b0 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sineWave_3, SAMPLE_COUNT, DAC_ALIGN_12B_R);
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	2110      	movs	r1, #16
 800114a:	4831      	ldr	r0, [pc, #196]	@ (8001210 <main+0x2c0>)
 800114c:	f003 fd5a 	bl	8004c04 <HAL_DAC_Start_DMA>
    if(pwm_value == 500) step = -1;
	pwm_value += step;
	setPWM(pwm_value);
	// HAL_Delay(5);
*/
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 8001150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001154:	4835      	ldr	r0, [pc, #212]	@ (800122c <main+0x2dc>)
 8001156:	f004 fda9 	bl	8005cac <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <main+0x21c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2120      	movs	r1, #32
 8001164:	4831      	ldr	r0, [pc, #196]	@ (800122c <main+0x2dc>)
 8001166:	f004 fdb9 	bl	8005cdc <HAL_GPIO_WritePin>
 800116a:	e004      	b.n	8001176 <main+0x226>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	482e      	ldr	r0, [pc, #184]	@ (800122c <main+0x2dc>)
 8001172:	f004 fdb3 	bl	8005cdc <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 8001176:	2120      	movs	r1, #32
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <main+0x2e0>)
 800117a:	f004 fd97 	bl	8005cac <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <main+0x244>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118e:	f004 fda5 	bl	8005cdc <HAL_GPIO_WritePin>
 8001192:	e006      	b.n	80011a2 <main+0x252>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f004 fd9d 	bl	8005cdc <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 80011a2:	2110      	movs	r1, #16
 80011a4:	4822      	ldr	r0, [pc, #136]	@ (8001230 <main+0x2e0>)
 80011a6:	f004 fd81 	bl	8005cac <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <main+0x26c>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	481d      	ldr	r0, [pc, #116]	@ (800122c <main+0x2dc>)
 80011b6:	f004 fd91 	bl	8005cdc <HAL_GPIO_WritePin>
 80011ba:	e004      	b.n	80011c6 <main+0x276>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	481a      	ldr	r0, [pc, #104]	@ (800122c <main+0x2dc>)
 80011c2:	f004 fd8b 	bl	8005cdc <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 80011c6:	2104      	movs	r1, #4
 80011c8:	4818      	ldr	r0, [pc, #96]	@ (800122c <main+0x2dc>)
 80011ca:	f004 fd6f 	bl	8005cac <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <main+0x290>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	4814      	ldr	r0, [pc, #80]	@ (800122c <main+0x2dc>)
 80011da:	f004 fd7f 	bl	8005cdc <HAL_GPIO_WritePin>
 80011de:	e7b7      	b.n	8001150 <main+0x200>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	4811      	ldr	r0, [pc, #68]	@ (800122c <main+0x2dc>)
 80011e6:	f004 fd79 	bl	8005cdc <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 80011ea:	e7b1      	b.n	8001150 <main+0x200>
 80011ec:	f3af 8000 	nop.w
 80011f0:	704a9409 	.word	0x704a9409
 80011f4:	40b88b2f 	.word	0x40b88b2f
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40f86a00 	.word	0x40f86a00
 8001200:	59d5433b 	.word	0x59d5433b
 8001204:	4083a28c 	.word	0x4083a28c
 8001208:	2000031c 	.word	0x2000031c
 800120c:	2000014c 	.word	0x2000014c
 8001210:	20000124 	.word	0x20000124
 8001214:	0800e6d8 	.word	0x0800e6d8
 8001218:	20000414 	.word	0x20000414
 800121c:	20000028 	.word	0x20000028
 8001220:	3fe00000 	.word	0x3fe00000
 8001224:	44fff000 	.word	0x44fff000
 8001228:	20000368 	.word	0x20000368
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	2238      	movs	r2, #56	@ 0x38
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f00c f9ec 	bl	800d620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001256:	2000      	movs	r0, #0
 8001258:	f007 fb22 	bl	80088a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800125c:	2322      	movs	r3, #34	@ 0x22
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2340      	movs	r3, #64	@ 0x40
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001272:	2302      	movs	r3, #2
 8001274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001276:	2304      	movs	r3, #4
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800127a:	2355      	movs	r3, #85	@ 0x55
 800127c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800127e:	2308      	movs	r3, #8
 8001280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001282:	2308      	movs	r3, #8
 8001284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f007 fbba 	bl	8008a08 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800129a:	f000 fd95 	bl	8001dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 feb8 	bl	800902c <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012c2:	f000 fd81 	bl	8001dc8 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	@ 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00c f999 	bl	800d620 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ee:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 80012f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f6:	4b30      	ldr	r3, [pc, #192]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 80012f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001304:	4b2c      	ldr	r3, [pc, #176]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800130a:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001310:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001318:	2204      	movs	r2, #4
 800131a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800132a:	2201      	movs	r2, #1
 800132c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134a:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001358:	4817      	ldr	r0, [pc, #92]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 800135a:	f001 fd6f 	bl	8002e3c <HAL_ADC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001364:	f000 fd30 	bl	8001dc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 8001374:	f002 ff22 	bl	80041bc <HAL_ADCEx_MultiModeConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 fd23 	bl	8001dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_ADC1_Init+0xec>)
 8001384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001386:	2306      	movs	r3, #6
 8001388:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138e:	237f      	movs	r3, #127	@ 0x7f
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001392:	2304      	movs	r3, #4
 8001394:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <MX_ADC1_Init+0xe8>)
 80013a0:	f002 f986 	bl	80036b0 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013aa:	f000 fd0d 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3730      	adds	r7, #48	@ 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000028 	.word	0x20000028
 80013bc:	08600004 	.word	0x08600004

080013c0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <MX_COMP2_Init+0x48>)
 80013c8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013d2:	2240      	movs	r2, #64	@ 0x40
 80013d4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_COMP2_Init+0x44>)
 80013f0:	f003 f93c 	bl	800466c <HAL_COMP_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80013fa:	f000 fce5 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000094 	.word	0x20000094
 8001408:	40010204 	.word	0x40010204

0800140c <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_COMP3_Init+0x44>)
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <MX_COMP3_Init+0x48>)
 8001414:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_COMP3_Init+0x44>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_COMP3_Init+0x44>)
 800141e:	2240      	movs	r2, #64	@ 0x40
 8001420:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_COMP3_Init+0x44>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_COMP3_Init+0x44>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_COMP3_Init+0x44>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_COMP3_Init+0x44>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_COMP3_Init+0x44>)
 800143c:	f003 f916 	bl	800466c <HAL_COMP_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 8001446:	f000 fcbf 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000b8 	.word	0x200000b8
 8001454:	40010208 	.word	0x40010208

08001458 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_Init 0 */
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */
  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_COMP4_Init+0x44>)
 800145e:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <MX_COMP4_Init+0x48>)
 8001460:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_COMP4_Init+0x44>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_COMP4_Init+0x44>)
 800146a:	2250      	movs	r2, #80	@ 0x50
 800146c:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_COMP4_Init+0x44>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_COMP4_Init+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_COMP4_Init+0x44>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_COMP4_Init+0x44>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_COMP4_Init+0x44>)
 8001488:	f003 f8f0 	bl	800466c <HAL_COMP_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8001492:	f000 fc99 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000dc 	.word	0x200000dc
 80014a0:	4001020c 	.word	0x4001020c

080014a4 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP6_Init 0 */
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */
  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014aa:	4a10      	ldr	r2, [pc, #64]	@ (80014ec <MX_COMP6_Init+0x48>)
 80014ac:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014b6:	2250      	movs	r2, #80	@ 0x50
 80014b8:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_COMP6_Init+0x44>)
 80014d4:	f003 f8ca 	bl	800466c <HAL_COMP_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 80014de:	f000 fc73 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000100 	.word	0x20000100
 80014ec:	40010214 	.word	0x40010214

080014f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2230      	movs	r2, #48	@ 0x30
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00c f88f 	bl	800d620 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_DAC1_Init+0x8c>)
 8001504:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <MX_DAC1_Init+0x90>)
 8001506:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001508:	481c      	ldr	r0, [pc, #112]	@ (800157c <MX_DAC1_Init+0x8c>)
 800150a:	f003 fb58 	bl	8004bbe <HAL_DAC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001514:	f000 fc58 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001518:	2302      	movs	r3, #2
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001530:	2302      	movs	r3, #2
 8001532:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	480e      	ldr	r0, [pc, #56]	@ (800157c <MX_DAC1_Init+0x8c>)
 8001544:	f003 fcb0 	bl	8004ea8 <HAL_DAC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800154e:	f000 fc3b 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001552:	231e      	movs	r3, #30
 8001554:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	2210      	movs	r2, #16
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_DAC1_Init+0x8c>)
 8001566:	f003 fc9f 	bl	8004ea8 <HAL_DAC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001570:	f000 fc2a 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	@ 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000124 	.word	0x20000124
 8001580:	50000800 	.word	0x50000800

08001584 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2230      	movs	r2, #48	@ 0x30
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f00c f845 	bl	800d620 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_DAC2_Init+0x6c>)
 8001598:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <MX_DAC2_Init+0x70>)
 800159a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800159c:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <MX_DAC2_Init+0x6c>)
 800159e:	f003 fb0e 	bl	8004bbe <HAL_DAC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80015a8:	f000 fc0e 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015ac:	2302      	movs	r3, #2
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015c4:	2302      	movs	r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <MX_DAC2_Init+0x6c>)
 80015d8:	f003 fc66 	bl	8004ea8 <HAL_DAC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80015e2:	f000 fbf1 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	@ 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000138 	.word	0x20000138
 80015f4:	50000c00 	.word	0x50000c00

080015f8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	@ 0x30
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	2230      	movs	r2, #48	@ 0x30
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00c f80b 	bl	800d620 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_DAC3_Init+0x80>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <MX_DAC3_Init+0x84>)
 800160e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001610:	4819      	ldr	r0, [pc, #100]	@ (8001678 <MX_DAC3_Init+0x80>)
 8001612:	f003 fad4 	bl	8004bbe <HAL_DAC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800161c:	f000 fbd4 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001620:	2302      	movs	r3, #2
 8001622:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	480b      	ldr	r0, [pc, #44]	@ (8001678 <MX_DAC3_Init+0x80>)
 800164c:	f003 fc2c 	bl	8004ea8 <HAL_DAC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001656:	f000 fbb7 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	2210      	movs	r2, #16
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_DAC3_Init+0x80>)
 8001662:	f003 fc21 	bl	8004ea8 <HAL_DAC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 800166c:	f000 fbac 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	@ 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000014c 	.word	0x2000014c
 800167c:	50001000 	.word	0x50001000

08001680 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0ac      	sub	sp, #176	@ 0xb0
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001686:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001694:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80016a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ac:	2260      	movs	r2, #96	@ 0x60
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b ffb5 	bl	800d620 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f00b ffaf 	bl	800d620 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80016c2:	4b75      	ldr	r3, [pc, #468]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016c4:	4a75      	ldr	r2, [pc, #468]	@ (800189c <MX_HRTIM1_Init+0x21c>)
 80016c6:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80016c8:	4b73      	ldr	r3, [pc, #460]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80016ce:	4b72      	ldr	r3, [pc, #456]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80016d4:	4870      	ldr	r0, [pc, #448]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016d6:	f004 fb3d 	bl	8005d54 <HAL_HRTIM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 80016e0:	f000 fb72 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80016e4:	210c      	movs	r1, #12
 80016e6:	486c      	ldr	r0, [pc, #432]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016e8:	f004 fc04 	bl	8005ef4 <HAL_HRTIM_DLLCalibrationStart>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 80016f2:	f000 fb69 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80016f6:	210a      	movs	r1, #10
 80016f8:	4867      	ldr	r0, [pc, #412]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80016fa:	f004 fc53 	bl	8005fa4 <HAL_HRTIM_PollForDLLCalibration>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001704:	f000 fb60 	bl	8001dc8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8001708:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800171c:	2308      	movs	r3, #8
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001722:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001726:	461a      	mov	r2, r3
 8001728:	2104      	movs	r1, #4
 800172a:	485b      	ldr	r0, [pc, #364]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 800172c:	f004 fc6e 	bl	800600c <HAL_HRTIM_TimeBaseConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8001736:	f000 fb47 	bl	8001dc8 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8001746:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800174a:	461a      	mov	r2, r3
 800174c:	2104      	movs	r1, #4
 800174e:	4852      	ldr	r0, [pc, #328]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 8001750:	f004 fd11 	bl	8006176 <HAL_HRTIM_WaveformTimerControl>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 800175a:	f000 fb35 	bl	8001dc8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 800176e:	2301      	movs	r3, #1
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800177a:	2300      	movs	r3, #0
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800177e:	2300      	movs	r3, #0
 8001780:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001786:	2300      	movs	r3, #0
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800178a:	2300      	movs	r3, #0
 800178c:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800178e:	2300      	movs	r3, #0
 8001790:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001792:	2300      	movs	r3, #0
 8001794:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001796:	2300      	movs	r3, #0
 8001798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800179e:	2300      	movs	r3, #0
 80017a0:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80017a6:	2300      	movs	r3, #0
 80017a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80017b2:	2300      	movs	r3, #0
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	461a      	mov	r2, r3
 80017c2:	2104      	movs	r1, #4
 80017c4:	4834      	ldr	r0, [pc, #208]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80017c6:	f004 fc49 	bl	800605c <HAL_HRTIM_WaveformTimerConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 80017d0:	f000 fafa 	bl	8001dc8 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 80017d4:	2300      	movs	r3, #0
 80017d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	461a      	mov	r2, r3
 80017de:	2105      	movs	r1, #5
 80017e0:	482d      	ldr	r0, [pc, #180]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 80017e2:	f004 fc3b 	bl	800605c <HAL_HRTIM_WaveformTimerConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 80017ec:	f000 faec 	bl	8001dc8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001816:	2104      	movs	r1, #4
 8001818:	481f      	ldr	r0, [pc, #124]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 800181a:	f004 fcdf 	bl	80061dc <HAL_HRTIM_WaveformOutputConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 8001824:	f000 fad0 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182e:	2105      	movs	r1, #5
 8001830:	4819      	ldr	r0, [pc, #100]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 8001832:	f004 fcd3 	bl	80061dc <HAL_HRTIM_WaveformOutputConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 800183c:	f000 fac4 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8001840:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001844:	461a      	mov	r2, r3
 8001846:	2105      	movs	r1, #5
 8001848:	4813      	ldr	r0, [pc, #76]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 800184a:	f004 fbdf 	bl	800600c <HAL_HRTIM_TimeBaseConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8001854:	f000 fab8 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8001858:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800185c:	461a      	mov	r2, r3
 800185e:	2105      	movs	r1, #5
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 8001862:	f004 fc88 	bl	8006176 <HAL_HRTIM_WaveformTimerControl>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 800186c:	f000 faac 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001876:	2105      	movs	r1, #5
 8001878:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 800187a:	f004 fcaf 	bl	80061dc <HAL_HRTIM_WaveformOutputConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8001884:	f000 faa0 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <MX_HRTIM1_Init+0x218>)
 800188a:	f000 fcd9 	bl	8002240 <HAL_HRTIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	37b0      	adds	r7, #176	@ 0xb0
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000220 	.word	0x20000220
 800189c:	40016800 	.word	0x40016800

080018a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b098      	sub	sp, #96	@ 0x60
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2234      	movs	r2, #52	@ 0x34
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00b fea7 	bl	800d620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d2:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018d4:	4a3b      	ldr	r2, [pc, #236]	@ (80019c4 <MX_TIM1_Init+0x124>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018da:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80018de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80018e6:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001900:	482f      	ldr	r0, [pc, #188]	@ (80019c0 <MX_TIM1_Init+0x120>)
 8001902:	f008 f93d 	bl	8009b80 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800190c:	f000 fa5c 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001920:	4619      	mov	r1, r3
 8001922:	4827      	ldr	r0, [pc, #156]	@ (80019c0 <MX_TIM1_Init+0x120>)
 8001924:	f009 f930 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800192e:	f000 fa4b 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001932:	2360      	movs	r3, #96	@ 0x60
 8001934:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193a:	2300      	movs	r3, #0
 800193c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800194e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001952:	2208      	movs	r2, #8
 8001954:	4619      	mov	r1, r3
 8001956:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <MX_TIM1_Init+0x120>)
 8001958:	f008 fbcc 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001962:	f000 fa31 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800197a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800198c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80019a4:	f009 f986 	bl	800acb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80019ae:	f000 fa0b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019b2:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <MX_TIM1_Init+0x120>)
 80019b4:	f000 fd3e 	bl	8002434 <HAL_TIM_MspPostInit>

}
 80019b8:	bf00      	nop
 80019ba:	3760      	adds	r7, #96	@ 0x60
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000031c 	.word	0x2000031c
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019da:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <MX_TIM6_Init+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019e0:	22aa      	movs	r2, #170	@ 0xaa
 80019e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <MX_TIM6_Init+0x64>)
 80019f8:	f007 ff82 	bl	8009900 <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a02:	f000 f9e1 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a06:	2320      	movs	r3, #32
 8001a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <MX_TIM6_Init+0x64>)
 8001a14:	f009 f8b8 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f000 f9d3 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000368 	.word	0x20000368
 8001a30:	40001000 	.word	0x40001000

08001a34 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a4a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a4e:	f7ff fa67 	bl	8000f20 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7ff fa4c 	bl	8000ef0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <MX_UCPD1_Init+0x58>)
 8001a6a:	f00a fed0 	bl	800c80e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a6e:	2340      	movs	r3, #64	@ 0x40
 8001a70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <MX_UCPD1_Init+0x58>)
 8001a80:	f00a fec5 	bl	800c80e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	48000400 	.word	0x48000400

08001a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001a96:	4a23      	ldr	r2, [pc, #140]	@ (8001b24 <MX_USART3_UART_Init+0x94>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad8:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001ada:	f009 f9c5 	bl	800ae68 <HAL_UART_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ae4:	f000 f970 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001aec:	f00a fc79 	bl	800c3e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001af6:	f000 f967 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001afe:	f00a fcae 	bl	800c45e <HAL_UARTEx_SetRxFifoThreshold>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b08:	f000 f95e 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_USART3_UART_Init+0x90>)
 8001b0e:	f00a fc2f 	bl	800c370 <HAL_UARTEx_DisableFifoMode>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b18:	f000 f956 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000414 	.word	0x20000414
 8001b24:	40004800 	.word	0x40004800

08001b28 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b2e:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <MX_USB_PCD_Init+0x4c>)
 8001b30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b34:	2208      	movs	r2, #8
 8001b36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_USB_PCD_Init+0x48>)
 8001b5e:	f005 fb79 	bl	8007254 <HAL_PCD_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001b68:	f000 f92e 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000568 	.word	0x20000568
 8001b74:	40005c00 	.word	0x40005c00

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b7e:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b82:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_DMA_Init+0x90>)
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	200b      	movs	r0, #11
 8001bb4:	f002 ffcf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bb8:	200b      	movs	r0, #11
 8001bba:	f002 ffe6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	200c      	movs	r0, #12
 8001bc4:	f002 ffc7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bc8:	200c      	movs	r0, #12
 8001bca:	f002 ffde 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200d      	movs	r0, #13
 8001bd4:	f002 ffbf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bd8:	200d      	movs	r0, #13
 8001bda:	f002 ffd6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	200e      	movs	r0, #14
 8001be4:	f002 ffb7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001be8:	200e      	movs	r0, #14
 8001bea:	f002 ffce 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200f      	movs	r0, #15
 8001bf4:	f002 ffaf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f002 ffc6 	bl	8004b8a <HAL_NVIC_EnableIRQ>

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	4b60      	ldr	r3, [pc, #384]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a5f      	ldr	r2, [pc, #380]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	4a59      	ldr	r2, [pc, #356]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c46:	4b57      	ldr	r3, [pc, #348]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b54      	ldr	r3, [pc, #336]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a53      	ldr	r2, [pc, #332]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b4b      	ldr	r3, [pc, #300]	@ (8001da4 <MX_GPIO_Init+0x198>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f24c 0108 	movw	r1, #49160	@ 0xc008
 8001c88:	4847      	ldr	r0, [pc, #284]	@ (8001da8 <MX_GPIO_Init+0x19c>)
 8001c8a:	f004 f827 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	21a2      	movs	r1, #162	@ 0xa2
 8001c92:	4846      	ldr	r0, [pc, #280]	@ (8001dac <MX_GPIO_Init+0x1a0>)
 8001c94:	f004 f822 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f004 f81b 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4841      	ldr	r0, [pc, #260]	@ (8001db0 <MX_GPIO_Init+0x1a4>)
 8001cac:	f004 f816 	bl	8005cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 8001cb0:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4837      	ldr	r0, [pc, #220]	@ (8001da8 <MX_GPIO_Init+0x19c>)
 8001cca:	f003 fe6d 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001cce:	2330      	movs	r3, #48	@ 0x30
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4831      	ldr	r0, [pc, #196]	@ (8001da8 <MX_GPIO_Init+0x19c>)
 8001ce4:	f003 fe60 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 8001ce8:	23a2      	movs	r3, #162	@ 0xa2
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	482b      	ldr	r0, [pc, #172]	@ (8001dac <MX_GPIO_Init+0x1a0>)
 8001d00:	f003 fe52 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001d04:	f240 4304 	movw	r3, #1028	@ 0x404
 8001d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4824      	ldr	r0, [pc, #144]	@ (8001dac <MX_GPIO_Init+0x1a0>)
 8001d1c:	f003 fe44 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001d20:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f003 fe34 	bl	80059a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001d40:	2304      	movs	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	4816      	ldr	r0, [pc, #88]	@ (8001db0 <MX_GPIO_Init+0x1a4>)
 8001d58:	f003 fe26 	bl	80059a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2008      	movs	r0, #8
 8001d62:	f002 fef8 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d66:	2008      	movs	r0, #8
 8001d68:	f002 ff0f 	bl	8004b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	200a      	movs	r0, #10
 8001d72:	f002 fef0 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f002 ff07 	bl	8004b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2017      	movs	r0, #23
 8001d82:	f002 fee8 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d86:	2017      	movs	r0, #23
 8001d88:	f002 feff 	bl	8004b8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2028      	movs	r0, #40	@ 0x28
 8001d92:	f002 fee0 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d96:	2028      	movs	r0, #40	@ 0x28
 8001d98:	f002 fef7 	bl	8004b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	48000800 	.word	0x48000800
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000c00 	.word	0x48000c00

08001db4 <HAL_UART_TxCpltCallback>:
    // USART1 завершил прием данных
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
    // USART2 завершил отправку данных
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <Error_Handler+0x8>

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_MspInit+0x44>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dde:	4a0e      	ldr	r2, [pc, #56]	@ (8001e18 <HAL_MspInit+0x44>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_MspInit+0x44>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_MspInit+0x44>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_MspInit+0x44>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_MspInit+0x44>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e0a:	f006 fded 	bl	80089e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000

08001e1c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0a0      	sub	sp, #128	@ 0x80
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	2254      	movs	r2, #84	@ 0x54
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00b fbef 	bl	800d620 <memset>
  if(hadc->Instance==ADC1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4a:	d154      	bne.n	8001ef6 <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e52:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 fb01 	bl	8009464 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e68:	f7ff ffae 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e6c:	4b24      	ldr	r3, [pc, #144]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_ADC_MspInit+0xe4>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480f      	ldr	r0, [pc, #60]	@ (8001f04 <HAL_ADC_MspInit+0xe8>)
 8001ec8:	f003 fd6e 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001ecc:	230e      	movs	r3, #14
 8001ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f003 fd61 	bl	80059a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2012      	movs	r0, #18
 8001eec:	f002 fe33 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ef0:	2012      	movs	r0, #18
 8001ef2:	f002 fe4a 	bl	8004b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3780      	adds	r7, #128	@ 0x80
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000800 	.word	0x48000800

08001f08 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a3d      	ldr	r2, [pc, #244]	@ (800201c <HAL_COMP_MspInit+0x114>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d119      	bne.n	8001f5e <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f58:	f003 fd26 	bl	80059a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001f5c:	e05a      	b.n	8002014 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a30      	ldr	r2, [pc, #192]	@ (8002024 <HAL_COMP_MspInit+0x11c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d119      	bne.n	8001f9c <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f003 fd07 	bl	80059a8 <HAL_GPIO_Init>
}
 8001f9a:	e03b      	b.n	8002014 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <HAL_COMP_MspInit+0x120>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d118      	bne.n	8001fd8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	4a1d      	ldr	r2, [pc, #116]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4816      	ldr	r0, [pc, #88]	@ (800202c <HAL_COMP_MspInit+0x124>)
 8001fd2:	f003 fce9 	bl	80059a8 <HAL_GPIO_Init>
}
 8001fd6:	e01d      	b.n	8002014 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <HAL_COMP_MspInit+0x128>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d118      	bne.n	8002014 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_COMP_MspInit+0x118>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8001ffa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4807      	ldr	r0, [pc, #28]	@ (800202c <HAL_COMP_MspInit+0x124>)
 8002010:	f003 fcca 	bl	80059a8 <HAL_GPIO_Init>
}
 8002014:	bf00      	nop
 8002016:	3730      	adds	r7, #48	@ 0x30
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010204 	.word	0x40010204
 8002020:	40021000 	.word	0x40021000
 8002024:	40010208 	.word	0x40010208
 8002028:	4001020c 	.word	0x4001020c
 800202c:	48000400 	.word	0x48000400
 8002030:	40010214 	.word	0x40010214

08002034 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	@ 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5c      	ldr	r2, [pc, #368]	@ (80021c4 <HAL_DAC_MspInit+0x190>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f040 8086 	bne.w	8002164 <HAL_DAC_MspInit+0x130>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002058:	4b5b      	ldr	r3, [pc, #364]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205c:	4a5a      	ldr	r2, [pc, #360]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002064:	4b58      	ldr	r3, [pc, #352]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b55      	ldr	r3, [pc, #340]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	4a54      	ldr	r2, [pc, #336]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207c:	4b52      	ldr	r3, [pc, #328]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002088:	2320      	movs	r3, #32
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209e:	f003 fc83 	bl	80059a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel5;
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020a4:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <HAL_DAC_MspInit+0x19c>)
 80020a6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80020a8:	4b48      	ldr	r3, [pc, #288]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020b0:	2210      	movs	r2, #16
 80020b2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020c0:	4b42      	ldr	r3, [pc, #264]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020c8:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ce:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80020d0:	4b3e      	ldr	r3, [pc, #248]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020d2:	2220      	movs	r2, #32
 80020d4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80020de:	483b      	ldr	r0, [pc, #236]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020e0:	f003 f930 	bl	8005344 <HAL_DMA_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 80020ea:	f7ff fe6d 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a36      	ldr	r2, [pc, #216]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	4a35      	ldr	r2, [pc, #212]	@ (80021cc <HAL_DAC_MspInit+0x198>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80020fa:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 80020fc:	4a36      	ldr	r2, [pc, #216]	@ (80021d8 <HAL_DAC_MspInit+0x1a4>)
 80020fe:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002100:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002102:	2206      	movs	r2, #6
 8002104:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002106:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002108:	2210      	movs	r2, #16
 800210a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002114:	2280      	movs	r2, #128	@ 0x80
 8002116:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002118:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 800211a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002120:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002126:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8002128:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002130:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002134:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002136:	4827      	ldr	r0, [pc, #156]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 8002138:	f003 f904 	bl	8005344 <HAL_DMA_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 8002142:	f7ff fe41 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a22      	ldr	r2, [pc, #136]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <HAL_DAC_MspInit+0x1a0>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	2036      	movs	r0, #54	@ 0x36
 8002158:	f002 fcfd 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800215c:	2036      	movs	r0, #54	@ 0x36
 800215e:	f002 fd14 	bl	8004b8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002162:	e02a      	b.n	80021ba <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_DAC_MspInit+0x1a8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10c      	bne.n	8002188 <HAL_DAC_MspInit+0x154>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	e018      	b.n	80021ba <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <HAL_DAC_MspInit+0x1ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d113      	bne.n	80021ba <HAL_DAC_MspInit+0x186>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	4a0c      	ldr	r2, [pc, #48]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_DAC_MspInit+0x194>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2036      	movs	r0, #54	@ 0x36
 80021b0:	f002 fcd1 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b4:	2036      	movs	r0, #54	@ 0x36
 80021b6:	f002 fce8 	bl	8004b8a <HAL_NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	@ 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	50000800 	.word	0x50000800
 80021c8:	40021000 	.word	0x40021000
 80021cc:	20000160 	.word	0x20000160
 80021d0:	40020058 	.word	0x40020058
 80021d4:	200001c0 	.word	0x200001c0
 80021d8:	4002001c 	.word	0x4002001c
 80021dc:	50000c00 	.word	0x50000c00
 80021e0:	50001000 	.word	0x50001000

080021e4 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_HRTIM_MspInit+0x54>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d11b      	bne.n	800222e <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_HRTIM_MspInit+0x58>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_HRTIM_MspInit+0x58>)
 80021fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002200:	6613      	str	r3, [r2, #96]	@ 0x60
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_HRTIM_MspInit+0x58>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002206:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2043      	movs	r0, #67	@ 0x43
 8002214:	f002 fc9f 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8002218:	2043      	movs	r0, #67	@ 0x43
 800221a:	f002 fcb6 	bl	8004b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	204a      	movs	r0, #74	@ 0x4a
 8002224:	f002 fc97 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8002228:	204a      	movs	r0, #74	@ 0x4a
 800222a:	f002 fcae 	bl	8004b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40016800 	.word	0x40016800
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a37      	ldr	r2, [pc, #220]	@ (800233c <HAL_HRTIM_MspPostInit+0xfc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d167      	bne.n	8002332 <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a36      	ldr	r2, [pc, #216]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	4a30      	ldr	r2, [pc, #192]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002286:	4b2e      	ldr	r3, [pc, #184]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_HRTIM_MspPostInit+0x100>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80022aa:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022bc:	230d      	movs	r3, #13
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	481f      	ldr	r0, [pc, #124]	@ (8002344 <HAL_HRTIM_MspPostInit+0x104>)
 80022c8:	f003 fb6e 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80022cc:	23c0      	movs	r3, #192	@ 0xc0
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022dc:	230d      	movs	r3, #13
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4818      	ldr	r0, [pc, #96]	@ (8002348 <HAL_HRTIM_MspPostInit+0x108>)
 80022e8:	f003 fb5e 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 80022ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 80022fe:	2303      	movs	r3, #3
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480f      	ldr	r0, [pc, #60]	@ (8002348 <HAL_HRTIM_MspPostInit+0x108>)
 800230a:	f003 fb4d 	bl	80059a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 800230e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002320:	230d      	movs	r3, #13
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232e:	f003 fb3b 	bl	80059a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40016800 	.word	0x40016800
 8002340:	40021000 	.word	0x40021000
 8002344:	48000400 	.word	0x48000400
 8002348:	48000800 	.word	0x48000800

0800234c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_TIM_PWM_MspInit+0x38>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10b      	bne.n	8002376 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 8002364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002368:	6613      	str	r3, [r2, #96]	@ 0x60
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <HAL_TIM_PWM_MspInit+0x3c>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40021000 	.word	0x40021000

0800238c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_TIM_Base_MspInit+0x98>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d13e      	bne.n	800241c <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_TIM_Base_MspInit+0x9c>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_TIM_Base_MspInit+0x9c>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_TIM_Base_MspInit+0x9c>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel3;
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002430 <HAL_TIM_Base_MspInit+0xa4>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023be:	2208      	movs	r2, #8
 80023c0:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80023ce:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023d0:	2280      	movs	r2, #128	@ 0x80
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d4:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023da:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e2:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023e6:	2220      	movs	r2, #32
 80023e8:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 80023f0:	480e      	ldr	r0, [pc, #56]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 80023f2:	f002 ffa7 	bl	8005344 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80023fc:	f7ff fce4 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 8002404:	621a      	str	r2, [r3, #32]
 8002406:	4a09      	ldr	r2, [pc, #36]	@ (800242c <HAL_TIM_Base_MspInit+0xa0>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2036      	movs	r0, #54	@ 0x36
 8002412:	f002 fba0 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002416:	2036      	movs	r0, #54	@ 0x36
 8002418:	f002 fbb7 	bl	8004b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40001000 	.word	0x40001000
 8002428:	40021000 	.word	0x40021000
 800242c:	200003b4 	.word	0x200003b4
 8002430:	40020030 	.word	0x40020030

08002434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a12      	ldr	r2, [pc, #72]	@ (800249c <HAL_TIM_MspPostInit+0x68>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11d      	bne.n	8002492 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_TIM_MspPostInit+0x6c>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <HAL_TIM_MspPostInit+0x6c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <HAL_TIM_MspPostInit+0x6c>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800246e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002480:	2306      	movs	r3, #6
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248e:	f003 fa8b 	bl	80059a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002492:	bf00      	nop
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09e      	sub	sp, #120	@ 0x78
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2254      	movs	r2, #84	@ 0x54
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00b f8ab 	bl	800d620 <memset>
  if(huart->Instance==USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002604 <HAL_UART_MspInit+0x160>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 8092 	bne.w	80025fa <HAL_UART_MspInit+0x156>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024d6:	2304      	movs	r3, #4
 80024d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f006 ffbe 	bl	8009464 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff fc6b 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f2:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <HAL_UART_MspInit+0x164>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <HAL_UART_MspInit+0x164>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fe:	4b42      	ldr	r3, [pc, #264]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <HAL_UART_MspInit+0x164>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	4a3e      	ldr	r2, [pc, #248]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002516:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_UART_MspInit+0x164>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002522:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002526:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002530:	2301      	movs	r3, #1
 8002532:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002534:	2307      	movs	r3, #7
 8002536:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800253c:	4619      	mov	r1, r3
 800253e:	4833      	ldr	r0, [pc, #204]	@ (800260c <HAL_UART_MspInit+0x168>)
 8002540:	f003 fa32 	bl	80059a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002546:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <HAL_UART_MspInit+0x170>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800254a:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800254c:	221c      	movs	r2, #28
 800254e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002550:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002562:	4b2b      	ldr	r3, [pc, #172]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800257a:	4825      	ldr	r0, [pc, #148]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800257c:	f002 fee2 	bl	8005344 <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002586:	f7ff fc1f 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 800258e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_UART_MspInit+0x16c>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <HAL_UART_MspInit+0x174>)
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_UART_MspInit+0x178>)
 800259c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025a0:	221d      	movs	r2, #29
 80025a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025a6:	2210      	movs	r2, #16
 80025a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025ce:	4812      	ldr	r0, [pc, #72]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025d0:	f002 feb8 	bl	8005344 <HAL_DMA_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80025da:	f7ff fbf5 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <HAL_UART_MspInit+0x174>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2027      	movs	r0, #39	@ 0x27
 80025f0:	f002 fab1 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025f4:	2027      	movs	r0, #39	@ 0x27
 80025f6:	f002 fac8 	bl	8004b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80025fa:	bf00      	nop
 80025fc:	3778      	adds	r7, #120	@ 0x78
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40004800 	.word	0x40004800
 8002608:	40021000 	.word	0x40021000
 800260c:	48000800 	.word	0x48000800
 8002610:	200004a8 	.word	0x200004a8
 8002614:	40020008 	.word	0x40020008
 8002618:	20000508 	.word	0x20000508
 800261c:	40020044 	.word	0x40020044

08002620 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b098      	sub	sp, #96	@ 0x60
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	2254      	movs	r2, #84	@ 0x54
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f00a fff5 	bl	800d620 <memset>
  if(hpcd->Instance==USB)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <HAL_PCD_MspInit+0x70>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d122      	bne.n	8002686 <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002644:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002646:	2300      	movs	r3, #0
 8002648:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4618      	mov	r0, r3
 8002650:	f006 ff08 	bl	8009464 <HAL_RCCEx_PeriphCLKConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800265a:	f7ff fbb5 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <HAL_PCD_MspInit+0x74>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <HAL_PCD_MspInit+0x74>)
 8002664:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002668:	6593      	str	r3, [r2, #88]	@ 0x58
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <HAL_PCD_MspInit+0x74>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2013      	movs	r0, #19
 800267c:	f002 fa6b 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8002680:	2013      	movs	r0, #19
 8002682:	f002 fa82 	bl	8004b8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 8002686:	bf00      	nop
 8002688:	3760      	adds	r7, #96	@ 0x60
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40005c00 	.word	0x40005c00
 8002694:	40021000 	.word	0x40021000

08002698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <NMI_Handler+0x4>

080026a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <MemManage_Handler+0x4>

080026b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <UsageFault_Handler+0x4>

080026c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ee:	f000 f927 	bl	8002940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 80026fa:	2004      	movs	r0, #4
 80026fc:	f003 fb06 	bl	8005d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 8002708:	2010      	movs	r0, #16
 800270a:	f003 faff 	bl	8005d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <DMA1_Channel1_IRQHandler+0x10>)
 800271a:	f002 fff6 	bl	800570a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200004a8 	.word	0x200004a8

08002728 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800272c:	4802      	ldr	r0, [pc, #8]	@ (8002738 <DMA1_Channel2_IRQHandler+0x10>)
 800272e:	f002 ffec 	bl	800570a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200001c0 	.word	0x200001c0

0800273c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <DMA1_Channel3_IRQHandler+0x10>)
 8002742:	f002 ffe2 	bl	800570a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200003b4 	.word	0x200003b4

08002750 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <DMA1_Channel4_IRQHandler+0x10>)
 8002756:	f002 ffd8 	bl	800570a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000508 	.word	0x20000508

08002764 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <DMA1_Channel5_IRQHandler+0x10>)
 800276a:	f002 ffce 	bl	800570a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000160 	.word	0x20000160

08002778 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <ADC1_2_IRQHandler+0x10>)
 800277e:	f000 fd19 	bl	80031b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000028 	.word	0x20000028

0800278c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <USB_HP_IRQHandler+0x10>)
 8002792:	f004 fe2d 	bl	80073f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000568 	.word	0x20000568

080027a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 80027a4:	2020      	movs	r0, #32
 80027a6:	f003 fab1 	bl	8005d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <USART3_IRQHandler+0x10>)
 80027b6:	f008 fc27 	bl	800b008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000414 	.word	0x20000414

080027c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 80027c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027cc:	f003 fa9e 	bl	8005d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027d8:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <TIM6_DAC_IRQHandler+0x1c>)
 80027da:	f007 fb3b 	bl	8009e54 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80027de:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <TIM6_DAC_IRQHandler+0x20>)
 80027e0:	f002 fae4 	bl	8004dac <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 80027e4:	4804      	ldr	r0, [pc, #16]	@ (80027f8 <TIM6_DAC_IRQHandler+0x24>)
 80027e6:	f002 fae1 	bl	8004dac <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000368 	.word	0x20000368
 80027f4:	20000124 	.word	0x20000124
 80027f8:	2000014c 	.word	0x2000014c

080027fc <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002800:	2106      	movs	r1, #6
 8002802:	4802      	ldr	r0, [pc, #8]	@ (800280c <HRTIM1_Master_IRQHandler+0x10>)
 8002804:	f003 fd1b 	bl	800623e <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000220 	.word	0x20000220

08002810 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 8002814:	2105      	movs	r1, #5
 8002816:	4802      	ldr	r0, [pc, #8]	@ (8002820 <HRTIM1_TIMF_IRQHandler+0x10>)
 8002818:	f003 fd11 	bl	800623e <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000220 	.word	0x20000220

08002824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <SystemInit+0x20>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <SystemInit+0x20>)
 8002830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002848:	480d      	ldr	r0, [pc, #52]	@ (8002880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800284a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800284c:	f7ff ffea 	bl	8002824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <LoopForever+0x6>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <LoopForever+0xe>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <LoopForever+0x16>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002876:	f00a fedb 	bl	800d630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287a:	f7fe fb69 	bl	8000f50 <main>

0800287e <LoopForever>:

LoopForever:
    b LoopForever
 800287e:	e7fe      	b.n	800287e <LoopForever>
  ldr   r0, =_estack
 8002880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800288c:	0800e908 	.word	0x0800e908
  ldr r2, =_sbss
 8002890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002894:	20000848 	.word	0x20000848

08002898 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC3_IRQHandler>

0800289a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f002 f94b 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028aa:	2000      	movs	r0, #0
 80028ac:	f000 f80e 	bl	80028cc <HAL_InitTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	e001      	b.n	80028c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028bc:	f7ff fa8a 	bl	8001dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c0:	79fb      	ldrb	r3, [r7, #7]

}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028d8:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_InitTick+0x68>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d022      	beq.n	8002926 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_InitTick+0x6c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <HAL_InitTick+0x68>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 f956 	bl	8004ba6 <HAL_SYSTICK_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	d809      	bhi.n	800291a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002906:	2200      	movs	r2, #0
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
 800290e:	f002 f922 	bl	8004b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <HAL_InitTick+0x70>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e007      	b.n	800292a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e004      	b.n	800292a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000008 	.word	0x20000008
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <HAL_IncTick+0x1c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_IncTick+0x20>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4413      	add	r3, r2
 800294e:	4a03      	ldr	r2, [pc, #12]	@ (800295c <HAL_IncTick+0x1c>)
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000844 	.word	0x20000844
 8002960:	20000008 	.word	0x20000008

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000844 	.word	0x20000844

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d004      	beq.n	80029a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_Delay+0x40>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a0:	bf00      	nop
 80029a2:	f7ff ffdf 	bl	8002964 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d8f7      	bhi.n	80029a2 <HAL_Delay+0x26>
  {
  }
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000008 	.word	0x20000008

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3360      	adds	r3, #96	@ 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <LL_ADC_SetOffset+0x44>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	03fff000 	.word	0x03fff000

08002a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3360      	adds	r3, #96	@ 0x60
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3360      	adds	r3, #96	@ 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3360      	adds	r3, #96	@ 0x60
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	615a      	str	r2, [r3, #20]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3330      	adds	r3, #48	@ 0x30
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	211f      	movs	r1, #31
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 011f 	and.w	r1, r3, #31
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3314      	adds	r3, #20
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0e5b      	lsrs	r3, r3, #25
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	0d1b      	lsrs	r3, r3, #20
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2107      	movs	r1, #7
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0d1b      	lsrs	r3, r3, #20
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0318 	and.w	r3, r3, #24
 8002c82:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c84:	40d9      	lsrs	r1, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	400b      	ands	r3, r1
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	0007ffff 	.word	0x0007ffff

08002ca8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6093      	str	r3, [r2, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d18:	d101      	bne.n	8002d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d90:	f043 0202 	orr.w	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_IsEnabled+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_IsEnabled+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_IsDisableOngoing+0x18>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_IsDisableOngoing+0x1a>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d101      	bne.n	8002e08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d101      	bne.n	8002e2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1a9      	b.n	80031aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe ffd9 	bl	8001e1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff41 	bl	8002d04 <LL_ADC_IsDeepPowerDownEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff27 	bl	8002ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff5c 	bl	8002d54 <LL_ADC_IsInternalRegulatorEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff40 	bl	8002d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eac:	4b9c      	ldr	r3, [pc, #624]	@ (8003120 <HAL_ADC_Init+0x2e4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	4a9c      	ldr	r2, [pc, #624]	@ (8003124 <HAL_ADC_Init+0x2e8>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec0:	e002      	b.n	8002ec8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f9      	bne.n	8002ec2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff3e 	bl	8002d54 <LL_ADC_IsInternalRegulatorEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff76 	bl	8002df0 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8142 	bne.w	8003198 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 813e 	bne.w	8003198 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff37 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d141      	bne.n	8002fc0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_Init+0x114>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a77      	ldr	r2, [pc, #476]	@ (8003128 <HAL_ADC_Init+0x2ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_ADC_Init+0x134>
 8002f50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f54:	f7ff ff26 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4873      	ldr	r0, [pc, #460]	@ (8003128 <HAL_ADC_Init+0x2ec>)
 8002f5c:	f7ff ff22 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4323      	orrs	r3, r4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e012      	b.n	8002f96 <HAL_ADC_Init+0x15a>
 8002f70:	486e      	ldr	r0, [pc, #440]	@ (800312c <HAL_ADC_Init+0x2f0>)
 8002f72:	f7ff ff17 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f76:	4604      	mov	r4, r0
 8002f78:	486d      	ldr	r0, [pc, #436]	@ (8003130 <HAL_ADC_Init+0x2f4>)
 8002f7a:	f7ff ff13 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	431c      	orrs	r4, r3
 8002f82:	486c      	ldr	r0, [pc, #432]	@ (8003134 <HAL_ADC_Init+0x2f8>)
 8002f84:	f7ff ff0e 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa2:	d004      	beq.n	8002fae <HAL_ADC_Init+0x172>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5f      	ldr	r2, [pc, #380]	@ (8003128 <HAL_ADC_Init+0x2ec>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Init+0x176>
 8002fae:	4a62      	ldr	r2, [pc, #392]	@ (8003138 <HAL_ADC_Init+0x2fc>)
 8002fb0:	e000      	b.n	8002fb4 <HAL_ADC_Init+0x178>
 8002fb2:	4a62      	ldr	r2, [pc, #392]	@ (800313c <HAL_ADC_Init+0x300>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7ff fd00 	bl	80029c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7f5b      	ldrb	r3, [r3, #29]
 8002fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b48      	ldr	r3, [pc, #288]	@ (8003140 <HAL_ADC_Init+0x304>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fee5 	bl	8002e16 <LL_ADC_INJ_IsConversionOngoing>
 800304c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d17f      	bne.n	8003154 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d17c      	bne.n	8003154 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800305e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003066:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003076:	f023 0302 	bic.w	r3, r3, #2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	430b      	orrs	r3, r1
 8003082:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800309a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6911      	ldr	r1, [r2, #16]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030ba:	e013      	b.n	80030e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d12a      	bne.n	8003144 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003110:	430a      	orrs	r2, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e019      	b.n	8003154 <HAL_ADC_Init+0x318>
 8003120:	20000000 	.word	0x20000000
 8003124:	053e2d63 	.word	0x053e2d63
 8003128:	50000100 	.word	0x50000100
 800312c:	50000400 	.word	0x50000400
 8003130:	50000500 	.word	0x50000500
 8003134:	50000600 	.word	0x50000600
 8003138:	50000300 	.word	0x50000300
 800313c:	50000700 	.word	0x50000700
 8003140:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10c      	bne.n	8003176 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
 8003174:	e007      	b.n	8003186 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 020f 	bic.w	r2, r2, #15
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003196:	e007      	b.n	80031a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	@ 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop

080031b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x30>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_ADC_IRQHandler+0x264>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x34>
 80031e4:	4b8d      	ldr	r3, [pc, #564]	@ (800341c <HAL_ADC_IRQHandler+0x268>)
 80031e6:	e000      	b.n	80031ea <HAL_ADC_IRQHandler+0x36>
 80031e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003420 <HAL_ADC_IRQHandler+0x26c>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fd5c 	bl	8002ca8 <LL_ADC_GetMultimode>
 80031f0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d017      	beq.n	800322c <HAL_ADC_IRQHandler+0x78>
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 ffc2 	bl	80041a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2202      	movs	r2, #2
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_ADC_IRQHandler+0x8c>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8094 	beq.w	8003374 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 808e 	beq.w	8003374 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fc75 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d072      	beq.n	8003366 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a64      	ldr	r2, [pc, #400]	@ (8003418 <HAL_ADC_IRQHandler+0x264>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_ADC_IRQHandler+0xea>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a65      	ldr	r2, [pc, #404]	@ (8003424 <HAL_ADC_IRQHandler+0x270>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d002      	beq.n	800329a <HAL_ADC_IRQHandler+0xe6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e003      	b.n	80032a2 <HAL_ADC_IRQHandler+0xee>
 800329a:	4b63      	ldr	r3, [pc, #396]	@ (8003428 <HAL_ADC_IRQHandler+0x274>)
 800329c:	e001      	b.n	80032a2 <HAL_ADC_IRQHandler+0xee>
 800329e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d008      	beq.n	80032bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d002      	beq.n	80032bc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b09      	cmp	r3, #9
 80032ba:	d104      	bne.n	80032c6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	e014      	b.n	80032f0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a53      	ldr	r2, [pc, #332]	@ (8003418 <HAL_ADC_IRQHandler+0x264>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x130>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a53      	ldr	r2, [pc, #332]	@ (8003424 <HAL_ADC_IRQHandler+0x270>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x12c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e003      	b.n	80032e8 <HAL_ADC_IRQHandler+0x134>
 80032e0:	4b51      	ldr	r3, [pc, #324]	@ (8003428 <HAL_ADC_IRQHandler+0x274>)
 80032e2:	e001      	b.n	80032e8 <HAL_ADC_IRQHandler+0x134>
 80032e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032e8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d135      	bne.n	8003366 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d12e      	bne.n	8003366 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fd6f 	bl	8002df0 <LL_ADC_REG_IsConversionOngoing>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11a      	bne.n	800334e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020c 	bic.w	r2, r2, #12
 8003326:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d112      	bne.n	8003366 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800334c:	e00b      	b.n	8003366 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f984 	bl	8003674 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	220c      	movs	r2, #12
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_ADC_IRQHandler+0x1d4>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80b3 	beq.w	80034fa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80ad 	beq.w	80034fa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fc10 	bl	8002be2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033c2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fbcb 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ce:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <HAL_ADC_IRQHandler+0x264>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_ADC_IRQHandler+0x23a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a11      	ldr	r2, [pc, #68]	@ (8003424 <HAL_ADC_IRQHandler+0x270>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d002      	beq.n	80033ea <HAL_ADC_IRQHandler+0x236>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	e003      	b.n	80033f2 <HAL_ADC_IRQHandler+0x23e>
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_ADC_IRQHandler+0x274>)
 80033ec:	e001      	b.n	80033f2 <HAL_ADC_IRQHandler+0x23e>
 80033ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d008      	beq.n	800340c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d002      	beq.n	800340c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d10f      	bne.n	800342c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	e01f      	b.n	8003456 <HAL_ADC_IRQHandler+0x2a2>
 8003416:	bf00      	nop
 8003418:	50000100 	.word	0x50000100
 800341c:	50000300 	.word	0x50000300
 8003420:	50000700 	.word	0x50000700
 8003424:	50000500 	.word	0x50000500
 8003428:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a8b      	ldr	r2, [pc, #556]	@ (8003660 <HAL_ADC_IRQHandler+0x4ac>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_ADC_IRQHandler+0x296>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8a      	ldr	r2, [pc, #552]	@ (8003664 <HAL_ADC_IRQHandler+0x4b0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d002      	beq.n	8003446 <HAL_ADC_IRQHandler+0x292>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e003      	b.n	800344e <HAL_ADC_IRQHandler+0x29a>
 8003446:	4b88      	ldr	r3, [pc, #544]	@ (8003668 <HAL_ADC_IRQHandler+0x4b4>)
 8003448:	e001      	b.n	800344e <HAL_ADC_IRQHandler+0x29a>
 800344a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800344e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d047      	beq.n	80034ec <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_ADC_IRQHandler+0x2c2>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d03f      	beq.n	80034ec <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13a      	bne.n	80034ec <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d133      	bne.n	80034ec <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d12e      	bne.n	80034ec <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fcbf 	bl	8002e16 <LL_ADC_INJ_IsConversionOngoing>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11a      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d112      	bne.n	80034ec <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034d2:	e00b      	b.n	80034ec <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f043 0210 	orr.w	r2, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fe33 	bl	8004158 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2260      	movs	r2, #96	@ 0x60
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_ADC_IRQHandler+0x374>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8b4 	bl	8003688 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2280      	movs	r2, #128	@ 0x80
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_ADC_IRQHandler+0x3a4>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003540:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fe19 	bl	8004180 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355e:	2b00      	cmp	r3, #0
 8003560:	d012      	beq.n	8003588 <HAL_ADC_IRQHandler+0x3d4>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fe0b 	bl	8004194 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d043      	beq.n	800361a <HAL_ADC_IRQHandler+0x466>
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03e      	beq.n	800361a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80035a4:	2301      	movs	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a8:	e021      	b.n	80035ee <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b8:	d004      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x410>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <HAL_ADC_IRQHandler+0x4ac>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_IRQHandler+0x414>
 80035c4:	4b29      	ldr	r3, [pc, #164]	@ (800366c <HAL_ADC_IRQHandler+0x4b8>)
 80035c6:	e000      	b.n	80035ca <HAL_ADC_IRQHandler+0x416>
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_ADC_IRQHandler+0x4bc>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fb7a 	bl	8002cc4 <LL_ADC_GetMultiDMATransfer>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	e008      	b.n	80035ee <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035ea:	2301      	movs	r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10e      	bne.n	8003612 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	f043 0202 	orr.w	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f845 	bl	800369c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d018      	beq.n	8003656 <HAL_ADC_IRQHandler+0x4a2>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d013      	beq.n	8003656 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f043 0208 	orr.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fd8b 	bl	800416c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	@ 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	50000100 	.word	0x50000100
 8003664:	50000500 	.word	0x50000500
 8003668:	50000400 	.word	0x50000400
 800366c:	50000300 	.word	0x50000300
 8003670:	50000700 	.word	0x50000700

08003674 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0b6      	sub	sp, #216	@ 0xd8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x24>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f000 bc13 	b.w	8003efa <HAL_ADC_ConfigChannel+0x84a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fb85 	bl	8002df0 <LL_ADC_REG_IsConversionOngoing>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 83f3 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7ff fa45 	bl	8002b8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fb73 	bl	8002df0 <LL_ADC_REG_IsConversionOngoing>
 800370a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb7f 	bl	8002e16 <LL_ADC_INJ_IsConversionOngoing>
 8003718:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800371c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 81d9 	bne.w	8003ad8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 81d4 	bne.w	8003ad8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003738:	d10f      	bne.n	800375a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	4619      	mov	r1, r3
 8003746:	f7ff fa5f 	bl	8002c08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f9f3 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonConfig>
 8003758:	e00e      	b.n	8003778 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	461a      	mov	r2, r3
 8003768:	f7ff fa4e 	bl	8002c08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f9e3 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	08db      	lsrs	r3, r3, #3
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d022      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037aa:	f7ff f93d 	bl	8002a28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6919      	ldr	r1, [r3, #16]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f7ff f989 	bl	8002ad2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x126>
 80037d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d4:	e000      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x128>
 80037d6:	2300      	movs	r3, #0
 80037d8:	461a      	mov	r2, r3
 80037da:	f7ff f995 	bl	8002b08 <LL_ADC_SetOffsetSaturation>
 80037de:	e17b      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f942 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_ADC_ConfigChannel+0x15c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f937 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	f003 021f 	and.w	r2, r3, #31
 800380a:	e01e      	b.n	800384a <HAL_ADC_ConfigChannel+0x19a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f92c 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003818:	4603      	mov	r3, r0
 800381a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800382a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800382e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e004      	b.n	8003848 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800383e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x1b2>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0e9b      	lsrs	r3, r3, #26
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	e018      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1e4>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800387e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800388a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003894:	429a      	cmp	r2, r3
 8003896:	d106      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f8fb 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f8df 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x222>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f8d4 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	0e9b      	lsrs	r3, r3, #26
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	e01e      	b.n	8003910 <HAL_ADC_ConfigChannel+0x260>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f8c9 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003900:	2320      	movs	r3, #32
 8003902:	e004      	b.n	800390e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x278>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	e018      	b.n	800395a <HAL_ADC_ConfigChannel+0x2aa>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800393c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003944:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e004      	b.n	800395a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800395a:	429a      	cmp	r2, r3
 800395c:	d106      	bne.n	800396c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f898 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff f87c 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003978:	4603      	mov	r3, r0
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x2e8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f871 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	f003 021f 	and.w	r2, r3, #31
 8003996:	e01e      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x326>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff f866 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e004      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x33e>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	0e9b      	lsrs	r3, r3, #26
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	e016      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x36c>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	e004      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d106      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f837 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2103      	movs	r1, #3
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f81b 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3aa>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2103      	movs	r1, #3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f810 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	e017      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x3da>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2103      	movs	r1, #3
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f805 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x3f2>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	0e9b      	lsrs	r3, r3, #26
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	e011      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x416>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003aba:	2320      	movs	r3, #32
 8003abc:	e003      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d106      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe ffe2 	bl	8002a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f961 	bl	8002da4 <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 813d 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f7ff f8b2 	bl	8002c60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4aa2      	ldr	r2, [pc, #648]	@ (8003d8c <HAL_ADC_ConfigChannel+0x6dc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f040 812e 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x480>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	bf94      	ite	ls
 8003b28:	2301      	movls	r3, #1
 8003b2a:	2300      	movhi	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e019      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x4b4>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b48:	2320      	movs	r3, #32
 8003b4a:	e003      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2b09      	cmp	r3, #9
 8003b5c:	bf94      	ite	ls
 8003b5e:	2301      	movls	r3, #1
 8003b60:	2300      	movhi	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d079      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x4d4>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	069b      	lsls	r3, r3, #26
 8003b7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b82:	e015      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x500>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	e003      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	069b      	lsls	r3, r3, #26
 8003bac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x520>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	e017      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x550>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	ea42 0103 	orr.w	r1, r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x576>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	051b      	lsls	r3, r3, #20
 8003c24:	e018      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x5a8>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e003      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	e07e      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d107      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x5c8>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	3301      	adds	r3, #1
 8003c70:	069b      	lsls	r3, r3, #26
 8003c72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c76:	e015      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x5f4>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e003      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	069b      	lsls	r3, r3, #26
 8003ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x614>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0e9b      	lsrs	r3, r3, #26
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	e017      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x644>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	e003      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	ea42 0103 	orr.w	r1, r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10d      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x670>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	3b1e      	subs	r3, #30
 8003d18:	051b      	lsls	r3, r3, #20
 8003d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	e01b      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x6a8>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	613b      	str	r3, [r7, #16]
  return result;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f003 021f 	and.w	r2, r3, #31
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b1e      	subs	r3, #30
 8003d52:	051b      	lsls	r3, r3, #20
 8003d54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f7fe ff52 	bl	8002c08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80be 	beq.w	8003eee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d7a:	d004      	beq.n	8003d86 <HAL_ADC_ConfigChannel+0x6d6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10a      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x6ec>
 8003d86:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d88:	e009      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x6ee>
 8003d8a:	bf00      	nop
 8003d8c:	407f0000 	.word	0x407f0000
 8003d90:	80080000 	.word	0x80080000
 8003d94:	50000100 	.word	0x50000100
 8003d98:	50000300 	.word	0x50000300
 8003d9c:	4b59      	ldr	r3, [pc, #356]	@ (8003f04 <HAL_ADC_ConfigChannel+0x854>)
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fe34 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003da4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a56      	ldr	r2, [pc, #344]	@ (8003f08 <HAL_ADC_ConfigChannel+0x858>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0x70c>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a55      	ldr	r2, [pc, #340]	@ (8003f0c <HAL_ADC_ConfigChannel+0x85c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d13a      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d134      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd0:	d005      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x72e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f10 <HAL_ADC_ConfigChannel+0x860>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	f040 8085 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de6:	d004      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x742>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a49      	ldr	r2, [pc, #292]	@ (8003f14 <HAL_ADC_ConfigChannel+0x864>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x746>
 8003df2:	4a49      	ldr	r2, [pc, #292]	@ (8003f18 <HAL_ADC_ConfigChannel+0x868>)
 8003df4:	e000      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x748>
 8003df6:	4a43      	ldr	r2, [pc, #268]	@ (8003f04 <HAL_ADC_ConfigChannel+0x854>)
 8003df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7fe fdef 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e08:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <HAL_ADC_ConfigChannel+0x86c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	4a44      	ldr	r2, [pc, #272]	@ (8003f20 <HAL_ADC_ConfigChannel+0x870>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e30:	e05a      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_ADC_ConfigChannel+0x874>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d125      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11f      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_ADC_ConfigChannel+0x864>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d104      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x7ac>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a34      	ldr	r2, [pc, #208]	@ (8003f28 <HAL_ADC_ConfigChannel+0x878>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d047      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e64:	d004      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x7c0>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f14 <HAL_ADC_ConfigChannel+0x864>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x7c4>
 8003e70:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <HAL_ADC_ConfigChannel+0x868>)
 8003e72:	e000      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x7c6>
 8003e74:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <HAL_ADC_ConfigChannel+0x854>)
 8003e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe fdb0 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e86:	e031      	b.n	8003eec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <HAL_ADC_ConfigChannel+0x87c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d12d      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d127      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_ADC_ConfigChannel+0x864>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x80c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <HAL_ADC_ConfigChannel+0x864>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x810>
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_ADC_ConfigChannel+0x868>)
 8003ebe:	e000      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x812>
 8003ec0:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <HAL_ADC_ConfigChannel+0x854>)
 8003ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7fe fd8a 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8003ed2:	e00c      	b.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ee6:	e002      	b.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ef6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	37d8      	adds	r7, #216	@ 0xd8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	50000700 	.word	0x50000700
 8003f08:	c3210000 	.word	0xc3210000
 8003f0c:	90c00010 	.word	0x90c00010
 8003f10:	50000600 	.word	0x50000600
 8003f14:	50000100 	.word	0x50000100
 8003f18:	50000300 	.word	0x50000300
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	053e2d63 	.word	0x053e2d63
 8003f24:	c7520000 	.word	0xc7520000
 8003f28:	50000500 	.word	0x50000500
 8003f2c:	cb840000 	.word	0xcb840000

08003f30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe ff44 	bl	8002dca <LL_ADC_IsDisableOngoing>
 8003f42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe ff2b 	bl	8002da4 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d047      	beq.n	8003fe4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d144      	bne.n	8003fe4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030d 	and.w	r3, r3, #13
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10c      	bne.n	8003f82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe ff05 	bl	8002d7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2203      	movs	r2, #3
 8003f78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f7a:	f7fe fcf3 	bl	8002964 <HAL_GetTick>
 8003f7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f80:	e029      	b.n	8003fd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f043 0210 	orr.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e023      	b.n	8003fe6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f9e:	f7fe fce1 	bl	8002964 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d914      	bls.n	8003fd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f043 0210 	orr.w	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e007      	b.n	8003fe6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1dc      	bne.n	8003f9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <LL_ADC_IsEnabled>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <LL_ADC_IsEnabled+0x18>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_IsEnabled+0x1a>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_StartCalibration>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004026:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004030:	4313      	orrs	r3, r2
 8004032:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_IsCalibrationOnGoing>:
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405a:	d101      	bne.n	8004060 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_ADC_REG_IsConversionOngoing>:
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d101      	bne.n	8004086 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e04d      	b.n	800414c <HAL_ADCEx_Calibration_Start+0xb8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff39 	bl	8003f30 <ADC_Disable>
 80040be:	4603      	mov	r3, r0
 80040c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d136      	bne.n	8004136 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040d0:	f023 0302 	bic.w	r3, r3, #2
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff96 	bl	8004014 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040e8:	e014      	b.n	8004114 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_ADCEx_Calibration_Start+0xc0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d90d      	bls.n	8004114 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f023 0312 	bic.w	r3, r3, #18
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e01b      	b.n	800414c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff94 	bl	8004046 <LL_ADC_IsCalibrationOnGoing>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e2      	bne.n	80040ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	f023 0303 	bic.w	r3, r3, #3
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004134:	e005      	b.n	8004142 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	0004de01 	.word	0x0004de01

08004158 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b0a1      	sub	sp, #132	@ 0x84
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e0e7      	b.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041e2:	2300      	movs	r3, #0
 80041e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041e6:	2300      	movs	r3, #0
 80041e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f2:	d102      	bne.n	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041f4:	4b6f      	ldr	r3, [pc, #444]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	e009      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6e      	ldr	r2, [pc, #440]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d102      	bne.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004204:	4b6d      	ldr	r3, [pc, #436]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	e001      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0be      	b.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff1d 	bl	800406e <LL_ADC_REG_IsConversionOngoing>
 8004234:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff17 	bl	800406e <LL_ADC_REG_IsConversionOngoing>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80a0 	bne.w	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 809c 	bne.w	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004258:	d004      	beq.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a55      	ldr	r2, [pc, #340]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004264:	4b56      	ldr	r3, [pc, #344]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004266:	e000      	b.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004268:	4b56      	ldr	r3, [pc, #344]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800426a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d04b      	beq.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004286:	035b      	lsls	r3, r3, #13
 8004288:	430b      	orrs	r3, r1
 800428a:	431a      	orrs	r2, r3
 800428c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800428e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004298:	d004      	beq.n	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a45      	ldr	r2, [pc, #276]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10f      	bne.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042a8:	f7ff fea1 	bl	8003fee <LL_ADC_IsEnabled>
 80042ac:	4604      	mov	r4, r0
 80042ae:	4841      	ldr	r0, [pc, #260]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042b0:	f7ff fe9d 	bl	8003fee <LL_ADC_IsEnabled>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4323      	orrs	r3, r4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e012      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80042c4:	483c      	ldr	r0, [pc, #240]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042c6:	f7ff fe92 	bl	8003fee <LL_ADC_IsEnabled>
 80042ca:	4604      	mov	r4, r0
 80042cc:	483b      	ldr	r0, [pc, #236]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042ce:	f7ff fe8e 	bl	8003fee <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	431c      	orrs	r4, r3
 80042d6:	483c      	ldr	r0, [pc, #240]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042d8:	f7ff fe89 	bl	8003fee <LL_ADC_IsEnabled>
 80042dc:	4603      	mov	r3, r0
 80042de:	4323      	orrs	r3, r4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d056      	beq.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042f6:	f023 030f 	bic.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	6811      	ldr	r1, [r2, #0]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	6892      	ldr	r2, [r2, #8]
 8004302:	430a      	orrs	r2, r1
 8004304:	431a      	orrs	r2, r3
 8004306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004308:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800430a:	e047      	b.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800430c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004316:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004320:	d004      	beq.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a23      	ldr	r2, [pc, #140]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10f      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800432c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004330:	f7ff fe5d 	bl	8003fee <LL_ADC_IsEnabled>
 8004334:	4604      	mov	r4, r0
 8004336:	481f      	ldr	r0, [pc, #124]	@ (80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004338:	f7ff fe59 	bl	8003fee <LL_ADC_IsEnabled>
 800433c:	4603      	mov	r3, r0
 800433e:	4323      	orrs	r3, r4
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e012      	b.n	8004372 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800434c:	481a      	ldr	r0, [pc, #104]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800434e:	f7ff fe4e 	bl	8003fee <LL_ADC_IsEnabled>
 8004352:	4604      	mov	r4, r0
 8004354:	4819      	ldr	r0, [pc, #100]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004356:	f7ff fe4a 	bl	8003fee <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	431c      	orrs	r4, r3
 800435e:	481a      	ldr	r0, [pc, #104]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004360:	f7ff fe45 	bl	8003fee <LL_ADC_IsEnabled>
 8004364:	4603      	mov	r3, r0
 8004366:	4323      	orrs	r3, r4
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d012      	beq.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800437e:	f023 030f 	bic.w	r3, r3, #15
 8004382:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004384:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004386:	e009      	b.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800439a:	e000      	b.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800439c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3784      	adds	r7, #132	@ 0x84
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	50000100 	.word	0x50000100
 80043b8:	50000400 	.word	0x50000400
 80043bc:	50000500 	.word	0x50000500
 80043c0:	50000300 	.word	0x50000300
 80043c4:	50000700 	.word	0x50000700
 80043c8:	50000600 	.word	0x50000600

080043cc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <LL_EXTI_EnableIT_0_31+0x20>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4904      	ldr	r1, [pc, #16]	@ (80043ec <LL_EXTI_EnableIT_0_31+0x20>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40010400 	.word	0x40010400

080043f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <LL_EXTI_EnableIT_32_63+0x20>)
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	4904      	ldr	r1, [pc, #16]	@ (8004410 <LL_EXTI_EnableIT_32_63+0x20>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	620b      	str	r3, [r1, #32]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40010400 	.word	0x40010400

08004414 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <LL_EXTI_DisableIT_0_31+0x24>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	43db      	mvns	r3, r3
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <LL_EXTI_DisableIT_0_31+0x24>)
 8004426:	4013      	ands	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010400 	.word	0x40010400

0800443c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <LL_EXTI_DisableIT_32_63+0x24>)
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	43db      	mvns	r3, r3
 800444c:	4904      	ldr	r1, [pc, #16]	@ (8004460 <LL_EXTI_DisableIT_32_63+0x24>)
 800444e:	4013      	ands	r3, r2
 8004450:	620b      	str	r3, [r1, #32]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010400 	.word	0x40010400

08004464 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <LL_EXTI_EnableEvent_0_31+0x20>)
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4904      	ldr	r1, [pc, #16]	@ (8004484 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]

}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40010400 	.word	0x40010400

08004488 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004494:	4904      	ldr	r1, [pc, #16]	@ (80044a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4313      	orrs	r3, r2
 800449a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40010400 	.word	0x40010400

080044ac <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4904      	ldr	r1, [pc, #16]	@ (80044d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044be:	4013      	ands	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010400 	.word	0x40010400

080044d4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80044de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	4904      	ldr	r1, [pc, #16]	@ (80044f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010400 	.word	0x40010400

080044fc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	4904      	ldr	r1, [pc, #16]	@ (800451c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	608b      	str	r3, [r1, #8]

}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40010400 	.word	0x40010400

08004520 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800452a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800452c:	4904      	ldr	r1, [pc, #16]	@ (8004540 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4313      	orrs	r3, r2
 8004532:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40010400 	.word	0x40010400

08004544 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	43db      	mvns	r3, r3
 8004554:	4904      	ldr	r1, [pc, #16]	@ (8004568 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004556:	4013      	ands	r3, r2
 8004558:	608b      	str	r3, [r1, #8]

}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010400 	.word	0x40010400

0800456c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	43db      	mvns	r3, r3
 800457c:	4904      	ldr	r1, [pc, #16]	@ (8004590 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800457e:	4013      	ands	r3, r2
 8004580:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010400 	.word	0x40010400

08004594 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4904      	ldr	r1, [pc, #16]	@ (80045b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40010400 	.word	0x40010400

080045b8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c4:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010400 	.word	0x40010400

080045dc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	4904      	ldr	r1, [pc, #16]	@ (8004600 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	60cb      	str	r3, [r1, #12]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010400 	.word	0x40010400

08004604 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	43db      	mvns	r3, r3
 8004614:	4904      	ldr	r1, [pc, #16]	@ (8004628 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004616:	4013      	ands	r3, r2
 8004618:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010400 	.word	0x40010400

0800462c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004634:	4a04      	ldr	r2, [pc, #16]	@ (8004648 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6153      	str	r3, [r2, #20]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010400 	.word	0x40010400

0800464c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010400 	.word	0x40010400

0800466c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e181      	b.n	800498c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004696:	d102      	bne.n	800469e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e176      	b.n	800498c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7f5b      	ldrb	r3, [r3, #29]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd fc27 	bl	8001f08 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b90      	ldr	r3, [pc, #576]	@ (800492c <HAL_COMP_Init+0x2c0>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	6979      	ldr	r1, [r7, #20]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_COMP_Init+0xc8>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800470c:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_COMP_Init+0x2c4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	4a88      	ldr	r2, [pc, #544]	@ (8004934 <HAL_COMP_Init+0x2c8>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004726:	e002      	b.n	800472e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3b01      	subs	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f9      	bne.n	8004728 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7f      	ldr	r2, [pc, #508]	@ (8004938 <HAL_COMP_Init+0x2cc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d028      	beq.n	8004790 <HAL_COMP_Init+0x124>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7e      	ldr	r2, [pc, #504]	@ (800493c <HAL_COMP_Init+0x2d0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d020      	beq.n	800478a <HAL_COMP_Init+0x11e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7c      	ldr	r2, [pc, #496]	@ (8004940 <HAL_COMP_Init+0x2d4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_COMP_Init+0x118>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7b      	ldr	r2, [pc, #492]	@ (8004944 <HAL_COMP_Init+0x2d8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d010      	beq.n	800477e <HAL_COMP_Init+0x112>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a79      	ldr	r2, [pc, #484]	@ (8004948 <HAL_COMP_Init+0x2dc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d008      	beq.n	8004778 <HAL_COMP_Init+0x10c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a78      	ldr	r2, [pc, #480]	@ (800494c <HAL_COMP_Init+0x2e0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_COMP_Init+0x108>
 8004770:	2301      	movs	r3, #1
 8004772:	e00f      	b.n	8004794 <HAL_COMP_Init+0x128>
 8004774:	2302      	movs	r3, #2
 8004776:	e00d      	b.n	8004794 <HAL_COMP_Init+0x128>
 8004778:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800477c:	e00a      	b.n	8004794 <HAL_COMP_Init+0x128>
 800477e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004782:	e007      	b.n	8004794 <HAL_COMP_Init+0x128>
 8004784:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004788:	e004      	b.n	8004794 <HAL_COMP_Init+0x128>
 800478a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800478e:	e001      	b.n	8004794 <HAL_COMP_Init+0x128>
 8004790:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004794:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80b6 	beq.w	8004910 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a65      	ldr	r2, [pc, #404]	@ (800494c <HAL_COMP_Init+0x2e0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_COMP_Init+0x158>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a64      	ldr	r2, [pc, #400]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80047c4:	6938      	ldr	r0, [r7, #16]
 80047c6:	f7ff feab 	bl	8004520 <LL_EXTI_EnableRisingTrig_32_63>
 80047ca:	e014      	b.n	80047f6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f7ff fe95 	bl	80044fc <LL_EXTI_EnableRisingTrig_0_31>
 80047d2:	e010      	b.n	80047f6 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5c      	ldr	r2, [pc, #368]	@ (800494c <HAL_COMP_Init+0x2e0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_COMP_Init+0x17c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80047e8:	6938      	ldr	r0, [r7, #16]
 80047ea:	f7ff febf 	bl	800456c <LL_EXTI_DisableRisingTrig_32_63>
 80047ee:	e002      	b.n	80047f6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80047f0:	6938      	ldr	r0, [r7, #16]
 80047f2:	f7ff fea7 	bl	8004544 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d011      	beq.n	8004826 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a51      	ldr	r2, [pc, #324]	@ (800494c <HAL_COMP_Init+0x2e0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_COMP_Init+0x1aa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a4f      	ldr	r2, [pc, #316]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d103      	bne.n	800481e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f7ff fece 	bl	80045b8 <LL_EXTI_EnableFallingTrig_32_63>
 800481c:	e014      	b.n	8004848 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800481e:	6938      	ldr	r0, [r7, #16]
 8004820:	f7ff feb8 	bl	8004594 <LL_EXTI_EnableFallingTrig_0_31>
 8004824:	e010      	b.n	8004848 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a48      	ldr	r2, [pc, #288]	@ (800494c <HAL_COMP_Init+0x2e0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_COMP_Init+0x1ce>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a46      	ldr	r2, [pc, #280]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d103      	bne.n	8004842 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f7ff fee2 	bl	8004604 <LL_EXTI_DisableFallingTrig_32_63>
 8004840:	e002      	b.n	8004848 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004842:	6938      	ldr	r0, [r7, #16]
 8004844:	f7ff feca 	bl	80045dc <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a3f      	ldr	r2, [pc, #252]	@ (800494c <HAL_COMP_Init+0x2e0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_COMP_Init+0x1f0>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3e      	ldr	r2, [pc, #248]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800485c:	6938      	ldr	r0, [r7, #16]
 800485e:	f7ff fef5 	bl	800464c <LL_EXTI_ClearFlag_32_63>
 8004862:	e002      	b.n	800486a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004864:	6938      	ldr	r0, [r7, #16]
 8004866:	f7ff fee1 	bl	800462c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a34      	ldr	r2, [pc, #208]	@ (800494c <HAL_COMP_Init+0x2e0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_COMP_Init+0x21e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a32      	ldr	r2, [pc, #200]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d103      	bne.n	8004892 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800488a:	6938      	ldr	r0, [r7, #16]
 800488c:	f7ff fdfc 	bl	8004488 <LL_EXTI_EnableEvent_32_63>
 8004890:	e014      	b.n	80048bc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f7ff fde6 	bl	8004464 <LL_EXTI_EnableEvent_0_31>
 8004898:	e010      	b.n	80048bc <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2b      	ldr	r2, [pc, #172]	@ (800494c <HAL_COMP_Init+0x2e0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_COMP_Init+0x242>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a29      	ldr	r2, [pc, #164]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d103      	bne.n	80048b6 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80048ae:	6938      	ldr	r0, [r7, #16]
 80048b0:	f7ff fe10 	bl	80044d4 <LL_EXTI_DisableEvent_32_63>
 80048b4:	e002      	b.n	80048bc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f7ff fdf8 	bl	80044ac <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d011      	beq.n	80048ec <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <HAL_COMP_Init+0x2e0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_COMP_Init+0x270>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d103      	bne.n	80048e4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80048dc:	6938      	ldr	r0, [r7, #16]
 80048de:	f7ff fd87 	bl	80043f0 <LL_EXTI_EnableIT_32_63>
 80048e2:	e04b      	b.n	800497c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80048e4:	6938      	ldr	r0, [r7, #16]
 80048e6:	f7ff fd71 	bl	80043cc <LL_EXTI_EnableIT_0_31>
 80048ea:	e047      	b.n	800497c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	@ (800494c <HAL_COMP_Init+0x2e0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_COMP_Init+0x294>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004900:	6938      	ldr	r0, [r7, #16]
 8004902:	f7ff fd9b 	bl	800443c <LL_EXTI_DisableIT_32_63>
 8004906:	e039      	b.n	800497c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004908:	6938      	ldr	r0, [r7, #16]
 800490a:	f7ff fd83 	bl	8004414 <LL_EXTI_DisableIT_0_31>
 800490e:	e035      	b.n	800497c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <HAL_COMP_Init+0x2e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_COMP_Init+0x2b8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a0c      	ldr	r2, [pc, #48]	@ (8004950 <HAL_COMP_Init+0x2e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d117      	bne.n	8004954 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004924:	6938      	ldr	r0, [r7, #16]
 8004926:	f7ff fdd5 	bl	80044d4 <LL_EXTI_DisableEvent_32_63>
 800492a:	e016      	b.n	800495a <HAL_COMP_Init+0x2ee>
 800492c:	ff007e0f 	.word	0xff007e0f
 8004930:	20000000 	.word	0x20000000
 8004934:	053e2d63 	.word	0x053e2d63
 8004938:	40010200 	.word	0x40010200
 800493c:	40010204 	.word	0x40010204
 8004940:	40010208 	.word	0x40010208
 8004944:	4001020c 	.word	0x4001020c
 8004948:	40010210 	.word	0x40010210
 800494c:	40010214 	.word	0x40010214
 8004950:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004954:	6938      	ldr	r0, [r7, #16]
 8004956:	f7ff fda9 	bl	80044ac <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0e      	ldr	r2, [pc, #56]	@ (8004998 <HAL_COMP_Init+0x32c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_COMP_Init+0x302>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0c      	ldr	r2, [pc, #48]	@ (800499c <HAL_COMP_Init+0x330>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d103      	bne.n	8004976 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f7ff fd64 	bl	800443c <LL_EXTI_DisableIT_32_63>
 8004974:	e002      	b.n	800497c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004976:	6938      	ldr	r0, [r7, #16]
 8004978:	f7ff fd4c 	bl	8004414 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7f5b      	ldrb	r3, [r3, #29]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800498c:	7ffb      	ldrb	r3, [r7, #31]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40010214 	.word	0x40010214
 800499c:	40010218 	.word	0x40010218

080049a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d2:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	60d3      	str	r3, [r2, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <__NVIC_GetPriorityGrouping+0x18>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 0307 	and.w	r3, r3, #7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db0b      	blt.n	8004a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	4907      	ldr	r1, [pc, #28]	@ (8004a3c <__NVIC_EnableIRQ+0x38>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2001      	movs	r0, #1
 8004a26:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	@ (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	@ (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	@ 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	@ 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff29 	bl	80049a0 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b64:	f7ff ff40 	bl	80049e8 <__NVIC_GetPriorityGrouping>
 8004b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff90 	bl	8004a94 <NVIC_EncodePriority>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5f 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff33 	bl	8004a04 <__NVIC_EnableIRQ>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ffa4 	bl	8004afc <SysTick_Config>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e014      	b.n	8004bfa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fd fa27 	bl	8002034 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b2      	b.n	8004d82 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	795b      	ldrb	r3, [r3, #5]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_DAC_Start_DMA+0x24>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0ac      	b.n	8004d82 <HAL_DAC_Start_DMA+0x17e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d129      	bne.n	8004c8e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a53      	ldr	r2, [pc, #332]	@ (8004d8c <HAL_DAC_Start_DMA+0x188>)
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a52      	ldr	r2, [pc, #328]	@ (8004d90 <HAL_DAC_Start_DMA+0x18c>)
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a51      	ldr	r2, [pc, #324]	@ (8004d94 <HAL_DAC_Start_DMA+0x190>)
 8004c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_DAC_Start_DMA+0x6c>
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d005      	beq.n	8004c7a <HAL_DAC_Start_DMA+0x76>
 8004c6e:	e009      	b.n	8004c84 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	61bb      	str	r3, [r7, #24]
        break;
 8004c78:	e033      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	61bb      	str	r3, [r7, #24]
        break;
 8004c82:	e02e      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3310      	adds	r3, #16
 8004c8a:	61bb      	str	r3, [r7, #24]
        break;
 8004c8c:	e029      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <HAL_DAC_Start_DMA+0x194>)
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a40      	ldr	r2, [pc, #256]	@ (8004d9c <HAL_DAC_Start_DMA+0x198>)
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8004da0 <HAL_DAC_Start_DMA+0x19c>)
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DAC_Start_DMA+0xc0>
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d005      	beq.n	8004cce <HAL_DAC_Start_DMA+0xca>
 8004cc2:	e009      	b.n	8004cd8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	61bb      	str	r3, [r7, #24]
        break;
 8004ccc:	e009      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	61bb      	str	r3, [r7, #24]
        break;
 8004cd6:	e004      	b.n	8004ce2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	331c      	adds	r3, #28
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6898      	ldr	r0, [r3, #8]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	f000 fbc7 	bl	8005494 <HAL_DMA_Start_IT>
 8004d06:	4603      	mov	r3, r0
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e010      	b.n	8004d2e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68d8      	ldr	r0, [r3, #12]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	f000 fbb5 	bl	8005494 <HAL_DMA_Start_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11c      	bne.n	8004d74 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_DAC_Start_DMA+0x1a0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <HAL_DAC_Start_DMA+0x1a4>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	3301      	adds	r3, #1
 8004d62:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d64:	e002      	b.n	8004d6c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f9      	bne.n	8004d66 <HAL_DAC_Start_DMA+0x162>
 8004d72:	e005      	b.n	8004d80 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f043 0204 	orr.w	r2, r3, #4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0800521d 	.word	0x0800521d
 8004d90:	0800523f 	.word	0x0800523f
 8004d94:	0800525b 	.word	0x0800525b
 8004d98:	080052d9 	.word	0x080052d9
 8004d9c:	080052fb 	.word	0x080052fb
 8004da0:	08005317 	.word	0x08005317
 8004da4:	20000000 	.word	0x20000000
 8004da8:	053e2d63 	.word	0x053e2d63

08004dac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc2:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01d      	beq.n	8004e0a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f043 0201 	orr.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004df2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e02:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f845 	bl	8004e94 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01d      	beq.n	8004e50 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f043 0202 	orr.w	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa3a 	bl	80052c4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	@ 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_DAC_ConfigChannel+0x1c>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e1a1      	b.n	800520c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	795b      	ldrb	r3, [r3, #5]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_DAC_ConfigChannel+0x32>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e198      	b.n	800520c <HAL_DAC_ConfigChannel+0x364>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d17a      	bne.n	8004fe4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004eee:	f7fd fd39 	bl	8002964 <HAL_GetTick>
 8004ef2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004efa:	e018      	b.n	8004f2e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004efc:	f7fd fd32 	bl	8002964 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d911      	bls.n	8004f2e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f043 0208 	orr.w	r2, r3, #8
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2203      	movs	r2, #3
 8004f28:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e16e      	b.n	800520c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1df      	bne.n	8004efc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f44:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f46:	e020      	b.n	8004f8a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f48:	f7fd fd0c 	bl	8002964 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d90f      	bls.n	8004f76 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	da0a      	bge.n	8004f76 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f043 0208 	orr.w	r2, r3, #8
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e14a      	b.n	800520c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	dbe3      	blt.n	8004f48 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	ea02 0103 	and.w	r1, r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	21ff      	movs	r1, #255	@ 0xff
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	ea02 0103 	and.w	r1, r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d11d      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	221f      	movs	r2, #31
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005004:	4013      	ands	r3, r2
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	4313      	orrs	r3, r2
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005026:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2207      	movs	r2, #7
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	4013      	ands	r3, r2
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800504c:	2300      	movs	r3, #0
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	e00f      	b.n	8005072 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d102      	bne.n	8005060 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800505a:	2301      	movs	r3, #1
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	e008      	b.n	8005072 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005068:	2301      	movs	r3, #1
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	e001      	b.n	8005072 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800506e:	2300      	movs	r3, #0
 8005070:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005094:	4013      	ands	r3, r2
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	791b      	ldrb	r3, [r3, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d102      	bne.n	80050a6 <HAL_DAC_ConfigChannel+0x1fe>
 80050a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050a4:	e000      	b.n	80050a8 <HAL_DAC_ConfigChannel+0x200>
 80050a6:	2300      	movs	r3, #0
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	4013      	ands	r3, r2
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	795b      	ldrb	r3, [r3, #5]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d102      	bne.n	80050d2 <HAL_DAC_ConfigChannel+0x22a>
 80050cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050d0:	e000      	b.n	80050d4 <HAL_DAC_ConfigChannel+0x22c>
 80050d2:	2300      	movs	r3, #0
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d114      	bne.n	8005114 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80050ea:	f004 f93d 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80050ee:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4a48      	ldr	r2, [pc, #288]	@ (8005214 <HAL_DAC_ConfigChannel+0x36c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d904      	bls.n	8005102 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005100:	e00f      	b.n	8005122 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4a44      	ldr	r2, [pc, #272]	@ (8005218 <HAL_DAC_ConfigChannel+0x370>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d90a      	bls.n	8005120 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
 8005112:	e006      	b.n	8005122 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511a:	4313      	orrs	r3, r2
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
 800511e:	e000      	b.n	8005122 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005120:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005130:	4313      	orrs	r3, r2
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43da      	mvns	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	400a      	ands	r2, r1
 8005158:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	4013      	ands	r3, r2
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518c:	4313      	orrs	r3, r2
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005196:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6819      	ldr	r1, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	22c0      	movs	r2, #192	@ 0xc0
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43da      	mvns	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	400a      	ands	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	089b      	lsrs	r3, r3, #2
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80051e2:	fa01 f303 	lsl.w	r3, r1, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	ea02 0103 	and.w	r1, r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800520a:	7ffb      	ldrb	r3, [r7, #31]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3728      	adds	r7, #40	@ 0x28
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	09896800 	.word	0x09896800
 8005218:	04c4b400 	.word	0x04c4b400

0800521c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff fe14 	bl	8004e58 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	711a      	strb	r2, [r3, #4]
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff fe0d 	bl	8004e6c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f043 0204 	orr.w	r2, r3, #4
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff fe03 	bl	8004e80 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	711a      	strb	r2, [r3, #4]
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff ffce 	bl	8005288 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	711a      	strb	r2, [r3, #4]
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff ffc7 	bl	800529c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f043 0204 	orr.w	r2, r3, #4
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ffbd 	bl	80052b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	711a      	strb	r2, [r3, #4]
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e08d      	b.n	8005472 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	4b47      	ldr	r3, [pc, #284]	@ (800547c <HAL_DMA_Init+0x138>)
 800535e:	429a      	cmp	r2, r3
 8005360:	d80f      	bhi.n	8005382 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	4b45      	ldr	r3, [pc, #276]	@ (8005480 <HAL_DMA_Init+0x13c>)
 800536a:	4413      	add	r3, r2
 800536c:	4a45      	ldr	r2, [pc, #276]	@ (8005484 <HAL_DMA_Init+0x140>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	009a      	lsls	r2, r3, #2
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a42      	ldr	r2, [pc, #264]	@ (8005488 <HAL_DMA_Init+0x144>)
 800537e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005380:	e00e      	b.n	80053a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	4b40      	ldr	r3, [pc, #256]	@ (800548c <HAL_DMA_Init+0x148>)
 800538a:	4413      	add	r3, r2
 800538c:	4a3d      	ldr	r2, [pc, #244]	@ (8005484 <HAL_DMA_Init+0x140>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	009a      	lsls	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a3c      	ldr	r2, [pc, #240]	@ (8005490 <HAL_DMA_Init+0x14c>)
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa76 	bl	80058e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005400:	d102      	bne.n	8005408 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800541c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d010      	beq.n	8005448 <HAL_DMA_Init+0x104>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b04      	cmp	r3, #4
 800542c:	d80c      	bhi.n	8005448 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa96 	bl	8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	e008      	b.n	800545a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40020407 	.word	0x40020407
 8005480:	bffdfff8 	.word	0xbffdfff8
 8005484:	cccccccd 	.word	0xcccccccd
 8005488:	40020000 	.word	0x40020000
 800548c:	bffdfbf8 	.word	0xbffdfbf8
 8005490:	40020400 	.word	0x40020400

08005494 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA_Start_IT+0x20>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e066      	b.n	8005582 <HAL_DMA_Start_IT+0xee>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d155      	bne.n	8005574 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f9bb 	bl	8005868 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 020e 	orr.w	r2, r2, #14
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e00f      	b.n	800552c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 020a 	orr.w	r2, r2, #10
 800552a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005548:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005560:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e005      	b.n	8005580 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d005      	beq.n	80055ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2204      	movs	r2, #4
 80055a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
 80055ac:	e037      	b.n	800561e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 020e 	bic.w	r2, r2, #14
 80055bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f202 	lsl.w	r2, r1, r2
 80055f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005612:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800561c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d00d      	beq.n	8005670 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
 800566e:	e047      	b.n	8005700 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 020e 	bic.w	r2, r2, #14
 800567e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800569e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	f003 021f 	and.w	r2, r3, #31
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f202 	lsl.w	r2, r1, r2
 80056b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
    }
  }
  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2204      	movs	r2, #4
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d026      	beq.n	8005784 <HAL_DMA_IRQHandler+0x7a>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d021      	beq.n	8005784 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0204 	bic.w	r2, r2, #4
 800575c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f003 021f 	and.w	r2, r3, #31
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	2104      	movs	r1, #4
 800576c:	fa01 f202 	lsl.w	r2, r1, r2
 8005770:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d071      	beq.n	800585e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005782:	e06c      	b.n	800585e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2202      	movs	r2, #2
 800578e:	409a      	lsls	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02e      	beq.n	80057f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d029      	beq.n	80057f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 020a 	bic.w	r2, r2, #10
 80057be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	2102      	movs	r1, #2
 80057d6:	fa01 f202 	lsl.w	r2, r1, r2
 80057da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d038      	beq.n	800585e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057f4:	e033      	b.n	800585e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2208      	movs	r2, #8
 8005800:	409a      	lsls	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02a      	beq.n	8005860 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d025      	beq.n	8005860 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 020e 	bic.w	r2, r2, #14
 8005822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005828:	f003 021f 	and.w	r2, r3, #31
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f202 	lsl.w	r2, r1, r2
 8005836:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800585e:	bf00      	nop
 8005860:	bf00      	nop
}
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800587e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	f003 021f 	and.w	r2, r3, #31
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d108      	bne.n	80058c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058c6:	e007      	b.n	80058d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b16      	ldr	r3, [pc, #88]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d802      	bhi.n	80058fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058f8:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e001      	b.n	8005902 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005900:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3b08      	subs	r3, #8
 800590e:	4a12      	ldr	r2, [pc, #72]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	009a      	lsls	r2, r3, #2
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	461a      	mov	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a0b      	ldr	r2, [pc, #44]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800592e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40020407 	.word	0x40020407
 8005950:	40020800 	.word	0x40020800
 8005954:	40020820 	.word	0x40020820
 8005958:	cccccccd 	.word	0xcccccccd
 800595c:	40020880 	.word	0x40020880

08005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	461a      	mov	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a08      	ldr	r2, [pc, #32]	@ (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005982:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3b01      	subs	r3, #1
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2201      	movs	r2, #1
 800598e:	409a      	lsls	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	1000823f 	.word	0x1000823f
 80059a4:	40020940 	.word	0x40020940

080059a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059b6:	e15a      	b.n	8005c6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	2101      	movs	r1, #1
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 814c 	beq.w	8005c68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d005      	beq.n	80059e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d130      	bne.n	8005a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2203      	movs	r2, #3
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a1e:	2201      	movs	r2, #1
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0201 	and.w	r2, r3, #1
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d017      	beq.n	8005a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	2203      	movs	r2, #3
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d123      	bne.n	8005ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	08da      	lsrs	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3208      	adds	r2, #8
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	08da      	lsrs	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3208      	adds	r2, #8
 8005ad4:	6939      	ldr	r1, [r7, #16]
 8005ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0203 	and.w	r2, r3, #3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80a6 	beq.w	8005c68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8005c8c <HAL_GPIO_Init+0x2e4>)
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b20:	4a5a      	ldr	r2, [pc, #360]	@ (8005c8c <HAL_GPIO_Init+0x2e4>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b28:	4b58      	ldr	r3, [pc, #352]	@ (8005c8c <HAL_GPIO_Init+0x2e4>)
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b34:	4a56      	ldr	r2, [pc, #344]	@ (8005c90 <HAL_GPIO_Init+0x2e8>)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b5e:	d01f      	beq.n	8005ba0 <HAL_GPIO_Init+0x1f8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a4c      	ldr	r2, [pc, #304]	@ (8005c94 <HAL_GPIO_Init+0x2ec>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d019      	beq.n	8005b9c <HAL_GPIO_Init+0x1f4>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8005c98 <HAL_GPIO_Init+0x2f0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_GPIO_Init+0x1f0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a4a      	ldr	r2, [pc, #296]	@ (8005c9c <HAL_GPIO_Init+0x2f4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00d      	beq.n	8005b94 <HAL_GPIO_Init+0x1ec>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a49      	ldr	r2, [pc, #292]	@ (8005ca0 <HAL_GPIO_Init+0x2f8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <HAL_GPIO_Init+0x1e8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a48      	ldr	r2, [pc, #288]	@ (8005ca4 <HAL_GPIO_Init+0x2fc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_GPIO_Init+0x1e4>
 8005b88:	2305      	movs	r3, #5
 8005b8a:	e00a      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	e008      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005b90:	2304      	movs	r3, #4
 8005b92:	e006      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005b94:	2303      	movs	r3, #3
 8005b96:	e004      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e002      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_GPIO_Init+0x1fa>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	f002 0203 	and.w	r2, r2, #3
 8005ba8:	0092      	lsls	r2, r2, #2
 8005baa:	4093      	lsls	r3, r2
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bb2:	4937      	ldr	r1, [pc, #220]	@ (8005c90 <HAL_GPIO_Init+0x2e8>)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	3302      	adds	r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bc0:	4b39      	ldr	r3, [pc, #228]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005be4:	4a30      	ldr	r2, [pc, #192]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c0e:	4a26      	ldr	r2, [pc, #152]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c14:	4b24      	ldr	r3, [pc, #144]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c62:	4a11      	ldr	r2, [pc, #68]	@ (8005ca8 <HAL_GPIO_Init+0x300>)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f ae9d 	bne.w	80059b8 <HAL_GPIO_Init+0x10>
  }
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40010000 	.word	0x40010000
 8005c94:	48000400 	.word	0x48000400
 8005c98:	48000800 	.word	0x48000800
 8005c9c:	48000c00 	.word	0x48000c00
 8005ca0:	48001000 	.word	0x48001000
 8005ca4:	48001400 	.word	0x48001400
 8005ca8:	40010400 	.word	0x40010400

08005cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	887b      	ldrh	r3, [r7, #2]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e001      	b.n	8005cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cec:	787b      	ldrb	r3, [r7, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cf2:	887a      	ldrh	r2, [r7, #2]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cf8:	e002      	b.n	8005d00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d16:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d22:	4a05      	ldr	r2, [pc, #20]	@ (8005d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f806 	bl	8005d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010400 	.word	0x40010400

08005d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0be      	b.n	8005ee4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02e      	beq.n	8005e10 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4d      	ldr	r2, [pc, #308]	@ (8005eec <HAL_HRTIM_Init+0x198>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10b      	bne.n	8005dd4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef0 <HAL_HRTIM_Init+0x19c>)
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef0 <HAL_HRTIM_Init+0x19c>)
 8005dc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005dc8:	4b49      	ldr	r3, [pc, #292]	@ (8005ef0 <HAL_HRTIM_Init+0x19c>)
 8005dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005de2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005df8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fc f9e7 	bl	80021e4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e30:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	75fb      	strb	r3, [r7, #23]
 8005e5c:	e03e      	b.n	8005edc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005e5e:	7dfa      	ldrb	r2, [r7, #23]
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005e72:	7dfa      	ldrb	r2, [r7, #23]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	331c      	adds	r3, #28
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005e86:	7dfa      	ldrb	r2, [r7, #23]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	3320      	adds	r3, #32
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005e9a:	7dfa      	ldrb	r2, [r7, #23]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3324      	adds	r3, #36	@ 0x24
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005eae:	7dfa      	ldrb	r2, [r7, #23]
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	3328      	adds	r3, #40	@ 0x28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005ec2:	7dfa      	ldrb	r2, [r7, #23]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3330      	adds	r3, #48	@ 0x30
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d9bd      	bls.n	8005e5e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40016800 	.word	0x40016800
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e045      	b.n	8005f98 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d114      	bne.n	8005f4e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0202 	bic.w	r2, r2, #2
 8005f34:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8005f4c:	e01f      	b.n	8005f8e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0202 	orr.w	r2, r2, #2
 8005f5e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f6a:	f023 010c 	bic.w	r1, r3, #12
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8005fae:	f7fc fcd9 	bl	8002964 <HAL_GetTick>
 8005fb2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fb4:	e014      	b.n	8005fe0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d010      	beq.n	8005fe0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fc fcd1 	bl	8002964 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2207      	movs	r2, #7
 8005fd8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e011      	b.n	8006004 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff0:	d1e1      	bne.n	8005fb6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d101      	bne.n	8006028 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
 8006026:	e015      	b.n	8006054 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b06      	cmp	r3, #6
 8006034:	d104      	bne.n	8006040 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fa19 	bl	8006470 <HRTIM_MasterBase_Config>
 800603e:	e004      	b.n	800604a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fa42 	bl	80064ce <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d101      	bne.n	8006078 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
 8006076:	e07a      	b.n	800616e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8006082:	2302      	movs	r3, #2
 8006084:	e073      	b.n	800616e <HAL_HRTIM_WaveformTimerConfig+0x112>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d104      	bne.n	80060a6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fa55 	bl	800654e <HRTIM_MasterWaveform_Config>
 80060a4:	e004      	b.n	80060b0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 faec 	bl	8006688 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	3320      	adds	r3, #32
 80060c4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4403      	add	r3, r0
 80060d8:	3324      	adds	r3, #36	@ 0x24
 80060da:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6899      	ldr	r1, [r3, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4613      	mov	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4403      	add	r3, r0
 80060ee:	3328      	adds	r3, #40	@ 0x28
 80060f0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4403      	add	r3, r0
 8006104:	332c      	adds	r3, #44	@ 0x2c
 8006106:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6919      	ldr	r1, [r3, #16]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4403      	add	r3, r0
 800611a:	3330      	adds	r3, #48	@ 0x30
 800611c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fd7f 	bl	8006c24 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d017      	beq.n	800615c <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d113      	bne.n	800615c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3301      	adds	r3, #1
 800613c:	01db      	lsls	r3, r3, #7
 800613e:	4413      	add	r3, r2
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614a:	025b      	lsls	r3, r3, #9
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	6809      	ldr	r1, [r1, #0]
 8006150:	431a      	orrs	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3301      	adds	r3, #1
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	440b      	add	r3, r1
 800615a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d101      	bne.n	8006192 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
 8006190:	e020      	b.n	80061d4 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_HRTIM_WaveformTimerControl+0x2a>
 800619c:	2302      	movs	r3, #2
 800619e:	e019      	b.n	80061d4 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fbed 	bl	8006994 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fd31 	bl	8006c24 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d101      	bne.n	80061fa <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e01d      	b.n	8006236 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8006204:	2302      	movs	r3, #2
 8006206:	e016      	b.n	8006236 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fc18 	bl	8006a54 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2bff      	cmp	r3, #255	@ 0xff
 800624c:	d103      	bne.n	8006256 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fd56 	bl	8006d00 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006254:	e00a      	b.n	800626c <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d103      	bne.n	8006264 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fddf 	bl	8006e20 <HRTIM_Master_ISR>
}
 8006262:	e003      	b.n	800626c <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fe9f 	bl	8006faa <HRTIM_Timer_ISR>
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0307 	bic.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0318 	bic.w	r3, r3, #24
 800649a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	6852      	ldr	r2, [r2, #4]
 80064c0:	619a      	str	r2, [r3, #24]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3301      	adds	r3, #1
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	4413      	add	r3, r2
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 0307 	bic.w	r3, r3, #7
 80064f0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0318 	bic.w	r3, r3, #24
 8006502:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3301      	adds	r3, #1
 8006516:	01db      	lsls	r3, r3, #7
 8006518:	4413      	add	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6819      	ldr	r1, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	01db      	lsls	r3, r3, #7
 800652a:	440b      	add	r3, r1
 800652c:	3394      	adds	r3, #148	@ 0x94
 800652e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	01db      	lsls	r3, r3, #7
 800653c:	440b      	add	r3, r1
 800653e:	3398      	adds	r3, #152	@ 0x98
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006568:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 0320 	bic.w	r3, r3, #32
 8006570:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006582:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	2b20      	cmp	r3, #32
 800658a:	d003      	beq.n	8006594 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d108      	bne.n	80065a6 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800659a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f043 0320 	orr.w	r3, r3, #32
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e021      	b.n	80065ea <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d108      	bne.n	80065c0 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b4:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e014      	b.n	80065ea <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d108      	bne.n	80065da <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e007      	b.n	80065ea <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f023 0320 	bic.w	r3, r3, #32
 80065e0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006602:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006614:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006626:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006638:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800664c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800665e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	4313      	orrs	r3, r2
 8006668:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006688:	b480      	push	{r7}
 800668a:	b08b      	sub	sp, #44	@ 0x2c
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3301      	adds	r3, #1
 800669c:	01db      	lsls	r3, r3, #7
 800669e:	4413      	add	r3, r2
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3301      	adds	r3, #1
 80066ae:	01db      	lsls	r3, r3, #7
 80066b0:	440b      	add	r3, r1
 80066b2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3301      	adds	r3, #1
 80066bc:	01db      	lsls	r3, r3, #7
 80066be:	4413      	add	r3, r2
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	4413      	add	r3, r2
 80066ce:	33e8      	adds	r3, #232	@ 0xe8
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	01db      	lsls	r3, r3, #7
 80066dc:	4413      	add	r3, r2
 80066de:	33e4      	adds	r3, #228	@ 0xe4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80066ec:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	f023 0320 	bic.w	r3, r3, #32
 80066f4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	4313      	orrs	r3, r2
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	2b20      	cmp	r3, #32
 8006706:	d003      	beq.n	8006710 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d108      	bne.n	8006722 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	f043 0320 	orr.w	r3, r3, #32
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006720:	e021      	b.n	8006766 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d108      	bne.n	800673c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
 800673a:	e014      	b.n	8006766 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b04      	cmp	r3, #4
 8006742:	d108      	bne.n	8006756 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
 8006754:	e007      	b.n	8006766 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	f023 0320 	bic.w	r3, r3, #32
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006774:	4313      	orrs	r3, r2
 8006776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006786:	4313      	orrs	r3, r2
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006798:	4313      	orrs	r3, r2
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067aa:	4313      	orrs	r3, r2
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067b4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067bc:	4313      	orrs	r3, r2
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d0:	d103      	bne.n	80067da <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e8:	4313      	orrs	r3, r2
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fa:	4313      	orrs	r3, r2
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8006804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006810:	4313      	orrs	r3, r2
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800681a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4313      	orrs	r3, r2
 8006828:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006830:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4313      	orrs	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006842:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006848:	6a3a      	ldr	r2, [r7, #32]
 800684a:	4313      	orrs	r3, r2
 800684c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006852:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8006856:	d004      	beq.n	8006862 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006860:	d103      	bne.n	800686a <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d108      	bne.n	800687c <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8006870:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	4313      	orrs	r3, r2
 800687a:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006882:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	4313      	orrs	r3, r2
 800688c:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b05      	cmp	r3, #5
 8006898:	d850      	bhi.n	800693c <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <HRTIM_TimingUnitWaveform_Config+0x218>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b9 	.word	0x080068b9
 80068a4:	080068cf 	.word	0x080068cf
 80068a8:	080068e5 	.word	0x080068e5
 80068ac:	080068fb 	.word	0x080068fb
 80068b0:	08006911 	.word	0x08006911
 80068b4:	08006927 	.word	0x08006927
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068be:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
      break;
 80068cc:	e037      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61fb      	str	r3, [r7, #28]
      break;
 80068e2:	e02c      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80068ea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
      break;
 80068f8:	e021      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006900:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	4313      	orrs	r3, r2
 800690c:	61fb      	str	r3, [r7, #28]
      break;
 800690e:	e016      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006916:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691c:	015b      	lsls	r3, r3, #5
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	4313      	orrs	r3, r2
 8006922:	61fb      	str	r3, [r7, #28]
      break;
 8006924:	e00b      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800692c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	019b      	lsls	r3, r3, #6
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	4313      	orrs	r3, r2
 8006938:	61fb      	str	r3, [r7, #28]
      break;
 800693a:	e000      	b.n	800693e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 800693c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	3301      	adds	r3, #1
 8006946:	01db      	lsls	r3, r3, #7
 8006948:	4413      	add	r3, r2
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	01db      	lsls	r3, r3, #7
 8006956:	4413      	add	r3, r2
 8006958:	33e8      	adds	r3, #232	@ 0xe8
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	01db      	lsls	r3, r3, #7
 8006966:	4413      	add	r3, r2
 8006968:	33e4      	adds	r3, #228	@ 0xe4
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	01db      	lsls	r3, r3, #7
 8006976:	4413      	add	r3, r2
 8006978:	33d4      	adds	r3, #212	@ 0xd4
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006988:	bf00      	nop
 800698a:	372c      	adds	r7, #44	@ 0x2c
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	01db      	lsls	r3, r3, #7
 80069a8:	4413      	add	r3, r2
 80069aa:	33ec      	adds	r3, #236	@ 0xec
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0310 	bic.w	r3, r3, #16
 80069b6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069ca:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069dc:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069ee:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d11a      	bne.n	8006a38 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0302 	bic.w	r3, r3, #2
 8006a1a:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	01db      	lsls	r3, r3, #7
 8006a40:	4413      	add	r3, r2
 8006a42:	33ec      	adds	r3, #236	@ 0xec
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	601a      	str	r2, [r3, #0]

}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	@ 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	01db      	lsls	r3, r3, #7
 8006a6e:	4413      	add	r3, r2
 8006a70:	33e4      	adds	r3, #228	@ 0xe4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	01db      	lsls	r3, r3, #7
 8006a7e:	4413      	add	r3, r2
 8006a80:	33b8      	adds	r3, #184	@ 0xb8
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a8c:	d05d      	beq.n	8006b4a <HRTIM_OutputConfig+0xf6>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d86e      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9c:	d042      	beq.n	8006b24 <HRTIM_OutputConfig+0xd0>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa4:	d866      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d04d      	beq.n	8006b4a <HRTIM_OutputConfig+0xf6>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab4:	d85e      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006abc:	d032      	beq.n	8006b24 <HRTIM_OutputConfig+0xd0>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac4:	d856      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b80      	cmp	r3, #128	@ 0x80
 8006aca:	d03e      	beq.n	8006b4a <HRTIM_OutputConfig+0xf6>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b80      	cmp	r3, #128	@ 0x80
 8006ad0:	d850      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b40      	cmp	r3, #64	@ 0x40
 8006ad6:	d025      	beq.n	8006b24 <HRTIM_OutputConfig+0xd0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d84a      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d01f      	beq.n	8006b24 <HRTIM_OutputConfig+0xd0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d044      	beq.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d841      	bhi.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d33e      	bcc.n	8006b74 <HRTIM_OutputConfig+0x120>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3b02      	subs	r3, #2
 8006afa:	2201      	movs	r2, #1
 8006afc:	409a      	lsls	r2, r3
 8006afe:	4b48      	ldr	r3, [pc, #288]	@ (8006c20 <HRTIM_OutputConfig+0x1cc>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d11c      	bne.n	8006b4a <HRTIM_OutputConfig+0xf6>
 8006b10:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf14      	ite	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d027      	beq.n	8006b74 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6819      	ldr	r1, [r3, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	01db      	lsls	r3, r3, #7
 8006b30:	440b      	add	r3, r1
 8006b32:	33bc      	adds	r3, #188	@ 0xbc
 8006b34:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6819      	ldr	r1, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	01db      	lsls	r3, r3, #7
 8006b42:	440b      	add	r3, r1
 8006b44:	33c0      	adds	r3, #192	@ 0xc0
 8006b46:	601a      	str	r2, [r3, #0]
      break;
 8006b48:	e015      	b.n	8006b76 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6819      	ldr	r1, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	01db      	lsls	r3, r3, #7
 8006b56:	440b      	add	r3, r1
 8006b58:	33c4      	adds	r3, #196	@ 0xc4
 8006b5a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	440b      	add	r3, r1
 8006b6a:	33c8      	adds	r3, #200	@ 0xc8
 8006b6c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006b6e:	2310      	movs	r3, #16
 8006b70:	61bb      	str	r3, [r7, #24]
      break;
 8006b72:	e000      	b.n	8006b76 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8006b74:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006b76:	22fe      	movs	r2, #254	@ 0xfe
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d111      	bne.n	8006c02 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10c      	bne.n	8006c02 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	69fa      	ldr	r2, [r7, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	01db      	lsls	r3, r3, #7
 8006c0a:	4413      	add	r3, r2
 8006c0c:	33e4      	adds	r3, #228	@ 0xe4
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	601a      	str	r2, [r3, #0]
}
 8006c12:	bf00      	nop
 8006c14:	3724      	adds	r7, #36	@ 0x24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40000041 	.word	0x40000041

08006c24 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d85e      	bhi.n	8006cf2 <HRTIM_ForceRegistersUpdate+0xce>
 8006c34:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <HRTIM_ForceRegistersUpdate+0x18>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c6f 	.word	0x08006c6f
 8006c40:	08006c85 	.word	0x08006c85
 8006c44:	08006c9b 	.word	0x08006c9b
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cc7 	.word	0x08006cc7
 8006c50:	08006cdd 	.word	0x08006cdd
 8006c54:	08006c59 	.word	0x08006c59
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c6c:	e042      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0202 	orr.w	r2, r2, #2
 8006c7e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c82:	e037      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0204 	orr.w	r2, r2, #4
 8006c94:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c98:	e02c      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0208 	orr.w	r2, r2, #8
 8006caa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cae:	e021      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0210 	orr.w	r2, r2, #16
 8006cc0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cc4:	e016      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0220 	orr.w	r2, r2, #32
 8006cd6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cda:	e00b      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cec:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cf0:	e000      	b.n	8006cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8006cf2:	bf00      	nop
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fa9a 	bl	8006274 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fa92 	bl	8006288 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fa8a 	bl	800629c <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00c      	beq.n	8006dac <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff fa82 	bl	80062b0 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fa7a 	bl	80062c4 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2240      	movs	r2, #64	@ 0x40
 8006dea:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fa72 	bl	80062d8 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fa6a 	bl	80062ec <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006e30:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006e3a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d015      	beq.n	8006e82 <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006e68:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fa3f 	bl	8006300 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d008      	beq.n	8006ea8 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e9e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff fa36 	bl	8006314 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00c      	beq.n	8006ecc <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006ec4:	2106      	movs	r1, #6
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fa4e 	bl	8006368 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006ee8:	2106      	movs	r1, #6
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fa47 	bl	800637e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00c      	beq.n	8006f14 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f0c:	2106      	movs	r1, #6
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fa40 	bl	8006394 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f30:	2106      	movs	r1, #6
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fa39 	bl	80063aa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2210      	movs	r2, #16
 8006f52:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f54:	2106      	movs	r1, #6
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f9fb 	bl	8006352 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d006      	beq.n	8006f7e <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2220      	movs	r2, #32
 8006f76:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff f9d5 	bl	8006328 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00c      	beq.n	8006fa2 <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2240      	movs	r2, #64	@ 0x40
 8006f98:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f9a:	2106      	movs	r1, #6
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff f9cd 	bl	800633c <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	01db      	lsls	r3, r3, #7
 8006fce:	4413      	add	r3, r2
 8006fd0:	338c      	adds	r3, #140	@ 0x8c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	01db      	lsls	r3, r3, #7
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3388      	adds	r3, #136	@ 0x88
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff f9b3 	bl	8006368 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d010      	beq.n	800702e <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	01db      	lsls	r3, r3, #7
 800701e:	4413      	add	r3, r2
 8007020:	3388      	adds	r3, #136	@ 0x88
 8007022:	2202      	movs	r2, #2
 8007024:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff f9a8 	bl	800637e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d010      	beq.n	800705a <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	01db      	lsls	r3, r3, #7
 800704a:	4413      	add	r3, r2
 800704c:	3388      	adds	r3, #136	@ 0x88
 800704e:	2204      	movs	r2, #4
 8007050:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff f99d 	bl	8006394 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d010      	beq.n	8007086 <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	01db      	lsls	r3, r3, #7
 8007076:	4413      	add	r3, r2
 8007078:	3388      	adds	r3, #136	@ 0x88
 800707a:	2208      	movs	r2, #8
 800707c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff f992 	bl	80063aa <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	01db      	lsls	r3, r3, #7
 80070a2:	4413      	add	r3, r2
 80070a4:	3388      	adds	r3, #136	@ 0x88
 80070a6:	2210      	movs	r2, #16
 80070a8:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff f950 	bl	8006352 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	01db      	lsls	r3, r3, #7
 80070ce:	4413      	add	r3, r2
 80070d0:	3388      	adds	r3, #136	@ 0x88
 80070d2:	2240      	movs	r2, #64	@ 0x40
 80070d4:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff f92f 	bl	800633c <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	01db      	lsls	r3, r3, #7
 80070fa:	4413      	add	r3, r2
 80070fc:	3388      	adds	r3, #136	@ 0x88
 80070fe:	2280      	movs	r2, #128	@ 0x80
 8007100:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff f95b 	bl	80063c0 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d011      	beq.n	8007138 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	01db      	lsls	r3, r3, #7
 8007126:	4413      	add	r3, r2
 8007128:	3388      	adds	r3, #136	@ 0x88
 800712a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800712e:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f94f 	bl	80063d6 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	01db      	lsls	r3, r3, #7
 8007154:	4413      	add	r3, r2
 8007156:	3388      	adds	r3, #136	@ 0x88
 8007158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800715c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f959 	bl	8006418 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716c:	2b00      	cmp	r3, #0
 800716e:	d011      	beq.n	8007194 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	01db      	lsls	r3, r3, #7
 8007182:	4413      	add	r3, r2
 8007184:	3388      	adds	r3, #136	@ 0x88
 8007186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800718a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff f94d 	bl	800642e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	01db      	lsls	r3, r3, #7
 80071b0:	4413      	add	r3, r2
 80071b2:	3388      	adds	r3, #136	@ 0x88
 80071b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071b8:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff f941 	bl	8006444 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d011      	beq.n	80071f0 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00c      	beq.n	80071f0 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	01db      	lsls	r3, r3, #7
 80071de:	4413      	add	r3, r2
 80071e0:	3388      	adds	r3, #136	@ 0x88
 80071e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071e6:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff f935 	bl	800645a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d011      	beq.n	800721e <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00c      	beq.n	800721e <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	01db      	lsls	r3, r3, #7
 800720c:	4413      	add	r3, r2
 800720e:	3388      	adds	r3, #136	@ 0x88
 8007210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007214:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff f8f2 	bl	8006402 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d011      	beq.n	800724c <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	01db      	lsls	r3, r3, #7
 800723a:	4413      	add	r3, r2
 800723c:	3388      	adds	r3, #136	@ 0x88
 800723e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007242:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff f8d0 	bl	80063ec <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0c0      	b.n	80073e8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fb f9d0 	bl	8002620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2203      	movs	r2, #3
 8007284:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f005 fb2c 	bl	800c8ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
 8007296:	e03e      	b.n	8007316 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007298:	7bfa      	ldrb	r2, [r7, #15]
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	440b      	add	r3, r1
 80072a6:	3311      	adds	r3, #17
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	440b      	add	r3, r1
 80072ba:	3310      	adds	r3, #16
 80072bc:	7bfa      	ldrb	r2, [r7, #15]
 80072be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	440b      	add	r3, r1
 80072ce:	3313      	adds	r3, #19
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	440b      	add	r3, r1
 80072e2:	3320      	adds	r3, #32
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	440b      	add	r3, r1
 80072f6:	3324      	adds	r3, #36	@ 0x24
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	440b      	add	r3, r1
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	3301      	adds	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	429a      	cmp	r2, r3
 800731e:	d3bb      	bcc.n	8007298 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
 8007324:	e044      	b.n	80073b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007326:	7bfa      	ldrb	r2, [r7, #15]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	440b      	add	r3, r1
 8007334:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800733c:	7bfa      	ldrb	r2, [r7, #15]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	440b      	add	r3, r1
 800734a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800734e:	7bfa      	ldrb	r2, [r7, #15]
 8007350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	440b      	add	r3, r1
 8007360:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	440b      	add	r3, r1
 8007376:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	440b      	add	r3, r1
 800738c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	3301      	adds	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d3b5      	bcc.n	8007326 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80073c6:	f005 faab 	bl	800c920 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	7a9b      	ldrb	r3, [r3, #10]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d102      	bne.n	80073e6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fa26 	bl	8008832 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f006 f870 	bl	800d4e2 <USB_ReadInterrupts>
 8007402:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f983 	bl	800771a <PCD_EP_ISR_Handler>

    return;
 8007414:	e110      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741c:	2b00      	cmp	r3, #0
 800741e:	d013      	beq.n	8007448 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007432:	b292      	uxth	r2, r2
 8007434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f92c 	bl	8007696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f946 	bl	80076d2 <HAL_PCD_SetAddress>

    return;
 8007446:	e0f7      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00c      	beq.n	800746c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007464:	b292      	uxth	r2, r2
 8007466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800746a:	e0e5      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007488:	b292      	uxth	r2, r2
 800748a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800748e:	e0d3      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d034      	beq.n	8007504 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0204 	bic.w	r2, r2, #4
 80074ac:	b292      	uxth	r2, r2
 80074ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0208 	bic.w	r2, r2, #8
 80074c4:	b292      	uxth	r2, r2
 80074c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d107      	bne.n	80074e4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 f9d1 	bl	8008886 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8ea 	bl	80076be <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074fc:	b292      	uxth	r2, r2
 80074fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007502:	e099      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800750a:	2b00      	cmp	r3, #0
 800750c:	d027      	beq.n	800755e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007516:	b29a      	uxth	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0208 	orr.w	r2, r2, #8
 8007520:	b292      	uxth	r2, r2
 8007522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007538:	b292      	uxth	r2, r2
 800753a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0204 	orr.w	r2, r2, #4
 8007550:	b292      	uxth	r2, r2
 8007552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8a7 	bl	80076aa <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800755c:	e06c      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007564:	2b00      	cmp	r3, #0
 8007566:	d040      	beq.n	80075ea <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800757a:	b292      	uxth	r2, r2
 800757c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d12b      	bne.n	80075e2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0204 	orr.w	r2, r2, #4
 800759c:	b292      	uxth	r2, r2
 800759e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0208 	orr.w	r2, r2, #8
 80075b4:	b292      	uxth	r2, r2
 80075b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	089b      	lsrs	r3, r3, #2
 80075ce:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075d8:	2101      	movs	r1, #1
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f953 	bl	8008886 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80075e0:	e02a      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f861 	bl	80076aa <HAL_PCD_SuspendCallback>
    return;
 80075e8:	e026      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00f      	beq.n	8007614 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007606:	b292      	uxth	r2, r2
 8007608:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f838 	bl	8007682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007612:	e011      	b.n	8007638 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007630:	b292      	uxth	r2, r2
 8007632:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007636:	bf00      	nop
  }
}
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_PCD_SetAddress+0x1a>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e012      	b.n	8007712 <HAL_PCD_SetAddress+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f005 fed9 	bl	800d4ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b092      	sub	sp, #72	@ 0x48
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007722:	e333      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800772c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800772e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800773a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800773e:	2b00      	cmp	r3, #0
 8007740:	f040 8108 	bne.w	8007954 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007744:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	d14c      	bne.n	80077e8 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800775a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775e:	813b      	strh	r3, [r7, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	893b      	ldrh	r3, [r7, #8]
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29b      	uxth	r3, r3
 8007770:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3310      	adds	r3, #16
 8007776:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007780:	b29b      	uxth	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	4413      	add	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	4413      	add	r3, r2
 8007792:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800779c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800779e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80077a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	441a      	add	r2, r3
 80077aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80077ae:	2100      	movs	r1, #0
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ff50 	bl	8007656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7b1b      	ldrb	r3, [r3, #12]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 82e5 	beq.w	8007d8c <PCD_EP_ISR_Handler+0x672>
 80077c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f040 82e0 	bne.w	8007d8c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	731a      	strb	r2, [r3, #12]
 80077e6:	e2d1      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077ee:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80077f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80077fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d032      	beq.n	8007868 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	4413      	add	r3, r2
 800781c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007836:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800783c:	b29b      	uxth	r3, r3
 800783e:	f005 fea3 	bl	800d588 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29a      	uxth	r2, r3
 800784a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800784e:	4013      	ands	r3, r2
 8007850:	817b      	strh	r3, [r7, #10]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	897a      	ldrh	r2, [r7, #10]
 8007858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800785c:	b292      	uxth	r2, r2
 800785e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ff04 	bl	800766e <HAL_PCD_SetupStageCallback>
 8007866:	e291      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007868:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800786c:	2b00      	cmp	r3, #0
 800786e:	f280 828d 	bge.w	8007d8c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29a      	uxth	r2, r3
 800787a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800787e:	4013      	ands	r3, r2
 8007880:	81fb      	strh	r3, [r7, #14]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	89fa      	ldrh	r2, [r7, #14]
 8007888:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800788c:	b292      	uxth	r2, r2
 800788e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007898:	b29b      	uxth	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	4413      	add	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80078b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d019      	beq.n	80078f4 <PCD_EP_ISR_Handler+0x1da>
 80078c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d015      	beq.n	80078f4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ce:	6959      	ldr	r1, [r3, #20]
 80078d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80078d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f005 fe55 	bl	800d588 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80078de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	441a      	add	r2, r3
 80078e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fea5 	bl	800763e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80078fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8242 	bne.w	8007d8c <PCD_EP_ISR_Handler+0x672>
 8007908:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800790a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800790e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007912:	f000 823b 	beq.w	8007d8c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007926:	81bb      	strh	r3, [r7, #12]
 8007928:	89bb      	ldrh	r3, [r7, #12]
 800792a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800792e:	81bb      	strh	r3, [r7, #12]
 8007930:	89bb      	ldrh	r3, [r7, #12]
 8007932:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007936:	81bb      	strh	r3, [r7, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	89bb      	ldrh	r3, [r7, #12]
 800793e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
 8007952:	e21b      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007966:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800796a:	2b00      	cmp	r3, #0
 800796c:	f280 80f1 	bge.w	8007b52 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29a      	uxth	r2, r3
 8007982:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007986:	4013      	ands	r3, r2
 8007988:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800799a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800799e:	b292      	uxth	r2, r2
 80079a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80079a2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80079b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ba:	7b1b      	ldrb	r3, [r3, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d123      	bne.n	8007a08 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	4413      	add	r3, r2
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80079e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 808b 	beq.w	8007b08 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079f8:	6959      	ldr	r1, [r3, #20]
 80079fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fc:	88da      	ldrh	r2, [r3, #6]
 80079fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a02:	f005 fdc1 	bl	800d588 <USB_ReadPMA>
 8007a06:	e07f      	b.n	8007b08 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a0a:	78db      	ldrb	r3, [r3, #3]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d109      	bne.n	8007a24 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007a10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a12:	461a      	mov	r2, r3
 8007a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9c6 	bl	8007da8 <HAL_PCD_EP_DB_Receive>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007a22:	e071      	b.n	8007b08 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d022      	beq.n	8007ac4 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	4413      	add	r3, r2
 8007a98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d02c      	beq.n	8007b08 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab4:	6959      	ldr	r1, [r3, #20]
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab8:	891a      	ldrh	r2, [r3, #8]
 8007aba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007abe:	f005 fd63 	bl	800d588 <USB_ReadPMA>
 8007ac2:	e021      	b.n	8007b08 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007aec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afa:	6959      	ldr	r1, [r3, #20]
 8007afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afe:	895a      	ldrh	r2, [r3, #10]
 8007b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b04:	f005 fd40 	bl	800d588 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b10:	441a      	add	r2, r3
 8007b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b18:	695a      	ldr	r2, [r3, #20]
 8007b1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b1e:	441a      	add	r2, r3
 8007b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <PCD_EP_ISR_Handler+0x41e>
 8007b2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d206      	bcs.n	8007b46 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd7d 	bl	800763e <HAL_PCD_DataOutStageCallback>
 8007b44:	e005      	b.n	8007b52 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f004 ff05 	bl	800c95c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007b52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8117 	beq.w	8007d8c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007b5e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	3310      	adds	r3, #16
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	441a      	add	r2, r3
 8007b9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bac:	78db      	ldrb	r3, [r3, #3]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	f040 80a1 	bne.w	8007cf6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bbc:	7b1b      	ldrb	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8092 	beq.w	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d046      	beq.n	8007c5c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d126      	bne.n	8007c24 <PCD_EP_ISR_Handler+0x50a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	4413      	add	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	00da      	lsls	r2, r3, #3
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	e061      	b.n	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
 8007c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c26:	785b      	ldrb	r3, [r3, #1]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d15d      	bne.n	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	00da      	lsls	r2, r3, #3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2200      	movs	r2, #0
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e045      	b.n	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d126      	bne.n	8007cb8 <PCD_EP_ISR_Handler+0x59e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	4413      	add	r3, r2
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	00da      	lsls	r2, r3, #3
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e017      	b.n	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
 8007cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d113      	bne.n	8007ce8 <PCD_EP_ISR_Handler+0x5ce>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	4413      	add	r3, r2
 8007cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	00da      	lsls	r2, r3, #3
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fcb1 	bl	8007656 <HAL_PCD_DataInStageCallback>
 8007cf4:	e04a      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007cf6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d13f      	bne.n	8007d80 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4413      	add	r3, r2
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d24:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d906      	bls.n	8007d3e <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3a:	619a      	str	r2, [r3, #24]
 8007d3c:	e002      	b.n	8007d44 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d40:	2200      	movs	r2, #0
 8007d42:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff fc7f 	bl	8007656 <HAL_PCD_DataInStageCallback>
 8007d58:	e018      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d60:	441a      	add	r2, r3
 8007d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d68:	69da      	ldr	r2, [r3, #28]
 8007d6a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d6c:	441a      	add	r2, r3
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f004 fdef 	bl	800c95c <USB_EPStartXfer>
 8007d7e:	e005      	b.n	8007d8c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007d80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d82:	461a      	mov	r2, r3
 8007d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f917 	bl	8007fba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f6ff acc3 	blt.w	8007724 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3748      	adds	r7, #72	@ 0x48
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d07c      	beq.n	8007eba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	8b7b      	ldrh	r3, [r7, #26]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d306      	bcc.n	8007dfe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	8b7b      	ldrh	r3, [r7, #26]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	619a      	str	r2, [r3, #24]
 8007dfc:	e002      	b.n	8007e04 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d123      	bne.n	8007e54 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e26:	833b      	strh	r3, [r7, #24]
 8007e28:	8b3b      	ldrh	r3, [r7, #24]
 8007e2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e2e:	833b      	strh	r3, [r7, #24]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	441a      	add	r2, r3
 8007e3e:	8b3b      	ldrh	r3, [r7, #24]
 8007e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01f      	beq.n	8007e9e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e78:	82fb      	strh	r3, [r7, #22]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	441a      	add	r2, r3
 8007e88:	8afb      	ldrh	r3, [r7, #22]
 8007e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007e9e:	8b7b      	ldrh	r3, [r7, #26]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8085 	beq.w	8007fb0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6959      	ldr	r1, [r3, #20]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	891a      	ldrh	r2, [r3, #8]
 8007eb2:	8b7b      	ldrh	r3, [r7, #26]
 8007eb4:	f005 fb68 	bl	800d588 <USB_ReadPMA>
 8007eb8:	e07a      	b.n	8007fb0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ede:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	8b7b      	ldrh	r3, [r7, #26]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d306      	bcc.n	8007ef8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	8b7b      	ldrh	r3, [r7, #26]
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	619a      	str	r2, [r3, #24]
 8007ef6:	e002      	b.n	8007efe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d123      	bne.n	8007f4e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	83fb      	strh	r3, [r7, #30]
 8007f22:	8bfb      	ldrh	r3, [r7, #30]
 8007f24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f28:	83fb      	strh	r3, [r7, #30]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8bfb      	ldrh	r3, [r7, #30]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11f      	bne.n	8007f98 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f72:	83bb      	strh	r3, [r7, #28]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	8bbb      	ldrh	r3, [r7, #28]
 8007f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f98:	8b7b      	ldrh	r3, [r7, #26]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6959      	ldr	r1, [r3, #20]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	895a      	ldrh	r2, [r3, #10]
 8007faa:	8b7b      	ldrh	r3, [r7, #26]
 8007fac:	f005 faec 	bl	800d588 <USB_ReadPMA>
    }
  }

  return count;
 8007fb0:	8b7b      	ldrh	r3, [r7, #26]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3720      	adds	r7, #32
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b0a6      	sub	sp, #152	@ 0x98
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 81f7 	beq.w	80083c2 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	461a      	mov	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ff8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008004:	429a      	cmp	r2, r3
 8008006:	d907      	bls.n	8008018 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008010:	1ad2      	subs	r2, r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	619a      	str	r2, [r3, #24]
 8008016:	e002      	b.n	800801e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2200      	movs	r2, #0
 800801c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 80e1 	bne.w	80081ea <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d126      	bne.n	800807e <HAL_PCD_EP_DB_Transmit+0xc4>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	633b      	str	r3, [r7, #48]	@ 0x30
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	4413      	add	r3, r2
 8008046:	633b      	str	r3, [r7, #48]	@ 0x30
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	00da      	lsls	r2, r3, #3
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	4413      	add	r3, r2
 8008052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008062:	b29a      	uxth	r2, r3
 8008064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008076:	b29a      	uxth	r2, r3
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	801a      	strh	r2, [r3, #0]
 800807c:	e01a      	b.n	80080b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d116      	bne.n	80080b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008094:	b29b      	uxth	r3, r3
 8008096:	461a      	mov	r2, r3
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	4413      	add	r3, r2
 800809c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a6:	4413      	add	r3, r2
 80080a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b0:	2200      	movs	r2, #0
 80080b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d126      	bne.n	8008110 <HAL_PCD_EP_DB_Transmit+0x156>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	623b      	str	r3, [r7, #32]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	461a      	mov	r2, r3
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	4413      	add	r3, r2
 80080d8:	623b      	str	r3, [r7, #32]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	00da      	lsls	r2, r3, #3
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	4413      	add	r3, r2
 80080e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	801a      	strh	r2, [r3, #0]
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008108:	b29a      	uxth	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	e017      	b.n	8008140 <HAL_PCD_EP_DB_Transmit+0x186>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d113      	bne.n	8008140 <HAL_PCD_EP_DB_Transmit+0x186>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008120:	b29b      	uxth	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	4413      	add	r3, r2
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	00da      	lsls	r2, r3, #3
 8008130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008132:	4413      	add	r3, r2
 8008134:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008138:	627b      	str	r3, [r7, #36]	@ 0x24
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813c:	2200      	movs	r2, #0
 800813e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d123      	bne.n	8008190 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800815e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008162:	837b      	strh	r3, [r7, #26]
 8008164:	8b7b      	ldrh	r3, [r7, #26]
 8008166:	f083 0320 	eor.w	r3, r3, #32
 800816a:	837b      	strh	r3, [r7, #26]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	8b7b      	ldrh	r3, [r7, #26]
 800817c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818c:	b29b      	uxth	r3, r3
 800818e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fa5d 	bl	8007656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01f      	beq.n	80081e6 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c0:	833b      	strh	r3, [r7, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	441a      	add	r2, r3
 80081d0:	8b3b      	ldrh	r3, [r7, #24]
 80081d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e31f      	b.n	800882a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d021      	beq.n	8008238 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800820a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800820e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	441a      	add	r2, r3
 8008220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800822c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008234:	b29b      	uxth	r3, r3
 8008236:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800823e:	2b01      	cmp	r3, #1
 8008240:	f040 82ca 	bne.w	80087d8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	695a      	ldr	r2, [r3, #20]
 8008248:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800824c:	441a      	add	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	69da      	ldr	r2, [r3, #28]
 8008256:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800825a:	441a      	add	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6a1a      	ldr	r2, [r3, #32]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	429a      	cmp	r2, r3
 800826a:	d309      	bcc.n	8008280 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6a1a      	ldr	r2, [r3, #32]
 8008276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008278:	1ad2      	subs	r2, r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	621a      	str	r2, [r3, #32]
 800827e:	e015      	b.n	80082ac <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d107      	bne.n	8008298 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8008288:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800828c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008296:	e009      	b.n	80082ac <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d15f      	bne.n	8008374 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c8:	4413      	add	r3, r2
 80082ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	00da      	lsls	r2, r3, #3
 80082d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d4:	4413      	add	r3, r2
 80082d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <HAL_PCD_EP_DB_Transmit+0x34e>
 80082f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008300:	b29a      	uxth	r2, r3
 8008302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	e051      	b.n	80083ac <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800830a:	2b3e      	cmp	r3, #62	@ 0x3e
 800830c:	d816      	bhi.n	800833c <HAL_PCD_EP_DB_Transmit+0x382>
 800830e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	653b      	str	r3, [r7, #80]	@ 0x50
 8008314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <HAL_PCD_EP_DB_Transmit+0x36a>
 800831e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008320:	3301      	adds	r3, #1
 8008322:	653b      	str	r3, [r7, #80]	@ 0x50
 8008324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29a      	uxth	r2, r3
 800832a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832c:	b29b      	uxth	r3, r3
 800832e:	029b      	lsls	r3, r3, #10
 8008330:	b29b      	uxth	r3, r3
 8008332:	4313      	orrs	r3, r2
 8008334:	b29a      	uxth	r2, r3
 8008336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	e037      	b.n	80083ac <HAL_PCD_EP_DB_Transmit+0x3f2>
 800833c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	653b      	str	r3, [r7, #80]	@ 0x50
 8008342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <HAL_PCD_EP_DB_Transmit+0x398>
 800834c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800834e:	3b01      	subs	r3, #1
 8008350:	653b      	str	r3, [r7, #80]	@ 0x50
 8008352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	4313      	orrs	r3, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e01b      	b.n	80083ac <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d117      	bne.n	80083ac <HAL_PCD_EP_DB_Transmit+0x3f2>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838a:	b29b      	uxth	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008390:	4413      	add	r3, r2
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	00da      	lsls	r2, r3, #3
 800839a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800839c:	4413      	add	r3, r2
 800839e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083aa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6959      	ldr	r1, [r3, #20]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	891a      	ldrh	r2, [r3, #8]
 80083b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f005 f8a1 	bl	800d502 <USB_WritePMA>
 80083c0:	e20a      	b.n	80087d8 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	4413      	add	r3, r2
 80083dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083e6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d307      	bcc.n	8008406 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	619a      	str	r2, [r3, #24]
 8008404:	e002      	b.n	800840c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2200      	movs	r2, #0
 800840a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f040 80f6 	bne.w	8008602 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d126      	bne.n	800846c <HAL_PCD_EP_DB_Transmit+0x4b2>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	677b      	str	r3, [r7, #116]	@ 0x74
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800842c:	b29b      	uxth	r3, r3
 800842e:	461a      	mov	r2, r3
 8008430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008432:	4413      	add	r3, r2
 8008434:	677b      	str	r3, [r7, #116]	@ 0x74
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	00da      	lsls	r2, r3, #3
 800843c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800843e:	4413      	add	r3, r2
 8008440:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008444:	673b      	str	r3, [r7, #112]	@ 0x70
 8008446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008450:	b29a      	uxth	r2, r3
 8008452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008464:	b29a      	uxth	r2, r3
 8008466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e01a      	b.n	80084a2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d116      	bne.n	80084a2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008488:	4413      	add	r3, r2
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	00da      	lsls	r2, r3, #3
 8008492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008494:	4413      	add	r3, r2
 8008496:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800849a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800849c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800849e:	2200      	movs	r2, #0
 80084a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12f      	bne.n	8008512 <HAL_PCD_EP_DB_Transmit+0x558>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ca:	4413      	add	r3, r2
 80084cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	00da      	lsls	r2, r3, #3
 80084d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084da:	4413      	add	r3, r2
 80084dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008508:	b29a      	uxth	r2, r3
 800850a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	e01c      	b.n	800854c <HAL_PCD_EP_DB_Transmit+0x592>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d118      	bne.n	800854c <HAL_PCD_EP_DB_Transmit+0x592>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008522:	b29b      	uxth	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800852a:	4413      	add	r3, r2
 800852c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	00da      	lsls	r2, r3, #3
 8008536:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800853a:	4413      	add	r3, r2
 800853c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008544:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008548:	2200      	movs	r2, #0
 800854a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	78db      	ldrb	r3, [r3, #3]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d127      	bne.n	80085a4 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	461a      	mov	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008572:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008576:	f083 0320 	eor.w	r3, r3, #32
 800857a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4619      	mov	r1, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff f853 	bl	8007656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d121      	bne.n	80085fe <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80085ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	e113      	b.n	800882a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d121      	bne.n	8008650 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008626:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	441a      	add	r2, r3
 8008638:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800863c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008656:	2b01      	cmp	r3, #1
 8008658:	f040 80be 	bne.w	80087d8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008664:	441a      	add	r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008672:	441a      	add	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	429a      	cmp	r2, r3
 8008682:	d309      	bcc.n	8008698 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	621a      	str	r2, [r3, #32]
 8008696:	e015      	b.n	80086c4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d107      	bne.n	80086b0 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80086a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086a4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80086ae:	e009      	b.n	80086c4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d15f      	bne.n	8008792 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086e6:	4413      	add	r3, r2
 80086e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	00da      	lsls	r2, r3, #3
 80086f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086f2:	4413      	add	r3, r2
 80086f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80086fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008704:	b29a      	uxth	r2, r3
 8008706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <HAL_PCD_EP_DB_Transmit+0x76c>
 8008710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29b      	uxth	r3, r3
 8008716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871e:	b29a      	uxth	r2, r3
 8008720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	e04e      	b.n	80087c4 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008728:	2b3e      	cmp	r3, #62	@ 0x3e
 800872a:	d816      	bhi.n	800875a <HAL_PCD_EP_DB_Transmit+0x7a0>
 800872c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	663b      	str	r3, [r7, #96]	@ 0x60
 8008732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_PCD_EP_DB_Transmit+0x788>
 800873c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800873e:	3301      	adds	r3, #1
 8008740:	663b      	str	r3, [r7, #96]	@ 0x60
 8008742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29a      	uxth	r2, r3
 8008748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800874a:	b29b      	uxth	r3, r3
 800874c:	029b      	lsls	r3, r3, #10
 800874e:	b29b      	uxth	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e034      	b.n	80087c4 <HAL_PCD_EP_DB_Transmit+0x80a>
 800875a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800875c:	095b      	lsrs	r3, r3, #5
 800875e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800876a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800876c:	3b01      	subs	r3, #1
 800876e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29a      	uxth	r2, r3
 8008776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008778:	b29b      	uxth	r3, r3
 800877a:	029b      	lsls	r3, r3, #10
 800877c:	b29b      	uxth	r3, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	b29b      	uxth	r3, r3
 8008782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878a:	b29a      	uxth	r2, r3
 800878c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	e018      	b.n	80087c4 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d114      	bne.n	80087c4 <HAL_PCD_EP_DB_Transmit+0x80a>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087a8:	4413      	add	r3, r2
 80087aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	00da      	lsls	r2, r3, #3
 80087b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087b4:	4413      	add	r3, r2
 80087b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6959      	ldr	r1, [r3, #20]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	895a      	ldrh	r2, [r3, #10]
 80087d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f004 fe95 	bl	800d502 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f2:	82fb      	strh	r3, [r7, #22]
 80087f4:	8afb      	ldrh	r3, [r7, #22]
 80087f6:	f083 0310 	eor.w	r3, r3, #16
 80087fa:	82fb      	strh	r3, [r7, #22]
 80087fc:	8afb      	ldrh	r3, [r7, #22]
 80087fe:	f083 0320 	eor.w	r3, r3, #32
 8008802:	82fb      	strh	r3, [r7, #22]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	441a      	add	r2, r3
 8008812:	8afb      	ldrh	r3, [r7, #22]
 8008814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800881c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3798      	adds	r7, #152	@ 0x98
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008856:	b29b      	uxth	r3, r3
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800886a:	b29b      	uxth	r3, r3
 800886c:	f043 0302 	orr.w	r3, r3, #2
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
	...

080088a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d141      	bne.n	8008932 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088ae:	4b4b      	ldr	r3, [pc, #300]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ba:	d131      	bne.n	8008920 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088bc:	4b47      	ldr	r3, [pc, #284]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	4a46      	ldr	r2, [pc, #280]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088cc:	4b43      	ldr	r3, [pc, #268]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088d4:	4a41      	ldr	r2, [pc, #260]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80088dc:	4b40      	ldr	r3, [pc, #256]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2232      	movs	r2, #50	@ 0x32
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	4a3f      	ldr	r2, [pc, #252]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80088e8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ec:	0c9b      	lsrs	r3, r3, #18
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088f2:	e002      	b.n	80088fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088fa:	4b38      	ldr	r3, [pc, #224]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008906:	d102      	bne.n	800890e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f2      	bne.n	80088f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800890e:	4b33      	ldr	r3, [pc, #204]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800891a:	d158      	bne.n	80089ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e057      	b.n	80089d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008920:	4b2e      	ldr	r3, [pc, #184]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008926:	4a2d      	ldr	r2, [pc, #180]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800892c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008930:	e04d      	b.n	80089ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008938:	d141      	bne.n	80089be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800893a:	4b28      	ldr	r3, [pc, #160]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008946:	d131      	bne.n	80089ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008948:	4b24      	ldr	r3, [pc, #144]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	4a23      	ldr	r2, [pc, #140]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008958:	4b20      	ldr	r3, [pc, #128]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008960:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008968:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2232      	movs	r2, #50	@ 0x32
 800896e:	fb02 f303 	mul.w	r3, r2, r3
 8008972:	4a1c      	ldr	r2, [pc, #112]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	0c9b      	lsrs	r3, r3, #18
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800897e:	e002      	b.n	8008986 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3b01      	subs	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008986:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800898e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008992:	d102      	bne.n	800899a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f2      	bne.n	8008980 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800899a:	4b10      	ldr	r3, [pc, #64]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a6:	d112      	bne.n	80089ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e011      	b.n	80089d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089ac:	4b0b      	ldr	r3, [pc, #44]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b2:	4a0a      	ldr	r2, [pc, #40]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80089bc:	e007      	b.n	80089ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80089be:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089c6:	4a05      	ldr	r2, [pc, #20]	@ (80089dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40007000 	.word	0x40007000
 80089e0:	20000000 	.word	0x20000000
 80089e4:	431bde83 	.word	0x431bde83

080089e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	4a04      	ldr	r2, [pc, #16]	@ (8008a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089f6:	6093      	str	r3, [r2, #8]
}
 80089f8:	bf00      	nop
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40007000 	.word	0x40007000

08008a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e2fe      	b.n	8009018 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d075      	beq.n	8008b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a26:	4b97      	ldr	r3, [pc, #604]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 030c 	and.w	r3, r3, #12
 8008a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a30:	4b94      	ldr	r3, [pc, #592]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b0c      	cmp	r3, #12
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCC_OscConfig+0x3e>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d002      	beq.n	8008a4c <HAL_RCC_OscConfig+0x44>
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d10b      	bne.n	8008a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d05b      	beq.n	8008b10 <HAL_RCC_OscConfig+0x108>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d157      	bne.n	8008b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e2d9      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a6c:	d106      	bne.n	8008a7c <HAL_RCC_OscConfig+0x74>
 8008a6e:	4b85      	ldr	r3, [pc, #532]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a84      	ldr	r2, [pc, #528]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e01d      	b.n	8008ab8 <HAL_RCC_OscConfig+0xb0>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a84:	d10c      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x98>
 8008a86:	4b7f      	ldr	r3, [pc, #508]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4b7c      	ldr	r3, [pc, #496]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a7b      	ldr	r2, [pc, #492]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	e00b      	b.n	8008ab8 <HAL_RCC_OscConfig+0xb0>
 8008aa0:	4b78      	ldr	r3, [pc, #480]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a77      	ldr	r2, [pc, #476]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	4b75      	ldr	r3, [pc, #468]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a74      	ldr	r2, [pc, #464]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d013      	beq.n	8008ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac0:	f7f9 ff50 	bl	8002964 <HAL_GetTick>
 8008ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ac6:	e008      	b.n	8008ada <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ac8:	f7f9 ff4c 	bl	8002964 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b64      	cmp	r3, #100	@ 0x64
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e29e      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ada:	4b6a      	ldr	r3, [pc, #424]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0f0      	beq.n	8008ac8 <HAL_RCC_OscConfig+0xc0>
 8008ae6:	e014      	b.n	8008b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae8:	f7f9 ff3c 	bl	8002964 <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008af0:	f7f9 ff38 	bl	8002964 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b64      	cmp	r3, #100	@ 0x64
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e28a      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b02:	4b60      	ldr	r3, [pc, #384]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f0      	bne.n	8008af0 <HAL_RCC_OscConfig+0xe8>
 8008b0e:	e000      	b.n	8008b12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d075      	beq.n	8008c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b1e:	4b59      	ldr	r3, [pc, #356]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 030c 	and.w	r3, r3, #12
 8008b26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b28:	4b56      	ldr	r3, [pc, #344]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b0c      	cmp	r3, #12
 8008b36:	d102      	bne.n	8008b3e <HAL_RCC_OscConfig+0x136>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d002      	beq.n	8008b44 <HAL_RCC_OscConfig+0x13c>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d11f      	bne.n	8008b84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b44:	4b4f      	ldr	r3, [pc, #316]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <HAL_RCC_OscConfig+0x154>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e25d      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b5c:	4b49      	ldr	r3, [pc, #292]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	061b      	lsls	r3, r3, #24
 8008b6a:	4946      	ldr	r1, [pc, #280]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b70:	4b45      	ldr	r3, [pc, #276]	@ (8008c88 <HAL_RCC_OscConfig+0x280>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7f9 fea9 	bl	80028cc <HAL_InitTick>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d043      	beq.n	8008c08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e249      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d023      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a3c      	ldr	r2, [pc, #240]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7f9 fee4 	bl	8002964 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba0:	f7f9 fee0 	bl	8002964 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e232      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bb2:	4b34      	ldr	r3, [pc, #208]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bbe:	4b31      	ldr	r3, [pc, #196]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	061b      	lsls	r3, r3, #24
 8008bcc:	492d      	ldr	r1, [pc, #180]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	604b      	str	r3, [r1, #4]
 8008bd2:	e01a      	b.n	8008c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be0:	f7f9 fec0 	bl	8002964 <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be8:	f7f9 febc 	bl	8002964 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e20e      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bfa:	4b22      	ldr	r3, [pc, #136]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x1e0>
 8008c06:	e000      	b.n	8008c0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d041      	beq.n	8008c9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01c      	beq.n	8008c58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c1e:	4b19      	ldr	r3, [pc, #100]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c24:	4a17      	ldr	r2, [pc, #92]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2e:	f7f9 fe99 	bl	8002964 <HAL_GetTick>
 8008c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c36:	f7f9 fe95 	bl	8002964 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e1e7      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c48:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0ef      	beq.n	8008c36 <HAL_RCC_OscConfig+0x22e>
 8008c56:	e020      	b.n	8008c9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c58:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c5e:	4a09      	ldr	r2, [pc, #36]	@ (8008c84 <HAL_RCC_OscConfig+0x27c>)
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c68:	f7f9 fe7c 	bl	8002964 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c6e:	e00d      	b.n	8008c8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c70:	f7f9 fe78 	bl	8002964 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d906      	bls.n	8008c8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1ca      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
 8008c82:	bf00      	nop
 8008c84:	40021000 	.word	0x40021000
 8008c88:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1ea      	bne.n	8008c70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80a6 	beq.w	8008df4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cac:	4b84      	ldr	r3, [pc, #528]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_RCC_OscConfig+0x2b4>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <HAL_RCC_OscConfig+0x2b6>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cce:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cde:	4b79      	ldr	r3, [pc, #484]	@ (8008ec4 <HAL_RCC_OscConfig+0x4bc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d118      	bne.n	8008d1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cea:	4b76      	ldr	r3, [pc, #472]	@ (8008ec4 <HAL_RCC_OscConfig+0x4bc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a75      	ldr	r2, [pc, #468]	@ (8008ec4 <HAL_RCC_OscConfig+0x4bc>)
 8008cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cf6:	f7f9 fe35 	bl	8002964 <HAL_GetTick>
 8008cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cfc:	e008      	b.n	8008d10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cfe:	f7f9 fe31 	bl	8002964 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e183      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d10:	4b6c      	ldr	r3, [pc, #432]	@ (8008ec4 <HAL_RCC_OscConfig+0x4bc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0f0      	beq.n	8008cfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d108      	bne.n	8008d36 <HAL_RCC_OscConfig+0x32e>
 8008d24:	4b66      	ldr	r3, [pc, #408]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2a:	4a65      	ldr	r2, [pc, #404]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d2c:	f043 0301 	orr.w	r3, r3, #1
 8008d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d34:	e024      	b.n	8008d80 <HAL_RCC_OscConfig+0x378>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d110      	bne.n	8008d60 <HAL_RCC_OscConfig+0x358>
 8008d3e:	4b60      	ldr	r3, [pc, #384]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d44:	4a5e      	ldr	r2, [pc, #376]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d46:	f043 0304 	orr.w	r3, r3, #4
 8008d4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d54:	4a5a      	ldr	r2, [pc, #360]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d5e:	e00f      	b.n	8008d80 <HAL_RCC_OscConfig+0x378>
 8008d60:	4b57      	ldr	r3, [pc, #348]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d66:	4a56      	ldr	r2, [pc, #344]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d68:	f023 0301 	bic.w	r3, r3, #1
 8008d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d70:	4b53      	ldr	r3, [pc, #332]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d76:	4a52      	ldr	r2, [pc, #328]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d016      	beq.n	8008db6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d88:	f7f9 fdec 	bl	8002964 <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d8e:	e00a      	b.n	8008da6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d90:	f7f9 fde8 	bl	8002964 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e138      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008da6:	4b46      	ldr	r3, [pc, #280]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0ed      	beq.n	8008d90 <HAL_RCC_OscConfig+0x388>
 8008db4:	e015      	b.n	8008de2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db6:	f7f9 fdd5 	bl	8002964 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dbc:	e00a      	b.n	8008dd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dbe:	f7f9 fdd1 	bl	8002964 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e121      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ed      	bne.n	8008dbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008de2:	7ffb      	ldrb	r3, [r7, #31]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d105      	bne.n	8008df4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de8:	4b35      	ldr	r3, [pc, #212]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dec:	4a34      	ldr	r2, [pc, #208]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d03c      	beq.n	8008e7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01c      	beq.n	8008e42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e08:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e18:	f7f9 fda4 	bl	8002964 <HAL_GetTick>
 8008e1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e1e:	e008      	b.n	8008e32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e20:	f7f9 fda0 	bl	8002964 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e0f2      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e32:	4b23      	ldr	r3, [pc, #140]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0ef      	beq.n	8008e20 <HAL_RCC_OscConfig+0x418>
 8008e40:	e01b      	b.n	8008e7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e42:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e48:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e52:	f7f9 fd87 	bl	8002964 <HAL_GetTick>
 8008e56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e58:	e008      	b.n	8008e6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e5a:	f7f9 fd83 	bl	8002964 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d901      	bls.n	8008e6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e0d5      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1ef      	bne.n	8008e5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80c9 	beq.w	8009016 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 030c 	and.w	r3, r3, #12
 8008e8c:	2b0c      	cmp	r3, #12
 8008e8e:	f000 8083 	beq.w	8008f98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d15e      	bne.n	8008f58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a08      	ldr	r2, [pc, #32]	@ (8008ec0 <HAL_RCC_OscConfig+0x4b8>)
 8008ea0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea6:	f7f9 fd5d 	bl	8002964 <HAL_GetTick>
 8008eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eac:	e00c      	b.n	8008ec8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eae:	f7f9 fd59 	bl	8002964 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d905      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e0ab      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ec8:	4b55      	ldr	r3, [pc, #340]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1ec      	bne.n	8008eae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ed4:	4b52      	ldr	r3, [pc, #328]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	4b52      	ldr	r3, [pc, #328]	@ (8009024 <HAL_RCC_OscConfig+0x61c>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6a11      	ldr	r1, [r2, #32]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ee4:	3a01      	subs	r2, #1
 8008ee6:	0112      	lsls	r2, r2, #4
 8008ee8:	4311      	orrs	r1, r2
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008eee:	0212      	lsls	r2, r2, #8
 8008ef0:	4311      	orrs	r1, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ef6:	0852      	lsrs	r2, r2, #1
 8008ef8:	3a01      	subs	r2, #1
 8008efa:	0552      	lsls	r2, r2, #21
 8008efc:	4311      	orrs	r1, r2
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f02:	0852      	lsrs	r2, r2, #1
 8008f04:	3a01      	subs	r2, #1
 8008f06:	0652      	lsls	r2, r2, #25
 8008f08:	4311      	orrs	r1, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f0e:	06d2      	lsls	r2, r2, #27
 8008f10:	430a      	orrs	r2, r1
 8008f12:	4943      	ldr	r1, [pc, #268]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f18:	4b41      	ldr	r3, [pc, #260]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a40      	ldr	r2, [pc, #256]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f24:	4b3e      	ldr	r3, [pc, #248]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a3d      	ldr	r2, [pc, #244]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7f9 fd18 	bl	8002964 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f38:	f7f9 fd14 	bl	8002964 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e066      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f4a:	4b35      	ldr	r3, [pc, #212]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x530>
 8008f56:	e05e      	b.n	8009016 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f58:	4b31      	ldr	r3, [pc, #196]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a30      	ldr	r2, [pc, #192]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7f9 fcfe 	bl	8002964 <HAL_GetTick>
 8008f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6c:	f7f9 fcfa 	bl	8002964 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e04c      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f7e:	4b28      	ldr	r3, [pc, #160]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f0      	bne.n	8008f6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008f8a:	4b25      	ldr	r3, [pc, #148]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	4924      	ldr	r1, [pc, #144]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008f90:	4b25      	ldr	r3, [pc, #148]	@ (8009028 <HAL_RCC_OscConfig+0x620>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	60cb      	str	r3, [r1, #12]
 8008f96:	e03e      	b.n	8009016 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e039      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8009020 <HAL_RCC_OscConfig+0x618>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f003 0203 	and.w	r2, r3, #3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d12c      	bne.n	8009012 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d123      	bne.n	8009012 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d11b      	bne.n	8009012 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d113      	bne.n	8009012 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d109      	bne.n	8009012 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009008:	085b      	lsrs	r3, r3, #1
 800900a:	3b01      	subs	r3, #1
 800900c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800900e:	429a      	cmp	r2, r3
 8009010:	d001      	beq.n	8009016 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3720      	adds	r7, #32
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40021000 	.word	0x40021000
 8009024:	019f800c 	.word	0x019f800c
 8009028:	feeefffc 	.word	0xfeeefffc

0800902c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e11e      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009044:	4b91      	ldr	r3, [pc, #580]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d910      	bls.n	8009074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009052:	4b8e      	ldr	r3, [pc, #568]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f023 020f 	bic.w	r2, r3, #15
 800905a:	498c      	ldr	r1, [pc, #560]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	4313      	orrs	r3, r2
 8009060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009062:	4b8a      	ldr	r3, [pc, #552]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d001      	beq.n	8009074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e106      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d073      	beq.n	8009168 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d129      	bne.n	80090dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009088:	4b81      	ldr	r3, [pc, #516]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e0f4      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009098:	f000 f99e 	bl	80093d8 <RCC_GetSysClockFreqFromPLLSource>
 800909c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	4a7c      	ldr	r2, [pc, #496]	@ (8009294 <HAL_RCC_ClockConfig+0x268>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d93f      	bls.n	8009126 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090a6:	4b7a      	ldr	r3, [pc, #488]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d033      	beq.n	8009126 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d12f      	bne.n	8009126 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090c6:	4b72      	ldr	r3, [pc, #456]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090ce:	4a70      	ldr	r2, [pc, #448]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80090d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80090d6:	2380      	movs	r3, #128	@ 0x80
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e024      	b.n	8009126 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d107      	bne.n	80090f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090e4:	4b6a      	ldr	r3, [pc, #424]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0c6      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090f4:	4b66      	ldr	r3, [pc, #408]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e0be      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009104:	f000 f8ce 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 8009108:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4a61      	ldr	r2, [pc, #388]	@ (8009294 <HAL_RCC_ClockConfig+0x268>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d909      	bls.n	8009126 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009112:	4b5f      	ldr	r3, [pc, #380]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800911a:	4a5d      	ldr	r2, [pc, #372]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 800911c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009120:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009122:	2380      	movs	r3, #128	@ 0x80
 8009124:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009126:	4b5a      	ldr	r3, [pc, #360]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f023 0203 	bic.w	r2, r3, #3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	4957      	ldr	r1, [pc, #348]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009134:	4313      	orrs	r3, r2
 8009136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009138:	f7f9 fc14 	bl	8002964 <HAL_GetTick>
 800913c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913e:	e00a      	b.n	8009156 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009140:	f7f9 fc10 	bl	8002964 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800914e:	4293      	cmp	r3, r2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e095      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009156:	4b4e      	ldr	r3, [pc, #312]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 020c 	and.w	r2, r3, #12
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	429a      	cmp	r2, r3
 8009166:	d1eb      	bne.n	8009140 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d023      	beq.n	80091bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009180:	4b43      	ldr	r3, [pc, #268]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	4a42      	ldr	r2, [pc, #264]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800918a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009198:	4b3d      	ldr	r3, [pc, #244]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091a0:	4a3b      	ldr	r2, [pc, #236]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80091a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091a8:	4b39      	ldr	r3, [pc, #228]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	4936      	ldr	r1, [pc, #216]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	608b      	str	r3, [r1, #8]
 80091ba:	e008      	b.n	80091ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2b80      	cmp	r3, #128	@ 0x80
 80091c0:	d105      	bne.n	80091ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80091c2:	4b33      	ldr	r3, [pc, #204]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	4a32      	ldr	r2, [pc, #200]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 80091c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091ce:	4b2f      	ldr	r3, [pc, #188]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d21d      	bcs.n	8009218 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091dc:	4b2b      	ldr	r3, [pc, #172]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f023 020f 	bic.w	r2, r3, #15
 80091e4:	4929      	ldr	r1, [pc, #164]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80091ec:	f7f9 fbba 	bl	8002964 <HAL_GetTick>
 80091f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f2:	e00a      	b.n	800920a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f4:	f7f9 fbb6 	bl	8002964 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009202:	4293      	cmp	r3, r2
 8009204:	d901      	bls.n	800920a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e03b      	b.n	8009282 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800920a:	4b20      	ldr	r3, [pc, #128]	@ (800928c <HAL_RCC_ClockConfig+0x260>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	429a      	cmp	r2, r3
 8009216:	d1ed      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d008      	beq.n	8009236 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009224:	4b1a      	ldr	r3, [pc, #104]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	4917      	ldr	r1, [pc, #92]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009232:	4313      	orrs	r3, r2
 8009234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009242:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	490f      	ldr	r1, [pc, #60]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 8009252:	4313      	orrs	r3, r2
 8009254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009256:	f000 f825 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 800925a:	4602      	mov	r2, r0
 800925c:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <HAL_RCC_ClockConfig+0x264>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	490c      	ldr	r1, [pc, #48]	@ (8009298 <HAL_RCC_ClockConfig+0x26c>)
 8009268:	5ccb      	ldrb	r3, [r1, r3]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	4a0a      	ldr	r2, [pc, #40]	@ (800929c <HAL_RCC_ClockConfig+0x270>)
 8009274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009276:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <HAL_RCC_ClockConfig+0x274>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7f9 fb26 	bl	80028cc <HAL_InitTick>
 8009280:	4603      	mov	r3, r0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	40022000 	.word	0x40022000
 8009290:	40021000 	.word	0x40021000
 8009294:	04c4b400 	.word	0x04c4b400
 8009298:	0800e6e0 	.word	0x0800e6e0
 800929c:	20000000 	.word	0x20000000
 80092a0:	20000004 	.word	0x20000004

080092a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092aa:	4b2c      	ldr	r3, [pc, #176]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 030c 	and.w	r3, r3, #12
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d102      	bne.n	80092bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80092b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xbc>)
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	e047      	b.n	800934c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80092bc:	4b27      	ldr	r3, [pc, #156]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 030c 	and.w	r3, r3, #12
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d102      	bne.n	80092ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092c8:	4b26      	ldr	r3, [pc, #152]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xc0>)
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	e03e      	b.n	800934c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80092ce:	4b23      	ldr	r3, [pc, #140]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f003 030c 	and.w	r3, r3, #12
 80092d6:	2b0c      	cmp	r3, #12
 80092d8:	d136      	bne.n	8009348 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092da:	4b20      	ldr	r3, [pc, #128]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092e4:	4b1d      	ldr	r3, [pc, #116]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	091b      	lsrs	r3, r3, #4
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	3301      	adds	r3, #1
 80092f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d10c      	bne.n	8009312 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xc0>)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009300:	4a16      	ldr	r2, [pc, #88]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009302:	68d2      	ldr	r2, [r2, #12]
 8009304:	0a12      	lsrs	r2, r2, #8
 8009306:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800930a:	fb02 f303 	mul.w	r3, r2, r3
 800930e:	617b      	str	r3, [r7, #20]
      break;
 8009310:	e00c      	b.n	800932c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009312:	4a13      	ldr	r2, [pc, #76]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	fbb2 f3f3 	udiv	r3, r2, r3
 800931a:	4a10      	ldr	r2, [pc, #64]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 800931c:	68d2      	ldr	r2, [r2, #12]
 800931e:	0a12      	lsrs	r2, r2, #8
 8009320:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009324:	fb02 f303 	mul.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]
      break;
 800932a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800932c:	4b0b      	ldr	r3, [pc, #44]	@ (800935c <HAL_RCC_GetSysClockFreq+0xb8>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	0e5b      	lsrs	r3, r3, #25
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	3301      	adds	r3, #1
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e001      	b.n	800934c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800934c:	693b      	ldr	r3, [r7, #16]
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40021000 	.word	0x40021000
 8009360:	00f42400 	.word	0x00f42400
 8009364:	007a1200 	.word	0x007a1200

08009368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800936c:	4b03      	ldr	r3, [pc, #12]	@ (800937c <HAL_RCC_GetHCLKFreq+0x14>)
 800936e:	681b      	ldr	r3, [r3, #0]
}
 8009370:	4618      	mov	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000000 	.word	0x20000000

08009380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009384:	f7ff fff0 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 8009388:	4602      	mov	r2, r0
 800938a:	4b06      	ldr	r3, [pc, #24]	@ (80093a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	4904      	ldr	r1, [pc, #16]	@ (80093a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009396:	5ccb      	ldrb	r3, [r1, r3]
 8009398:	f003 031f 	and.w	r3, r3, #31
 800939c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40021000 	.word	0x40021000
 80093a8:	0800e6f0 	.word	0x0800e6f0

080093ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80093b0:	f7ff ffda 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80093b4:	4602      	mov	r2, r0
 80093b6:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	0adb      	lsrs	r3, r3, #11
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	4904      	ldr	r1, [pc, #16]	@ (80093d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093c2:	5ccb      	ldrb	r3, [r1, r3]
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40021000 	.word	0x40021000
 80093d4:	0800e6f0 	.word	0x0800e6f0

080093d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80093de:	4b1e      	ldr	r3, [pc, #120]	@ (8009458 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009458 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	091b      	lsrs	r3, r3, #4
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	3301      	adds	r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d10c      	bne.n	8009416 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093fc:	4a17      	ldr	r2, [pc, #92]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	fbb2 f3f3 	udiv	r3, r2, r3
 8009404:	4a14      	ldr	r2, [pc, #80]	@ (8009458 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009406:	68d2      	ldr	r2, [r2, #12]
 8009408:	0a12      	lsrs	r2, r2, #8
 800940a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800940e:	fb02 f303 	mul.w	r3, r2, r3
 8009412:	617b      	str	r3, [r7, #20]
    break;
 8009414:	e00c      	b.n	8009430 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009416:	4a12      	ldr	r2, [pc, #72]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	fbb2 f3f3 	udiv	r3, r2, r3
 800941e:	4a0e      	ldr	r2, [pc, #56]	@ (8009458 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009420:	68d2      	ldr	r2, [r2, #12]
 8009422:	0a12      	lsrs	r2, r2, #8
 8009424:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009428:	fb02 f303 	mul.w	r3, r2, r3
 800942c:	617b      	str	r3, [r7, #20]
    break;
 800942e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009430:	4b09      	ldr	r3, [pc, #36]	@ (8009458 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	0e5b      	lsrs	r3, r3, #25
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	3301      	adds	r3, #1
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	fbb2 f3f3 	udiv	r3, r2, r3
 8009448:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800944a:	687b      	ldr	r3, [r7, #4]
}
 800944c:	4618      	mov	r0, r3
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	40021000 	.word	0x40021000
 800945c:	007a1200 	.word	0x007a1200
 8009460:	00f42400 	.word	0x00f42400

08009464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800946c:	2300      	movs	r3, #0
 800946e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009470:	2300      	movs	r3, #0
 8009472:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8098 	beq.w	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009482:	2300      	movs	r3, #0
 8009484:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009486:	4b43      	ldr	r3, [pc, #268]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10d      	bne.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009492:	4b40      	ldr	r3, [pc, #256]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	4a3f      	ldr	r2, [pc, #252]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800949c:	6593      	str	r3, [r2, #88]	@ 0x58
 800949e:	4b3d      	ldr	r3, [pc, #244]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094a6:	60bb      	str	r3, [r7, #8]
 80094a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094aa:	2301      	movs	r3, #1
 80094ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094ae:	4b3a      	ldr	r3, [pc, #232]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a39      	ldr	r2, [pc, #228]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094ba:	f7f9 fa53 	bl	8002964 <HAL_GetTick>
 80094be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094c0:	e009      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c2:	f7f9 fa4f 	bl	8002964 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d902      	bls.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	74fb      	strb	r3, [r7, #19]
        break;
 80094d4:	e005      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094d6:	4b30      	ldr	r3, [pc, #192]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0ef      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80094e2:	7cfb      	ldrb	r3, [r7, #19]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d159      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80094e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01e      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	429a      	cmp	r2, r3
 8009502:	d019      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009504:	4b23      	ldr	r3, [pc, #140]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800950a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009510:	4b20      	ldr	r3, [pc, #128]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009516:	4a1f      	ldr	r2, [pc, #124]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800951c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009520:	4b1c      	ldr	r3, [pc, #112]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009526:	4a1b      	ldr	r2, [pc, #108]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800952c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009530:	4a18      	ldr	r2, [pc, #96]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d016      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009542:	f7f9 fa0f 	bl	8002964 <HAL_GetTick>
 8009546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009548:	e00b      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800954a:	f7f9 fa0b 	bl	8002964 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009558:	4293      	cmp	r3, r2
 800955a:	d902      	bls.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	74fb      	strb	r3, [r7, #19]
            break;
 8009560:	e006      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0ec      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009570:	7cfb      	ldrb	r3, [r7, #19]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009576:	4b07      	ldr	r3, [pc, #28]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009584:	4903      	ldr	r1, [pc, #12]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009586:	4313      	orrs	r3, r2
 8009588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800958c:	e008      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800958e:	7cfb      	ldrb	r3, [r7, #19]
 8009590:	74bb      	strb	r3, [r7, #18]
 8009592:	e005      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009594:	40021000 	.word	0x40021000
 8009598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959c:	7cfb      	ldrb	r3, [r7, #19]
 800959e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095a0:	7c7b      	ldrb	r3, [r7, #17]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d105      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095a6:	4ba7      	ldr	r3, [pc, #668]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095aa:	4aa6      	ldr	r2, [pc, #664]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095be:	4ba1      	ldr	r3, [pc, #644]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c4:	f023 0203 	bic.w	r2, r3, #3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	499d      	ldr	r1, [pc, #628]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095e0:	4b98      	ldr	r3, [pc, #608]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e6:	f023 020c 	bic.w	r2, r3, #12
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	4995      	ldr	r1, [pc, #596]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0304 	and.w	r3, r3, #4
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009602:	4b90      	ldr	r3, [pc, #576]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009608:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	498c      	ldr	r1, [pc, #560]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009624:	4b87      	ldr	r3, [pc, #540]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	4984      	ldr	r1, [pc, #528]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0310 	and.w	r3, r3, #16
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009646:	4b7f      	ldr	r3, [pc, #508]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	497b      	ldr	r1, [pc, #492]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009668:	4b76      	ldr	r3, [pc, #472]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	4973      	ldr	r1, [pc, #460]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009678:	4313      	orrs	r3, r2
 800967a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800968a:	4b6e      	ldr	r3, [pc, #440]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009690:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	496a      	ldr	r1, [pc, #424]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969a:	4313      	orrs	r3, r2
 800969c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096ac:	4b65      	ldr	r3, [pc, #404]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	4962      	ldr	r1, [pc, #392]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096ce:	4b5d      	ldr	r3, [pc, #372]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096dc:	4959      	ldr	r1, [pc, #356]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096f0:	4b54      	ldr	r3, [pc, #336]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096f6:	f023 0203 	bic.w	r2, r3, #3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fe:	4951      	ldr	r1, [pc, #324]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009712:	4b4c      	ldr	r3, [pc, #304]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009718:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	4948      	ldr	r1, [pc, #288]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009722:	4313      	orrs	r3, r2
 8009724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009730:	2b00      	cmp	r3, #0
 8009732:	d015      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009734:	4b43      	ldr	r3, [pc, #268]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	4940      	ldr	r1, [pc, #256]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009752:	d105      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009754:	4b3b      	ldr	r3, [pc, #236]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a3a      	ldr	r2, [pc, #232]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009768:	2b00      	cmp	r3, #0
 800976a:	d015      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800976c:	4b35      	ldr	r3, [pc, #212]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009772:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800977a:	4932      	ldr	r1, [pc, #200]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978a:	d105      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800978c:	4b2d      	ldr	r3, [pc, #180]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	4a2c      	ldr	r2, [pc, #176]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009796:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d015      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097a4:	4b27      	ldr	r3, [pc, #156]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b2:	4924      	ldr	r1, [pc, #144]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097c2:	d105      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097c4:	4b1f      	ldr	r3, [pc, #124]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d015      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097dc:	4b19      	ldr	r3, [pc, #100]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ea:	4916      	ldr	r1, [pc, #88]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097fa:	d105      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097fc:	4b11      	ldr	r3, [pc, #68]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	4a10      	ldr	r2, [pc, #64]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009806:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d019      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009814:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800981a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	4908      	ldr	r1, [pc, #32]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009824:	4313      	orrs	r3, r2
 8009826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009832:	d109      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009834:	4b03      	ldr	r3, [pc, #12]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	4a02      	ldr	r2, [pc, #8]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800983e:	60d3      	str	r3, [r2, #12]
 8009840:	e002      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009842:	bf00      	nop
 8009844:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d015      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009854:	4b29      	ldr	r3, [pc, #164]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009862:	4926      	ldr	r1, [pc, #152]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009864:	4313      	orrs	r3, r2
 8009866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009872:	d105      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009874:	4b21      	ldr	r3, [pc, #132]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	4a20      	ldr	r2, [pc, #128]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800987a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800987e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d015      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800988c:	4b1b      	ldr	r3, [pc, #108]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800988e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009892:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800989a:	4918      	ldr	r1, [pc, #96]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800989c:	4313      	orrs	r3, r2
 800989e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098aa:	d105      	bne.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098ac:	4b13      	ldr	r3, [pc, #76]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	4a12      	ldr	r2, [pc, #72]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d015      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80098c4:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d2:	490a      	ldr	r1, [pc, #40]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098e2:	d105      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098e4:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	4a04      	ldr	r2, [pc, #16]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80098f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40021000 	.word	0x40021000

08009900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e049      	b.n	80099a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f8 fd30 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3304      	adds	r3, #4
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	f000 fd1e 	bl	800a380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e04c      	b.n	8009a62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a26      	ldr	r2, [pc, #152]	@ (8009a70 <HAL_TIM_Base_Start+0xc0>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d022      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099e2:	d01d      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a22      	ldr	r2, [pc, #136]	@ (8009a74 <HAL_TIM_Base_Start+0xc4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d018      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a21      	ldr	r2, [pc, #132]	@ (8009a78 <HAL_TIM_Base_Start+0xc8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1f      	ldr	r2, [pc, #124]	@ (8009a7c <HAL_TIM_Base_Start+0xcc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1e      	ldr	r2, [pc, #120]	@ (8009a80 <HAL_TIM_Base_Start+0xd0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1c      	ldr	r2, [pc, #112]	@ (8009a84 <HAL_TIM_Base_Start+0xd4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIM_Base_Start+0x70>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a88 <HAL_TIM_Base_Start+0xd8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d115      	bne.n	8009a4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	4b19      	ldr	r3, [pc, #100]	@ (8009a8c <HAL_TIM_Base_Start+0xdc>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b06      	cmp	r3, #6
 8009a30:	d015      	beq.n	8009a5e <HAL_TIM_Base_Start+0xae>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a38:	d011      	beq.n	8009a5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f042 0201 	orr.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	e008      	b.n	8009a5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e000      	b.n	8009a60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	40012c00 	.word	0x40012c00
 8009a74:	40000400 	.word	0x40000400
 8009a78:	40000800 	.word	0x40000800
 8009a7c:	40000c00 	.word	0x40000c00
 8009a80:	40013400 	.word	0x40013400
 8009a84:	40014000 	.word	0x40014000
 8009a88:	40015000 	.word	0x40015000
 8009a8c:	00010007 	.word	0x00010007

08009a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d001      	beq.n	8009aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e054      	b.n	8009b52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a26      	ldr	r2, [pc, #152]	@ (8009b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d022      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad2:	d01d      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a22      	ldr	r2, [pc, #136]	@ (8009b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d018      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a21      	ldr	r2, [pc, #132]	@ (8009b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d013      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1f      	ldr	r2, [pc, #124]	@ (8009b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00e      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b70 <HAL_TIM_Base_Start_IT+0xe0>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d009      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1c      	ldr	r2, [pc, #112]	@ (8009b74 <HAL_TIM_Base_Start_IT+0xe4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d004      	beq.n	8009b10 <HAL_TIM_Base_Start_IT+0x80>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d115      	bne.n	8009b3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689a      	ldr	r2, [r3, #8]
 8009b16:	4b19      	ldr	r3, [pc, #100]	@ (8009b7c <HAL_TIM_Base_Start_IT+0xec>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b06      	cmp	r3, #6
 8009b20:	d015      	beq.n	8009b4e <HAL_TIM_Base_Start_IT+0xbe>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b28:	d011      	beq.n	8009b4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3a:	e008      	b.n	8009b4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0201 	orr.w	r2, r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e000      	b.n	8009b50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	40012c00 	.word	0x40012c00
 8009b64:	40000400 	.word	0x40000400
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	40000c00 	.word	0x40000c00
 8009b70:	40013400 	.word	0x40013400
 8009b74:	40014000 	.word	0x40014000
 8009b78:	40015000 	.word	0x40015000
 8009b7c:	00010007 	.word	0x00010007

08009b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e049      	b.n	8009c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7f8 fbd0 	bl	800234c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f000 fbde 	bl	800a380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <HAL_TIM_PWM_Start+0x24>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	e03c      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d109      	bne.n	8009c6e <HAL_TIM_PWM_Start+0x3e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	bf14      	ite	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	2300      	moveq	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	e02f      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d109      	bne.n	8009c88 <HAL_TIM_PWM_Start+0x58>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	bf14      	ite	ne
 8009c80:	2301      	movne	r3, #1
 8009c82:	2300      	moveq	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	e022      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b0c      	cmp	r3, #12
 8009c8c:	d109      	bne.n	8009ca2 <HAL_TIM_PWM_Start+0x72>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	bf14      	ite	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	2300      	moveq	r3, #0
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	e015      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b10      	cmp	r3, #16
 8009ca6:	d109      	bne.n	8009cbc <HAL_TIM_PWM_Start+0x8c>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	bf14      	ite	ne
 8009cb4:	2301      	movne	r3, #1
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	e008      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	bf14      	ite	ne
 8009cc8:	2301      	movne	r3, #1
 8009cca:	2300      	moveq	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e0a6      	b.n	8009e24 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <HAL_TIM_PWM_Start+0xb6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ce4:	e023      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d104      	bne.n	8009cf6 <HAL_TIM_PWM_Start+0xc6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cf4:	e01b      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d104      	bne.n	8009d06 <HAL_TIM_PWM_Start+0xd6>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d04:	e013      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b0c      	cmp	r3, #12
 8009d0a:	d104      	bne.n	8009d16 <HAL_TIM_PWM_Start+0xe6>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d14:	e00b      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b10      	cmp	r3, #16
 8009d1a:	d104      	bne.n	8009d26 <HAL_TIM_PWM_Start+0xf6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d24:	e003      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2201      	movs	r2, #1
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 ff00 	bl	800ab3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a3a      	ldr	r2, [pc, #232]	@ (8009e2c <HAL_TIM_PWM_Start+0x1fc>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d018      	beq.n	8009d78 <HAL_TIM_PWM_Start+0x148>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a39      	ldr	r2, [pc, #228]	@ (8009e30 <HAL_TIM_PWM_Start+0x200>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <HAL_TIM_PWM_Start+0x148>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a37      	ldr	r2, [pc, #220]	@ (8009e34 <HAL_TIM_PWM_Start+0x204>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00e      	beq.n	8009d78 <HAL_TIM_PWM_Start+0x148>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a36      	ldr	r2, [pc, #216]	@ (8009e38 <HAL_TIM_PWM_Start+0x208>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d009      	beq.n	8009d78 <HAL_TIM_PWM_Start+0x148>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a34      	ldr	r2, [pc, #208]	@ (8009e3c <HAL_TIM_PWM_Start+0x20c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d004      	beq.n	8009d78 <HAL_TIM_PWM_Start+0x148>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a33      	ldr	r2, [pc, #204]	@ (8009e40 <HAL_TIM_PWM_Start+0x210>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d101      	bne.n	8009d7c <HAL_TIM_PWM_Start+0x14c>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e000      	b.n	8009d7e <HAL_TIM_PWM_Start+0x14e>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a25      	ldr	r2, [pc, #148]	@ (8009e2c <HAL_TIM_PWM_Start+0x1fc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d022      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da4:	d01d      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a26      	ldr	r2, [pc, #152]	@ (8009e44 <HAL_TIM_PWM_Start+0x214>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d018      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a24      	ldr	r2, [pc, #144]	@ (8009e48 <HAL_TIM_PWM_Start+0x218>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d013      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a23      	ldr	r2, [pc, #140]	@ (8009e4c <HAL_TIM_PWM_Start+0x21c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00e      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a19      	ldr	r2, [pc, #100]	@ (8009e30 <HAL_TIM_PWM_Start+0x200>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d009      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a18      	ldr	r2, [pc, #96]	@ (8009e34 <HAL_TIM_PWM_Start+0x204>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d004      	beq.n	8009de2 <HAL_TIM_PWM_Start+0x1b2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a18      	ldr	r2, [pc, #96]	@ (8009e40 <HAL_TIM_PWM_Start+0x210>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d115      	bne.n	8009e0e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	4b19      	ldr	r3, [pc, #100]	@ (8009e50 <HAL_TIM_PWM_Start+0x220>)
 8009dea:	4013      	ands	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b06      	cmp	r3, #6
 8009df2:	d015      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1f0>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dfa:	d011      	beq.n	8009e20 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0c:	e008      	b.n	8009e20 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0201 	orr.w	r2, r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	e000      	b.n	8009e22 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	40012c00 	.word	0x40012c00
 8009e30:	40013400 	.word	0x40013400
 8009e34:	40014000 	.word	0x40014000
 8009e38:	40014400 	.word	0x40014400
 8009e3c:	40014800 	.word	0x40014800
 8009e40:	40015000 	.word	0x40015000
 8009e44:	40000400 	.word	0x40000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	40000c00 	.word	0x40000c00
 8009e50:	00010007 	.word	0x00010007

08009e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d020      	beq.n	8009eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01b      	beq.n	8009eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0202 	mvn.w	r2, #2
 8009e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa50 	bl	800a344 <HAL_TIM_IC_CaptureCallback>
 8009ea4:	e005      	b.n	8009eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa42 	bl	800a330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fa53 	bl	800a358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d020      	beq.n	8009f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01b      	beq.n	8009f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f06f 0204 	mvn.w	r2, #4
 8009ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa2a 	bl	800a344 <HAL_TIM_IC_CaptureCallback>
 8009ef0:	e005      	b.n	8009efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa1c 	bl	800a330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa2d 	bl	800a358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d020      	beq.n	8009f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f003 0308 	and.w	r3, r3, #8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01b      	beq.n	8009f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f06f 0208 	mvn.w	r2, #8
 8009f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2204      	movs	r2, #4
 8009f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fa04 	bl	800a344 <HAL_TIM_IC_CaptureCallback>
 8009f3c:	e005      	b.n	8009f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f9f6 	bl	800a330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa07 	bl	800a358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f003 0310 	and.w	r3, r3, #16
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d020      	beq.n	8009f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01b      	beq.n	8009f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0210 	mvn.w	r2, #16
 8009f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2208      	movs	r2, #8
 8009f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9de 	bl	800a344 <HAL_TIM_IC_CaptureCallback>
 8009f88:	e005      	b.n	8009f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9d0 	bl	800a330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f9e1 	bl	800a358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00c      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d007      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0201 	mvn.w	r2, #1
 8009fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f9ae 	bl	800a31c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00c      	beq.n	8009fee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d007      	beq.n	8009fee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 ff01 	bl	800adf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00c      	beq.n	800a012 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fef9 	bl	800ae04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00c      	beq.n	800a036 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f99b 	bl	800a36c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00c      	beq.n	800a05a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f06f 0220 	mvn.w	r2, #32
 800a052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fec1 	bl	800addc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fecd 	bl	800ae18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00c      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fec5 	bl	800ae2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00c      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 febd 	bl	800ae40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00c      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 feb5 	bl	800ae54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a10e:	2302      	movs	r3, #2
 800a110:	e0ff      	b.n	800a312 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b14      	cmp	r3, #20
 800a11e:	f200 80f0 	bhi.w	800a302 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a122:	a201      	add	r2, pc, #4	@ (adr r2, 800a128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a303 	.word	0x0800a303
 800a130:	0800a303 	.word	0x0800a303
 800a134:	0800a303 	.word	0x0800a303
 800a138:	0800a1bd 	.word	0x0800a1bd
 800a13c:	0800a303 	.word	0x0800a303
 800a140:	0800a303 	.word	0x0800a303
 800a144:	0800a303 	.word	0x0800a303
 800a148:	0800a1ff 	.word	0x0800a1ff
 800a14c:	0800a303 	.word	0x0800a303
 800a150:	0800a303 	.word	0x0800a303
 800a154:	0800a303 	.word	0x0800a303
 800a158:	0800a23f 	.word	0x0800a23f
 800a15c:	0800a303 	.word	0x0800a303
 800a160:	0800a303 	.word	0x0800a303
 800a164:	0800a303 	.word	0x0800a303
 800a168:	0800a281 	.word	0x0800a281
 800a16c:	0800a303 	.word	0x0800a303
 800a170:	0800a303 	.word	0x0800a303
 800a174:	0800a303 	.word	0x0800a303
 800a178:	0800a2c1 	.word	0x0800a2c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f9b0 	bl	800a4e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0208 	orr.w	r2, r2, #8
 800a196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0204 	bic.w	r2, r2, #4
 800a1a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6999      	ldr	r1, [r3, #24]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	619a      	str	r2, [r3, #24]
      break;
 800a1ba:	e0a5      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68b9      	ldr	r1, [r7, #8]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 fa2a 	bl	800a61c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6999      	ldr	r1, [r3, #24]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	021a      	lsls	r2, r3, #8
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	619a      	str	r2, [r3, #24]
      break;
 800a1fc:	e084      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fa9d 	bl	800a744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69da      	ldr	r2, [r3, #28]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0208 	orr.w	r2, r2, #8
 800a218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0204 	bic.w	r2, r2, #4
 800a228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69d9      	ldr	r1, [r3, #28]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	61da      	str	r2, [r3, #28]
      break;
 800a23c:	e064      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fb0f 	bl	800a868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69da      	ldr	r2, [r3, #28]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69d9      	ldr	r1, [r3, #28]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	021a      	lsls	r2, r3, #8
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	61da      	str	r2, [r3, #28]
      break;
 800a27e:	e043      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fb82 	bl	800a990 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0208 	orr.w	r2, r2, #8
 800a29a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0204 	bic.w	r2, r2, #4
 800a2aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	691a      	ldr	r2, [r3, #16]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2be:	e023      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fbcc 	bl	800aa64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	021a      	lsls	r2, r3, #8
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a300:	e002      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	75fb      	strb	r3, [r7, #23]
      break;
 800a306:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop

0800a31c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a4c      	ldr	r2, [pc, #304]	@ (800a4c4 <TIM_Base_SetConfig+0x144>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d017      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a39e:	d013      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a49      	ldr	r2, [pc, #292]	@ (800a4c8 <TIM_Base_SetConfig+0x148>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00f      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a48      	ldr	r2, [pc, #288]	@ (800a4cc <TIM_Base_SetConfig+0x14c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00b      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a47      	ldr	r2, [pc, #284]	@ (800a4d0 <TIM_Base_SetConfig+0x150>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d007      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a46      	ldr	r2, [pc, #280]	@ (800a4d4 <TIM_Base_SetConfig+0x154>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d003      	beq.n	800a3c8 <TIM_Base_SetConfig+0x48>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a45      	ldr	r2, [pc, #276]	@ (800a4d8 <TIM_Base_SetConfig+0x158>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d108      	bne.n	800a3da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a39      	ldr	r2, [pc, #228]	@ (800a4c4 <TIM_Base_SetConfig+0x144>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d023      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3e8:	d01f      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a36      	ldr	r2, [pc, #216]	@ (800a4c8 <TIM_Base_SetConfig+0x148>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d01b      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a35      	ldr	r2, [pc, #212]	@ (800a4cc <TIM_Base_SetConfig+0x14c>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d017      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a34      	ldr	r2, [pc, #208]	@ (800a4d0 <TIM_Base_SetConfig+0x150>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d013      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a33      	ldr	r2, [pc, #204]	@ (800a4d4 <TIM_Base_SetConfig+0x154>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00f      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a33      	ldr	r2, [pc, #204]	@ (800a4dc <TIM_Base_SetConfig+0x15c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00b      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a32      	ldr	r2, [pc, #200]	@ (800a4e0 <TIM_Base_SetConfig+0x160>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d007      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a31      	ldr	r2, [pc, #196]	@ (800a4e4 <TIM_Base_SetConfig+0x164>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d003      	beq.n	800a42a <TIM_Base_SetConfig+0xaa>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a2c      	ldr	r2, [pc, #176]	@ (800a4d8 <TIM_Base_SetConfig+0x158>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d108      	bne.n	800a43c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4313      	orrs	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a18      	ldr	r2, [pc, #96]	@ (800a4c4 <TIM_Base_SetConfig+0x144>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d013      	beq.n	800a490 <TIM_Base_SetConfig+0x110>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d4 <TIM_Base_SetConfig+0x154>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00f      	beq.n	800a490 <TIM_Base_SetConfig+0x110>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a1a      	ldr	r2, [pc, #104]	@ (800a4dc <TIM_Base_SetConfig+0x15c>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d00b      	beq.n	800a490 <TIM_Base_SetConfig+0x110>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a19      	ldr	r2, [pc, #100]	@ (800a4e0 <TIM_Base_SetConfig+0x160>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d007      	beq.n	800a490 <TIM_Base_SetConfig+0x110>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a18      	ldr	r2, [pc, #96]	@ (800a4e4 <TIM_Base_SetConfig+0x164>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d003      	beq.n	800a490 <TIM_Base_SetConfig+0x110>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a13      	ldr	r2, [pc, #76]	@ (800a4d8 <TIM_Base_SetConfig+0x158>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d103      	bne.n	800a498 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d105      	bne.n	800a4b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f023 0201 	bic.w	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	611a      	str	r2, [r3, #16]
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	40000800 	.word	0x40000800
 800a4d0:	40000c00 	.word	0x40000c00
 800a4d4:	40013400 	.word	0x40013400
 800a4d8:	40015000 	.word	0x40015000
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	40014400 	.word	0x40014400
 800a4e4:	40014800 	.word	0x40014800

0800a4e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	f023 0201 	bic.w	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 0302 	bic.w	r3, r3, #2
 800a534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a30      	ldr	r2, [pc, #192]	@ (800a604 <TIM_OC1_SetConfig+0x11c>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d013      	beq.n	800a570 <TIM_OC1_SetConfig+0x88>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a2f      	ldr	r2, [pc, #188]	@ (800a608 <TIM_OC1_SetConfig+0x120>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00f      	beq.n	800a570 <TIM_OC1_SetConfig+0x88>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a2e      	ldr	r2, [pc, #184]	@ (800a60c <TIM_OC1_SetConfig+0x124>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00b      	beq.n	800a570 <TIM_OC1_SetConfig+0x88>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a2d      	ldr	r2, [pc, #180]	@ (800a610 <TIM_OC1_SetConfig+0x128>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d007      	beq.n	800a570 <TIM_OC1_SetConfig+0x88>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a2c      	ldr	r2, [pc, #176]	@ (800a614 <TIM_OC1_SetConfig+0x12c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d003      	beq.n	800a570 <TIM_OC1_SetConfig+0x88>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a2b      	ldr	r2, [pc, #172]	@ (800a618 <TIM_OC1_SetConfig+0x130>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d10c      	bne.n	800a58a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f023 0308 	bic.w	r3, r3, #8
 800a576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f023 0304 	bic.w	r3, r3, #4
 800a588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a1d      	ldr	r2, [pc, #116]	@ (800a604 <TIM_OC1_SetConfig+0x11c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d013      	beq.n	800a5ba <TIM_OC1_SetConfig+0xd2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a1c      	ldr	r2, [pc, #112]	@ (800a608 <TIM_OC1_SetConfig+0x120>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d00f      	beq.n	800a5ba <TIM_OC1_SetConfig+0xd2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a1b      	ldr	r2, [pc, #108]	@ (800a60c <TIM_OC1_SetConfig+0x124>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d00b      	beq.n	800a5ba <TIM_OC1_SetConfig+0xd2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a1a      	ldr	r2, [pc, #104]	@ (800a610 <TIM_OC1_SetConfig+0x128>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d007      	beq.n	800a5ba <TIM_OC1_SetConfig+0xd2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a19      	ldr	r2, [pc, #100]	@ (800a614 <TIM_OC1_SetConfig+0x12c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d003      	beq.n	800a5ba <TIM_OC1_SetConfig+0xd2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a18      	ldr	r2, [pc, #96]	@ (800a618 <TIM_OC1_SetConfig+0x130>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d111      	bne.n	800a5de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	621a      	str	r2, [r3, #32]
}
 800a5f8:	bf00      	nop
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	40012c00 	.word	0x40012c00
 800a608:	40013400 	.word	0x40013400
 800a60c:	40014000 	.word	0x40014000
 800a610:	40014400 	.word	0x40014400
 800a614:	40014800 	.word	0x40014800
 800a618:	40015000 	.word	0x40015000

0800a61c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	f023 0210 	bic.w	r2, r3, #16
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a64a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	021b      	lsls	r3, r3, #8
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4313      	orrs	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f023 0320 	bic.w	r3, r3, #32
 800a66a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a2c      	ldr	r2, [pc, #176]	@ (800a72c <TIM_OC2_SetConfig+0x110>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d007      	beq.n	800a690 <TIM_OC2_SetConfig+0x74>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a2b      	ldr	r2, [pc, #172]	@ (800a730 <TIM_OC2_SetConfig+0x114>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d003      	beq.n	800a690 <TIM_OC2_SetConfig+0x74>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a2a      	ldr	r2, [pc, #168]	@ (800a734 <TIM_OC2_SetConfig+0x118>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d10d      	bne.n	800a6ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	011b      	lsls	r3, r3, #4
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a72c <TIM_OC2_SetConfig+0x110>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d013      	beq.n	800a6dc <TIM_OC2_SetConfig+0xc0>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a1e      	ldr	r2, [pc, #120]	@ (800a730 <TIM_OC2_SetConfig+0x114>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d00f      	beq.n	800a6dc <TIM_OC2_SetConfig+0xc0>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a1e      	ldr	r2, [pc, #120]	@ (800a738 <TIM_OC2_SetConfig+0x11c>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d00b      	beq.n	800a6dc <TIM_OC2_SetConfig+0xc0>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a1d      	ldr	r2, [pc, #116]	@ (800a73c <TIM_OC2_SetConfig+0x120>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d007      	beq.n	800a6dc <TIM_OC2_SetConfig+0xc0>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a1c      	ldr	r2, [pc, #112]	@ (800a740 <TIM_OC2_SetConfig+0x124>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <TIM_OC2_SetConfig+0xc0>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a17      	ldr	r2, [pc, #92]	@ (800a734 <TIM_OC2_SetConfig+0x118>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d113      	bne.n	800a704 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	4313      	orrs	r3, r2
 800a702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	621a      	str	r2, [r3, #32]
}
 800a71e:	bf00      	nop
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40012c00 	.word	0x40012c00
 800a730:	40013400 	.word	0x40013400
 800a734:	40015000 	.word	0x40015000
 800a738:	40014000 	.word	0x40014000
 800a73c:	40014400 	.word	0x40014400
 800a740:	40014800 	.word	0x40014800

0800a744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	021b      	lsls	r3, r3, #8
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a2b      	ldr	r2, [pc, #172]	@ (800a850 <TIM_OC3_SetConfig+0x10c>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d007      	beq.n	800a7b6 <TIM_OC3_SetConfig+0x72>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a854 <TIM_OC3_SetConfig+0x110>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d003      	beq.n	800a7b6 <TIM_OC3_SetConfig+0x72>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a29      	ldr	r2, [pc, #164]	@ (800a858 <TIM_OC3_SetConfig+0x114>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d10d      	bne.n	800a7d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	021b      	lsls	r3, r3, #8
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1e      	ldr	r2, [pc, #120]	@ (800a850 <TIM_OC3_SetConfig+0x10c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d013      	beq.n	800a802 <TIM_OC3_SetConfig+0xbe>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1d      	ldr	r2, [pc, #116]	@ (800a854 <TIM_OC3_SetConfig+0x110>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00f      	beq.n	800a802 <TIM_OC3_SetConfig+0xbe>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <TIM_OC3_SetConfig+0x118>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00b      	beq.n	800a802 <TIM_OC3_SetConfig+0xbe>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a860 <TIM_OC3_SetConfig+0x11c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d007      	beq.n	800a802 <TIM_OC3_SetConfig+0xbe>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a864 <TIM_OC3_SetConfig+0x120>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d003      	beq.n	800a802 <TIM_OC3_SetConfig+0xbe>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a16      	ldr	r2, [pc, #88]	@ (800a858 <TIM_OC3_SetConfig+0x114>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d113      	bne.n	800a82a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	011b      	lsls	r3, r3, #4
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	621a      	str	r2, [r3, #32]
}
 800a844:	bf00      	nop
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	40012c00 	.word	0x40012c00
 800a854:	40013400 	.word	0x40013400
 800a858:	40015000 	.word	0x40015000
 800a85c:	40014000 	.word	0x40014000
 800a860:	40014400 	.word	0x40014400
 800a864:	40014800 	.word	0x40014800

0800a868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	031b      	lsls	r3, r3, #12
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a978 <TIM_OC4_SetConfig+0x110>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d007      	beq.n	800a8dc <TIM_OC4_SetConfig+0x74>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a2b      	ldr	r2, [pc, #172]	@ (800a97c <TIM_OC4_SetConfig+0x114>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d003      	beq.n	800a8dc <TIM_OC4_SetConfig+0x74>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a980 <TIM_OC4_SetConfig+0x118>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d10d      	bne.n	800a8f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	031b      	lsls	r3, r3, #12
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a978 <TIM_OC4_SetConfig+0x110>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d013      	beq.n	800a928 <TIM_OC4_SetConfig+0xc0>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a1e      	ldr	r2, [pc, #120]	@ (800a97c <TIM_OC4_SetConfig+0x114>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00f      	beq.n	800a928 <TIM_OC4_SetConfig+0xc0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a1e      	ldr	r2, [pc, #120]	@ (800a984 <TIM_OC4_SetConfig+0x11c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00b      	beq.n	800a928 <TIM_OC4_SetConfig+0xc0>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1d      	ldr	r2, [pc, #116]	@ (800a988 <TIM_OC4_SetConfig+0x120>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d007      	beq.n	800a928 <TIM_OC4_SetConfig+0xc0>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1c      	ldr	r2, [pc, #112]	@ (800a98c <TIM_OC4_SetConfig+0x124>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_OC4_SetConfig+0xc0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <TIM_OC4_SetConfig+0x118>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d113      	bne.n	800a950 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a92e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a936:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	019b      	lsls	r3, r3, #6
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	019b      	lsls	r3, r3, #6
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	621a      	str	r2, [r3, #32]
}
 800a96a:	bf00      	nop
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40012c00 	.word	0x40012c00
 800a97c:	40013400 	.word	0x40013400
 800a980:	40015000 	.word	0x40015000
 800a984:	40014000 	.word	0x40014000
 800a988:	40014400 	.word	0x40014400
 800a98c:	40014800 	.word	0x40014800

0800a990 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	041b      	lsls	r3, r3, #16
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a19      	ldr	r2, [pc, #100]	@ (800aa4c <TIM_OC5_SetConfig+0xbc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d013      	beq.n	800aa12 <TIM_OC5_SetConfig+0x82>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a18      	ldr	r2, [pc, #96]	@ (800aa50 <TIM_OC5_SetConfig+0xc0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_OC5_SetConfig+0x82>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a17      	ldr	r2, [pc, #92]	@ (800aa54 <TIM_OC5_SetConfig+0xc4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_OC5_SetConfig+0x82>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a16      	ldr	r2, [pc, #88]	@ (800aa58 <TIM_OC5_SetConfig+0xc8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_OC5_SetConfig+0x82>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a15      	ldr	r2, [pc, #84]	@ (800aa5c <TIM_OC5_SetConfig+0xcc>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_OC5_SetConfig+0x82>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a14      	ldr	r2, [pc, #80]	@ (800aa60 <TIM_OC5_SetConfig+0xd0>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d109      	bne.n	800aa26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	021b      	lsls	r3, r3, #8
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	621a      	str	r2, [r3, #32]
}
 800aa40:	bf00      	nop
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	40012c00 	.word	0x40012c00
 800aa50:	40013400 	.word	0x40013400
 800aa54:	40014000 	.word	0x40014000
 800aa58:	40014400 	.word	0x40014400
 800aa5c:	40014800 	.word	0x40014800
 800aa60:	40015000 	.word	0x40015000

0800aa64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	051b      	lsls	r3, r3, #20
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a1a      	ldr	r2, [pc, #104]	@ (800ab24 <TIM_OC6_SetConfig+0xc0>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d013      	beq.n	800aae8 <TIM_OC6_SetConfig+0x84>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a19      	ldr	r2, [pc, #100]	@ (800ab28 <TIM_OC6_SetConfig+0xc4>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d00f      	beq.n	800aae8 <TIM_OC6_SetConfig+0x84>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a18      	ldr	r2, [pc, #96]	@ (800ab2c <TIM_OC6_SetConfig+0xc8>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00b      	beq.n	800aae8 <TIM_OC6_SetConfig+0x84>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a17      	ldr	r2, [pc, #92]	@ (800ab30 <TIM_OC6_SetConfig+0xcc>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d007      	beq.n	800aae8 <TIM_OC6_SetConfig+0x84>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a16      	ldr	r2, [pc, #88]	@ (800ab34 <TIM_OC6_SetConfig+0xd0>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d003      	beq.n	800aae8 <TIM_OC6_SetConfig+0x84>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a15      	ldr	r2, [pc, #84]	@ (800ab38 <TIM_OC6_SetConfig+0xd4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d109      	bne.n	800aafc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aaee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	029b      	lsls	r3, r3, #10
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40012c00 	.word	0x40012c00
 800ab28:	40013400 	.word	0x40013400
 800ab2c:	40014000 	.word	0x40014000
 800ab30:	40014400 	.word	0x40014400
 800ab34:	40014800 	.word	0x40014800
 800ab38:	40015000 	.word	0x40015000

0800ab3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f003 031f 	and.w	r3, r3, #31
 800ab4e:	2201      	movs	r2, #1
 800ab50:	fa02 f303 	lsl.w	r3, r2, r3
 800ab54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6a1a      	ldr	r2, [r3, #32]
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	401a      	ands	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6a1a      	ldr	r2, [r3, #32]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f003 031f 	and.w	r3, r3, #31
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	fa01 f303 	lsl.w	r3, r1, r3
 800ab74:	431a      	orrs	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	621a      	str	r2, [r3, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
	...

0800ab88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e074      	b.n	800ac8a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a34      	ldr	r2, [pc, #208]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d009      	beq.n	800abde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a33      	ldr	r2, [pc, #204]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d004      	beq.n	800abde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a31      	ldr	r2, [pc, #196]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d108      	bne.n	800abf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abe4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800abf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a21      	ldr	r2, [pc, #132]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d022      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac20:	d01d      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d018      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a1d      	ldr	r2, [pc, #116]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d013      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a1c      	ldr	r2, [pc, #112]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00e      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a15      	ldr	r2, [pc, #84]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d009      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d004      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a11      	ldr	r2, [pc, #68]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d10c      	bne.n	800ac78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	40012c00 	.word	0x40012c00
 800ac9c:	40013400 	.word	0x40013400
 800aca0:	40015000 	.word	0x40015000
 800aca4:	40000400 	.word	0x40000400
 800aca8:	40000800 	.word	0x40000800
 800acac:	40000c00 	.word	0x40000c00
 800acb0:	40014000 	.word	0x40014000

0800acb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800accc:	2302      	movs	r3, #2
 800acce:	e078      	b.n	800adc2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	041b      	lsls	r3, r3, #16
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	@ (800add0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d009      	beq.n	800ad76 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a1b      	ldr	r2, [pc, #108]	@ (800add4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d004      	beq.n	800ad76 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a19      	ldr	r2, [pc, #100]	@ (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d11c      	bne.n	800adb0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	051b      	lsls	r3, r3, #20
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adac:	4313      	orrs	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40012c00 	.word	0x40012c00
 800add4:	40013400 	.word	0x40013400
 800add8:	40015000 	.word	0x40015000

0800addc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e042      	b.n	800af00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7f7 fb09 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2224      	movs	r2, #36	@ 0x24
 800ae96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 0201 	bic.w	r2, r2, #1
 800aea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 ff06 	bl	800bcc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fc07 	bl	800b6cc <UART_SetConfig>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d101      	bne.n	800aec8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e01b      	b.n	800af00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	689a      	ldr	r2, [r3, #8]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0201 	orr.w	r2, r2, #1
 800aef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 ff85 	bl	800be08 <UART_CheckIdleState>
 800aefe:	4603      	mov	r3, r0
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	@ 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d167      	bne.n	800aff0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <HAL_UART_Transmit_DMA+0x24>
 800af26:	88fb      	ldrh	r3, [r7, #6]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e060      	b.n	800aff2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	88fa      	ldrh	r2, [r7, #6]
 800af3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	88fa      	ldrh	r2, [r7, #6]
 800af42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2221      	movs	r2, #33	@ 0x21
 800af52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d028      	beq.n	800afb0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af62:	4a26      	ldr	r2, [pc, #152]	@ (800affc <HAL_UART_Transmit_DMA+0xf4>)
 800af64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af6a:	4a25      	ldr	r2, [pc, #148]	@ (800b000 <HAL_UART_Transmit_DMA+0xf8>)
 800af6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af72:	4a24      	ldr	r2, [pc, #144]	@ (800b004 <HAL_UART_Transmit_DMA+0xfc>)
 800af74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7a:	2200      	movs	r2, #0
 800af7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af86:	4619      	mov	r1, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3328      	adds	r3, #40	@ 0x28
 800af8e:	461a      	mov	r2, r3
 800af90:	88fb      	ldrh	r3, [r7, #6]
 800af92:	f7fa fa7f 	bl	8005494 <HAL_DMA_Start_IT>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2210      	movs	r2, #16
 800afa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e020      	b.n	800aff2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2240      	movs	r2, #64	@ 0x40
 800afb6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3308      	adds	r3, #8
 800afbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	e853 3f00 	ldrex	r3, [r3]
 800afc6:	613b      	str	r3, [r7, #16]
   return(result);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afce:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3308      	adds	r3, #8
 800afd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afd8:	623a      	str	r2, [r7, #32]
 800afda:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	69f9      	ldr	r1, [r7, #28]
 800afde:	6a3a      	ldr	r2, [r7, #32]
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e5      	bne.n	800afb8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	e000      	b.n	800aff2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aff0:	2302      	movs	r3, #2
  }
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3728      	adds	r7, #40	@ 0x28
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	0800c185 	.word	0x0800c185
 800b000:	0800c21f 	.word	0x0800c21f
 800b004:	0800c23b 	.word	0x0800c23b

0800b008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b0ba      	sub	sp, #232	@ 0xe8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b02e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b032:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b036:	4013      	ands	r3, r2
 800b038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b03c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11b      	bne.n	800b07c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d015      	beq.n	800b07c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d105      	bne.n	800b068 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d009      	beq.n	800b07c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 8300 	beq.w	800b672 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	4798      	blx	r3
      }
      return;
 800b07a:	e2fa      	b.n	800b672 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b07c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 8123 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b086:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b08a:	4b8d      	ldr	r3, [pc, #564]	@ (800b2c0 <HAL_UART_IRQHandler+0x2b8>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b092:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b096:	4b8b      	ldr	r3, [pc, #556]	@ (800b2c4 <HAL_UART_IRQHandler+0x2bc>)
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 8116 	beq.w	800b2cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d011      	beq.n	800b0d0 <HAL_UART_IRQHandler+0xc8>
 800b0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c6:	f043 0201 	orr.w	r2, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0d4:	f003 0302 	and.w	r3, r3, #2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d011      	beq.n	800b100 <HAL_UART_IRQHandler+0xf8>
 800b0dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0f6:	f043 0204 	orr.w	r2, r3, #4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d011      	beq.n	800b130 <HAL_UART_IRQHandler+0x128>
 800b10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2204      	movs	r2, #4
 800b11e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b126:	f043 0202 	orr.w	r2, r3, #2
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d017      	beq.n	800b16c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b140:	f003 0320 	and.w	r3, r3, #32
 800b144:	2b00      	cmp	r3, #0
 800b146:	d105      	bne.n	800b154 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b148:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b14c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2c0 <HAL_UART_IRQHandler+0x2b8>)
 800b14e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2208      	movs	r2, #8
 800b15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b162:	f043 0208 	orr.w	r2, r3, #8
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <HAL_UART_IRQHandler+0x196>
 800b178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b17c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00c      	beq.n	800b19e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b18c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b194:	f043 0220 	orr.w	r2, r3, #32
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8266 	beq.w	800b676 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d013      	beq.n	800b1de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d105      	bne.n	800b1ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f2:	2b40      	cmp	r3, #64	@ 0x40
 800b1f4:	d005      	beq.n	800b202 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b1fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d054      	beq.n	800b2ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 ff58 	bl	800c0b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b212:	2b40      	cmp	r3, #64	@ 0x40
 800b214:	d146      	bne.n	800b2a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b242:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b24e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1d9      	bne.n	800b216 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d017      	beq.n	800b29c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b272:	4a15      	ldr	r2, [pc, #84]	@ (800b2c8 <HAL_UART_IRQHandler+0x2c0>)
 800b274:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fa f9dd 	bl	800563c <HAL_DMA_Abort_IT>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d019      	beq.n	800b2bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b296:	4610      	mov	r0, r2
 800b298:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b29a:	e00f      	b.n	800b2bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f9ff 	bl	800b6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a2:	e00b      	b.n	800b2bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f9fb 	bl	800b6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2aa:	e007      	b.n	800b2bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f9f7 	bl	800b6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b2ba:	e1dc      	b.n	800b676 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2bc:	bf00      	nop
    return;
 800b2be:	e1da      	b.n	800b676 <HAL_UART_IRQHandler+0x66e>
 800b2c0:	10000001 	.word	0x10000001
 800b2c4:	04000120 	.word	0x04000120
 800b2c8:	0800c2bb 	.word	0x0800c2bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	f040 8170 	bne.w	800b5b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2da:	f003 0310 	and.w	r3, r3, #16
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 8169 	beq.w	800b5b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 8162 	beq.w	800b5b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b40      	cmp	r3, #64	@ 0x40
 800b306:	f040 80d8 	bne.w	800b4ba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80af 	beq.w	800b480 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b32c:	429a      	cmp	r2, r3
 800b32e:	f080 80a7 	bcs.w	800b480 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b338:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0320 	and.w	r3, r3, #32
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f040 8087 	bne.w	800b45e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b36c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b37a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b37e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1da      	bne.n	800b350 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3ac:	f023 0301 	bic.w	r3, r3, #1
 800b3b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e1      	bne.n	800b39a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b3fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e3      	bne.n	800b3d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b42a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b42c:	f023 0310 	bic.w	r3, r3, #16
 800b430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	461a      	mov	r2, r3
 800b43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b43e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b440:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b44c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e4      	bne.n	800b41c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fa f896 	bl	800558a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2202      	movs	r2, #2
 800b462:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b470:	b29b      	uxth	r3, r3
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	b29b      	uxth	r3, r3
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f91b 	bl	800b6b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b47e:	e0fc      	b.n	800b67a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b48a:	429a      	cmp	r2, r3
 800b48c:	f040 80f5 	bne.w	800b67a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0320 	and.w	r3, r3, #32
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	f040 80eb 	bne.w	800b67a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f8fe 	bl	800b6b4 <HAL_UARTEx_RxEventCallback>
      return;
 800b4b8:	e0df      	b.n	800b67a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80d1 	beq.w	800b67e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b4dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 80cc 	beq.w	800b67e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b508:	647b      	str	r3, [r7, #68]	@ 0x44
 800b50a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b50e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e4      	bne.n	800b4e6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3308      	adds	r3, #8
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	623b      	str	r3, [r7, #32]
   return(result);
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b532:	f023 0301 	bic.w	r3, r3, #1
 800b536:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b544:	633a      	str	r2, [r7, #48]	@ 0x30
 800b546:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b54a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e1      	bne.n	800b51c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2220      	movs	r2, #32
 800b55c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	e853 3f00 	ldrex	r3, [r3]
 800b578:	60fb      	str	r3, [r7, #12]
   return(result);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f023 0310 	bic.w	r3, r3, #16
 800b580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b58e:	61fb      	str	r3, [r7, #28]
 800b590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b592:	69b9      	ldr	r1, [r7, #24]
 800b594:	69fa      	ldr	r2, [r7, #28]
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	617b      	str	r3, [r7, #20]
   return(result);
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e4      	bne.n	800b56c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f880 	bl	800b6b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5b4:	e063      	b.n	800b67e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00e      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x5d8>
 800b5c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d008      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 feab 	bl	800c334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5de:	e051      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d014      	beq.n	800b616 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d105      	bne.n	800b604 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d008      	beq.n	800b616 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d03a      	beq.n	800b682 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
    }
    return;
 800b614:	e035      	b.n	800b682 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d009      	beq.n	800b636 <HAL_UART_IRQHandler+0x62e>
 800b622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fe55 	bl	800c2de <UART_EndTransmit_IT>
    return;
 800b634:	e026      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d009      	beq.n	800b656 <HAL_UART_IRQHandler+0x64e>
 800b642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b646:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fe84 	bl	800c35c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b654:	e016      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d010      	beq.n	800b684 <HAL_UART_IRQHandler+0x67c>
 800b662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b666:	2b00      	cmp	r3, #0
 800b668:	da0c      	bge.n	800b684 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fe6c 	bl	800c348 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b670:	e008      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
      return;
 800b672:	bf00      	nop
 800b674:	e006      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
    return;
 800b676:	bf00      	nop
 800b678:	e004      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
      return;
 800b67a:	bf00      	nop
 800b67c:	e002      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
      return;
 800b67e:	bf00      	nop
 800b680:	e000      	b.n	800b684 <HAL_UART_IRQHandler+0x67c>
    return;
 800b682:	bf00      	nop
  }
}
 800b684:	37e8      	adds	r7, #232	@ 0xe8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop

0800b68c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d0:	b08c      	sub	sp, #48	@ 0x30
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	689a      	ldr	r2, [r3, #8]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4baa      	ldr	r3, [pc, #680]	@ (800b9a4 <UART_SetConfig+0x2d8>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	6812      	ldr	r2, [r2, #0]
 800b702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b704:	430b      	orrs	r3, r1
 800b706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	430a      	orrs	r2, r1
 800b71c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a9f      	ldr	r2, [pc, #636]	@ (800b9a8 <UART_SetConfig+0x2dc>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d004      	beq.n	800b738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b734:	4313      	orrs	r3, r2
 800b736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b742:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	6812      	ldr	r2, [r2, #0]
 800b74a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	f023 010f 	bic.w	r1, r3, #15
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a90      	ldr	r2, [pc, #576]	@ (800b9ac <UART_SetConfig+0x2e0>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d125      	bne.n	800b7bc <UART_SetConfig+0xf0>
 800b770:	4b8f      	ldr	r3, [pc, #572]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d81a      	bhi.n	800b7b4 <UART_SetConfig+0xe8>
 800b77e:	a201      	add	r2, pc, #4	@ (adr r2, 800b784 <UART_SetConfig+0xb8>)
 800b780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b784:	0800b795 	.word	0x0800b795
 800b788:	0800b7a5 	.word	0x0800b7a5
 800b78c:	0800b79d 	.word	0x0800b79d
 800b790:	0800b7ad 	.word	0x0800b7ad
 800b794:	2301      	movs	r3, #1
 800b796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79a:	e116      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b79c:	2302      	movs	r3, #2
 800b79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a2:	e112      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7aa:	e10e      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b7ac:	2308      	movs	r3, #8
 800b7ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b2:	e10a      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b7b4:	2310      	movs	r3, #16
 800b7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ba:	e106      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a7c      	ldr	r2, [pc, #496]	@ (800b9b4 <UART_SetConfig+0x2e8>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d138      	bne.n	800b838 <UART_SetConfig+0x16c>
 800b7c6:	4b7a      	ldr	r3, [pc, #488]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7cc:	f003 030c 	and.w	r3, r3, #12
 800b7d0:	2b0c      	cmp	r3, #12
 800b7d2:	d82d      	bhi.n	800b830 <UART_SetConfig+0x164>
 800b7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <UART_SetConfig+0x110>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b811 	.word	0x0800b811
 800b7e0:	0800b831 	.word	0x0800b831
 800b7e4:	0800b831 	.word	0x0800b831
 800b7e8:	0800b831 	.word	0x0800b831
 800b7ec:	0800b821 	.word	0x0800b821
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b831 	.word	0x0800b831
 800b7f8:	0800b831 	.word	0x0800b831
 800b7fc:	0800b819 	.word	0x0800b819
 800b800:	0800b831 	.word	0x0800b831
 800b804:	0800b831 	.word	0x0800b831
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b829 	.word	0x0800b829
 800b810:	2300      	movs	r3, #0
 800b812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b816:	e0d8      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b818:	2302      	movs	r3, #2
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81e:	e0d4      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b820:	2304      	movs	r3, #4
 800b822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b826:	e0d0      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b828:	2308      	movs	r3, #8
 800b82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b82e:	e0cc      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b830:	2310      	movs	r3, #16
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b836:	e0c8      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a5e      	ldr	r2, [pc, #376]	@ (800b9b8 <UART_SetConfig+0x2ec>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d125      	bne.n	800b88e <UART_SetConfig+0x1c2>
 800b842:	4b5b      	ldr	r3, [pc, #364]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b848:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b84c:	2b30      	cmp	r3, #48	@ 0x30
 800b84e:	d016      	beq.n	800b87e <UART_SetConfig+0x1b2>
 800b850:	2b30      	cmp	r3, #48	@ 0x30
 800b852:	d818      	bhi.n	800b886 <UART_SetConfig+0x1ba>
 800b854:	2b20      	cmp	r3, #32
 800b856:	d00a      	beq.n	800b86e <UART_SetConfig+0x1a2>
 800b858:	2b20      	cmp	r3, #32
 800b85a:	d814      	bhi.n	800b886 <UART_SetConfig+0x1ba>
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <UART_SetConfig+0x19a>
 800b860:	2b10      	cmp	r3, #16
 800b862:	d008      	beq.n	800b876 <UART_SetConfig+0x1aa>
 800b864:	e00f      	b.n	800b886 <UART_SetConfig+0x1ba>
 800b866:	2300      	movs	r3, #0
 800b868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86c:	e0ad      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b86e:	2302      	movs	r3, #2
 800b870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b874:	e0a9      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b876:	2304      	movs	r3, #4
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b87c:	e0a5      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b87e:	2308      	movs	r3, #8
 800b880:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b884:	e0a1      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b886:	2310      	movs	r3, #16
 800b888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b88c:	e09d      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a4a      	ldr	r2, [pc, #296]	@ (800b9bc <UART_SetConfig+0x2f0>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d125      	bne.n	800b8e4 <UART_SetConfig+0x218>
 800b898:	4b45      	ldr	r3, [pc, #276]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b89e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b8a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8a4:	d016      	beq.n	800b8d4 <UART_SetConfig+0x208>
 800b8a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8a8:	d818      	bhi.n	800b8dc <UART_SetConfig+0x210>
 800b8aa:	2b80      	cmp	r3, #128	@ 0x80
 800b8ac:	d00a      	beq.n	800b8c4 <UART_SetConfig+0x1f8>
 800b8ae:	2b80      	cmp	r3, #128	@ 0x80
 800b8b0:	d814      	bhi.n	800b8dc <UART_SetConfig+0x210>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <UART_SetConfig+0x1f0>
 800b8b6:	2b40      	cmp	r3, #64	@ 0x40
 800b8b8:	d008      	beq.n	800b8cc <UART_SetConfig+0x200>
 800b8ba:	e00f      	b.n	800b8dc <UART_SetConfig+0x210>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e082      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e07e      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b8cc:	2304      	movs	r3, #4
 800b8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8d2:	e07a      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b8d4:	2308      	movs	r3, #8
 800b8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8da:	e076      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b8dc:	2310      	movs	r3, #16
 800b8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e2:	e072      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a35      	ldr	r2, [pc, #212]	@ (800b9c0 <UART_SetConfig+0x2f4>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d12a      	bne.n	800b944 <UART_SetConfig+0x278>
 800b8ee:	4b30      	ldr	r3, [pc, #192]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8fc:	d01a      	beq.n	800b934 <UART_SetConfig+0x268>
 800b8fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b902:	d81b      	bhi.n	800b93c <UART_SetConfig+0x270>
 800b904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b908:	d00c      	beq.n	800b924 <UART_SetConfig+0x258>
 800b90a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b90e:	d815      	bhi.n	800b93c <UART_SetConfig+0x270>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <UART_SetConfig+0x250>
 800b914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b918:	d008      	beq.n	800b92c <UART_SetConfig+0x260>
 800b91a:	e00f      	b.n	800b93c <UART_SetConfig+0x270>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e052      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b924:	2302      	movs	r3, #2
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e04e      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b92c:	2304      	movs	r3, #4
 800b92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b932:	e04a      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b934:	2308      	movs	r3, #8
 800b936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b93a:	e046      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b93c:	2310      	movs	r3, #16
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b942:	e042      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a17      	ldr	r2, [pc, #92]	@ (800b9a8 <UART_SetConfig+0x2dc>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d13a      	bne.n	800b9c4 <UART_SetConfig+0x2f8>
 800b94e:	4b18      	ldr	r3, [pc, #96]	@ (800b9b0 <UART_SetConfig+0x2e4>)
 800b950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b954:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b958:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b95c:	d01a      	beq.n	800b994 <UART_SetConfig+0x2c8>
 800b95e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b962:	d81b      	bhi.n	800b99c <UART_SetConfig+0x2d0>
 800b964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b968:	d00c      	beq.n	800b984 <UART_SetConfig+0x2b8>
 800b96a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b96e:	d815      	bhi.n	800b99c <UART_SetConfig+0x2d0>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <UART_SetConfig+0x2b0>
 800b974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b978:	d008      	beq.n	800b98c <UART_SetConfig+0x2c0>
 800b97a:	e00f      	b.n	800b99c <UART_SetConfig+0x2d0>
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b982:	e022      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b984:	2302      	movs	r3, #2
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98a:	e01e      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b98c:	2304      	movs	r3, #4
 800b98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b992:	e01a      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b994:	2308      	movs	r3, #8
 800b996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99a:	e016      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b99c:	2310      	movs	r3, #16
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a2:	e012      	b.n	800b9ca <UART_SetConfig+0x2fe>
 800b9a4:	cfff69f3 	.word	0xcfff69f3
 800b9a8:	40008000 	.word	0x40008000
 800b9ac:	40013800 	.word	0x40013800
 800b9b0:	40021000 	.word	0x40021000
 800b9b4:	40004400 	.word	0x40004400
 800b9b8:	40004800 	.word	0x40004800
 800b9bc:	40004c00 	.word	0x40004c00
 800b9c0:	40005000 	.word	0x40005000
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4aae      	ldr	r2, [pc, #696]	@ (800bc88 <UART_SetConfig+0x5bc>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	f040 8097 	bne.w	800bb04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9da:	2b08      	cmp	r3, #8
 800b9dc:	d823      	bhi.n	800ba26 <UART_SetConfig+0x35a>
 800b9de:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e4 <UART_SetConfig+0x318>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800ba09 	.word	0x0800ba09
 800b9e8:	0800ba27 	.word	0x0800ba27
 800b9ec:	0800ba11 	.word	0x0800ba11
 800b9f0:	0800ba27 	.word	0x0800ba27
 800b9f4:	0800ba17 	.word	0x0800ba17
 800b9f8:	0800ba27 	.word	0x0800ba27
 800b9fc:	0800ba27 	.word	0x0800ba27
 800ba00:	0800ba27 	.word	0x0800ba27
 800ba04:	0800ba1f 	.word	0x0800ba1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba08:	f7fd fcba 	bl	8009380 <HAL_RCC_GetPCLK1Freq>
 800ba0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba0e:	e010      	b.n	800ba32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba10:	4b9e      	ldr	r3, [pc, #632]	@ (800bc8c <UART_SetConfig+0x5c0>)
 800ba12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba14:	e00d      	b.n	800ba32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba16:	f7fd fc45 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 800ba1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba1c:	e009      	b.n	800ba32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba24:	e005      	b.n	800ba32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8130 	beq.w	800bc9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3e:	4a94      	ldr	r2, [pc, #592]	@ (800bc90 <UART_SetConfig+0x5c4>)
 800ba40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba44:	461a      	mov	r2, r3
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d305      	bcc.n	800ba6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba64:	69ba      	ldr	r2, [r7, #24]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d903      	bls.n	800ba72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba70:	e113      	b.n	800bc9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	2200      	movs	r2, #0
 800ba76:	60bb      	str	r3, [r7, #8]
 800ba78:	60fa      	str	r2, [r7, #12]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	4a84      	ldr	r2, [pc, #528]	@ (800bc90 <UART_SetConfig+0x5c4>)
 800ba80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2200      	movs	r2, #0
 800ba88:	603b      	str	r3, [r7, #0]
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba94:	f7f5 f896 	bl	8000bc4 <__aeabi_uldivmod>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f04f 0200 	mov.w	r2, #0
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	020b      	lsls	r3, r1, #8
 800baaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800baae:	0202      	lsls	r2, r0, #8
 800bab0:	6979      	ldr	r1, [r7, #20]
 800bab2:	6849      	ldr	r1, [r1, #4]
 800bab4:	0849      	lsrs	r1, r1, #1
 800bab6:	2000      	movs	r0, #0
 800bab8:	460c      	mov	r4, r1
 800baba:	4605      	mov	r5, r0
 800babc:	eb12 0804 	adds.w	r8, r2, r4
 800bac0:	eb43 0905 	adc.w	r9, r3, r5
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	469a      	mov	sl, r3
 800bacc:	4693      	mov	fp, r2
 800bace:	4652      	mov	r2, sl
 800bad0:	465b      	mov	r3, fp
 800bad2:	4640      	mov	r0, r8
 800bad4:	4649      	mov	r1, r9
 800bad6:	f7f5 f875 	bl	8000bc4 <__aeabi_uldivmod>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4613      	mov	r3, r2
 800bae0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bae8:	d308      	bcc.n	800bafc <UART_SetConfig+0x430>
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baf0:	d204      	bcs.n	800bafc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6a3a      	ldr	r2, [r7, #32]
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	e0ce      	b.n	800bc9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb02:	e0ca      	b.n	800bc9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb0c:	d166      	bne.n	800bbdc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bb0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb12:	2b08      	cmp	r3, #8
 800bb14:	d827      	bhi.n	800bb66 <UART_SetConfig+0x49a>
 800bb16:	a201      	add	r2, pc, #4	@ (adr r2, 800bb1c <UART_SetConfig+0x450>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb41 	.word	0x0800bb41
 800bb20:	0800bb49 	.word	0x0800bb49
 800bb24:	0800bb51 	.word	0x0800bb51
 800bb28:	0800bb67 	.word	0x0800bb67
 800bb2c:	0800bb57 	.word	0x0800bb57
 800bb30:	0800bb67 	.word	0x0800bb67
 800bb34:	0800bb67 	.word	0x0800bb67
 800bb38:	0800bb67 	.word	0x0800bb67
 800bb3c:	0800bb5f 	.word	0x0800bb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb40:	f7fd fc1e 	bl	8009380 <HAL_RCC_GetPCLK1Freq>
 800bb44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb46:	e014      	b.n	800bb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb48:	f7fd fc30 	bl	80093ac <HAL_RCC_GetPCLK2Freq>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb4e:	e010      	b.n	800bb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb50:	4b4e      	ldr	r3, [pc, #312]	@ (800bc8c <UART_SetConfig+0x5c0>)
 800bb52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb54:	e00d      	b.n	800bb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb56:	f7fd fba5 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 800bb5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb5c:	e009      	b.n	800bb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb64:	e005      	b.n	800bb72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 8090 	beq.w	800bc9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	4a44      	ldr	r2, [pc, #272]	@ (800bc90 <UART_SetConfig+0x5c4>)
 800bb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb8c:	005a      	lsls	r2, r3, #1
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	085b      	lsrs	r3, r3, #1
 800bb94:	441a      	add	r2, r3
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	2b0f      	cmp	r3, #15
 800bba4:	d916      	bls.n	800bbd4 <UART_SetConfig+0x508>
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbac:	d212      	bcs.n	800bbd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	f023 030f 	bic.w	r3, r3, #15
 800bbb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	8bfb      	ldrh	r3, [r7, #30]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	8bfa      	ldrh	r2, [r7, #30]
 800bbd0:	60da      	str	r2, [r3, #12]
 800bbd2:	e062      	b.n	800bc9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbda:	e05e      	b.n	800bc9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbe0:	2b08      	cmp	r3, #8
 800bbe2:	d828      	bhi.n	800bc36 <UART_SetConfig+0x56a>
 800bbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <UART_SetConfig+0x520>)
 800bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbea:	bf00      	nop
 800bbec:	0800bc11 	.word	0x0800bc11
 800bbf0:	0800bc19 	.word	0x0800bc19
 800bbf4:	0800bc21 	.word	0x0800bc21
 800bbf8:	0800bc37 	.word	0x0800bc37
 800bbfc:	0800bc27 	.word	0x0800bc27
 800bc00:	0800bc37 	.word	0x0800bc37
 800bc04:	0800bc37 	.word	0x0800bc37
 800bc08:	0800bc37 	.word	0x0800bc37
 800bc0c:	0800bc2f 	.word	0x0800bc2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc10:	f7fd fbb6 	bl	8009380 <HAL_RCC_GetPCLK1Freq>
 800bc14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc16:	e014      	b.n	800bc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc18:	f7fd fbc8 	bl	80093ac <HAL_RCC_GetPCLK2Freq>
 800bc1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc1e:	e010      	b.n	800bc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc20:	4b1a      	ldr	r3, [pc, #104]	@ (800bc8c <UART_SetConfig+0x5c0>)
 800bc22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc24:	e00d      	b.n	800bc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc26:	f7fd fb3d 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 800bc2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc2c:	e009      	b.n	800bc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc34:	e005      	b.n	800bc42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bc36:	2300      	movs	r3, #0
 800bc38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc40:	bf00      	nop
    }

    if (pclk != 0U)
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d028      	beq.n	800bc9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4c:	4a10      	ldr	r2, [pc, #64]	@ (800bc90 <UART_SetConfig+0x5c4>)
 800bc4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc52:	461a      	mov	r2, r3
 800bc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc56:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	085b      	lsrs	r3, r3, #1
 800bc60:	441a      	add	r2, r3
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	2b0f      	cmp	r3, #15
 800bc70:	d910      	bls.n	800bc94 <UART_SetConfig+0x5c8>
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc78:	d20c      	bcs.n	800bc94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	60da      	str	r2, [r3, #12]
 800bc84:	e009      	b.n	800bc9a <UART_SetConfig+0x5ce>
 800bc86:	bf00      	nop
 800bc88:	40008000 	.word	0x40008000
 800bc8c:	00f42400 	.word	0x00f42400
 800bc90:	0800e6f8 	.word	0x0800e6f8
      }
      else
      {
        ret = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2200      	movs	r2, #0
 800bcae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3730      	adds	r7, #48	@ 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bcc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00a      	beq.n	800bd32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	430a      	orrs	r2, r1
 800bd52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	f003 0310 	and.w	r3, r3, #16
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	f003 0320 	and.w	r3, r3, #32
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d01a      	beq.n	800bdda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdc2:	d10a      	bne.n	800bdda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	605a      	str	r2, [r3, #4]
  }
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b098      	sub	sp, #96	@ 0x60
 800be0c:	af02      	add	r7, sp, #8
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be18:	f7f6 fda4 	bl	8002964 <HAL_GetTick>
 800be1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b08      	cmp	r3, #8
 800be2a:	d12f      	bne.n	800be8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be34:	2200      	movs	r2, #0
 800be36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f88e 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d022      	beq.n	800be8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4e:	e853 3f00 	ldrex	r3, [r3]
 800be52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be64:	647b      	str	r3, [r7, #68]	@ 0x44
 800be66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be6c:	e841 2300 	strex	r3, r2, [r1]
 800be70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e6      	bne.n	800be46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e063      	b.n	800bf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b04      	cmp	r3, #4
 800be98:	d149      	bne.n	800bf2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bea2:	2200      	movs	r2, #0
 800bea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f857 	bl	800bf5c <UART_WaitOnFlagUntilTimeout>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d03c      	beq.n	800bf2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	623b      	str	r3, [r7, #32]
   return(result);
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bed2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e6      	bne.n	800beb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f023 0301 	bic.w	r3, r3, #1
 800befc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3308      	adds	r3, #8
 800bf04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf06:	61fa      	str	r2, [r7, #28]
 800bf08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	69b9      	ldr	r1, [r7, #24]
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	617b      	str	r3, [r7, #20]
   return(result);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e5      	bne.n	800bee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e012      	b.n	800bf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3758      	adds	r7, #88	@ 0x58
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf6c:	e04f      	b.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d04b      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf76:	f7f6 fcf5 	bl	8002964 <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <UART_WaitOnFlagUntilTimeout+0x30>
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e04e      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d037      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b80      	cmp	r3, #128	@ 0x80
 800bfa2:	d034      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b40      	cmp	r3, #64	@ 0x40
 800bfa8:	d031      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	69db      	ldr	r3, [r3, #28]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d110      	bne.n	800bfda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f879 	bl	800c0b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2208      	movs	r2, #8
 800bfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e029      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfe8:	d111      	bne.n	800c00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f85f 	bl	800c0b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2220      	movs	r2, #32
 800bffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e00f      	b.n	800c02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69da      	ldr	r2, [r3, #28]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4013      	ands	r3, r2
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	bf0c      	ite	eq
 800c01e:	2301      	moveq	r3, #1
 800c020:	2300      	movne	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	461a      	mov	r2, r3
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d0a0      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c036:	b480      	push	{r7}
 800c038:	b08f      	sub	sp, #60	@ 0x3c
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c052:	637b      	str	r3, [r7, #52]	@ 0x34
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	461a      	mov	r2, r3
 800c05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c05e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e6      	bne.n	800c03e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3308      	adds	r3, #8
 800c076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	e853 3f00 	ldrex	r3, [r3]
 800c07e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c086:	633b      	str	r3, [r7, #48]	@ 0x30
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c090:	61ba      	str	r2, [r7, #24]
 800c092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	6979      	ldr	r1, [r7, #20]
 800c096:	69ba      	ldr	r2, [r7, #24]
 800c098:	e841 2300 	strex	r3, r2, [r1]
 800c09c:	613b      	str	r3, [r7, #16]
   return(result);
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e5      	bne.n	800c070 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c0ac:	bf00      	nop
 800c0ae:	373c      	adds	r7, #60	@ 0x3c
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b095      	sub	sp, #84	@ 0x54
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c8:	e853 3f00 	ldrex	r3, [r3]
 800c0cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0de:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e6      	bne.n	800c0c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	e853 3f00 	ldrex	r3, [r3]
 800c100:	61fb      	str	r3, [r7, #28]
   return(result);
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c108:	f023 0301 	bic.w	r3, r3, #1
 800c10c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c11e:	e841 2300 	strex	r3, r2, [r1]
 800c122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e3      	bne.n	800c0f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d118      	bne.n	800c164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f023 0310 	bic.w	r3, r3, #16
 800c146:	647b      	str	r3, [r7, #68]	@ 0x44
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c150:	61bb      	str	r3, [r7, #24]
 800c152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c154:	6979      	ldr	r1, [r7, #20]
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	e841 2300 	strex	r3, r2, [r1]
 800c15c:	613b      	str	r3, [r7, #16]
   return(result);
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e6      	bne.n	800c132 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2220      	movs	r2, #32
 800c168:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c178:	bf00      	nop
 800c17a:	3754      	adds	r7, #84	@ 0x54
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b090      	sub	sp, #64	@ 0x40
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c190:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d137      	bne.n	800c210 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	623b      	str	r3, [r7, #32]
   return(result);
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e5      	bne.n	800c1a8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fa:	61fb      	str	r3, [r7, #28]
 800c1fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fe:	69b9      	ldr	r1, [r7, #24]
 800c200:	69fa      	ldr	r2, [r7, #28]
 800c202:	e841 2300 	strex	r3, r2, [r1]
 800c206:	617b      	str	r3, [r7, #20]
   return(result);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1e6      	bne.n	800c1dc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c20e:	e002      	b.n	800c216 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c210:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c212:	f7f5 fdcf 	bl	8001db4 <HAL_UART_TxCpltCallback>
}
 800c216:	bf00      	nop
 800c218:	3740      	adds	r7, #64	@ 0x40
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f7ff fa2d 	bl	800b68c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c232:	bf00      	nop
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b086      	sub	sp, #24
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c246:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c24e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c256:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c262:	2b80      	cmp	r3, #128	@ 0x80
 800c264:	d109      	bne.n	800c27a <UART_DMAError+0x40>
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b21      	cmp	r3, #33	@ 0x21
 800c26a:	d106      	bne.n	800c27a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2200      	movs	r2, #0
 800c270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c274:	6978      	ldr	r0, [r7, #20]
 800c276:	f7ff fede 	bl	800c036 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c284:	2b40      	cmp	r3, #64	@ 0x40
 800c286:	d109      	bne.n	800c29c <UART_DMAError+0x62>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b22      	cmp	r3, #34	@ 0x22
 800c28c:	d106      	bne.n	800c29c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2200      	movs	r2, #0
 800c292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c296:	6978      	ldr	r0, [r7, #20]
 800c298:	f7ff ff0e 	bl	800c0b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a2:	f043 0210 	orr.w	r2, r3, #16
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2ac:	6978      	ldr	r0, [r7, #20]
 800c2ae:	f7ff f9f7 	bl	800b6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2b2:	bf00      	nop
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f7ff f9e5 	bl	800b6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b088      	sub	sp, #32
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2fa:	61fb      	str	r3, [r7, #28]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	6979      	ldr	r1, [r7, #20]
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	613b      	str	r3, [r7, #16]
   return(result);
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e6      	bne.n	800c2e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7f5 fd44 	bl	8001db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c32c:	bf00      	nop
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d101      	bne.n	800c386 <HAL_UARTEx_DisableFifoMode+0x16>
 800c382:	2302      	movs	r3, #2
 800c384:	e027      	b.n	800c3d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2224      	movs	r2, #36	@ 0x24
 800c392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f022 0201 	bic.w	r2, r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d101      	bne.n	800c3fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e02d      	b.n	800c456 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2224      	movs	r2, #36	@ 0x24
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f022 0201 	bic.w	r2, r2, #1
 800c420:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	430a      	orrs	r2, r1
 800c434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f850 	bl	800c4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2220      	movs	r2, #32
 800c448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d101      	bne.n	800c476 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c472:	2302      	movs	r3, #2
 800c474:	e02d      	b.n	800c4d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2224      	movs	r2, #36	@ 0x24
 800c482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f022 0201 	bic.w	r2, r2, #1
 800c49c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f812 	bl	800c4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2220      	movs	r2, #32
 800c4c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d108      	bne.n	800c4fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4fc:	e031      	b.n	800c562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4fe:	2308      	movs	r3, #8
 800c500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c502:	2308      	movs	r3, #8
 800c504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	0e5b      	lsrs	r3, r3, #25
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	0f5b      	lsrs	r3, r3, #29
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	7b3a      	ldrb	r2, [r7, #12]
 800c52a:	4911      	ldr	r1, [pc, #68]	@ (800c570 <UARTEx_SetNbDataToProcess+0x94>)
 800c52c:	5c8a      	ldrb	r2, [r1, r2]
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c532:	7b3a      	ldrb	r2, [r7, #12]
 800c534:	490f      	ldr	r1, [pc, #60]	@ (800c574 <UARTEx_SetNbDataToProcess+0x98>)
 800c536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c538:	fb93 f3f2 	sdiv	r3, r3, r2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	7b7a      	ldrb	r2, [r7, #13]
 800c548:	4909      	ldr	r1, [pc, #36]	@ (800c570 <UARTEx_SetNbDataToProcess+0x94>)
 800c54a:	5c8a      	ldrb	r2, [r1, r2]
 800c54c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c550:	7b7a      	ldrb	r2, [r7, #13]
 800c552:	4908      	ldr	r1, [pc, #32]	@ (800c574 <UARTEx_SetNbDataToProcess+0x98>)
 800c554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c556:	fb93 f3f2 	sdiv	r3, r3, r2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c562:	bf00      	nop
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	0800e710 	.word	0x0800e710
 800c574:	0800e718 	.word	0x0800e718

0800c578 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c578:	b480      	push	{r7}
 800c57a:	b08b      	sub	sp, #44	@ 0x2c
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	fa93 f3a3 	rbit	r3, r3
 800c592:	613b      	str	r3, [r7, #16]
  return result;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800c59e:	2320      	movs	r3, #32
 800c5a0:	e003      	b.n	800c5aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	fab3 f383 	clz	r3, r3
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	005b      	lsls	r3, r3, #1
 800c5ac:	2103      	movs	r1, #3
 800c5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b2:	43db      	mvns	r3, r3
 800c5b4:	401a      	ands	r2, r3
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	fa93 f3a3 	rbit	r3, r3
 800c5c0:	61fb      	str	r3, [r7, #28]
  return result;
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800c5cc:	2320      	movs	r3, #32
 800c5ce:	e003      	b.n	800c5d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d2:	fab3 f383 	clz	r3, r3
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	601a      	str	r2, [r3, #0]
}
 800c5e6:	bf00      	nop
 800c5e8:	372c      	adds	r7, #44	@ 0x2c
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	43db      	mvns	r3, r3
 800c606:	401a      	ands	r2, r3
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
 800c610:	431a      	orrs	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	605a      	str	r2, [r3, #4]
}
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c622:	b480      	push	{r7}
 800c624:	b08b      	sub	sp, #44	@ 0x2c
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	689a      	ldr	r2, [r3, #8]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	fa93 f3a3 	rbit	r3, r3
 800c63c:	613b      	str	r3, [r7, #16]
  return result;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800c648:	2320      	movs	r3, #32
 800c64a:	e003      	b.n	800c654 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	fab3 f383 	clz	r3, r3
 800c652:	b2db      	uxtb	r3, r3
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	2103      	movs	r1, #3
 800c658:	fa01 f303 	lsl.w	r3, r1, r3
 800c65c:	43db      	mvns	r3, r3
 800c65e:	401a      	ands	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	fa93 f3a3 	rbit	r3, r3
 800c66a:	61fb      	str	r3, [r7, #28]
  return result;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800c676:	2320      	movs	r3, #32
 800c678:	e003      	b.n	800c682 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	fab3 f383 	clz	r3, r3
 800c680:	b2db      	uxtb	r3, r3
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	fa01 f303 	lsl.w	r3, r1, r3
 800c68a:	431a      	orrs	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800c690:	bf00      	nop
 800c692:	372c      	adds	r7, #44	@ 0x2c
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b08b      	sub	sp, #44	@ 0x2c
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	fa93 f3a3 	rbit	r3, r3
 800c6b6:	613b      	str	r3, [r7, #16]
  return result;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800c6c2:	2320      	movs	r3, #32
 800c6c4:	e003      	b.n	800c6ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	fab3 f383 	clz	r3, r3
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	2103      	movs	r1, #3
 800c6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d6:	43db      	mvns	r3, r3
 800c6d8:	401a      	ands	r2, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	fa93 f3a3 	rbit	r3, r3
 800c6e4:	61fb      	str	r3, [r7, #28]
  return result;
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	e003      	b.n	800c6fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f6:	fab3 f383 	clz	r3, r3
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	fa01 f303 	lsl.w	r3, r1, r3
 800c704:	431a      	orrs	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	60da      	str	r2, [r3, #12]
}
 800c70a:	bf00      	nop
 800c70c:	372c      	adds	r7, #44	@ 0x2c
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c716:	b480      	push	{r7}
 800c718:	b08b      	sub	sp, #44	@ 0x2c
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a1a      	ldr	r2, [r3, #32]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	fa93 f3a3 	rbit	r3, r3
 800c730:	613b      	str	r3, [r7, #16]
  return result;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800c73c:	2320      	movs	r3, #32
 800c73e:	e003      	b.n	800c748 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	fab3 f383 	clz	r3, r3
 800c746:	b2db      	uxtb	r3, r3
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	210f      	movs	r1, #15
 800c74c:	fa01 f303 	lsl.w	r3, r1, r3
 800c750:	43db      	mvns	r3, r3
 800c752:	401a      	ands	r2, r3
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	fa93 f3a3 	rbit	r3, r3
 800c75e:	61fb      	str	r3, [r7, #28]
  return result;
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	2b00      	cmp	r3, #0
 800c768:	d101      	bne.n	800c76e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800c76a:	2320      	movs	r3, #32
 800c76c:	e003      	b.n	800c776 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	fab3 f383 	clz	r3, r3
 800c774:	b2db      	uxtb	r3, r3
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	6879      	ldr	r1, [r7, #4]
 800c77a:	fa01 f303 	lsl.w	r3, r1, r3
 800c77e:	431a      	orrs	r2, r3
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800c784:	bf00      	nop
 800c786:	372c      	adds	r7, #44	@ 0x2c
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c790:	b480      	push	{r7}
 800c792:	b08b      	sub	sp, #44	@ 0x2c
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	fa93 f3a3 	rbit	r3, r3
 800c7ac:	613b      	str	r3, [r7, #16]
  return result;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800c7b8:	2320      	movs	r3, #32
 800c7ba:	e003      	b.n	800c7c4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	fab3 f383 	clz	r3, r3
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	210f      	movs	r1, #15
 800c7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7cc:	43db      	mvns	r3, r3
 800c7ce:	401a      	ands	r2, r3
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	0a1b      	lsrs	r3, r3, #8
 800c7d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	fa93 f3a3 	rbit	r3, r3
 800c7dc:	61fb      	str	r3, [r7, #28]
  return result;
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800c7e8:	2320      	movs	r3, #32
 800c7ea:	e003      	b.n	800c7f4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ee:	fab3 f383 	clz	r3, r3
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800c802:	bf00      	nop
 800c804:	372c      	adds	r7, #44	@ 0x2c
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b088      	sub	sp, #32
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	fa93 f3a3 	rbit	r3, r3
 800c824:	60fb      	str	r3, [r7, #12]
  return result;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <LL_GPIO_Init+0x26>
    return 32U;
 800c830:	2320      	movs	r3, #32
 800c832:	e003      	b.n	800c83c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	fab3 f383 	clz	r3, r3
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c83e:	e048      	b.n	800c8d2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	2101      	movs	r1, #1
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	fa01 f303 	lsl.w	r3, r1, r3
 800c84c:	4013      	ands	r3, r2
 800c84e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d03a      	beq.n	800c8cc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d003      	beq.n	800c866 <LL_GPIO_Init+0x58>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d10e      	bne.n	800c884 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	461a      	mov	r2, r3
 800c86c:	69b9      	ldr	r1, [r7, #24]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff fed7 	bl	800c622 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	6819      	ldr	r1, [r3, #0]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	461a      	mov	r2, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff feb7 	bl	800c5f2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	461a      	mov	r2, r3
 800c88a:	69b9      	ldr	r1, [r7, #24]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff ff05 	bl	800c69c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	2b02      	cmp	r3, #2
 800c898:	d111      	bne.n	800c8be <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	2bff      	cmp	r3, #255	@ 0xff
 800c89e:	d807      	bhi.n	800c8b0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	69b9      	ldr	r1, [r7, #24]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ff34 	bl	800c716 <LL_GPIO_SetAFPin_0_7>
 800c8ae:	e006      	b.n	800c8be <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	69b9      	ldr	r1, [r7, #24]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff ff69 	bl	800c790 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	69b9      	ldr	r1, [r7, #24]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fe56 	bl	800c578 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1af      	bne.n	800c840 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3720      	adds	r7, #32
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c8f2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c8f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	b29b      	uxth	r3, r3
 800c904:	43db      	mvns	r3, r3
 800c906:	b29b      	uxth	r3, r3
 800c908:	4013      	ands	r3, r2
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	1d3b      	adds	r3, r7, #4
 800c92a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2201      	movs	r2, #1
 800c932:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b0ac      	sub	sp, #176	@ 0xb0
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	785b      	ldrb	r3, [r3, #1]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	f040 84ca 	bne.w	800d304 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	699a      	ldr	r2, [r3, #24]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d904      	bls.n	800c986 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c984:	e003      	b.n	800c98e <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	7b1b      	ldrb	r3, [r3, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d122      	bne.n	800c9dc <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	6959      	ldr	r1, [r3, #20]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	88da      	ldrh	r2, [r3, #6]
 800c99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fdac 	bl	800d502 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	613b      	str	r3, [r7, #16]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	613b      	str	r3, [r7, #16]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	00da      	lsls	r2, r3, #3
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	801a      	strh	r2, [r3, #0]
 800c9d8:	f000 bc6f 	b.w	800d2ba <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	78db      	ldrb	r3, [r3, #3]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	f040 831e 	bne.w	800d022 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	6a1a      	ldr	r2, [r3, #32]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	f240 82cf 	bls.w	800cf92 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	441a      	add	r2, r3
 800ca18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca24:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	6a1a      	ldr	r2, [r3, #32]
 800ca34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca38:	1ad2      	subs	r2, r2, r3
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 814f 	beq.w	800ccf4 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d16b      	bne.n	800cb3a <USB_EPStartXfer+0x1de>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	461a      	mov	r2, r3
 800ca70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca72:	4413      	add	r3, r2
 800ca74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	00da      	lsls	r2, r3, #3
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7e:	4413      	add	r3, r2
 800ca80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca94:	801a      	strh	r2, [r3, #0]
 800ca96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10a      	bne.n	800cab4 <USB_EPStartXfer+0x158>
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caac:	b29a      	uxth	r2, r3
 800caae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab0:	801a      	strh	r2, [r3, #0]
 800cab2:	e05b      	b.n	800cb6c <USB_EPStartXfer+0x210>
 800cab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cab8:	2b3e      	cmp	r3, #62	@ 0x3e
 800caba:	d81c      	bhi.n	800caf6 <USB_EPStartXfer+0x19a>
 800cabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac0:	085b      	lsrs	r3, r3, #1
 800cac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d004      	beq.n	800cadc <USB_EPStartXfer+0x180>
 800cad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cad6:	3301      	adds	r3, #1
 800cad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	029b      	lsls	r3, r3, #10
 800caea:	b29b      	uxth	r3, r3
 800caec:	4313      	orrs	r3, r2
 800caee:	b29a      	uxth	r2, r3
 800caf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf2:	801a      	strh	r2, [r3, #0]
 800caf4:	e03a      	b.n	800cb6c <USB_EPStartXfer+0x210>
 800caf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cafa:	095b      	lsrs	r3, r3, #5
 800cafc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb04:	f003 031f 	and.w	r3, r3, #31
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d104      	bne.n	800cb16 <USB_EPStartXfer+0x1ba>
 800cb0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb10:	3b01      	subs	r3, #1
 800cb12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	881b      	ldrh	r3, [r3, #0]
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	029b      	lsls	r3, r3, #10
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	4313      	orrs	r3, r2
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	801a      	strh	r2, [r3, #0]
 800cb38:	e018      	b.n	800cb6c <USB_EPStartXfer+0x210>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	785b      	ldrb	r3, [r3, #1]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d114      	bne.n	800cb6c <USB_EPStartXfer+0x210>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	4413      	add	r3, r2
 800cb50:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	00da      	lsls	r2, r3, #3
 800cb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	895b      	ldrh	r3, [r3, #10]
 800cb70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	6959      	ldr	r1, [r3, #20]
 800cb78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fcbd 	bl	800d502 <USB_WritePMA>
            ep->xfer_buff += len;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	695a      	ldr	r2, [r3, #20]
 800cb8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb90:	441a      	add	r2, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	6a1a      	ldr	r2, [r3, #32]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d907      	bls.n	800cbb2 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	6a1a      	ldr	r2, [r3, #32]
 800cba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	621a      	str	r2, [r3, #32]
 800cbb0:	e006      	b.n	800cbc0 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	785b      	ldrb	r3, [r3, #1]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d16b      	bne.n	800cca0 <USB_EPStartXfer+0x344>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	61bb      	str	r3, [r7, #24]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	4413      	add	r3, r2
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	00da      	lsls	r2, r3, #3
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbea:	617b      	str	r3, [r7, #20]
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	801a      	strh	r2, [r3, #0]
 800cbfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <USB_EPStartXfer+0x2be>
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	801a      	strh	r2, [r3, #0]
 800cc18:	e05d      	b.n	800ccd6 <USB_EPStartXfer+0x37a>
 800cc1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc20:	d81c      	bhi.n	800cc5c <USB_EPStartXfer+0x300>
 800cc22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <USB_EPStartXfer+0x2e6>
 800cc38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	029b      	lsls	r3, r3, #10
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	4313      	orrs	r3, r2
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	801a      	strh	r2, [r3, #0]
 800cc5a:	e03c      	b.n	800ccd6 <USB_EPStartXfer+0x37a>
 800cc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc60:	095b      	lsrs	r3, r3, #5
 800cc62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc6a:	f003 031f 	and.w	r3, r3, #31
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d104      	bne.n	800cc7c <USB_EPStartXfer+0x320>
 800cc72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc76:	3b01      	subs	r3, #1
 800cc78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	029b      	lsls	r3, r3, #10
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	801a      	strh	r2, [r3, #0]
 800cc9e:	e01a      	b.n	800ccd6 <USB_EPStartXfer+0x37a>
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	785b      	ldrb	r3, [r3, #1]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d116      	bne.n	800ccd6 <USB_EPStartXfer+0x37a>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	623b      	str	r3, [r7, #32]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	4413      	add	r3, r2
 800ccba:	623b      	str	r3, [r7, #32]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	00da      	lsls	r2, r3, #3
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccca:	61fb      	str	r3, [r7, #28]
 800cccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	891b      	ldrh	r3, [r3, #8]
 800ccda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6959      	ldr	r1, [r3, #20]
 800cce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fc08 	bl	800d502 <USB_WritePMA>
 800ccf2:	e2e2      	b.n	800d2ba <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	785b      	ldrb	r3, [r3, #1]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d16b      	bne.n	800cdd4 <USB_EPStartXfer+0x478>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	461a      	mov	r2, r3
 800cd0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd0c:	4413      	add	r3, r2
 800cd0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	00da      	lsls	r2, r3, #3
 800cd16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd18:	4413      	add	r3, r2
 800cd1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd2e:	801a      	strh	r2, [r3, #0]
 800cd30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <USB_EPStartXfer+0x3f2>
 800cd38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd4a:	801a      	strh	r2, [r3, #0]
 800cd4c:	e05d      	b.n	800ce0a <USB_EPStartXfer+0x4ae>
 800cd4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd52:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd54:	d81c      	bhi.n	800cd90 <USB_EPStartXfer+0x434>
 800cd56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd5a:	085b      	lsrs	r3, r3, #1
 800cd5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd64:	f003 0301 	and.w	r3, r3, #1
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <USB_EPStartXfer+0x41a>
 800cd6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd70:	3301      	adds	r3, #1
 800cd72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	029b      	lsls	r3, r3, #10
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	4313      	orrs	r3, r2
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd8c:	801a      	strh	r2, [r3, #0]
 800cd8e:	e03c      	b.n	800ce0a <USB_EPStartXfer+0x4ae>
 800cd90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd94:	095b      	lsrs	r3, r3, #5
 800cd96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd9e:	f003 031f 	and.w	r3, r3, #31
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d104      	bne.n	800cdb0 <USB_EPStartXfer+0x454>
 800cda6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	029b      	lsls	r3, r3, #10
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdd0:	801a      	strh	r2, [r3, #0]
 800cdd2:	e01a      	b.n	800ce0a <USB_EPStartXfer+0x4ae>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d116      	bne.n	800ce0a <USB_EPStartXfer+0x4ae>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	461a      	mov	r2, r3
 800cdea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdec:	4413      	add	r3, r2
 800cdee:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	00da      	lsls	r2, r3, #3
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cdfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	891b      	ldrh	r3, [r3, #8]
 800ce0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	6959      	ldr	r1, [r3, #20]
 800ce16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fb6e 	bl	800d502 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	695a      	ldr	r2, [r3, #20]
 800ce2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce2e:	441a      	add	r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	6a1a      	ldr	r2, [r3, #32]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d907      	bls.n	800ce50 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	6a1a      	ldr	r2, [r3, #32]
 800ce44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce48:	1ad2      	subs	r2, r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	621a      	str	r2, [r3, #32]
 800ce4e:	e006      	b.n	800ce5e <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	785b      	ldrb	r3, [r3, #1]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d16b      	bne.n	800cf42 <USB_EPStartXfer+0x5e6>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	461a      	mov	r2, r3
 800ce78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7a:	4413      	add	r3, r2
 800ce7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	00da      	lsls	r2, r3, #3
 800ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce86:	4413      	add	r3, r2
 800ce88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce90:	881b      	ldrh	r3, [r3, #0]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce9c:	801a      	strh	r2, [r3, #0]
 800ce9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <USB_EPStartXfer+0x560>
 800cea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb8:	801a      	strh	r2, [r3, #0]
 800ceba:	e05b      	b.n	800cf74 <USB_EPStartXfer+0x618>
 800cebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cec2:	d81c      	bhi.n	800cefe <USB_EPStartXfer+0x5a2>
 800cec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec8:	085b      	lsrs	r3, r3, #1
 800ceca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d004      	beq.n	800cee4 <USB_EPStartXfer+0x588>
 800ceda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cede:	3301      	adds	r3, #1
 800cee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	029b      	lsls	r3, r3, #10
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	4313      	orrs	r3, r2
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefa:	801a      	strh	r2, [r3, #0]
 800cefc:	e03a      	b.n	800cf74 <USB_EPStartXfer+0x618>
 800cefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf02:	095b      	lsrs	r3, r3, #5
 800cf04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf0c:	f003 031f 	and.w	r3, r3, #31
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d104      	bne.n	800cf1e <USB_EPStartXfer+0x5c2>
 800cf14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	029b      	lsls	r3, r3, #10
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3e:	801a      	strh	r2, [r3, #0]
 800cf40:	e018      	b.n	800cf74 <USB_EPStartXfer+0x618>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	785b      	ldrb	r3, [r3, #1]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d114      	bne.n	800cf74 <USB_EPStartXfer+0x618>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	461a      	mov	r2, r3
 800cf54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf56:	4413      	add	r3, r2
 800cf58:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	00da      	lsls	r2, r3, #3
 800cf60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf62:	4413      	add	r3, r2
 800cf64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	895b      	ldrh	r3, [r3, #10]
 800cf78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	6959      	ldr	r1, [r3, #20]
 800cf80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fab9 	bl	800d502 <USB_WritePMA>
 800cf90:	e193      	b.n	800d2ba <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	6a1b      	ldr	r3, [r3, #32]
 800cf96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cfac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfb0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	441a      	add	r2, r3
 800cfbe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cfc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfe6:	4413      	add	r3, r2
 800cfe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	00da      	lsls	r2, r3, #3
 800cff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff2:	4413      	add	r3, r2
 800cff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cff8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cffe:	b29a      	uxth	r2, r3
 800d000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d002:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	891b      	ldrh	r3, [r3, #8]
 800d008:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	6959      	ldr	r1, [r3, #20]
 800d010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d014:	b29b      	uxth	r3, r3
 800d016:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa71 	bl	800d502 <USB_WritePMA>
 800d020:	e14b      	b.n	800d2ba <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	6a1a      	ldr	r2, [r3, #32]
 800d026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d02a:	1ad2      	subs	r2, r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 809a 	beq.w	800d17c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	785b      	ldrb	r3, [r3, #1]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d16b      	bne.n	800d12c <USB_EPStartXfer+0x7d0>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d05e:	b29b      	uxth	r3, r3
 800d060:	461a      	mov	r2, r3
 800d062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d064:	4413      	add	r3, r2
 800d066:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	00da      	lsls	r2, r3, #3
 800d06e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d070:	4413      	add	r3, r2
 800d072:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d076:	667b      	str	r3, [r7, #100]	@ 0x64
 800d078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d082:	b29a      	uxth	r2, r3
 800d084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d086:	801a      	strh	r2, [r3, #0]
 800d088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <USB_EPStartXfer+0x74a>
 800d090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	b29b      	uxth	r3, r3
 800d096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d09a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0a2:	801a      	strh	r2, [r3, #0]
 800d0a4:	e05b      	b.n	800d15e <USB_EPStartXfer+0x802>
 800d0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0ac:	d81c      	bhi.n	800d0e8 <USB_EPStartXfer+0x78c>
 800d0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0b2:	085b      	lsrs	r3, r3, #1
 800d0b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d004      	beq.n	800d0ce <USB_EPStartXfer+0x772>
 800d0c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	029b      	lsls	r3, r3, #10
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0e4:	801a      	strh	r2, [r3, #0]
 800d0e6:	e03a      	b.n	800d15e <USB_EPStartXfer+0x802>
 800d0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ec:	095b      	lsrs	r3, r3, #5
 800d0ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0f6:	f003 031f 	and.w	r3, r3, #31
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d104      	bne.n	800d108 <USB_EPStartXfer+0x7ac>
 800d0fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d102:	3b01      	subs	r3, #1
 800d104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d112:	b29b      	uxth	r3, r3
 800d114:	029b      	lsls	r3, r3, #10
 800d116:	b29b      	uxth	r3, r3
 800d118:	4313      	orrs	r3, r2
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d124:	b29a      	uxth	r2, r3
 800d126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d128:	801a      	strh	r2, [r3, #0]
 800d12a:	e018      	b.n	800d15e <USB_EPStartXfer+0x802>
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d114      	bne.n	800d15e <USB_EPStartXfer+0x802>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	461a      	mov	r2, r3
 800d13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d140:	4413      	add	r3, r2
 800d142:	673b      	str	r3, [r7, #112]	@ 0x70
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	00da      	lsls	r2, r3, #3
 800d14a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d14c:	4413      	add	r3, r2
 800d14e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d158:	b29a      	uxth	r2, r3
 800d15a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d15c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	895b      	ldrh	r3, [r3, #10]
 800d162:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	6959      	ldr	r1, [r3, #20]
 800d16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d16e:	b29b      	uxth	r3, r3
 800d170:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f9c4 	bl	800d502 <USB_WritePMA>
 800d17a:	e09e      	b.n	800d2ba <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	785b      	ldrb	r3, [r3, #1]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d16b      	bne.n	800d25c <USB_EPStartXfer+0x900>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d18e:	b29b      	uxth	r3, r3
 800d190:	461a      	mov	r2, r3
 800d192:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d194:	4413      	add	r3, r2
 800d196:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	00da      	lsls	r2, r3, #3
 800d19e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1b6:	801a      	strh	r2, [r3, #0]
 800d1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <USB_EPStartXfer+0x87a>
 800d1c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1d2:	801a      	strh	r2, [r3, #0]
 800d1d4:	e063      	b.n	800d29e <USB_EPStartXfer+0x942>
 800d1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1da:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1dc:	d81c      	bhi.n	800d218 <USB_EPStartXfer+0x8bc>
 800d1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1e2:	085b      	lsrs	r3, r3, #1
 800d1e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <USB_EPStartXfer+0x8a2>
 800d1f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	b29a      	uxth	r2, r3
 800d204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d208:	b29b      	uxth	r3, r3
 800d20a:	029b      	lsls	r3, r3, #10
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d214:	801a      	strh	r2, [r3, #0]
 800d216:	e042      	b.n	800d29e <USB_EPStartXfer+0x942>
 800d218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d21c:	095b      	lsrs	r3, r3, #5
 800d21e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d226:	f003 031f 	and.w	r3, r3, #31
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d104      	bne.n	800d238 <USB_EPStartXfer+0x8dc>
 800d22e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d232:	3b01      	subs	r3, #1
 800d234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d242:	b29b      	uxth	r3, r3
 800d244:	029b      	lsls	r3, r3, #10
 800d246:	b29b      	uxth	r3, r3
 800d248:	4313      	orrs	r3, r2
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d254:	b29a      	uxth	r2, r3
 800d256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d258:	801a      	strh	r2, [r3, #0]
 800d25a:	e020      	b.n	800d29e <USB_EPStartXfer+0x942>
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	785b      	ldrb	r3, [r3, #1]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d11c      	bne.n	800d29e <USB_EPStartXfer+0x942>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d270:	b29b      	uxth	r3, r3
 800d272:	461a      	mov	r2, r3
 800d274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d278:	4413      	add	r3, r2
 800d27a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	00da      	lsls	r2, r3, #3
 800d284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d288:	4413      	add	r3, r2
 800d28a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d28e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d296:	b29a      	uxth	r2, r3
 800d298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d29c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	891b      	ldrh	r3, [r3, #8]
 800d2a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	6959      	ldr	r1, [r3, #20]
 800d2aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f924 	bl	800d502 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2d0:	817b      	strh	r3, [r7, #10]
 800d2d2:	897b      	ldrh	r3, [r7, #10]
 800d2d4:	f083 0310 	eor.w	r3, r3, #16
 800d2d8:	817b      	strh	r3, [r7, #10]
 800d2da:	897b      	ldrh	r3, [r7, #10]
 800d2dc:	f083 0320 	eor.w	r3, r3, #32
 800d2e0:	817b      	strh	r3, [r7, #10]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	441a      	add	r2, r3
 800d2ec:	897b      	ldrh	r3, [r7, #10]
 800d2ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	8013      	strh	r3, [r2, #0]
 800d302:	e0d5      	b.n	800d4b0 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	7b1b      	ldrb	r3, [r3, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d156      	bne.n	800d3ba <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d122      	bne.n	800d35a <USB_EPStartXfer+0x9fe>
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	78db      	ldrb	r3, [r3, #3]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d11e      	bne.n	800d35a <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	b29b      	uxth	r3, r3
 800d32a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d32e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d332:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	441a      	add	r2, r3
 800d340:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d34c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d354:	b29b      	uxth	r3, r3
 800d356:	8013      	strh	r3, [r2, #0]
 800d358:	e01d      	b.n	800d396 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	b29b      	uxth	r3, r3
 800d368:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d36c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d370:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	441a      	add	r2, r3
 800d37e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d38a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d392:	b29b      	uxth	r3, r3
 800d394:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	699a      	ldr	r2, [r3, #24]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d907      	bls.n	800d3b2 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	1ad2      	subs	r2, r2, r3
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	619a      	str	r2, [r3, #24]
 800d3b0:	e054      	b.n	800d45c <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	619a      	str	r2, [r3, #24]
 800d3b8:	e050      	b.n	800d45c <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	78db      	ldrb	r3, [r3, #3]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d142      	bne.n	800d448 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d048      	beq.n	800d45c <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d005      	beq.n	800d3f2 <USB_EPStartXfer+0xa96>
 800d3e6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d10b      	bne.n	800d40a <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d3f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d12e      	bne.n	800d45c <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d3fe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d406:	2b00      	cmp	r3, #0
 800d408:	d128      	bne.n	800d45c <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4413      	add	r3, r2
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d41c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d420:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	441a      	add	r2, r3
 800d42e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d43a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d43e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d442:	b29b      	uxth	r3, r3
 800d444:	8013      	strh	r3, [r2, #0]
 800d446:	e009      	b.n	800d45c <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	78db      	ldrb	r3, [r3, #3]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d103      	bne.n	800d458 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2200      	movs	r2, #0
 800d454:	619a      	str	r2, [r3, #24]
 800d456:	e001      	b.n	800d45c <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e02a      	b.n	800d4b2 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	b29b      	uxth	r3, r3
 800d46a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d472:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d476:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d47a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d47e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d482:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d486:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d48a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	441a      	add	r2, r3
 800d498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d49c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	37b0      	adds	r7, #176	@ 0xb0
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d4c6:	78fb      	ldrb	r3, [r7, #3]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2280      	movs	r2, #128	@ 0x80
 800d4d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d502:	b480      	push	{r7}
 800d504:	b08b      	sub	sp, #44	@ 0x2c
 800d506:	af00      	add	r7, sp, #0
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	60b9      	str	r1, [r7, #8]
 800d50c:	4611      	mov	r1, r2
 800d50e:	461a      	mov	r2, r3
 800d510:	460b      	mov	r3, r1
 800d512:	80fb      	strh	r3, [r7, #6]
 800d514:	4613      	mov	r3, r2
 800d516:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d518:	88bb      	ldrh	r3, [r7, #4]
 800d51a:	3301      	adds	r3, #1
 800d51c:	085b      	lsrs	r3, r3, #1
 800d51e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d528:	88fa      	ldrh	r2, [r7, #6]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d532:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	627b      	str	r3, [r7, #36]	@ 0x24
 800d538:	e01c      	b.n	800d574 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	3301      	adds	r3, #1
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	b21b      	sxth	r3, r3
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b21a      	sxth	r2, r3
 800d54c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d550:	4313      	orrs	r3, r2
 800d552:	b21b      	sxth	r3, r3
 800d554:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	8a7a      	ldrh	r2, [r7, #18]
 800d55a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	3302      	adds	r3, #2
 800d560:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	3301      	adds	r3, #1
 800d566:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	3301      	adds	r3, #1
 800d56c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	3b01      	subs	r3, #1
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
 800d574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1df      	bne.n	800d53a <USB_WritePMA+0x38>
  }
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	372c      	adds	r7, #44	@ 0x2c
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d588:	b480      	push	{r7}
 800d58a:	b08b      	sub	sp, #44	@ 0x2c
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	4611      	mov	r1, r2
 800d594:	461a      	mov	r2, r3
 800d596:	460b      	mov	r3, r1
 800d598:	80fb      	strh	r3, [r7, #6]
 800d59a:	4613      	mov	r3, r2
 800d59c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d59e:	88bb      	ldrh	r3, [r7, #4]
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d5ae:	88fa      	ldrh	r2, [r7, #6]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d5b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5be:	e018      	b.n	800d5f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	3302      	adds	r3, #2
 800d5cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	0a1b      	lsrs	r3, r3, #8
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1e3      	bne.n	800d5c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d5f8:	88bb      	ldrh	r3, [r7, #4]
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	b29b      	uxth	r3, r3
 800d60a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	701a      	strb	r2, [r3, #0]
  }
}
 800d614:	bf00      	nop
 800d616:	372c      	adds	r7, #44	@ 0x2c
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <memset>:
 800d620:	4402      	add	r2, r0
 800d622:	4603      	mov	r3, r0
 800d624:	4293      	cmp	r3, r2
 800d626:	d100      	bne.n	800d62a <memset+0xa>
 800d628:	4770      	bx	lr
 800d62a:	f803 1b01 	strb.w	r1, [r3], #1
 800d62e:	e7f9      	b.n	800d624 <memset+0x4>

0800d630 <__libc_init_array>:
 800d630:	b570      	push	{r4, r5, r6, lr}
 800d632:	4d0d      	ldr	r5, [pc, #52]	@ (800d668 <__libc_init_array+0x38>)
 800d634:	4c0d      	ldr	r4, [pc, #52]	@ (800d66c <__libc_init_array+0x3c>)
 800d636:	1b64      	subs	r4, r4, r5
 800d638:	10a4      	asrs	r4, r4, #2
 800d63a:	2600      	movs	r6, #0
 800d63c:	42a6      	cmp	r6, r4
 800d63e:	d109      	bne.n	800d654 <__libc_init_array+0x24>
 800d640:	4d0b      	ldr	r5, [pc, #44]	@ (800d670 <__libc_init_array+0x40>)
 800d642:	4c0c      	ldr	r4, [pc, #48]	@ (800d674 <__libc_init_array+0x44>)
 800d644:	f001 f83c 	bl	800e6c0 <_init>
 800d648:	1b64      	subs	r4, r4, r5
 800d64a:	10a4      	asrs	r4, r4, #2
 800d64c:	2600      	movs	r6, #0
 800d64e:	42a6      	cmp	r6, r4
 800d650:	d105      	bne.n	800d65e <__libc_init_array+0x2e>
 800d652:	bd70      	pop	{r4, r5, r6, pc}
 800d654:	f855 3b04 	ldr.w	r3, [r5], #4
 800d658:	4798      	blx	r3
 800d65a:	3601      	adds	r6, #1
 800d65c:	e7ee      	b.n	800d63c <__libc_init_array+0xc>
 800d65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d662:	4798      	blx	r3
 800d664:	3601      	adds	r6, #1
 800d666:	e7f2      	b.n	800d64e <__libc_init_array+0x1e>
 800d668:	0800e900 	.word	0x0800e900
 800d66c:	0800e900 	.word	0x0800e900
 800d670:	0800e900 	.word	0x0800e900
 800d674:	0800e904 	.word	0x0800e904

0800d678 <sin>:
 800d678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d67a:	ec53 2b10 	vmov	r2, r3, d0
 800d67e:	4826      	ldr	r0, [pc, #152]	@ (800d718 <sin+0xa0>)
 800d680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d684:	4281      	cmp	r1, r0
 800d686:	d807      	bhi.n	800d698 <sin+0x20>
 800d688:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d710 <sin+0x98>
 800d68c:	2000      	movs	r0, #0
 800d68e:	b005      	add	sp, #20
 800d690:	f85d eb04 	ldr.w	lr, [sp], #4
 800d694:	f000 b90c 	b.w	800d8b0 <__kernel_sin>
 800d698:	4820      	ldr	r0, [pc, #128]	@ (800d71c <sin+0xa4>)
 800d69a:	4281      	cmp	r1, r0
 800d69c:	d908      	bls.n	800d6b0 <sin+0x38>
 800d69e:	4610      	mov	r0, r2
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7f2 fdc5 	bl	8000230 <__aeabi_dsub>
 800d6a6:	ec41 0b10 	vmov	d0, r0, r1
 800d6aa:	b005      	add	sp, #20
 800d6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6b0:	4668      	mov	r0, sp
 800d6b2:	f000 f9b9 	bl	800da28 <__ieee754_rem_pio2>
 800d6b6:	f000 0003 	and.w	r0, r0, #3
 800d6ba:	2801      	cmp	r0, #1
 800d6bc:	d00c      	beq.n	800d6d8 <sin+0x60>
 800d6be:	2802      	cmp	r0, #2
 800d6c0:	d011      	beq.n	800d6e6 <sin+0x6e>
 800d6c2:	b9e8      	cbnz	r0, 800d700 <sin+0x88>
 800d6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6c8:	ed9d 0b00 	vldr	d0, [sp]
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	f000 f8ef 	bl	800d8b0 <__kernel_sin>
 800d6d2:	ec51 0b10 	vmov	r0, r1, d0
 800d6d6:	e7e6      	b.n	800d6a6 <sin+0x2e>
 800d6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6dc:	ed9d 0b00 	vldr	d0, [sp]
 800d6e0:	f000 f81e 	bl	800d720 <__kernel_cos>
 800d6e4:	e7f5      	b.n	800d6d2 <sin+0x5a>
 800d6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ea:	ed9d 0b00 	vldr	d0, [sp]
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	f000 f8de 	bl	800d8b0 <__kernel_sin>
 800d6f4:	ec53 2b10 	vmov	r2, r3, d0
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d6fe:	e7d2      	b.n	800d6a6 <sin+0x2e>
 800d700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d704:	ed9d 0b00 	vldr	d0, [sp]
 800d708:	f000 f80a 	bl	800d720 <__kernel_cos>
 800d70c:	e7f2      	b.n	800d6f4 <sin+0x7c>
 800d70e:	bf00      	nop
	...
 800d718:	3fe921fb 	.word	0x3fe921fb
 800d71c:	7fefffff 	.word	0x7fefffff

0800d720 <__kernel_cos>:
 800d720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	ec57 6b10 	vmov	r6, r7, d0
 800d728:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d72c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d730:	ed8d 1b00 	vstr	d1, [sp]
 800d734:	d206      	bcs.n	800d744 <__kernel_cos+0x24>
 800d736:	4630      	mov	r0, r6
 800d738:	4639      	mov	r1, r7
 800d73a:	f7f3 f9cb 	bl	8000ad4 <__aeabi_d2iz>
 800d73e:	2800      	cmp	r0, #0
 800d740:	f000 8088 	beq.w	800d854 <__kernel_cos+0x134>
 800d744:	4632      	mov	r2, r6
 800d746:	463b      	mov	r3, r7
 800d748:	4630      	mov	r0, r6
 800d74a:	4639      	mov	r1, r7
 800d74c:	f7f2 ff28 	bl	80005a0 <__aeabi_dmul>
 800d750:	4b51      	ldr	r3, [pc, #324]	@ (800d898 <__kernel_cos+0x178>)
 800d752:	2200      	movs	r2, #0
 800d754:	4604      	mov	r4, r0
 800d756:	460d      	mov	r5, r1
 800d758:	f7f2 ff22 	bl	80005a0 <__aeabi_dmul>
 800d75c:	a340      	add	r3, pc, #256	@ (adr r3, 800d860 <__kernel_cos+0x140>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	4682      	mov	sl, r0
 800d764:	468b      	mov	fp, r1
 800d766:	4620      	mov	r0, r4
 800d768:	4629      	mov	r1, r5
 800d76a:	f7f2 ff19 	bl	80005a0 <__aeabi_dmul>
 800d76e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d868 <__kernel_cos+0x148>)
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f7f2 fd5e 	bl	8000234 <__adddf3>
 800d778:	4622      	mov	r2, r4
 800d77a:	462b      	mov	r3, r5
 800d77c:	f7f2 ff10 	bl	80005a0 <__aeabi_dmul>
 800d780:	a33b      	add	r3, pc, #236	@ (adr r3, 800d870 <__kernel_cos+0x150>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f7f2 fd53 	bl	8000230 <__aeabi_dsub>
 800d78a:	4622      	mov	r2, r4
 800d78c:	462b      	mov	r3, r5
 800d78e:	f7f2 ff07 	bl	80005a0 <__aeabi_dmul>
 800d792:	a339      	add	r3, pc, #228	@ (adr r3, 800d878 <__kernel_cos+0x158>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	f7f2 fd4c 	bl	8000234 <__adddf3>
 800d79c:	4622      	mov	r2, r4
 800d79e:	462b      	mov	r3, r5
 800d7a0:	f7f2 fefe 	bl	80005a0 <__aeabi_dmul>
 800d7a4:	a336      	add	r3, pc, #216	@ (adr r3, 800d880 <__kernel_cos+0x160>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 fd41 	bl	8000230 <__aeabi_dsub>
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	462b      	mov	r3, r5
 800d7b2:	f7f2 fef5 	bl	80005a0 <__aeabi_dmul>
 800d7b6:	a334      	add	r3, pc, #208	@ (adr r3, 800d888 <__kernel_cos+0x168>)
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 fd3a 	bl	8000234 <__adddf3>
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	f7f2 feec 	bl	80005a0 <__aeabi_dmul>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f7f2 fee8 	bl	80005a0 <__aeabi_dmul>
 800d7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	460d      	mov	r5, r1
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f7f2 fee0 	bl	80005a0 <__aeabi_dmul>
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7f2 fd22 	bl	8000230 <__aeabi_dsub>
 800d7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800d89c <__kernel_cos+0x17c>)
 800d7ee:	4598      	cmp	r8, r3
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	460f      	mov	r7, r1
 800d7f4:	d810      	bhi.n	800d818 <__kernel_cos+0xf8>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	f7f2 fd17 	bl	8000230 <__aeabi_dsub>
 800d802:	460b      	mov	r3, r1
 800d804:	4926      	ldr	r1, [pc, #152]	@ (800d8a0 <__kernel_cos+0x180>)
 800d806:	4602      	mov	r2, r0
 800d808:	2000      	movs	r0, #0
 800d80a:	f7f2 fd11 	bl	8000230 <__aeabi_dsub>
 800d80e:	ec41 0b10 	vmov	d0, r0, r1
 800d812:	b003      	add	sp, #12
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	4b22      	ldr	r3, [pc, #136]	@ (800d8a4 <__kernel_cos+0x184>)
 800d81a:	4921      	ldr	r1, [pc, #132]	@ (800d8a0 <__kernel_cos+0x180>)
 800d81c:	4598      	cmp	r8, r3
 800d81e:	bf8c      	ite	hi
 800d820:	4d21      	ldrhi	r5, [pc, #132]	@ (800d8a8 <__kernel_cos+0x188>)
 800d822:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d826:	2400      	movs	r4, #0
 800d828:	4622      	mov	r2, r4
 800d82a:	462b      	mov	r3, r5
 800d82c:	2000      	movs	r0, #0
 800d82e:	f7f2 fcff 	bl	8000230 <__aeabi_dsub>
 800d832:	4622      	mov	r2, r4
 800d834:	4680      	mov	r8, r0
 800d836:	4689      	mov	r9, r1
 800d838:	462b      	mov	r3, r5
 800d83a:	4650      	mov	r0, sl
 800d83c:	4659      	mov	r1, fp
 800d83e:	f7f2 fcf7 	bl	8000230 <__aeabi_dsub>
 800d842:	4632      	mov	r2, r6
 800d844:	463b      	mov	r3, r7
 800d846:	f7f2 fcf3 	bl	8000230 <__aeabi_dsub>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	4640      	mov	r0, r8
 800d850:	4649      	mov	r1, r9
 800d852:	e7da      	b.n	800d80a <__kernel_cos+0xea>
 800d854:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d890 <__kernel_cos+0x170>
 800d858:	e7db      	b.n	800d812 <__kernel_cos+0xf2>
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w
 800d860:	be8838d4 	.word	0xbe8838d4
 800d864:	bda8fae9 	.word	0xbda8fae9
 800d868:	bdb4b1c4 	.word	0xbdb4b1c4
 800d86c:	3e21ee9e 	.word	0x3e21ee9e
 800d870:	809c52ad 	.word	0x809c52ad
 800d874:	3e927e4f 	.word	0x3e927e4f
 800d878:	19cb1590 	.word	0x19cb1590
 800d87c:	3efa01a0 	.word	0x3efa01a0
 800d880:	16c15177 	.word	0x16c15177
 800d884:	3f56c16c 	.word	0x3f56c16c
 800d888:	5555554c 	.word	0x5555554c
 800d88c:	3fa55555 	.word	0x3fa55555
 800d890:	00000000 	.word	0x00000000
 800d894:	3ff00000 	.word	0x3ff00000
 800d898:	3fe00000 	.word	0x3fe00000
 800d89c:	3fd33332 	.word	0x3fd33332
 800d8a0:	3ff00000 	.word	0x3ff00000
 800d8a4:	3fe90000 	.word	0x3fe90000
 800d8a8:	3fd20000 	.word	0x3fd20000
 800d8ac:	00000000 	.word	0x00000000

0800d8b0 <__kernel_sin>:
 800d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	ec55 4b10 	vmov	r4, r5, d0
 800d8b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d8bc:	b085      	sub	sp, #20
 800d8be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d8c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	d205      	bcs.n	800d8d6 <__kernel_sin+0x26>
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	f7f3 f901 	bl	8000ad4 <__aeabi_d2iz>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d052      	beq.n	800d97c <__kernel_sin+0xcc>
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	462b      	mov	r3, r5
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7f2 fe5f 	bl	80005a0 <__aeabi_dmul>
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	468b      	mov	fp, r1
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	f7f2 fe57 	bl	80005a0 <__aeabi_dmul>
 800d8f2:	a342      	add	r3, pc, #264	@ (adr r3, 800d9fc <__kernel_sin+0x14c>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d8fc:	4650      	mov	r0, sl
 800d8fe:	4659      	mov	r1, fp
 800d900:	f7f2 fe4e 	bl	80005a0 <__aeabi_dmul>
 800d904:	a33f      	add	r3, pc, #252	@ (adr r3, 800da04 <__kernel_sin+0x154>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fc91 	bl	8000230 <__aeabi_dsub>
 800d90e:	4652      	mov	r2, sl
 800d910:	465b      	mov	r3, fp
 800d912:	f7f2 fe45 	bl	80005a0 <__aeabi_dmul>
 800d916:	a33d      	add	r3, pc, #244	@ (adr r3, 800da0c <__kernel_sin+0x15c>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fc8a 	bl	8000234 <__adddf3>
 800d920:	4652      	mov	r2, sl
 800d922:	465b      	mov	r3, fp
 800d924:	f7f2 fe3c 	bl	80005a0 <__aeabi_dmul>
 800d928:	a33a      	add	r3, pc, #232	@ (adr r3, 800da14 <__kernel_sin+0x164>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fc7f 	bl	8000230 <__aeabi_dsub>
 800d932:	4652      	mov	r2, sl
 800d934:	465b      	mov	r3, fp
 800d936:	f7f2 fe33 	bl	80005a0 <__aeabi_dmul>
 800d93a:	a338      	add	r3, pc, #224	@ (adr r3, 800da1c <__kernel_sin+0x16c>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fc78 	bl	8000234 <__adddf3>
 800d944:	4606      	mov	r6, r0
 800d946:	460f      	mov	r7, r1
 800d948:	f1b8 0f00 	cmp.w	r8, #0
 800d94c:	d11b      	bne.n	800d986 <__kernel_sin+0xd6>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4650      	mov	r0, sl
 800d954:	4659      	mov	r1, fp
 800d956:	f7f2 fe23 	bl	80005a0 <__aeabi_dmul>
 800d95a:	a325      	add	r3, pc, #148	@ (adr r3, 800d9f0 <__kernel_sin+0x140>)
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	f7f2 fc66 	bl	8000230 <__aeabi_dsub>
 800d964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d968:	f7f2 fe1a 	bl	80005a0 <__aeabi_dmul>
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	4620      	mov	r0, r4
 800d972:	4629      	mov	r1, r5
 800d974:	f7f2 fc5e 	bl	8000234 <__adddf3>
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	ec45 4b10 	vmov	d0, r4, r5
 800d980:	b005      	add	sp, #20
 800d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98a:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f8 <__kernel_sin+0x148>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	f7f2 fe07 	bl	80005a0 <__aeabi_dmul>
 800d992:	4632      	mov	r2, r6
 800d994:	4680      	mov	r8, r0
 800d996:	4689      	mov	r9, r1
 800d998:	463b      	mov	r3, r7
 800d99a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d99e:	f7f2 fdff 	bl	80005a0 <__aeabi_dmul>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	f7f2 fc41 	bl	8000230 <__aeabi_dsub>
 800d9ae:	4652      	mov	r2, sl
 800d9b0:	465b      	mov	r3, fp
 800d9b2:	f7f2 fdf5 	bl	80005a0 <__aeabi_dmul>
 800d9b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9ba:	f7f2 fc39 	bl	8000230 <__aeabi_dsub>
 800d9be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d9f0 <__kernel_sin+0x140>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	460f      	mov	r7, r1
 800d9c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9cc:	f7f2 fde8 	bl	80005a0 <__aeabi_dmul>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	4639      	mov	r1, r7
 800d9d8:	f7f2 fc2c 	bl	8000234 <__adddf3>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	f7f2 fc24 	bl	8000230 <__aeabi_dsub>
 800d9e8:	e7c6      	b.n	800d978 <__kernel_sin+0xc8>
 800d9ea:	bf00      	nop
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	55555549 	.word	0x55555549
 800d9f4:	3fc55555 	.word	0x3fc55555
 800d9f8:	3fe00000 	.word	0x3fe00000
 800d9fc:	5acfd57c 	.word	0x5acfd57c
 800da00:	3de5d93a 	.word	0x3de5d93a
 800da04:	8a2b9ceb 	.word	0x8a2b9ceb
 800da08:	3e5ae5e6 	.word	0x3e5ae5e6
 800da0c:	57b1fe7d 	.word	0x57b1fe7d
 800da10:	3ec71de3 	.word	0x3ec71de3
 800da14:	19c161d5 	.word	0x19c161d5
 800da18:	3f2a01a0 	.word	0x3f2a01a0
 800da1c:	1110f8a6 	.word	0x1110f8a6
 800da20:	3f811111 	.word	0x3f811111
 800da24:	00000000 	.word	0x00000000

0800da28 <__ieee754_rem_pio2>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	ec57 6b10 	vmov	r6, r7, d0
 800da30:	4bc5      	ldr	r3, [pc, #788]	@ (800dd48 <__ieee754_rem_pio2+0x320>)
 800da32:	b08d      	sub	sp, #52	@ 0x34
 800da34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800da38:	4598      	cmp	r8, r3
 800da3a:	4604      	mov	r4, r0
 800da3c:	9704      	str	r7, [sp, #16]
 800da3e:	d807      	bhi.n	800da50 <__ieee754_rem_pio2+0x28>
 800da40:	2200      	movs	r2, #0
 800da42:	2300      	movs	r3, #0
 800da44:	ed80 0b00 	vstr	d0, [r0]
 800da48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da4c:	2500      	movs	r5, #0
 800da4e:	e028      	b.n	800daa2 <__ieee754_rem_pio2+0x7a>
 800da50:	4bbe      	ldr	r3, [pc, #760]	@ (800dd4c <__ieee754_rem_pio2+0x324>)
 800da52:	4598      	cmp	r8, r3
 800da54:	d878      	bhi.n	800db48 <__ieee754_rem_pio2+0x120>
 800da56:	9b04      	ldr	r3, [sp, #16]
 800da58:	4dbd      	ldr	r5, [pc, #756]	@ (800dd50 <__ieee754_rem_pio2+0x328>)
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	4630      	mov	r0, r6
 800da5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800dd10 <__ieee754_rem_pio2+0x2e8>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	4639      	mov	r1, r7
 800da66:	dd38      	ble.n	800dada <__ieee754_rem_pio2+0xb2>
 800da68:	f7f2 fbe2 	bl	8000230 <__aeabi_dsub>
 800da6c:	45a8      	cmp	r8, r5
 800da6e:	4606      	mov	r6, r0
 800da70:	460f      	mov	r7, r1
 800da72:	d01a      	beq.n	800daaa <__ieee754_rem_pio2+0x82>
 800da74:	a3a8      	add	r3, pc, #672	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2f0>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fbd9 	bl	8000230 <__aeabi_dsub>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4680      	mov	r8, r0
 800da84:	4689      	mov	r9, r1
 800da86:	4630      	mov	r0, r6
 800da88:	4639      	mov	r1, r7
 800da8a:	f7f2 fbd1 	bl	8000230 <__aeabi_dsub>
 800da8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2f0>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f7f2 fbcc 	bl	8000230 <__aeabi_dsub>
 800da98:	e9c4 8900 	strd	r8, r9, [r4]
 800da9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800daa0:	2501      	movs	r5, #1
 800daa2:	4628      	mov	r0, r5
 800daa4:	b00d      	add	sp, #52	@ 0x34
 800daa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daaa:	a39d      	add	r3, pc, #628	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f8>)
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	f7f2 fbbe 	bl	8000230 <__aeabi_dsub>
 800dab4:	a39c      	add	r3, pc, #624	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x300>)
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	f7f2 fbb7 	bl	8000230 <__aeabi_dsub>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4680      	mov	r8, r0
 800dac8:	4689      	mov	r9, r1
 800daca:	4630      	mov	r0, r6
 800dacc:	4639      	mov	r1, r7
 800dace:	f7f2 fbaf 	bl	8000230 <__aeabi_dsub>
 800dad2:	a395      	add	r3, pc, #596	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x300>)
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	e7dc      	b.n	800da94 <__ieee754_rem_pio2+0x6c>
 800dada:	f7f2 fbab 	bl	8000234 <__adddf3>
 800dade:	45a8      	cmp	r8, r5
 800dae0:	4606      	mov	r6, r0
 800dae2:	460f      	mov	r7, r1
 800dae4:	d018      	beq.n	800db18 <__ieee754_rem_pio2+0xf0>
 800dae6:	a38c      	add	r3, pc, #560	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2f0>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fba2 	bl	8000234 <__adddf3>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	4680      	mov	r8, r0
 800daf6:	4689      	mov	r9, r1
 800daf8:	4630      	mov	r0, r6
 800dafa:	4639      	mov	r1, r7
 800dafc:	f7f2 fb98 	bl	8000230 <__aeabi_dsub>
 800db00:	a385      	add	r3, pc, #532	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2f0>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	f7f2 fb95 	bl	8000234 <__adddf3>
 800db0a:	f04f 35ff 	mov.w	r5, #4294967295
 800db0e:	e9c4 8900 	strd	r8, r9, [r4]
 800db12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db16:	e7c4      	b.n	800daa2 <__ieee754_rem_pio2+0x7a>
 800db18:	a381      	add	r3, pc, #516	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f8>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 fb89 	bl	8000234 <__adddf3>
 800db22:	a381      	add	r3, pc, #516	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x300>)
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	4606      	mov	r6, r0
 800db2a:	460f      	mov	r7, r1
 800db2c:	f7f2 fb82 	bl	8000234 <__adddf3>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	4680      	mov	r8, r0
 800db36:	4689      	mov	r9, r1
 800db38:	4630      	mov	r0, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	f7f2 fb78 	bl	8000230 <__aeabi_dsub>
 800db40:	a379      	add	r3, pc, #484	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x300>)
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	e7de      	b.n	800db06 <__ieee754_rem_pio2+0xde>
 800db48:	4b82      	ldr	r3, [pc, #520]	@ (800dd54 <__ieee754_rem_pio2+0x32c>)
 800db4a:	4598      	cmp	r8, r3
 800db4c:	f200 80d1 	bhi.w	800dcf2 <__ieee754_rem_pio2+0x2ca>
 800db50:	f000 f966 	bl	800de20 <fabs>
 800db54:	ec57 6b10 	vmov	r6, r7, d0
 800db58:	a375      	add	r3, pc, #468	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x308>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	4630      	mov	r0, r6
 800db60:	4639      	mov	r1, r7
 800db62:	f7f2 fd1d 	bl	80005a0 <__aeabi_dmul>
 800db66:	4b7c      	ldr	r3, [pc, #496]	@ (800dd58 <__ieee754_rem_pio2+0x330>)
 800db68:	2200      	movs	r2, #0
 800db6a:	f7f2 fb63 	bl	8000234 <__adddf3>
 800db6e:	f7f2 ffb1 	bl	8000ad4 <__aeabi_d2iz>
 800db72:	4605      	mov	r5, r0
 800db74:	f7f2 fcaa 	bl	80004cc <__aeabi_i2d>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db80:	a363      	add	r3, pc, #396	@ (adr r3, 800dd10 <__ieee754_rem_pio2+0x2e8>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f7f2 fd0b 	bl	80005a0 <__aeabi_dmul>
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 fb4d 	bl	8000230 <__aeabi_dsub>
 800db96:	a360      	add	r3, pc, #384	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2f0>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	4682      	mov	sl, r0
 800db9e:	468b      	mov	fp, r1
 800dba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dba4:	f7f2 fcfc 	bl	80005a0 <__aeabi_dmul>
 800dba8:	2d1f      	cmp	r5, #31
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	dc0c      	bgt.n	800dbca <__ieee754_rem_pio2+0x1a2>
 800dbb0:	4b6a      	ldr	r3, [pc, #424]	@ (800dd5c <__ieee754_rem_pio2+0x334>)
 800dbb2:	1e6a      	subs	r2, r5, #1
 800dbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb8:	4543      	cmp	r3, r8
 800dbba:	d006      	beq.n	800dbca <__ieee754_rem_pio2+0x1a2>
 800dbbc:	4632      	mov	r2, r6
 800dbbe:	463b      	mov	r3, r7
 800dbc0:	4650      	mov	r0, sl
 800dbc2:	4659      	mov	r1, fp
 800dbc4:	f7f2 fb34 	bl	8000230 <__aeabi_dsub>
 800dbc8:	e00e      	b.n	800dbe8 <__ieee754_rem_pio2+0x1c0>
 800dbca:	463b      	mov	r3, r7
 800dbcc:	4632      	mov	r2, r6
 800dbce:	4650      	mov	r0, sl
 800dbd0:	4659      	mov	r1, fp
 800dbd2:	f7f2 fb2d 	bl	8000230 <__aeabi_dsub>
 800dbd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dbda:	9305      	str	r3, [sp, #20]
 800dbdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dbe0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dbe4:	2b10      	cmp	r3, #16
 800dbe6:	dc02      	bgt.n	800dbee <__ieee754_rem_pio2+0x1c6>
 800dbe8:	e9c4 0100 	strd	r0, r1, [r4]
 800dbec:	e039      	b.n	800dc62 <__ieee754_rem_pio2+0x23a>
 800dbee:	a34c      	add	r3, pc, #304	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f8>)
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf8:	f7f2 fcd2 	bl	80005a0 <__aeabi_dmul>
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4650      	mov	r0, sl
 800dc06:	4659      	mov	r1, fp
 800dc08:	f7f2 fb12 	bl	8000230 <__aeabi_dsub>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4680      	mov	r8, r0
 800dc12:	4689      	mov	r9, r1
 800dc14:	4650      	mov	r0, sl
 800dc16:	4659      	mov	r1, fp
 800dc18:	f7f2 fb0a 	bl	8000230 <__aeabi_dsub>
 800dc1c:	4632      	mov	r2, r6
 800dc1e:	463b      	mov	r3, r7
 800dc20:	f7f2 fb06 	bl	8000230 <__aeabi_dsub>
 800dc24:	a340      	add	r3, pc, #256	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x300>)
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	460f      	mov	r7, r1
 800dc2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc32:	f7f2 fcb5 	bl	80005a0 <__aeabi_dmul>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	f7f2 faf9 	bl	8000230 <__aeabi_dsub>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4606      	mov	r6, r0
 800dc44:	460f      	mov	r7, r1
 800dc46:	4640      	mov	r0, r8
 800dc48:	4649      	mov	r1, r9
 800dc4a:	f7f2 faf1 	bl	8000230 <__aeabi_dsub>
 800dc4e:	9a05      	ldr	r2, [sp, #20]
 800dc50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	2b31      	cmp	r3, #49	@ 0x31
 800dc58:	dc20      	bgt.n	800dc9c <__ieee754_rem_pio2+0x274>
 800dc5a:	e9c4 0100 	strd	r0, r1, [r4]
 800dc5e:	46c2      	mov	sl, r8
 800dc60:	46cb      	mov	fp, r9
 800dc62:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dc66:	4650      	mov	r0, sl
 800dc68:	4642      	mov	r2, r8
 800dc6a:	464b      	mov	r3, r9
 800dc6c:	4659      	mov	r1, fp
 800dc6e:	f7f2 fadf 	bl	8000230 <__aeabi_dsub>
 800dc72:	463b      	mov	r3, r7
 800dc74:	4632      	mov	r2, r6
 800dc76:	f7f2 fadb 	bl	8000230 <__aeabi_dsub>
 800dc7a:	9b04      	ldr	r3, [sp, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc82:	f6bf af0e 	bge.w	800daa2 <__ieee754_rem_pio2+0x7a>
 800dc86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dc8a:	6063      	str	r3, [r4, #4]
 800dc8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc90:	f8c4 8000 	str.w	r8, [r4]
 800dc94:	60a0      	str	r0, [r4, #8]
 800dc96:	60e3      	str	r3, [r4, #12]
 800dc98:	426d      	negs	r5, r5
 800dc9a:	e702      	b.n	800daa2 <__ieee754_rem_pio2+0x7a>
 800dc9c:	a326      	add	r3, pc, #152	@ (adr r3, 800dd38 <__ieee754_rem_pio2+0x310>)
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca6:	f7f2 fc7b 	bl	80005a0 <__aeabi_dmul>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460f      	mov	r7, r1
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	f7f2 fabb 	bl	8000230 <__aeabi_dsub>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4682      	mov	sl, r0
 800dcc0:	468b      	mov	fp, r1
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	f7f2 fab3 	bl	8000230 <__aeabi_dsub>
 800dcca:	4632      	mov	r2, r6
 800dccc:	463b      	mov	r3, r7
 800dcce:	f7f2 faaf 	bl	8000230 <__aeabi_dsub>
 800dcd2:	a31b      	add	r3, pc, #108	@ (adr r3, 800dd40 <__ieee754_rem_pio2+0x318>)
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce0:	f7f2 fc5e 	bl	80005a0 <__aeabi_dmul>
 800dce4:	4632      	mov	r2, r6
 800dce6:	463b      	mov	r3, r7
 800dce8:	f7f2 faa2 	bl	8000230 <__aeabi_dsub>
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	e764      	b.n	800dbbc <__ieee754_rem_pio2+0x194>
 800dcf2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd60 <__ieee754_rem_pio2+0x338>)
 800dcf4:	4598      	cmp	r8, r3
 800dcf6:	d935      	bls.n	800dd64 <__ieee754_rem_pio2+0x33c>
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	463b      	mov	r3, r7
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fa96 	bl	8000230 <__aeabi_dsub>
 800dd04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd08:	e9c4 0100 	strd	r0, r1, [r4]
 800dd0c:	e69e      	b.n	800da4c <__ieee754_rem_pio2+0x24>
 800dd0e:	bf00      	nop
 800dd10:	54400000 	.word	0x54400000
 800dd14:	3ff921fb 	.word	0x3ff921fb
 800dd18:	1a626331 	.word	0x1a626331
 800dd1c:	3dd0b461 	.word	0x3dd0b461
 800dd20:	1a600000 	.word	0x1a600000
 800dd24:	3dd0b461 	.word	0x3dd0b461
 800dd28:	2e037073 	.word	0x2e037073
 800dd2c:	3ba3198a 	.word	0x3ba3198a
 800dd30:	6dc9c883 	.word	0x6dc9c883
 800dd34:	3fe45f30 	.word	0x3fe45f30
 800dd38:	2e000000 	.word	0x2e000000
 800dd3c:	3ba3198a 	.word	0x3ba3198a
 800dd40:	252049c1 	.word	0x252049c1
 800dd44:	397b839a 	.word	0x397b839a
 800dd48:	3fe921fb 	.word	0x3fe921fb
 800dd4c:	4002d97b 	.word	0x4002d97b
 800dd50:	3ff921fb 	.word	0x3ff921fb
 800dd54:	413921fb 	.word	0x413921fb
 800dd58:	3fe00000 	.word	0x3fe00000
 800dd5c:	0800e720 	.word	0x0800e720
 800dd60:	7fefffff 	.word	0x7fefffff
 800dd64:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dd68:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800dd6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dd70:	4630      	mov	r0, r6
 800dd72:	460f      	mov	r7, r1
 800dd74:	f7f2 feae 	bl	8000ad4 <__aeabi_d2iz>
 800dd78:	f7f2 fba8 	bl	80004cc <__aeabi_i2d>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd88:	f7f2 fa52 	bl	8000230 <__aeabi_dsub>
 800dd8c:	4b22      	ldr	r3, [pc, #136]	@ (800de18 <__ieee754_rem_pio2+0x3f0>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f7f2 fc06 	bl	80005a0 <__aeabi_dmul>
 800dd94:	460f      	mov	r7, r1
 800dd96:	4606      	mov	r6, r0
 800dd98:	f7f2 fe9c 	bl	8000ad4 <__aeabi_d2iz>
 800dd9c:	f7f2 fb96 	bl	80004cc <__aeabi_i2d>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	4630      	mov	r0, r6
 800dda6:	4639      	mov	r1, r7
 800dda8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddac:	f7f2 fa40 	bl	8000230 <__aeabi_dsub>
 800ddb0:	4b19      	ldr	r3, [pc, #100]	@ (800de18 <__ieee754_rem_pio2+0x3f0>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f7f2 fbf4 	bl	80005a0 <__aeabi_dmul>
 800ddb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ddbc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ddc0:	f04f 0803 	mov.w	r8, #3
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	2700      	movs	r7, #0
 800ddc8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ddcc:	4632      	mov	r2, r6
 800ddce:	463b      	mov	r3, r7
 800ddd0:	46c2      	mov	sl, r8
 800ddd2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddd6:	f7f2 fe4b 	bl	8000a70 <__aeabi_dcmpeq>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d1f4      	bne.n	800ddc8 <__ieee754_rem_pio2+0x3a0>
 800ddde:	4b0f      	ldr	r3, [pc, #60]	@ (800de1c <__ieee754_rem_pio2+0x3f4>)
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	2302      	movs	r3, #2
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	462a      	mov	r2, r5
 800dde8:	4653      	mov	r3, sl
 800ddea:	4621      	mov	r1, r4
 800ddec:	a806      	add	r0, sp, #24
 800ddee:	f000 f81f 	bl	800de30 <__kernel_rem_pio2>
 800ddf2:	9b04      	ldr	r3, [sp, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	4605      	mov	r5, r0
 800ddf8:	f6bf ae53 	bge.w	800daa2 <__ieee754_rem_pio2+0x7a>
 800ddfc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800de00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de04:	e9c4 2300 	strd	r2, r3, [r4]
 800de08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800de0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800de14:	e740      	b.n	800dc98 <__ieee754_rem_pio2+0x270>
 800de16:	bf00      	nop
 800de18:	41700000 	.word	0x41700000
 800de1c:	0800e7a0 	.word	0x0800e7a0

0800de20 <fabs>:
 800de20:	ec51 0b10 	vmov	r0, r1, d0
 800de24:	4602      	mov	r2, r0
 800de26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de2a:	ec43 2b10 	vmov	d0, r2, r3
 800de2e:	4770      	bx	lr

0800de30 <__kernel_rem_pio2>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	ed2d 8b02 	vpush	{d8}
 800de38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800de3c:	f112 0f14 	cmn.w	r2, #20
 800de40:	9306      	str	r3, [sp, #24]
 800de42:	9104      	str	r1, [sp, #16]
 800de44:	4bc2      	ldr	r3, [pc, #776]	@ (800e150 <__kernel_rem_pio2+0x320>)
 800de46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800de48:	9008      	str	r0, [sp, #32]
 800de4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	9b06      	ldr	r3, [sp, #24]
 800de52:	f103 33ff 	add.w	r3, r3, #4294967295
 800de56:	bfa8      	it	ge
 800de58:	1ed4      	subge	r4, r2, #3
 800de5a:	9305      	str	r3, [sp, #20]
 800de5c:	bfb2      	itee	lt
 800de5e:	2400      	movlt	r4, #0
 800de60:	2318      	movge	r3, #24
 800de62:	fb94 f4f3 	sdivge	r4, r4, r3
 800de66:	f06f 0317 	mvn.w	r3, #23
 800de6a:	fb04 3303 	mla	r3, r4, r3, r3
 800de6e:	eb03 0b02 	add.w	fp, r3, r2
 800de72:	9b00      	ldr	r3, [sp, #0]
 800de74:	9a05      	ldr	r2, [sp, #20]
 800de76:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800e140 <__kernel_rem_pio2+0x310>
 800de7a:	eb03 0802 	add.w	r8, r3, r2
 800de7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800de80:	1aa7      	subs	r7, r4, r2
 800de82:	ae20      	add	r6, sp, #128	@ 0x80
 800de84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de88:	2500      	movs	r5, #0
 800de8a:	4545      	cmp	r5, r8
 800de8c:	dd12      	ble.n	800deb4 <__kernel_rem_pio2+0x84>
 800de8e:	9b06      	ldr	r3, [sp, #24]
 800de90:	aa20      	add	r2, sp, #128	@ 0x80
 800de92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800de96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800de9a:	2700      	movs	r7, #0
 800de9c:	9b00      	ldr	r3, [sp, #0]
 800de9e:	429f      	cmp	r7, r3
 800dea0:	dc2e      	bgt.n	800df00 <__kernel_rem_pio2+0xd0>
 800dea2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800e140 <__kernel_rem_pio2+0x310>
 800dea6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800deaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800deae:	46a8      	mov	r8, r5
 800deb0:	2600      	movs	r6, #0
 800deb2:	e01b      	b.n	800deec <__kernel_rem_pio2+0xbc>
 800deb4:	42ef      	cmn	r7, r5
 800deb6:	d407      	bmi.n	800dec8 <__kernel_rem_pio2+0x98>
 800deb8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800debc:	f7f2 fb06 	bl	80004cc <__aeabi_i2d>
 800dec0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dec4:	3501      	adds	r5, #1
 800dec6:	e7e0      	b.n	800de8a <__kernel_rem_pio2+0x5a>
 800dec8:	ec51 0b18 	vmov	r0, r1, d8
 800decc:	e7f8      	b.n	800dec0 <__kernel_rem_pio2+0x90>
 800dece:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800ded2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ded6:	f7f2 fb63 	bl	80005a0 <__aeabi_dmul>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee2:	f7f2 f9a7 	bl	8000234 <__adddf3>
 800dee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deea:	3601      	adds	r6, #1
 800deec:	9b05      	ldr	r3, [sp, #20]
 800deee:	429e      	cmp	r6, r3
 800def0:	dded      	ble.n	800dece <__kernel_rem_pio2+0x9e>
 800def2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800def6:	3701      	adds	r7, #1
 800def8:	ecaa 7b02 	vstmia	sl!, {d7}
 800defc:	3508      	adds	r5, #8
 800defe:	e7cd      	b.n	800de9c <__kernel_rem_pio2+0x6c>
 800df00:	9b00      	ldr	r3, [sp, #0]
 800df02:	f8dd 8000 	ldr.w	r8, [sp]
 800df06:	aa0c      	add	r2, sp, #48	@ 0x30
 800df08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800df10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df14:	9309      	str	r3, [sp, #36]	@ 0x24
 800df16:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800df1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df1c:	ab98      	add	r3, sp, #608	@ 0x260
 800df1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df22:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800df26:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df2a:	ac0c      	add	r4, sp, #48	@ 0x30
 800df2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800df2e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800df32:	46a1      	mov	r9, r4
 800df34:	46c2      	mov	sl, r8
 800df36:	f1ba 0f00 	cmp.w	sl, #0
 800df3a:	dc77      	bgt.n	800e02c <__kernel_rem_pio2+0x1fc>
 800df3c:	4658      	mov	r0, fp
 800df3e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800df42:	f000 fac5 	bl	800e4d0 <scalbn>
 800df46:	ec57 6b10 	vmov	r6, r7, d0
 800df4a:	2200      	movs	r2, #0
 800df4c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800df50:	4630      	mov	r0, r6
 800df52:	4639      	mov	r1, r7
 800df54:	f7f2 fb24 	bl	80005a0 <__aeabi_dmul>
 800df58:	ec41 0b10 	vmov	d0, r0, r1
 800df5c:	f000 fb34 	bl	800e5c8 <floor>
 800df60:	4b7c      	ldr	r3, [pc, #496]	@ (800e154 <__kernel_rem_pio2+0x324>)
 800df62:	ec51 0b10 	vmov	r0, r1, d0
 800df66:	2200      	movs	r2, #0
 800df68:	f7f2 fb1a 	bl	80005a0 <__aeabi_dmul>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4630      	mov	r0, r6
 800df72:	4639      	mov	r1, r7
 800df74:	f7f2 f95c 	bl	8000230 <__aeabi_dsub>
 800df78:	460f      	mov	r7, r1
 800df7a:	4606      	mov	r6, r0
 800df7c:	f7f2 fdaa 	bl	8000ad4 <__aeabi_d2iz>
 800df80:	9002      	str	r0, [sp, #8]
 800df82:	f7f2 faa3 	bl	80004cc <__aeabi_i2d>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4630      	mov	r0, r6
 800df8c:	4639      	mov	r1, r7
 800df8e:	f7f2 f94f 	bl	8000230 <__aeabi_dsub>
 800df92:	f1bb 0f00 	cmp.w	fp, #0
 800df96:	4606      	mov	r6, r0
 800df98:	460f      	mov	r7, r1
 800df9a:	dd6c      	ble.n	800e076 <__kernel_rem_pio2+0x246>
 800df9c:	f108 31ff 	add.w	r1, r8, #4294967295
 800dfa0:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfa2:	9d02      	ldr	r5, [sp, #8]
 800dfa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfa8:	f1cb 0018 	rsb	r0, fp, #24
 800dfac:	fa43 f200 	asr.w	r2, r3, r0
 800dfb0:	4415      	add	r5, r2
 800dfb2:	4082      	lsls	r2, r0
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	aa0c      	add	r2, sp, #48	@ 0x30
 800dfb8:	9502      	str	r5, [sp, #8]
 800dfba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dfbe:	f1cb 0217 	rsb	r2, fp, #23
 800dfc2:	fa43 f902 	asr.w	r9, r3, r2
 800dfc6:	f1b9 0f00 	cmp.w	r9, #0
 800dfca:	dd64      	ble.n	800e096 <__kernel_rem_pio2+0x266>
 800dfcc:	9b02      	ldr	r3, [sp, #8]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	9302      	str	r3, [sp, #8]
 800dfd4:	4615      	mov	r5, r2
 800dfd6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dfda:	4590      	cmp	r8, r2
 800dfdc:	f300 80a1 	bgt.w	800e122 <__kernel_rem_pio2+0x2f2>
 800dfe0:	f1bb 0f00 	cmp.w	fp, #0
 800dfe4:	dd07      	ble.n	800dff6 <__kernel_rem_pio2+0x1c6>
 800dfe6:	f1bb 0f01 	cmp.w	fp, #1
 800dfea:	f000 80c1 	beq.w	800e170 <__kernel_rem_pio2+0x340>
 800dfee:	f1bb 0f02 	cmp.w	fp, #2
 800dff2:	f000 80c8 	beq.w	800e186 <__kernel_rem_pio2+0x356>
 800dff6:	f1b9 0f02 	cmp.w	r9, #2
 800dffa:	d14c      	bne.n	800e096 <__kernel_rem_pio2+0x266>
 800dffc:	4632      	mov	r2, r6
 800dffe:	463b      	mov	r3, r7
 800e000:	4955      	ldr	r1, [pc, #340]	@ (800e158 <__kernel_rem_pio2+0x328>)
 800e002:	2000      	movs	r0, #0
 800e004:	f7f2 f914 	bl	8000230 <__aeabi_dsub>
 800e008:	4606      	mov	r6, r0
 800e00a:	460f      	mov	r7, r1
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	d042      	beq.n	800e096 <__kernel_rem_pio2+0x266>
 800e010:	4658      	mov	r0, fp
 800e012:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800e148 <__kernel_rem_pio2+0x318>
 800e016:	f000 fa5b 	bl	800e4d0 <scalbn>
 800e01a:	4630      	mov	r0, r6
 800e01c:	4639      	mov	r1, r7
 800e01e:	ec53 2b10 	vmov	r2, r3, d0
 800e022:	f7f2 f905 	bl	8000230 <__aeabi_dsub>
 800e026:	4606      	mov	r6, r0
 800e028:	460f      	mov	r7, r1
 800e02a:	e034      	b.n	800e096 <__kernel_rem_pio2+0x266>
 800e02c:	4b4b      	ldr	r3, [pc, #300]	@ (800e15c <__kernel_rem_pio2+0x32c>)
 800e02e:	2200      	movs	r2, #0
 800e030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e034:	f7f2 fab4 	bl	80005a0 <__aeabi_dmul>
 800e038:	f7f2 fd4c 	bl	8000ad4 <__aeabi_d2iz>
 800e03c:	f7f2 fa46 	bl	80004cc <__aeabi_i2d>
 800e040:	4b47      	ldr	r3, [pc, #284]	@ (800e160 <__kernel_rem_pio2+0x330>)
 800e042:	2200      	movs	r2, #0
 800e044:	4606      	mov	r6, r0
 800e046:	460f      	mov	r7, r1
 800e048:	f7f2 faaa 	bl	80005a0 <__aeabi_dmul>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e054:	f7f2 f8ec 	bl	8000230 <__aeabi_dsub>
 800e058:	f7f2 fd3c 	bl	8000ad4 <__aeabi_d2iz>
 800e05c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e060:	f849 0b04 	str.w	r0, [r9], #4
 800e064:	4639      	mov	r1, r7
 800e066:	4630      	mov	r0, r6
 800e068:	f7f2 f8e4 	bl	8000234 <__adddf3>
 800e06c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e074:	e75f      	b.n	800df36 <__kernel_rem_pio2+0x106>
 800e076:	d107      	bne.n	800e088 <__kernel_rem_pio2+0x258>
 800e078:	f108 33ff 	add.w	r3, r8, #4294967295
 800e07c:	aa0c      	add	r2, sp, #48	@ 0x30
 800e07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e082:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e086:	e79e      	b.n	800dfc6 <__kernel_rem_pio2+0x196>
 800e088:	4b36      	ldr	r3, [pc, #216]	@ (800e164 <__kernel_rem_pio2+0x334>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	f7f2 fd0e 	bl	8000aac <__aeabi_dcmpge>
 800e090:	2800      	cmp	r0, #0
 800e092:	d143      	bne.n	800e11c <__kernel_rem_pio2+0x2ec>
 800e094:	4681      	mov	r9, r0
 800e096:	2200      	movs	r2, #0
 800e098:	2300      	movs	r3, #0
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 fce7 	bl	8000a70 <__aeabi_dcmpeq>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	f000 80c1 	beq.w	800e22a <__kernel_rem_pio2+0x3fa>
 800e0a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	9900      	ldr	r1, [sp, #0]
 800e0b0:	428b      	cmp	r3, r1
 800e0b2:	da70      	bge.n	800e196 <__kernel_rem_pio2+0x366>
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	f000 808b 	beq.w	800e1d0 <__kernel_rem_pio2+0x3a0>
 800e0ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0be:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0c0:	f1ab 0b18 	sub.w	fp, fp, #24
 800e0c4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d0f6      	beq.n	800e0ba <__kernel_rem_pio2+0x28a>
 800e0cc:	4658      	mov	r0, fp
 800e0ce:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800e148 <__kernel_rem_pio2+0x318>
 800e0d2:	f000 f9fd 	bl	800e4d0 <scalbn>
 800e0d6:	f108 0301 	add.w	r3, r8, #1
 800e0da:	00da      	lsls	r2, r3, #3
 800e0dc:	9205      	str	r2, [sp, #20]
 800e0de:	ec55 4b10 	vmov	r4, r5, d0
 800e0e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e0e4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800e15c <__kernel_rem_pio2+0x32c>
 800e0e8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e0ec:	4646      	mov	r6, r8
 800e0ee:	f04f 0a00 	mov.w	sl, #0
 800e0f2:	2e00      	cmp	r6, #0
 800e0f4:	f280 80d1 	bge.w	800e29a <__kernel_rem_pio2+0x46a>
 800e0f8:	4644      	mov	r4, r8
 800e0fa:	2c00      	cmp	r4, #0
 800e0fc:	f2c0 80ff 	blt.w	800e2fe <__kernel_rem_pio2+0x4ce>
 800e100:	4b19      	ldr	r3, [pc, #100]	@ (800e168 <__kernel_rem_pio2+0x338>)
 800e102:	461f      	mov	r7, r3
 800e104:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e106:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e10a:	9306      	str	r3, [sp, #24]
 800e10c:	f04f 0a00 	mov.w	sl, #0
 800e110:	f04f 0b00 	mov.w	fp, #0
 800e114:	2600      	movs	r6, #0
 800e116:	eba8 0504 	sub.w	r5, r8, r4
 800e11a:	e0e4      	b.n	800e2e6 <__kernel_rem_pio2+0x4b6>
 800e11c:	f04f 0902 	mov.w	r9, #2
 800e120:	e754      	b.n	800dfcc <__kernel_rem_pio2+0x19c>
 800e122:	f854 3b04 	ldr.w	r3, [r4], #4
 800e126:	bb0d      	cbnz	r5, 800e16c <__kernel_rem_pio2+0x33c>
 800e128:	b123      	cbz	r3, 800e134 <__kernel_rem_pio2+0x304>
 800e12a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e12e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e132:	2301      	movs	r3, #1
 800e134:	3201      	adds	r2, #1
 800e136:	461d      	mov	r5, r3
 800e138:	e74f      	b.n	800dfda <__kernel_rem_pio2+0x1aa>
 800e13a:	bf00      	nop
 800e13c:	f3af 8000 	nop.w
	...
 800e14c:	3ff00000 	.word	0x3ff00000
 800e150:	0800e8e8 	.word	0x0800e8e8
 800e154:	40200000 	.word	0x40200000
 800e158:	3ff00000 	.word	0x3ff00000
 800e15c:	3e700000 	.word	0x3e700000
 800e160:	41700000 	.word	0x41700000
 800e164:	3fe00000 	.word	0x3fe00000
 800e168:	0800e8a8 	.word	0x0800e8a8
 800e16c:	1acb      	subs	r3, r1, r3
 800e16e:	e7de      	b.n	800e12e <__kernel_rem_pio2+0x2fe>
 800e170:	f108 32ff 	add.w	r2, r8, #4294967295
 800e174:	ab0c      	add	r3, sp, #48	@ 0x30
 800e176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e17a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e17e:	a90c      	add	r1, sp, #48	@ 0x30
 800e180:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e184:	e737      	b.n	800dff6 <__kernel_rem_pio2+0x1c6>
 800e186:	f108 32ff 	add.w	r2, r8, #4294967295
 800e18a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e190:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e194:	e7f3      	b.n	800e17e <__kernel_rem_pio2+0x34e>
 800e196:	a90c      	add	r1, sp, #48	@ 0x30
 800e198:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e19c:	3b01      	subs	r3, #1
 800e19e:	430a      	orrs	r2, r1
 800e1a0:	e785      	b.n	800e0ae <__kernel_rem_pio2+0x27e>
 800e1a2:	3401      	adds	r4, #1
 800e1a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1a8:	2a00      	cmp	r2, #0
 800e1aa:	d0fa      	beq.n	800e1a2 <__kernel_rem_pio2+0x372>
 800e1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e1b2:	eb0d 0503 	add.w	r5, sp, r3
 800e1b6:	9b06      	ldr	r3, [sp, #24]
 800e1b8:	aa20      	add	r2, sp, #128	@ 0x80
 800e1ba:	4443      	add	r3, r8
 800e1bc:	f108 0701 	add.w	r7, r8, #1
 800e1c0:	3d98      	subs	r5, #152	@ 0x98
 800e1c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e1c6:	4444      	add	r4, r8
 800e1c8:	42bc      	cmp	r4, r7
 800e1ca:	da04      	bge.n	800e1d6 <__kernel_rem_pio2+0x3a6>
 800e1cc:	46a0      	mov	r8, r4
 800e1ce:	e6a2      	b.n	800df16 <__kernel_rem_pio2+0xe6>
 800e1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1d2:	2401      	movs	r4, #1
 800e1d4:	e7e6      	b.n	800e1a4 <__kernel_rem_pio2+0x374>
 800e1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e1dc:	f7f2 f976 	bl	80004cc <__aeabi_i2d>
 800e1e0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800e4a0 <__kernel_rem_pio2+0x670>
 800e1e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e1e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1f0:	46b2      	mov	sl, r6
 800e1f2:	f04f 0800 	mov.w	r8, #0
 800e1f6:	9b05      	ldr	r3, [sp, #20]
 800e1f8:	4598      	cmp	r8, r3
 800e1fa:	dd05      	ble.n	800e208 <__kernel_rem_pio2+0x3d8>
 800e1fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e200:	3701      	adds	r7, #1
 800e202:	eca5 7b02 	vstmia	r5!, {d7}
 800e206:	e7df      	b.n	800e1c8 <__kernel_rem_pio2+0x398>
 800e208:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e20c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e210:	f7f2 f9c6 	bl	80005a0 <__aeabi_dmul>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e21c:	f7f2 f80a 	bl	8000234 <__adddf3>
 800e220:	f108 0801 	add.w	r8, r8, #1
 800e224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e228:	e7e5      	b.n	800e1f6 <__kernel_rem_pio2+0x3c6>
 800e22a:	f1cb 0000 	rsb	r0, fp, #0
 800e22e:	ec47 6b10 	vmov	d0, r6, r7
 800e232:	f000 f94d 	bl	800e4d0 <scalbn>
 800e236:	ec55 4b10 	vmov	r4, r5, d0
 800e23a:	4b9b      	ldr	r3, [pc, #620]	@ (800e4a8 <__kernel_rem_pio2+0x678>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	4620      	mov	r0, r4
 800e240:	4629      	mov	r1, r5
 800e242:	f7f2 fc33 	bl	8000aac <__aeabi_dcmpge>
 800e246:	b300      	cbz	r0, 800e28a <__kernel_rem_pio2+0x45a>
 800e248:	4b98      	ldr	r3, [pc, #608]	@ (800e4ac <__kernel_rem_pio2+0x67c>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	4620      	mov	r0, r4
 800e24e:	4629      	mov	r1, r5
 800e250:	f7f2 f9a6 	bl	80005a0 <__aeabi_dmul>
 800e254:	f7f2 fc3e 	bl	8000ad4 <__aeabi_d2iz>
 800e258:	4606      	mov	r6, r0
 800e25a:	f7f2 f937 	bl	80004cc <__aeabi_i2d>
 800e25e:	4b92      	ldr	r3, [pc, #584]	@ (800e4a8 <__kernel_rem_pio2+0x678>)
 800e260:	2200      	movs	r2, #0
 800e262:	f7f2 f99d 	bl	80005a0 <__aeabi_dmul>
 800e266:	460b      	mov	r3, r1
 800e268:	4602      	mov	r2, r0
 800e26a:	4629      	mov	r1, r5
 800e26c:	4620      	mov	r0, r4
 800e26e:	f7f1 ffdf 	bl	8000230 <__aeabi_dsub>
 800e272:	f7f2 fc2f 	bl	8000ad4 <__aeabi_d2iz>
 800e276:	ab0c      	add	r3, sp, #48	@ 0x30
 800e278:	f10b 0b18 	add.w	fp, fp, #24
 800e27c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e280:	f108 0801 	add.w	r8, r8, #1
 800e284:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e288:	e720      	b.n	800e0cc <__kernel_rem_pio2+0x29c>
 800e28a:	4620      	mov	r0, r4
 800e28c:	4629      	mov	r1, r5
 800e28e:	f7f2 fc21 	bl	8000ad4 <__aeabi_d2iz>
 800e292:	ab0c      	add	r3, sp, #48	@ 0x30
 800e294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e298:	e718      	b.n	800e0cc <__kernel_rem_pio2+0x29c>
 800e29a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e29c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e2a0:	f7f2 f914 	bl	80004cc <__aeabi_i2d>
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	f7f2 f97a 	bl	80005a0 <__aeabi_dmul>
 800e2ac:	4652      	mov	r2, sl
 800e2ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e2b2:	465b      	mov	r3, fp
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	f7f2 f972 	bl	80005a0 <__aeabi_dmul>
 800e2bc:	3e01      	subs	r6, #1
 800e2be:	4604      	mov	r4, r0
 800e2c0:	460d      	mov	r5, r1
 800e2c2:	e716      	b.n	800e0f2 <__kernel_rem_pio2+0x2c2>
 800e2c4:	9906      	ldr	r1, [sp, #24]
 800e2c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e2ca:	9106      	str	r1, [sp, #24]
 800e2cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e2d0:	f7f2 f966 	bl	80005a0 <__aeabi_dmul>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4650      	mov	r0, sl
 800e2da:	4659      	mov	r1, fp
 800e2dc:	f7f1 ffaa 	bl	8000234 <__adddf3>
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	4682      	mov	sl, r0
 800e2e4:	468b      	mov	fp, r1
 800e2e6:	9b00      	ldr	r3, [sp, #0]
 800e2e8:	429e      	cmp	r6, r3
 800e2ea:	dc01      	bgt.n	800e2f0 <__kernel_rem_pio2+0x4c0>
 800e2ec:	42ae      	cmp	r6, r5
 800e2ee:	dde9      	ble.n	800e2c4 <__kernel_rem_pio2+0x494>
 800e2f0:	ab48      	add	r3, sp, #288	@ 0x120
 800e2f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e2f6:	e9c5 ab00 	strd	sl, fp, [r5]
 800e2fa:	3c01      	subs	r4, #1
 800e2fc:	e6fd      	b.n	800e0fa <__kernel_rem_pio2+0x2ca>
 800e2fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e300:	2b02      	cmp	r3, #2
 800e302:	dc0b      	bgt.n	800e31c <__kernel_rem_pio2+0x4ec>
 800e304:	2b00      	cmp	r3, #0
 800e306:	dc35      	bgt.n	800e374 <__kernel_rem_pio2+0x544>
 800e308:	d059      	beq.n	800e3be <__kernel_rem_pio2+0x58e>
 800e30a:	9b02      	ldr	r3, [sp, #8]
 800e30c:	f003 0007 	and.w	r0, r3, #7
 800e310:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e314:	ecbd 8b02 	vpop	{d8}
 800e318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d1f3      	bne.n	800e30a <__kernel_rem_pio2+0x4da>
 800e322:	9b05      	ldr	r3, [sp, #20]
 800e324:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e328:	eb0d 0403 	add.w	r4, sp, r3
 800e32c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e330:	4625      	mov	r5, r4
 800e332:	46c2      	mov	sl, r8
 800e334:	f1ba 0f00 	cmp.w	sl, #0
 800e338:	dc69      	bgt.n	800e40e <__kernel_rem_pio2+0x5de>
 800e33a:	4645      	mov	r5, r8
 800e33c:	2d01      	cmp	r5, #1
 800e33e:	f300 8087 	bgt.w	800e450 <__kernel_rem_pio2+0x620>
 800e342:	9c05      	ldr	r4, [sp, #20]
 800e344:	ab48      	add	r3, sp, #288	@ 0x120
 800e346:	441c      	add	r4, r3
 800e348:	2000      	movs	r0, #0
 800e34a:	2100      	movs	r1, #0
 800e34c:	f1b8 0f01 	cmp.w	r8, #1
 800e350:	f300 809c 	bgt.w	800e48c <__kernel_rem_pio2+0x65c>
 800e354:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800e358:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800e35c:	f1b9 0f00 	cmp.w	r9, #0
 800e360:	f040 80a6 	bne.w	800e4b0 <__kernel_rem_pio2+0x680>
 800e364:	9b04      	ldr	r3, [sp, #16]
 800e366:	e9c3 5600 	strd	r5, r6, [r3]
 800e36a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e36e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e372:	e7ca      	b.n	800e30a <__kernel_rem_pio2+0x4da>
 800e374:	9d05      	ldr	r5, [sp, #20]
 800e376:	ab48      	add	r3, sp, #288	@ 0x120
 800e378:	441d      	add	r5, r3
 800e37a:	4644      	mov	r4, r8
 800e37c:	2000      	movs	r0, #0
 800e37e:	2100      	movs	r1, #0
 800e380:	2c00      	cmp	r4, #0
 800e382:	da35      	bge.n	800e3f0 <__kernel_rem_pio2+0x5c0>
 800e384:	f1b9 0f00 	cmp.w	r9, #0
 800e388:	d038      	beq.n	800e3fc <__kernel_rem_pio2+0x5cc>
 800e38a:	4602      	mov	r2, r0
 800e38c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e390:	9c04      	ldr	r4, [sp, #16]
 800e392:	e9c4 2300 	strd	r2, r3, [r4]
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e39e:	f7f1 ff47 	bl	8000230 <__aeabi_dsub>
 800e3a2:	ad4a      	add	r5, sp, #296	@ 0x128
 800e3a4:	2401      	movs	r4, #1
 800e3a6:	45a0      	cmp	r8, r4
 800e3a8:	da2b      	bge.n	800e402 <__kernel_rem_pio2+0x5d2>
 800e3aa:	f1b9 0f00 	cmp.w	r9, #0
 800e3ae:	d002      	beq.n	800e3b6 <__kernel_rem_pio2+0x586>
 800e3b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	9b04      	ldr	r3, [sp, #16]
 800e3b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3bc:	e7a5      	b.n	800e30a <__kernel_rem_pio2+0x4da>
 800e3be:	9c05      	ldr	r4, [sp, #20]
 800e3c0:	ab48      	add	r3, sp, #288	@ 0x120
 800e3c2:	441c      	add	r4, r3
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	f1b8 0f00 	cmp.w	r8, #0
 800e3cc:	da09      	bge.n	800e3e2 <__kernel_rem_pio2+0x5b2>
 800e3ce:	f1b9 0f00 	cmp.w	r9, #0
 800e3d2:	d002      	beq.n	800e3da <__kernel_rem_pio2+0x5aa>
 800e3d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3d8:	4619      	mov	r1, r3
 800e3da:	9b04      	ldr	r3, [sp, #16]
 800e3dc:	e9c3 0100 	strd	r0, r1, [r3]
 800e3e0:	e793      	b.n	800e30a <__kernel_rem_pio2+0x4da>
 800e3e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3e6:	f7f1 ff25 	bl	8000234 <__adddf3>
 800e3ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3ee:	e7eb      	b.n	800e3c8 <__kernel_rem_pio2+0x598>
 800e3f0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e3f4:	f7f1 ff1e 	bl	8000234 <__adddf3>
 800e3f8:	3c01      	subs	r4, #1
 800e3fa:	e7c1      	b.n	800e380 <__kernel_rem_pio2+0x550>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	e7c6      	b.n	800e390 <__kernel_rem_pio2+0x560>
 800e402:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e406:	f7f1 ff15 	bl	8000234 <__adddf3>
 800e40a:	3401      	adds	r4, #1
 800e40c:	e7cb      	b.n	800e3a6 <__kernel_rem_pio2+0x576>
 800e40e:	ed35 7b02 	vldmdb	r5!, {d7}
 800e412:	ed8d 7b00 	vstr	d7, [sp]
 800e416:	ed95 7b02 	vldr	d7, [r5, #8]
 800e41a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e41e:	ec53 2b17 	vmov	r2, r3, d7
 800e422:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e426:	f7f1 ff05 	bl	8000234 <__adddf3>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e436:	f7f1 fefb 	bl	8000230 <__aeabi_dsub>
 800e43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e43e:	f7f1 fef9 	bl	8000234 <__adddf3>
 800e442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e446:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e44a:	e9c5 6700 	strd	r6, r7, [r5]
 800e44e:	e771      	b.n	800e334 <__kernel_rem_pio2+0x504>
 800e450:	ed34 7b02 	vldmdb	r4!, {d7}
 800e454:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e458:	ec51 0b17 	vmov	r0, r1, d7
 800e45c:	4652      	mov	r2, sl
 800e45e:	465b      	mov	r3, fp
 800e460:	ed8d 7b00 	vstr	d7, [sp]
 800e464:	f7f1 fee6 	bl	8000234 <__adddf3>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4606      	mov	r6, r0
 800e46e:	460f      	mov	r7, r1
 800e470:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e474:	f7f1 fedc 	bl	8000230 <__aeabi_dsub>
 800e478:	4652      	mov	r2, sl
 800e47a:	465b      	mov	r3, fp
 800e47c:	f7f1 feda 	bl	8000234 <__adddf3>
 800e480:	3d01      	subs	r5, #1
 800e482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e486:	e9c4 6700 	strd	r6, r7, [r4]
 800e48a:	e757      	b.n	800e33c <__kernel_rem_pio2+0x50c>
 800e48c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e490:	f7f1 fed0 	bl	8000234 <__adddf3>
 800e494:	f108 38ff 	add.w	r8, r8, #4294967295
 800e498:	e758      	b.n	800e34c <__kernel_rem_pio2+0x51c>
 800e49a:	bf00      	nop
 800e49c:	f3af 8000 	nop.w
	...
 800e4a8:	41700000 	.word	0x41700000
 800e4ac:	3e700000 	.word	0x3e700000
 800e4b0:	9b04      	ldr	r3, [sp, #16]
 800e4b2:	9a04      	ldr	r2, [sp, #16]
 800e4b4:	601d      	str	r5, [r3, #0]
 800e4b6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800e4ba:	605c      	str	r4, [r3, #4]
 800e4bc:	609f      	str	r7, [r3, #8]
 800e4be:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800e4c2:	60d3      	str	r3, [r2, #12]
 800e4c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4c8:	6110      	str	r0, [r2, #16]
 800e4ca:	6153      	str	r3, [r2, #20]
 800e4cc:	e71d      	b.n	800e30a <__kernel_rem_pio2+0x4da>
 800e4ce:	bf00      	nop

0800e4d0 <scalbn>:
 800e4d0:	b570      	push	{r4, r5, r6, lr}
 800e4d2:	ec55 4b10 	vmov	r4, r5, d0
 800e4d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e4da:	4606      	mov	r6, r0
 800e4dc:	462b      	mov	r3, r5
 800e4de:	b991      	cbnz	r1, 800e506 <scalbn+0x36>
 800e4e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e4e4:	4323      	orrs	r3, r4
 800e4e6:	d03b      	beq.n	800e560 <scalbn+0x90>
 800e4e8:	4b33      	ldr	r3, [pc, #204]	@ (800e5b8 <scalbn+0xe8>)
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f7f2 f856 	bl	80005a0 <__aeabi_dmul>
 800e4f4:	4b31      	ldr	r3, [pc, #196]	@ (800e5bc <scalbn+0xec>)
 800e4f6:	429e      	cmp	r6, r3
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	da0f      	bge.n	800e51e <scalbn+0x4e>
 800e4fe:	a326      	add	r3, pc, #152	@ (adr r3, 800e598 <scalbn+0xc8>)
 800e500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e504:	e01e      	b.n	800e544 <scalbn+0x74>
 800e506:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e50a:	4291      	cmp	r1, r2
 800e50c:	d10b      	bne.n	800e526 <scalbn+0x56>
 800e50e:	4622      	mov	r2, r4
 800e510:	4620      	mov	r0, r4
 800e512:	4629      	mov	r1, r5
 800e514:	f7f1 fe8e 	bl	8000234 <__adddf3>
 800e518:	4604      	mov	r4, r0
 800e51a:	460d      	mov	r5, r1
 800e51c:	e020      	b.n	800e560 <scalbn+0x90>
 800e51e:	460b      	mov	r3, r1
 800e520:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e524:	3936      	subs	r1, #54	@ 0x36
 800e526:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e52a:	4296      	cmp	r6, r2
 800e52c:	dd0d      	ble.n	800e54a <scalbn+0x7a>
 800e52e:	2d00      	cmp	r5, #0
 800e530:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5a0 <scalbn+0xd0>)
 800e532:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e536:	da02      	bge.n	800e53e <scalbn+0x6e>
 800e538:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5a8 <scalbn+0xd8>)
 800e53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e53e:	a318      	add	r3, pc, #96	@ (adr r3, 800e5a0 <scalbn+0xd0>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f2 f82c 	bl	80005a0 <__aeabi_dmul>
 800e548:	e7e6      	b.n	800e518 <scalbn+0x48>
 800e54a:	1872      	adds	r2, r6, r1
 800e54c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e550:	428a      	cmp	r2, r1
 800e552:	dcec      	bgt.n	800e52e <scalbn+0x5e>
 800e554:	2a00      	cmp	r2, #0
 800e556:	dd06      	ble.n	800e566 <scalbn+0x96>
 800e558:	f36f 531e 	bfc	r3, #20, #11
 800e55c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e560:	ec45 4b10 	vmov	d0, r4, r5
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e56a:	da08      	bge.n	800e57e <scalbn+0xae>
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e598 <scalbn+0xc8>)
 800e570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e574:	dac3      	bge.n	800e4fe <scalbn+0x2e>
 800e576:	a10e      	add	r1, pc, #56	@ (adr r1, 800e5b0 <scalbn+0xe0>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	e7bf      	b.n	800e4fe <scalbn+0x2e>
 800e57e:	3236      	adds	r2, #54	@ 0x36
 800e580:	f36f 531e 	bfc	r3, #20, #11
 800e584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e588:	4620      	mov	r0, r4
 800e58a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c0 <scalbn+0xf0>)
 800e58c:	4629      	mov	r1, r5
 800e58e:	2200      	movs	r2, #0
 800e590:	e7d8      	b.n	800e544 <scalbn+0x74>
 800e592:	bf00      	nop
 800e594:	f3af 8000 	nop.w
 800e598:	c2f8f359 	.word	0xc2f8f359
 800e59c:	01a56e1f 	.word	0x01a56e1f
 800e5a0:	8800759c 	.word	0x8800759c
 800e5a4:	7e37e43c 	.word	0x7e37e43c
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	fe37e43c 	.word	0xfe37e43c
 800e5b0:	c2f8f359 	.word	0xc2f8f359
 800e5b4:	81a56e1f 	.word	0x81a56e1f
 800e5b8:	43500000 	.word	0x43500000
 800e5bc:	ffff3cb0 	.word	0xffff3cb0
 800e5c0:	3c900000 	.word	0x3c900000
 800e5c4:	00000000 	.word	0x00000000

0800e5c8 <floor>:
 800e5c8:	ec51 0b10 	vmov	r0, r1, d0
 800e5cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e5d8:	2e13      	cmp	r6, #19
 800e5da:	460c      	mov	r4, r1
 800e5dc:	4605      	mov	r5, r0
 800e5de:	4680      	mov	r8, r0
 800e5e0:	dc34      	bgt.n	800e64c <floor+0x84>
 800e5e2:	2e00      	cmp	r6, #0
 800e5e4:	da17      	bge.n	800e616 <floor+0x4e>
 800e5e6:	a332      	add	r3, pc, #200	@ (adr r3, 800e6b0 <floor+0xe8>)
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7f1 fe22 	bl	8000234 <__adddf3>
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f7f2 fa64 	bl	8000ac0 <__aeabi_dcmpgt>
 800e5f8:	b150      	cbz	r0, 800e610 <floor+0x48>
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	da55      	bge.n	800e6aa <floor+0xe2>
 800e5fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e602:	432c      	orrs	r4, r5
 800e604:	2500      	movs	r5, #0
 800e606:	42ac      	cmp	r4, r5
 800e608:	4c2b      	ldr	r4, [pc, #172]	@ (800e6b8 <floor+0xf0>)
 800e60a:	bf08      	it	eq
 800e60c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e610:	4621      	mov	r1, r4
 800e612:	4628      	mov	r0, r5
 800e614:	e023      	b.n	800e65e <floor+0x96>
 800e616:	4f29      	ldr	r7, [pc, #164]	@ (800e6bc <floor+0xf4>)
 800e618:	4137      	asrs	r7, r6
 800e61a:	ea01 0307 	and.w	r3, r1, r7
 800e61e:	4303      	orrs	r3, r0
 800e620:	d01d      	beq.n	800e65e <floor+0x96>
 800e622:	a323      	add	r3, pc, #140	@ (adr r3, 800e6b0 <floor+0xe8>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fe04 	bl	8000234 <__adddf3>
 800e62c:	2200      	movs	r2, #0
 800e62e:	2300      	movs	r3, #0
 800e630:	f7f2 fa46 	bl	8000ac0 <__aeabi_dcmpgt>
 800e634:	2800      	cmp	r0, #0
 800e636:	d0eb      	beq.n	800e610 <floor+0x48>
 800e638:	2c00      	cmp	r4, #0
 800e63a:	bfbe      	ittt	lt
 800e63c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e640:	4133      	asrlt	r3, r6
 800e642:	18e4      	addlt	r4, r4, r3
 800e644:	ea24 0407 	bic.w	r4, r4, r7
 800e648:	2500      	movs	r5, #0
 800e64a:	e7e1      	b.n	800e610 <floor+0x48>
 800e64c:	2e33      	cmp	r6, #51	@ 0x33
 800e64e:	dd0a      	ble.n	800e666 <floor+0x9e>
 800e650:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e654:	d103      	bne.n	800e65e <floor+0x96>
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	f7f1 fdeb 	bl	8000234 <__adddf3>
 800e65e:	ec41 0b10 	vmov	d0, r0, r1
 800e662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e666:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e66a:	f04f 37ff 	mov.w	r7, #4294967295
 800e66e:	40df      	lsrs	r7, r3
 800e670:	4207      	tst	r7, r0
 800e672:	d0f4      	beq.n	800e65e <floor+0x96>
 800e674:	a30e      	add	r3, pc, #56	@ (adr r3, 800e6b0 <floor+0xe8>)
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	f7f1 fddb 	bl	8000234 <__adddf3>
 800e67e:	2200      	movs	r2, #0
 800e680:	2300      	movs	r3, #0
 800e682:	f7f2 fa1d 	bl	8000ac0 <__aeabi_dcmpgt>
 800e686:	2800      	cmp	r0, #0
 800e688:	d0c2      	beq.n	800e610 <floor+0x48>
 800e68a:	2c00      	cmp	r4, #0
 800e68c:	da0a      	bge.n	800e6a4 <floor+0xdc>
 800e68e:	2e14      	cmp	r6, #20
 800e690:	d101      	bne.n	800e696 <floor+0xce>
 800e692:	3401      	adds	r4, #1
 800e694:	e006      	b.n	800e6a4 <floor+0xdc>
 800e696:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e69a:	2301      	movs	r3, #1
 800e69c:	40b3      	lsls	r3, r6
 800e69e:	441d      	add	r5, r3
 800e6a0:	4545      	cmp	r5, r8
 800e6a2:	d3f6      	bcc.n	800e692 <floor+0xca>
 800e6a4:	ea25 0507 	bic.w	r5, r5, r7
 800e6a8:	e7b2      	b.n	800e610 <floor+0x48>
 800e6aa:	2500      	movs	r5, #0
 800e6ac:	462c      	mov	r4, r5
 800e6ae:	e7af      	b.n	800e610 <floor+0x48>
 800e6b0:	8800759c 	.word	0x8800759c
 800e6b4:	7e37e43c 	.word	0x7e37e43c
 800e6b8:	bff00000 	.word	0xbff00000
 800e6bc:	000fffff 	.word	0x000fffff

0800e6c0 <_init>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	bf00      	nop
 800e6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6c6:	bc08      	pop	{r3}
 800e6c8:	469e      	mov	lr, r3
 800e6ca:	4770      	bx	lr

0800e6cc <_fini>:
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	bf00      	nop
 800e6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d2:	bc08      	pop	{r3}
 800e6d4:	469e      	mov	lr, r3
 800e6d6:	4770      	bx	lr
