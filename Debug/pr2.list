
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c948  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800cb20  0800cb20  0000db20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  0000e00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd40  0800cd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd48  0800cd48  0000e00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd48  0800cd48  0000dd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd4c  0800cd4c  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800cd50  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  0800cd5c  0000e00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800cd5c  0000e620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002319c  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003944  00000000  00000000  000311d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e00  00000000  00000000  00034b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176f  00000000  00000000  00036920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e96d  00000000  00000000  0003808f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002112b  00000000  00000000  000669fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c4b3  00000000  00000000  00087b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d3fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000889c  00000000  00000000  001d4020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001dc8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cb08 	.word	0x0800cb08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800cb08 	.word	0x0800cb08

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ed6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 6dca 	sub.w	sp, sp, #1616	@ 0x650
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 fa8b 	bl	8002412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f93e 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fda6 	bl	8001a50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f04:	f000 f988 	bl	8001218 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000f08:	f000 f9fe 	bl	8001308 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000f0c:	f000 fa22 	bl	8001354 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000f10:	f000 fa46 	bl	80013a0 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000f14:	f000 fa6a 	bl	80013ec <MX_COMP6_Init>
  MX_DAC1_Init();
 8000f18:	f000 fa8e 	bl	8001438 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000f1c:	f000 fad4 	bl	80014c8 <MX_DAC2_Init>
  MX_DAC3_Init();
 8000f20:	f000 fb0c 	bl	800153c <MX_DAC3_Init>
  MX_HRTIM1_Init();
 8000f24:	f000 fb4e 	bl	80015c4 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 8000f28:	f000 fcf0 	bl	800190c <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 8000f2c:	f000 fd1c 	bl	8001968 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000f30:	f000 fd66 	bl	8001a00 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f34:	f000 fc56 	bl	80017e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000f38:	4883      	ldr	r0, [pc, #524]	@ (8001148 <main+0x258>)
 8000f3a:	f007 fe1f 	bl	8008b7c <HAL_TIM_Base_Start_IT>
  __HAL_DAC_ENABLE(&hdac3, DAC_CHANNEL_1);
 8000f3e:	4b83      	ldr	r3, [pc, #524]	@ (800114c <main+0x25c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b81      	ldr	r3, [pc, #516]	@ (800114c <main+0x25c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f4e:	2108      	movs	r1, #8
 8000f50:	487d      	ldr	r0, [pc, #500]	@ (8001148 <main+0x258>)
 8000f52:	f007 fee3 	bl	8008d1c <HAL_TIM_PWM_Start>


  // HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

  char msg[] = "MEOW!\r\n";
 8000f56:	4a7e      	ldr	r2, [pc, #504]	@ (8001150 <main+0x260>)
 8000f58:	f507 63c8 	add.w	r3, r7, #1600	@ 0x640
 8000f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f60:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f64:	f507 63c8 	add.w	r3, r7, #1600	@ 0x640
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f955 	bl	8000218 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f507 61c8 	add.w	r1, r7, #1600	@ 0x640
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	4876      	ldr	r0, [pc, #472]	@ (8001154 <main+0x264>)
 8000f7c:	f008 fe72 	bl	8009c64 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f001 fab7 	bl	80024f4 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f86:	217f      	movs	r1, #127	@ 0x7f
 8000f88:	4873      	ldr	r0, [pc, #460]	@ (8001158 <main+0x268>)
 8000f8a:	f002 fe3f 	bl	8003c0c <HAL_ADCEx_Calibration_Start>

  //int curr_voltage_mV = (ch_res * 3300) / 4095;
  //printf("  CH%d=%d.%dV\r", chn, curr_voltage_mV / 1000, (curr_voltage_mV % 1000) / 100);

  uint32_t sineWave[SAMPLE_COUNT];
  for (int i = 0; i < SAMPLE_COUNT; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8000f94:	e03f      	b.n	8001016 <main+0x126>
  {
      sineWave[i] = OFFSET + AMPLITUDE * sin(2 * M_PI * i / SAMPLE_COUNT);
 8000f96:	f8d7 064c 	ldr.w	r0, [r7, #1612]	@ 0x64c
 8000f9a:	f7ff fa97 	bl	80004cc <__aeabi_i2d>
 8000f9e:	a368      	add	r3, pc, #416	@ (adr r3, 8001140 <main+0x250>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fafc 	bl	80005a0 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	4b69      	ldr	r3, [pc, #420]	@ (800115c <main+0x26c>)
 8000fb6:	f7ff fc1d 	bl	80007f4 <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	ec43 2b17 	vmov	d7, r2, r3
 8000fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc6:	eef0 0a67 	vmov.f32	s1, s15
 8000fca:	f00a fd79 	bl	800bac0 <sin>
 8000fce:	ec51 0b10 	vmov	r0, r1, d0
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b62      	ldr	r3, [pc, #392]	@ (8001160 <main+0x270>)
 8000fd8:	f7ff fae2 	bl	80005a0 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8001164 <main+0x274>)
 8000fea:	f7ff f923 	bl	8000234 <__adddf3>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fd95 	bl	8000b24 <__aeabi_d2uiz>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	f507 63ca 	add.w	r3, r7, #1616	@ 0x650
 8001000:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 8001004:	f8d7 264c 	ldr.w	r2, [r7, #1612]	@ 0x64c
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SAMPLE_COUNT; i++)
 800100c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 8001010:	3301      	adds	r3, #1
 8001012:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8001016:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 800101a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800101e:	dbba      	blt.n	8000f96 <main+0xa6>
  }

  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8001020:	2110      	movs	r1, #16
 8001022:	4851      	ldr	r0, [pc, #324]	@ (8001168 <main+0x278>)
 8001024:	f003 fbaa 	bl	800477c <HAL_DAC_Start>
  while (1)
  {
	  for (int i = 0; i < SAMPLE_COUNT; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 800102e:	e014      	b.n	800105a <main+0x16a>
	  {
	          HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sineWave[i]);
 8001030:	f507 63ca 	add.w	r3, r7, #1616	@ 0x650
 8001034:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 8001038:	f8d7 2648 	ldr.w	r2, [r7, #1608]	@ 0x648
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4848      	ldr	r0, [pc, #288]	@ (8001168 <main+0x278>)
 8001046:	f003 fc05 	bl	8004854 <HAL_DAC_SetValue>
	          HAL_Delay(0.01);
 800104a:	2000      	movs	r0, #0
 800104c:	f001 fa52 	bl	80024f4 <HAL_Delay>
	  for (int i = 0; i < SAMPLE_COUNT; i++)
 8001050:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8001054:	3301      	adds	r3, #1
 8001056:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 800105a:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 800105e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001062:	dbe5      	blt.n	8001030 <main+0x140>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(pwm_value == 0) step = 1;
 8001064:	4b41      	ldr	r3, [pc, #260]	@ (800116c <main+0x27c>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <main+0x182>
 800106c:	4b40      	ldr	r3, [pc, #256]	@ (8001170 <main+0x280>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
    if(pwm_value == 50) step = -1;
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <main+0x27c>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b32      	cmp	r3, #50	@ 0x32
 8001078:	d102      	bne.n	8001080 <main+0x190>
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <main+0x280>)
 800107c:	22ff      	movs	r2, #255	@ 0xff
 800107e:	701a      	strb	r2, [r3, #0]
	pwm_value += step;
 8001080:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <main+0x280>)
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b38      	ldr	r3, [pc, #224]	@ (800116c <main+0x27c>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	4413      	add	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b36      	ldr	r3, [pc, #216]	@ (800116c <main+0x27c>)
 8001092:	801a      	strh	r2, [r3, #0]
	setPWM(pwm_value);
 8001094:	4b35      	ldr	r3, [pc, #212]	@ (800116c <main+0x27c>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fdad 	bl	8001bf8 <setPWM>
	// HAL_Delay(5);

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 800109e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a2:	4834      	ldr	r0, [pc, #208]	@ (8001174 <main+0x284>)
 80010a4:	f003 ff40 	bl	8004f28 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d105      	bne.n	80010ba <main+0x1ca>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4830      	ldr	r0, [pc, #192]	@ (8001174 <main+0x284>)
 80010b4:	f003 ff50 	bl	8004f58 <HAL_GPIO_WritePin>
 80010b8:	e004      	b.n	80010c4 <main+0x1d4>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	482d      	ldr	r0, [pc, #180]	@ (8001174 <main+0x284>)
 80010c0:	f003 ff4a 	bl	8004f58 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 80010c4:	2120      	movs	r1, #32
 80010c6:	482c      	ldr	r0, [pc, #176]	@ (8001178 <main+0x288>)
 80010c8:	f003 ff2e 	bl	8004f28 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d107      	bne.n	80010e2 <main+0x1f2>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f003 ff3c 	bl	8004f58 <HAL_GPIO_WritePin>
 80010e0:	e006      	b.n	80010f0 <main+0x200>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f003 ff34 	bl	8004f58 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 80010f0:	2110      	movs	r1, #16
 80010f2:	4821      	ldr	r0, [pc, #132]	@ (8001178 <main+0x288>)
 80010f4:	f003 ff18 	bl	8004f28 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <main+0x21a>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2102      	movs	r1, #2
 8001102:	481c      	ldr	r0, [pc, #112]	@ (8001174 <main+0x284>)
 8001104:	f003 ff28 	bl	8004f58 <HAL_GPIO_WritePin>
 8001108:	e004      	b.n	8001114 <main+0x224>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2102      	movs	r1, #2
 800110e:	4819      	ldr	r0, [pc, #100]	@ (8001174 <main+0x284>)
 8001110:	f003 ff22 	bl	8004f58 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8001114:	2104      	movs	r1, #4
 8001116:	4817      	ldr	r0, [pc, #92]	@ (8001174 <main+0x284>)
 8001118:	f003 ff06 	bl	8004f28 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <main+0x23e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4813      	ldr	r0, [pc, #76]	@ (8001174 <main+0x284>)
 8001128:	f003 ff16 	bl	8004f58 <HAL_GPIO_WritePin>
 800112c:	e77c      	b.n	8001028 <main+0x138>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	4810      	ldr	r0, [pc, #64]	@ (8001174 <main+0x284>)
 8001134:	f003 ff10 	bl	8004f58 <HAL_GPIO_WritePin>
	  for (int i = 0; i < SAMPLE_COUNT; i++)
 8001138:	e776      	b.n	8001028 <main+0x138>
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	54442d18 	.word	0x54442d18
 8001144:	401921fb 	.word	0x401921fb
 8001148:	2000025c 	.word	0x2000025c
 800114c:	2000014c 	.word	0x2000014c
 8001150:	0800cb20 	.word	0x0800cb20
 8001154:	200002a8 	.word	0x200002a8
 8001158:	20000028 	.word	0x20000028
 800115c:	40790000 	.word	0x40790000
 8001160:	409f4000 	.word	0x409f4000
 8001164:	40a00000 	.word	0x40a00000
 8001168:	20000124 	.word	0x20000124
 800116c:	20000618 	.word	0x20000618
 8001170:	2000061a 	.word	0x2000061a
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2238      	movs	r2, #56	@ 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fc6a 	bl	800ba64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800119e:	2000      	movs	r0, #0
 80011a0:	f006 fcbc 	bl	8007b1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80011a4:	2322      	movs	r3, #34	@ 0x22
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011be:	2304      	movs	r3, #4
 80011c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011c2:	2355      	movs	r3, #85	@ 0x55
 80011c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80011c6:	2308      	movs	r3, #8
 80011c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80011ca:	2308      	movs	r3, #8
 80011cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 fd54 	bl	8007c84 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80011e2:	f000 fd27 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 f852 	bl	80082a8 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800120a:	f000 fd13 	bl	8001c34 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	@ 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	@ 0x30
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2220      	movs	r2, #32
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00a fc17 	bl	800ba64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800123c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800123e:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001240:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001246:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001260:	2204      	movs	r2, #4
 8001262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800126a:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001276:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	4817      	ldr	r0, [pc, #92]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012a2:	f001 fb87 	bl	80029b4 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012ac:	f000 fcc2 	bl	8001c34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012bc:	f002 fd3a 	bl	8003d34 <HAL_ADCEx_MultiModeConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012c6:	f000 fcb5 	bl	8001c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_ADC1_Init+0xec>)
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2306      	movs	r3, #6
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d6:	237f      	movs	r3, #127	@ 0x7f
 80012d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012da:	2304      	movs	r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012e8:	f001 ff9e 	bl	8003228 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012f2:	f000 fc9f 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	@ 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000028 	.word	0x20000028
 8001304:	08600004 	.word	0x08600004

08001308 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_COMP2_Init+0x44>)
 800130e:	4a10      	ldr	r2, [pc, #64]	@ (8001350 <MX_COMP2_Init+0x48>)
 8001310:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_COMP2_Init+0x44>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_COMP2_Init+0x44>)
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_COMP2_Init+0x44>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_COMP2_Init+0x44>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_COMP2_Init+0x44>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_COMP2_Init+0x44>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_COMP2_Init+0x44>)
 8001338:	f002 ff54 	bl	80041e4 <HAL_COMP_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001342:	f000 fc77 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000094 	.word	0x20000094
 8001350:	40010204 	.word	0x40010204

08001354 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_COMP3_Init+0x44>)
 800135a:	4a10      	ldr	r2, [pc, #64]	@ (800139c <MX_COMP3_Init+0x48>)
 800135c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_COMP3_Init+0x44>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_COMP3_Init+0x44>)
 8001366:	2240      	movs	r2, #64	@ 0x40
 8001368:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_COMP3_Init+0x44>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_COMP3_Init+0x44>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_COMP3_Init+0x44>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_COMP3_Init+0x44>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_COMP3_Init+0x44>)
 8001384:	f002 ff2e 	bl	80041e4 <HAL_COMP_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 800138e:	f000 fc51 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000b8 	.word	0x200000b8
 800139c:	40010208 	.word	0x40010208

080013a0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <MX_COMP4_Init+0x48>)
 80013a8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013b2:	2250      	movs	r2, #80	@ 0x50
 80013b4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_COMP4_Init+0x44>)
 80013d0:	f002 ff08 	bl	80041e4 <HAL_COMP_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 80013da:	f000 fc2b 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000dc 	.word	0x200000dc
 80013e8:	4001020c 	.word	0x4001020c

080013ec <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_COMP6_Init+0x44>)
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <MX_COMP6_Init+0x48>)
 80013f4:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_COMP6_Init+0x44>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_COMP6_Init+0x44>)
 80013fe:	2250      	movs	r2, #80	@ 0x50
 8001400:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_COMP6_Init+0x44>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_COMP6_Init+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_COMP6_Init+0x44>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_COMP6_Init+0x44>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_COMP6_Init+0x44>)
 800141c:	f002 fee2 	bl	80041e4 <HAL_COMP_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8001426:	f000 fc05 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000100 	.word	0x20000100
 8001434:	40010214 	.word	0x40010214

08001438 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	@ 0x30
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2230      	movs	r2, #48	@ 0x30
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00a fb0d 	bl	800ba64 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_DAC1_Init+0x88>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <MX_DAC1_Init+0x8c>)
 800144e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001450:	481b      	ldr	r0, [pc, #108]	@ (80014c0 <MX_DAC1_Init+0x88>)
 8001452:	f003 f970 	bl	8004736 <HAL_DAC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800145c:	f000 fbea 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001460:	2302      	movs	r3, #2
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_DAC1_Init+0x88>)
 800148c:	f003 fa10 	bl	80048b0 <HAL_DAC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001496:	f000 fbcd 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2210      	movs	r2, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_DAC1_Init+0x88>)
 80014aa:	f003 fa01 	bl	80048b0 <HAL_DAC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 80014b4:	f000 fbbe 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	@ 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000124 	.word	0x20000124
 80014c4:	50000800 	.word	0x50000800

080014c8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2230      	movs	r2, #48	@ 0x30
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00a fac5 	bl	800ba64 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_DAC2_Init+0x6c>)
 80014dc:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <MX_DAC2_Init+0x70>)
 80014de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80014e0:	4814      	ldr	r0, [pc, #80]	@ (8001534 <MX_DAC2_Init+0x6c>)
 80014e2:	f003 f928 	bl	8004736 <HAL_DAC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80014ec:	f000 fba2 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014f0:	2302      	movs	r3, #2
 80014f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <MX_DAC2_Init+0x6c>)
 800151c:	f003 f9c8 	bl	80048b0 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001526:	f000 fb85 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3730      	adds	r7, #48	@ 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000138 	.word	0x20000138
 8001538:	50000c00 	.word	0x50000c00

0800153c <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00a fa8b 	bl	800ba64 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_DAC3_Init+0x80>)
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <MX_DAC3_Init+0x84>)
 8001552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001554:	4819      	ldr	r0, [pc, #100]	@ (80015bc <MX_DAC3_Init+0x80>)
 8001556:	f003 f8ee 	bl	8004736 <HAL_DAC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001560:	f000 fb68 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001564:	2302      	movs	r3, #2
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <MX_DAC3_Init+0x80>)
 8001590:	f003 f98e 	bl	80048b0 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800159a:	f000 fb4b 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	2210      	movs	r2, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_DAC3_Init+0x80>)
 80015a6:	f003 f983 	bl	80048b0 <HAL_DAC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 80015b0:	f000 fb40 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000014c 	.word	0x2000014c
 80015c0:	50001000 	.word	0x50001000

080015c4 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0ac      	sub	sp, #176	@ 0xb0
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80015ca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80015d8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80015ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f0:	2260      	movs	r2, #96	@ 0x60
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00a fa35 	bl	800ba64 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2220      	movs	r2, #32
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00a fa2f 	bl	800ba64 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001606:	4b75      	ldr	r3, [pc, #468]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001608:	4a75      	ldr	r2, [pc, #468]	@ (80017e0 <MX_HRTIM1_Init+0x21c>)
 800160a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800160c:	4b73      	ldr	r3, [pc, #460]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001612:	4b72      	ldr	r3, [pc, #456]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001618:	4870      	ldr	r0, [pc, #448]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800161a:	f003 fcd9 	bl	8004fd0 <HAL_HRTIM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8001624:	f000 fb06 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001628:	210c      	movs	r1, #12
 800162a:	486c      	ldr	r0, [pc, #432]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800162c:	f003 fda0 	bl	8005170 <HAL_HRTIM_DLLCalibrationStart>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8001636:	f000 fafd 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800163a:	210a      	movs	r1, #10
 800163c:	4867      	ldr	r0, [pc, #412]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800163e:	f003 fdef 	bl	8005220 <HAL_HRTIM_PollForDLLCalibration>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001648:	f000 faf4 	bl	8001c34 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 800164c:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8001650:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001660:	2308      	movs	r3, #8
 8001662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001666:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800166a:	461a      	mov	r2, r3
 800166c:	2104      	movs	r1, #4
 800166e:	485b      	ldr	r0, [pc, #364]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001670:	f003 fe0a 	bl	8005288 <HAL_HRTIM_TimeBaseConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 800167a:	f000 fadb 	bl	8001c34 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 800168a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800168e:	461a      	mov	r2, r3
 8001690:	2104      	movs	r1, #4
 8001692:	4852      	ldr	r0, [pc, #328]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001694:	f003 fead 	bl	80053f2 <HAL_HRTIM_WaveformTimerControl>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 800169e:	f000 fac9 	bl	8001c34 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80016be:	2300      	movs	r3, #0
 80016c0:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80016c2:	2300      	movs	r3, #0
 80016c4:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80016ca:	2300      	movs	r3, #0
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80016d6:	2300      	movs	r3, #0
 80016d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80016da:	2300      	movs	r3, #0
 80016dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80016de:	2300      	movs	r3, #0
 80016e0:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80016e6:	2300      	movs	r3, #0
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80016ea:	2300      	movs	r3, #0
 80016ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001704:	461a      	mov	r2, r3
 8001706:	2104      	movs	r1, #4
 8001708:	4834      	ldr	r0, [pc, #208]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800170a:	f003 fde5 	bl	80052d8 <HAL_HRTIM_WaveformTimerConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8001714:	f000 fa8e 	bl	8001c34 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8001718:	2300      	movs	r3, #0
 800171a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 800171c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001720:	461a      	mov	r2, r3
 8001722:	2105      	movs	r1, #5
 8001724:	482d      	ldr	r0, [pc, #180]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001726:	f003 fdd7 	bl	80052d8 <HAL_HRTIM_WaveformTimerConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 8001730:	f000 fa80 	bl	8001c34 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175a:	2104      	movs	r1, #4
 800175c:	481f      	ldr	r0, [pc, #124]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800175e:	f003 fe7b 	bl	8005458 <HAL_HRTIM_WaveformOutputConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 8001768:	f000 fa64 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001772:	2105      	movs	r1, #5
 8001774:	4819      	ldr	r0, [pc, #100]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 8001776:	f003 fe6f 	bl	8005458 <HAL_HRTIM_WaveformOutputConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001780:	f000 fa58 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8001784:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001788:	461a      	mov	r2, r3
 800178a:	2105      	movs	r1, #5
 800178c:	4813      	ldr	r0, [pc, #76]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 800178e:	f003 fd7b 	bl	8005288 <HAL_HRTIM_TimeBaseConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8001798:	f000 fa4c 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 800179c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80017a0:	461a      	mov	r2, r3
 80017a2:	2105      	movs	r1, #5
 80017a4:	480d      	ldr	r0, [pc, #52]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 80017a6:	f003 fe24 	bl	80053f2 <HAL_HRTIM_WaveformTimerControl>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 80017b0:	f000 fa40 	bl	8001c34 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017ba:	2105      	movs	r1, #5
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 80017be:	f003 fe4b 	bl	8005458 <HAL_HRTIM_WaveformOutputConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 80017c8:	f000 fa34 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <MX_HRTIM1_Init+0x218>)
 80017ce:	f000 fbfb 	bl	8001fc8 <HAL_HRTIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	37b0      	adds	r7, #176	@ 0xb0
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000160 	.word	0x20000160
 80017e0:	40016800 	.word	0x40016800

080017e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b098      	sub	sp, #96	@ 0x60
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2234      	movs	r2, #52	@ 0x34
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f00a f927 	bl	800ba64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001818:	4a3b      	ldr	r2, [pc, #236]	@ (8001908 <MX_TIM1_Init+0x124>)
 800181a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 800181c:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <MX_TIM1_Init+0x120>)
 800181e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001822:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800182a:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <MX_TIM1_Init+0x120>)
 800182c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001830:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b34      	ldr	r3, [pc, #208]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001838:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <MX_TIM1_Init+0x120>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001844:	482f      	ldr	r0, [pc, #188]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001846:	f007 fa11 	bl	8008c6c <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001850:	f000 f9f0 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001864:	4619      	mov	r1, r3
 8001866:	4827      	ldr	r0, [pc, #156]	@ (8001904 <MX_TIM1_Init+0x120>)
 8001868:	f008 f882 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001872:	f000 f9df 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	@ 0x60
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001892:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001896:	2208      	movs	r2, #8
 8001898:	4619      	mov	r1, r3
 800189a:	481a      	ldr	r0, [pc, #104]	@ (8001904 <MX_TIM1_Init+0x120>)
 800189c:	f007 fb50 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018a6:	f000 f9c5 	bl	8001c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <MX_TIM1_Init+0x120>)
 80018e8:	f008 f8d8 	bl	8009a9c <HAL_TIMEx_ConfigBreakDeadTime>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80018f2:	f000 f99f 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018f6:	4803      	ldr	r0, [pc, #12]	@ (8001904 <MX_TIM1_Init+0x120>)
 80018f8:	f000 fc0c 	bl	8002114 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3760      	adds	r7, #96	@ 0x60
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000025c 	.word	0x2000025c
 8001908:	40012c00 	.word	0x40012c00

0800190c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001922:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001926:	f7ff facb 	bl	8000ec0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800192a:	2002      	movs	r0, #2
 800192c:	f7ff fab0 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001930:	2310      	movs	r3, #16
 8001932:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001934:	2303      	movs	r3, #3
 8001936:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <MX_UCPD1_Init+0x58>)
 8001942:	f009 f986 	bl	800ac52 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001946:	2340      	movs	r3, #64	@ 0x40
 8001948:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800194a:	2303      	movs	r3, #3
 800194c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	4803      	ldr	r0, [pc, #12]	@ (8001964 <MX_UCPD1_Init+0x58>)
 8001958:	f009 f97b 	bl	800ac52 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	48000400 	.word	0x48000400

08001968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 800196e:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <MX_USART3_UART_Init+0x94>)
 8001970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019b0:	4811      	ldr	r0, [pc, #68]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019b2:	f008 f907 	bl	8009bc4 <HAL_UART_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019bc:	f000 f93a 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c0:	2100      	movs	r1, #0
 80019c2:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019c4:	f008 ff30 	bl	800a828 <HAL_UARTEx_SetTxFifoThreshold>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019ce:	f000 f931 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019d6:	f008 ff65 	bl	800a8a4 <HAL_UARTEx_SetRxFifoThreshold>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019e0:	f000 f928 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_USART3_UART_Init+0x90>)
 80019e6:	f008 fee6 	bl	800a7b6 <HAL_UARTEx_DisableFifoMode>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019f0:	f000 f920 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200002a8 	.word	0x200002a8
 80019fc:	40004800 	.word	0x40004800

08001a00 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a06:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <MX_USB_PCD_Init+0x4c>)
 8001a08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_USB_PCD_Init+0x48>)
 8001a36:	f004 fd4b 	bl	80064d0 <HAL_PCD_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001a40:	f000 f8f8 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000033c 	.word	0x2000033c
 8001a4c:	40005c00 	.word	0x40005c00

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b60      	ldr	r3, [pc, #384]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b5d      	ldr	r3, [pc, #372]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a59      	ldr	r2, [pc, #356]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b57      	ldr	r3, [pc, #348]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b54      	ldr	r3, [pc, #336]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a53      	ldr	r2, [pc, #332]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b4b      	ldr	r3, [pc, #300]	@ (8001be8 <MX_GPIO_Init+0x198>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f24c 0108 	movw	r1, #49160	@ 0xc008
 8001acc:	4847      	ldr	r0, [pc, #284]	@ (8001bec <MX_GPIO_Init+0x19c>)
 8001ace:	f003 fa43 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	21a2      	movs	r1, #162	@ 0xa2
 8001ad6:	4846      	ldr	r0, [pc, #280]	@ (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001ad8:	f003 fa3e 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f003 fa37 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2104      	movs	r1, #4
 8001aee:	4841      	ldr	r0, [pc, #260]	@ (8001bf4 <MX_GPIO_Init+0x1a4>)
 8001af0:	f003 fa32 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 8001af4:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4837      	ldr	r0, [pc, #220]	@ (8001bec <MX_GPIO_Init+0x19c>)
 8001b0e:	f003 f889 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001b12:	2330      	movs	r3, #48	@ 0x30
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4831      	ldr	r0, [pc, #196]	@ (8001bec <MX_GPIO_Init+0x19c>)
 8001b28:	f003 f87c 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 8001b2c:	23a2      	movs	r3, #162	@ 0xa2
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	482b      	ldr	r0, [pc, #172]	@ (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001b44:	f003 f86e 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001b48:	f240 4304 	movw	r3, #1028	@ 0x404
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4824      	ldr	r0, [pc, #144]	@ (8001bf0 <MX_GPIO_Init+0x1a0>)
 8001b60:	f003 f860 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001b64:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b80:	f003 f850 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001b84:	2304      	movs	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4816      	ldr	r0, [pc, #88]	@ (8001bf4 <MX_GPIO_Init+0x1a4>)
 8001b9c:	f003 f842 	bl	8004c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2008      	movs	r0, #8
 8001ba6:	f002 fd92 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001baa:	2008      	movs	r0, #8
 8001bac:	f002 fda9 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f002 fd8a 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f002 fda1 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2017      	movs	r0, #23
 8001bc6:	f002 fd82 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bca:	2017      	movs	r0, #23
 8001bcc:	f002 fd99 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2028      	movs	r0, #40	@ 0x28
 8001bd6:	f002 fd7a 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bda:	2028      	movs	r0, #40	@ 0x28
 8001bdc:	f002 fd91 	bl	8004702 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000c00 	.word	0x48000c00

08001bf8 <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(uint16_t value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c02:	2360      	movs	r3, #96	@ 0x60
 8001c04:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3); // таймер №1, канал №3
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2208      	movs	r2, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <setPWM+0x38>)
 8001c1c:	f007 f990 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c20:	2108      	movs	r1, #8
 8001c22:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <setPWM+0x38>)
 8001c24:	f007 f87a 	bl	8008d1c <HAL_TIM_PWM_Start>
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	@ 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000025c 	.word	0x2000025c

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <Error_Handler+0x8>

08001c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_MspInit+0x44>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c76:	f005 fff5 	bl	8007c64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0a0      	sub	sp, #128	@ 0x80
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	2254      	movs	r2, #84	@ 0x54
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f009 fedb 	bl	800ba64 <memset>
  if(hadc->Instance==ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cb6:	d154      	bne.n	8001d62 <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fd09 	bl	80086e0 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001cd4:	f7ff ffae 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cd8:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4a23      	ldr	r2, [pc, #140]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d14:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001d20:	2304      	movs	r3, #4
 8001d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d30:	4619      	mov	r1, r3
 8001d32:	480f      	ldr	r0, [pc, #60]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d34:	f002 ff76 	bl	8004c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001d38:	230e      	movs	r3, #14
 8001d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4e:	f002 ff69 	bl	8004c24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2012      	movs	r0, #18
 8001d58:	f002 fcb9 	bl	80046ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d5c:	2012      	movs	r0, #18
 8001d5e:	f002 fcd0 	bl	8004702 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d62:	bf00      	nop
 8001d64:	3780      	adds	r7, #128	@ 0x80
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000800 	.word	0x48000800

08001d74 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	@ 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a3d      	ldr	r2, [pc, #244]	@ (8001e88 <HAL_COMP_MspInit+0x114>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d119      	bne.n	8001dca <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc4:	f002 ff2e 	bl	8004c24 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001dc8:	e05a      	b.n	8001e80 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a30      	ldr	r2, [pc, #192]	@ (8001e90 <HAL_COMP_MspInit+0x11c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d119      	bne.n	8001e08 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f002 ff0f 	bl	8004c24 <HAL_GPIO_Init>
}
 8001e06:	e03b      	b.n	8001e80 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_COMP_MspInit+0x120>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d118      	bne.n	8001e44 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4816      	ldr	r0, [pc, #88]	@ (8001e98 <HAL_COMP_MspInit+0x124>)
 8001e3e:	f002 fef1 	bl	8004c24 <HAL_GPIO_Init>
}
 8001e42:	e01d      	b.n	8001e80 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <HAL_COMP_MspInit+0x128>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d118      	bne.n	8001e80 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_COMP_MspInit+0x118>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8001e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <HAL_COMP_MspInit+0x124>)
 8001e7c:	f002 fed2 	bl	8004c24 <HAL_GPIO_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010204 	.word	0x40010204
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010208 	.word	0x40010208
 8001e94:	4001020c 	.word	0x4001020c
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	40010214 	.word	0x40010214

08001ea0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	@ 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <HAL_DAC_MspInit+0xbc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d125      	bne.n	8001f0e <HAL_DAC_MspInit+0x6e>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ec2:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	4a26      	ldr	r2, [pc, #152]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	4a20      	ldr	r2, [pc, #128]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f08:	f002 fe8c 	bl	8004c24 <HAL_GPIO_Init>
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001f0c:	e022      	b.n	8001f54 <HAL_DAC_MspInit+0xb4>
  else if(hdac->Instance==DAC2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <HAL_DAC_MspInit+0xc4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d10c      	bne.n	8001f32 <HAL_DAC_MspInit+0x92>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
}
 8001f30:	e010      	b.n	8001f54 <HAL_DAC_MspInit+0xb4>
  else if(hdac->Instance==DAC3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <HAL_DAC_MspInit+0xc8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10b      	bne.n	8001f54 <HAL_DAC_MspInit+0xb4>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f40:	4a07      	ldr	r2, [pc, #28]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_DAC_MspInit+0xc0>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3730      	adds	r7, #48	@ 0x30
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	50000800 	.word	0x50000800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	50000c00 	.word	0x50000c00
 8001f68:	50001000 	.word	0x50001000

08001f6c <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a11      	ldr	r2, [pc, #68]	@ (8001fc0 <HAL_HRTIM_MspInit+0x54>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_HRTIM_MspInit+0x58>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_HRTIM_MspInit+0x58>)
 8001f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_HRTIM_MspInit+0x58>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2043      	movs	r0, #67	@ 0x43
 8001f9c:	f002 fb97 	bl	80046ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001fa0:	2043      	movs	r0, #67	@ 0x43
 8001fa2:	f002 fbae 	bl	8004702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	204a      	movs	r0, #74	@ 0x4a
 8001fac:	f002 fb8f 	bl	80046ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8001fb0:	204a      	movs	r0, #74	@ 0x4a
 8001fb2:	f002 fba6 	bl	8004702 <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40016800 	.word	0x40016800
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a37      	ldr	r2, [pc, #220]	@ (80020c4 <HAL_HRTIM_MspPostInit+0xfc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d167      	bne.n	80020ba <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a36      	ldr	r2, [pc, #216]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a30      	ldr	r2, [pc, #192]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4a2a      	ldr	r2, [pc, #168]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4b28      	ldr	r3, [pc, #160]	@ (80020c8 <HAL_HRTIM_MspPostInit+0x100>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 8002032:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002044:	230d      	movs	r3, #13
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	481f      	ldr	r0, [pc, #124]	@ (80020cc <HAL_HRTIM_MspPostInit+0x104>)
 8002050:	f002 fde8 	bl	8004c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 8002054:	23c0      	movs	r3, #192	@ 0xc0
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002064:	230d      	movs	r3, #13
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4818      	ldr	r0, [pc, #96]	@ (80020d0 <HAL_HRTIM_MspPostInit+0x108>)
 8002070:	f002 fdd8 	bl	8004c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 8002074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8002086:	2303      	movs	r3, #3
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	480f      	ldr	r0, [pc, #60]	@ (80020d0 <HAL_HRTIM_MspPostInit+0x108>)
 8002092:	f002 fdc7 	bl	8004c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8002096:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80020a8:	230d      	movs	r3, #13
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b6:	f002 fdb5 	bl	8004c24 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40016800 	.word	0x40016800
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800

080020d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_TIM_PWM_MspInit+0x38>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10b      	bne.n	80020fe <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_TIM_PWM_MspInit+0x3c>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_TIM_PWM_MspInit+0x3c>)
 80020ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <HAL_TIM_PWM_MspInit+0x3c>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a12      	ldr	r2, [pc, #72]	@ (800217c <HAL_TIM_MspPostInit+0x68>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d11d      	bne.n	8002172 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_TIM_MspPostInit+0x6c>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_TIM_MspPostInit+0x6c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002142:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <HAL_TIM_MspPostInit+0x6c>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800214e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002160:	2306      	movs	r3, #6
 8002162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f002 fd59 	bl	8004c24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09e      	sub	sp, #120	@ 0x78
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	2254      	movs	r2, #84	@ 0x54
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f009 fc5d 	bl	800ba64 <memset>
  if(huart->Instance==USART3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_UART_MspInit+0xa8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d136      	bne.n	8002222 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021b4:	2304      	movs	r3, #4
 80021b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4618      	mov	r0, r3
 80021c2:	f006 fa8d 	bl	80086e0 <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021cc:	f7ff fd32 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	4a16      	ldr	r2, [pc, #88]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021da:	6593      	str	r3, [r2, #88]	@ 0x58
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_UART_MspInit+0xac>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002200:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002204:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800220e:	2301      	movs	r3, #1
 8002210:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002212:	2307      	movs	r3, #7
 8002214:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002216:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	@ (8002234 <HAL_UART_MspInit+0xb0>)
 800221e:	f002 fd01 	bl	8004c24 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	3778      	adds	r7, #120	@ 0x78
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40004800 	.word	0x40004800
 8002230:	40021000 	.word	0x40021000
 8002234:	48000800 	.word	0x48000800

08002238 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b098      	sub	sp, #96	@ 0x60
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	2254      	movs	r2, #84	@ 0x54
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f009 fc0b 	bl	800ba64 <memset>
  if(hpcd->Instance==USB)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <HAL_PCD_MspInit+0x70>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d122      	bne.n	800229e <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800225c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800225e:	2300      	movs	r3, #0
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4618      	mov	r0, r3
 8002268:	f006 fa3a 	bl	80086e0 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002272:	f7ff fcdf 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_PCD_MspInit+0x74>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	4a0c      	ldr	r2, [pc, #48]	@ (80022ac <HAL_PCD_MspInit+0x74>)
 800227c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_PCD_MspInit+0x74>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2013      	movs	r0, #19
 8002294:	f002 fa1b 	bl	80046ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8002298:	2013      	movs	r0, #19
 800229a:	f002 fa32 	bl	8004702 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 800229e:	bf00      	nop
 80022a0:	3760      	adds	r7, #96	@ 0x60
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40005c00 	.word	0x40005c00
 80022ac:	40021000 	.word	0x40021000

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <NMI_Handler+0x4>

080022b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <MemManage_Handler+0x4>

080022c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002306:	f000 f8d7 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}

0800230e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 8002312:	2004      	movs	r0, #4
 8002314:	f002 fe38 	bl	8004f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 8002320:	2010      	movs	r0, #16
 8002322:	f002 fe31 	bl	8004f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <ADC1_2_IRQHandler+0x10>)
 8002332:	f000 fcfb 	bl	8002d2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000028 	.word	0x20000028

08002340 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <USB_HP_IRQHandler+0x10>)
 8002346:	f004 f991 	bl	800666c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000033c 	.word	0x2000033c

08002354 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 8002358:	2020      	movs	r0, #32
 800235a:	f002 fe15 	bl	8004f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}

08002362 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 8002366:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800236a:	f002 fe0d 	bl	8004f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002378:	2106      	movs	r1, #6
 800237a:	4802      	ldr	r0, [pc, #8]	@ (8002384 <HRTIM1_Master_IRQHandler+0x10>)
 800237c:	f003 f89d 	bl	80054ba <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000160 	.word	0x20000160

08002388 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 800238c:	2105      	movs	r1, #5
 800238e:	4802      	ldr	r0, [pc, #8]	@ (8002398 <HRTIM1_TIMF_IRQHandler+0x10>)
 8002390:	f003 f893 	bl	80054ba <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000160 	.word	0x20000160

0800239c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023c4:	f7ff ffea 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	@ (800240c <LoopForever+0x16>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ee:	f009 fb41 	bl	800ba74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7fe fd7d 	bl	8000ef0 <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   r0, =_estack
 80023f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002404:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 8002408:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800240c:	20000620 	.word	0x20000620

08002410 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC3_IRQHandler>

08002412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f002 f94b 	bl	80046b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002422:	2000      	movs	r0, #0
 8002424:	f000 f80e 	bl	8002444 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	e001      	b.n	8002438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002434:	f7ff fc04 	bl	8001c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002438:	79fb      	ldrb	r3, [r7, #7]

}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <HAL_InitTick+0x68>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d022      	beq.n	800249e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002458:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_InitTick+0x6c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_InitTick+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f002 f956 	bl	800471e <HAL_SYSTICK_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	d809      	bhi.n	8002492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247e:	2200      	movs	r2, #0
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
 8002486:	f002 f922 	bl	80046ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <HAL_InitTick+0x70>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e007      	b.n	80024a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e004      	b.n	80024a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e001      	b.n	80024a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_IncTick+0x1c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_IncTick+0x20>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a03      	ldr	r2, [pc, #12]	@ (80024d4 <HAL_IncTick+0x1c>)
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	2000061c 	.word	0x2000061c
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	2000061c 	.word	0x2000061c

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d004      	beq.n	8002518 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_Delay+0x40>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002518:	bf00      	nop
 800251a:	f7ff ffdf 	bl	80024dc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d8f7      	bhi.n	800251a <HAL_Delay+0x26>
  {
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008

08002538 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3360      	adds	r3, #96	@ 0x60
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <LL_ADC_SetOffset+0x44>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	03fff000 	.word	0x03fff000

080025e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3360      	adds	r3, #96	@ 0x60
 80025f6:	461a      	mov	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3360      	adds	r3, #96	@ 0x60
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	617b      	str	r3, [r7, #20]


  MODIFY_REG(*preg,
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800264a:	b480      	push	{r7}
 800264c:	b087      	sub	sp, #28
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3360      	adds	r3, #96	@ 0x60
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3360      	adds	r3, #96	@ 0x60
 8002690:	461a      	mov	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	615a      	str	r2, [r3, #20]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3330      	adds	r3, #48	@ 0x30
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	4413      	add	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	211f      	movs	r1, #31
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 011f 	and.w	r1, r3, #31
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3314      	adds	r3, #20
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0e5b      	lsrs	r3, r3, #25
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	4413      	add	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0d1b      	lsrs	r3, r3, #20
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2107      	movs	r1, #7
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0d1b      	lsrs	r3, r3, #20
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	431a      	orrs	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0318 	and.w	r3, r3, #24
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <LL_ADC_SetChannelSingleDiff+0x44>)
 80027fc:	40d9      	lsrs	r1, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	400b      	ands	r3, r1
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	431a      	orrs	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	0007ffff 	.word	0x0007ffff

08002820 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002868:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6093      	str	r3, [r2, #8]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800288c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002890:	d101      	bne.n	8002896 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002904:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002908:	f043 0202 	orr.w	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <LL_ADC_IsEnabled+0x18>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_ADC_IsEnabled+0x1a>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d101      	bne.n	800295a <LL_ADC_IsDisableOngoing+0x18>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_ADC_IsDisableOngoing+0x1a>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d101      	bne.n	8002980 <LL_ADC_REG_IsConversionOngoing+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1a9      	b.n	8002d22 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff f953 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff41 	bl	800287c <LL_ADC_IsDeepPowerDownEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff27 	bl	8002858 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff5c 	bl	80028cc <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff40 	bl	80028a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4b9c      	ldr	r3, [pc, #624]	@ (8002c98 <HAL_ADC_Init+0x2e4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4a9c      	ldr	r2, [pc, #624]	@ (8002c9c <HAL_ADC_Init+0x2e8>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff3e 	bl	80028cc <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff76 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8142 	bne.w	8002d10 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 813e 	bne.w	8002d10 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff37 	bl	800291c <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d141      	bne.n	8002b38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_Init+0x114>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a77      	ldr	r2, [pc, #476]	@ (8002ca0 <HAL_ADC_Init+0x2ec>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_ADC_Init+0x134>
 8002ac8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002acc:	f7ff ff26 	bl	800291c <LL_ADC_IsEnabled>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	4873      	ldr	r0, [pc, #460]	@ (8002ca0 <HAL_ADC_Init+0x2ec>)
 8002ad4:	f7ff ff22 	bl	800291c <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4323      	orrs	r3, r4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e012      	b.n	8002b0e <HAL_ADC_Init+0x15a>
 8002ae8:	486e      	ldr	r0, [pc, #440]	@ (8002ca4 <HAL_ADC_Init+0x2f0>)
 8002aea:	f7ff ff17 	bl	800291c <LL_ADC_IsEnabled>
 8002aee:	4604      	mov	r4, r0
 8002af0:	486d      	ldr	r0, [pc, #436]	@ (8002ca8 <HAL_ADC_Init+0x2f4>)
 8002af2:	f7ff ff13 	bl	800291c <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	431c      	orrs	r4, r3
 8002afa:	486c      	ldr	r0, [pc, #432]	@ (8002cac <HAL_ADC_Init+0x2f8>)
 8002afc:	f7ff ff0e 	bl	800291c <LL_ADC_IsEnabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4323      	orrs	r3, r4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b1a:	d004      	beq.n	8002b26 <HAL_ADC_Init+0x172>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca0 <HAL_ADC_Init+0x2ec>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0x176>
 8002b26:	4a62      	ldr	r2, [pc, #392]	@ (8002cb0 <HAL_ADC_Init+0x2fc>)
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_Init+0x178>
 8002b2a:	4a62      	ldr	r2, [pc, #392]	@ (8002cb4 <HAL_ADC_Init+0x300>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7ff fd00 	bl	8002538 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7f5b      	ldrb	r3, [r3, #29]
 8002b3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d106      	bne.n	8002b74 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	045b      	lsls	r3, r3, #17
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	4b48      	ldr	r3, [pc, #288]	@ (8002cb8 <HAL_ADC_Init+0x304>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fee5 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8002bc4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d17f      	bne.n	8002ccc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d17c      	bne.n	8002ccc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bd6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bee:	f023 0302 	bic.w	r3, r3, #2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6911      	ldr	r1, [r2, #16]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c32:	e013      	b.n	8002c5c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12a      	bne.n	8002cbc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e019      	b.n	8002ccc <HAL_ADC_Init+0x318>
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	053e2d63 	.word	0x053e2d63
 8002ca0:	50000100 	.word	0x50000100
 8002ca4:	50000400 	.word	0x50000400
 8002ca8:	50000500 	.word	0x50000500
 8002cac:	50000600 	.word	0x50000600
 8002cb0:	50000300 	.word	0x50000300
 8002cb4:	50000700 	.word	0x50000700
 8002cb8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10c      	bne.n	8002cee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	f023 010f 	bic.w	r1, r3, #15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cec:	e007      	b.n	8002cfe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020f 	bic.w	r2, r2, #15
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d0e:	e007      	b.n	8002d20 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop

08002d2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x30>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8e      	ldr	r2, [pc, #568]	@ (8002f90 <HAL_ADC_IRQHandler+0x264>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x34>
 8002d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f94 <HAL_ADC_IRQHandler+0x268>)
 8002d5e:	e000      	b.n	8002d62 <HAL_ADC_IRQHandler+0x36>
 8002d60:	4b8d      	ldr	r3, [pc, #564]	@ (8002f98 <HAL_ADC_IRQHandler+0x26c>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd5c 	bl	8002820 <LL_ADC_GetMultimode>
 8002d68:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d017      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x78>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 ffc2 	bl	8003d20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2202      	movs	r2, #2
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x8c>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8094 	beq.w	8002eec <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 808e 	beq.w	8002eec <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fc75 	bl	80026dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d072      	beq.n	8002ede <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a64      	ldr	r2, [pc, #400]	@ (8002f90 <HAL_ADC_IRQHandler+0x264>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_ADC_IRQHandler+0xea>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a65      	ldr	r2, [pc, #404]	@ (8002f9c <HAL_ADC_IRQHandler+0x270>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d002      	beq.n	8002e12 <HAL_ADC_IRQHandler+0xe6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e003      	b.n	8002e1a <HAL_ADC_IRQHandler+0xee>
 8002e12:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_ADC_IRQHandler+0x274>)
 8002e14:	e001      	b.n	8002e1a <HAL_ADC_IRQHandler+0xee>
 8002e16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d008      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d002      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d104      	bne.n	8002e3e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	e014      	b.n	8002e68 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a53      	ldr	r2, [pc, #332]	@ (8002f90 <HAL_ADC_IRQHandler+0x264>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x130>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a53      	ldr	r2, [pc, #332]	@ (8002f9c <HAL_ADC_IRQHandler+0x270>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d002      	beq.n	8002e58 <HAL_ADC_IRQHandler+0x12c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_IRQHandler+0x134>
 8002e58:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <HAL_ADC_IRQHandler+0x274>)
 8002e5a:	e001      	b.n	8002e60 <HAL_ADC_IRQHandler+0x134>
 8002e5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e60:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d135      	bne.n	8002ede <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d12e      	bne.n	8002ede <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fd6f 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11a      	bne.n	8002ec6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020c 	bic.w	r2, r2, #12
 8002e9e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d112      	bne.n	8002ede <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ec4:	e00b      	b.n	8002ede <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f984 	bl	80031ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	220c      	movs	r2, #12
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x1d4>
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80b3 	beq.w	8003072 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ad 	beq.w	8003072 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fc10 	bl	800275a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f3a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fbcb 	bl	80026dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f46:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a10      	ldr	r2, [pc, #64]	@ (8002f90 <HAL_ADC_IRQHandler+0x264>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x23a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <HAL_ADC_IRQHandler+0x270>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d002      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x236>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_IRQHandler+0x23e>
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_ADC_IRQHandler+0x274>)
 8002f64:	e001      	b.n	8002f6a <HAL_ADC_IRQHandler+0x23e>
 8002f66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d008      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d002      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b07      	cmp	r3, #7
 8002f82:	d10f      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	e01f      	b.n	8002fce <HAL_ADC_IRQHandler+0x2a2>
 8002f8e:	bf00      	nop
 8002f90:	50000100 	.word	0x50000100
 8002f94:	50000300 	.word	0x50000300
 8002f98:	50000700 	.word	0x50000700
 8002f9c:	50000500 	.word	0x50000500
 8002fa0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8b      	ldr	r2, [pc, #556]	@ (80031d8 <HAL_ADC_IRQHandler+0x4ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x296>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a8a      	ldr	r2, [pc, #552]	@ (80031dc <HAL_ADC_IRQHandler+0x4b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d002      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x292>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_IRQHandler+0x29a>
 8002fbe:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_ADC_IRQHandler+0x4b4>)
 8002fc0:	e001      	b.n	8002fc6 <HAL_ADC_IRQHandler+0x29a>
 8002fc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fc6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d047      	beq.n	8003064 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_ADC_IRQHandler+0x2c2>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03f      	beq.n	8003064 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d13a      	bne.n	8003064 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d133      	bne.n	8003064 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d12e      	bne.n	8003064 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fcbf 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11a      	bne.n	800304c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003024:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d112      	bne.n	8003064 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	@ 0x5c
 800304a:	e00b      	b.n	8003064 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fe33 	bl	8003cd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2260      	movs	r2, #96	@ 0x60
 8003070:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x374>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8b4 	bl	8003200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2280      	movs	r2, #128	@ 0x80
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x3a4>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fe19 	bl	8003cf8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_ADC_IRQHandler+0x3d4>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fe0b 	bl	8003d0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d043      	beq.n	8003192 <HAL_ADC_IRQHandler+0x466>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d03e      	beq.n	8003192 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003120:	e021      	b.n	8003166 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003130:	d004      	beq.n	800313c <HAL_ADC_IRQHandler+0x410>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <HAL_ADC_IRQHandler+0x4ac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_ADC_IRQHandler+0x414>
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_ADC_IRQHandler+0x4b8>)
 800313e:	e000      	b.n	8003142 <HAL_ADC_IRQHandler+0x416>
 8003140:	4b29      	ldr	r3, [pc, #164]	@ (80031e8 <HAL_ADC_IRQHandler+0x4bc>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fb7a 	bl	800283c <LL_ADC_GetMultiDMATransfer>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
 8003152:	e008      	b.n	8003166 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10e      	bne.n	800318a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f043 0202 	orr.w	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f845 	bl	8003214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d018      	beq.n	80031ce <HAL_ADC_IRQHandler+0x4a2>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	f043 0208 	orr.w	r2, r3, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fd8b 	bl	8003ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3728      	adds	r7, #40	@ 0x28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	50000100 	.word	0x50000100
 80031dc:	50000500 	.word	0x50000500
 80031e0:	50000400 	.word	0x50000400
 80031e4:	50000300 	.word	0x50000300
 80031e8:	50000700 	.word	0x50000700

080031ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0b6      	sub	sp, #216	@ 0xd8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_ADC_ConfigChannel+0x24>
 8003246:	2302      	movs	r3, #2
 8003248:	f000 bc13 	b.w	8003a72 <HAL_ADC_ConfigChannel+0x84a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fb85 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 83f3 	bne.w	8003a4c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7ff fa45 	bl	8002702 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fb73 	bl	8002968 <LL_ADC_REG_IsConversionOngoing>
 8003282:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fb7f 	bl	800298e <LL_ADC_INJ_IsConversionOngoing>
 8003290:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 81d9 	bne.w	8003650 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 81d4 	bne.w	8003650 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032b0:	d10f      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	4619      	mov	r1, r3
 80032be:	f7ff fa5f 	bl	8002780 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f9f3 	bl	80026b6 <LL_ADC_SetSamplingTimeCommonConfig>
 80032d0:	e00e      	b.n	80032f0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fa4e 	bl	8002780 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f9e3 	bl	80026b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	08db      	lsrs	r3, r3, #3
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b04      	cmp	r3, #4
 8003310:	d022      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003322:	f7ff f93d 	bl	80025a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	461a      	mov	r2, r3
 8003334:	f7ff f989 	bl	800264a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_ADC_ConfigChannel+0x126>
 8003348:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800334c:	e000      	b.n	8003350 <HAL_ADC_ConfigChannel+0x128>
 800334e:	2300      	movs	r3, #0
 8003350:	461a      	mov	r2, r3
 8003352:	f7ff f995 	bl	8002680 <LL_ADC_SetOffsetSaturation>
 8003356:	e17b      	b.n	8003650 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f942 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x15c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f937 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	e01e      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x19a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f92c 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033b2:	2320      	movs	r3, #32
 80033b4:	e004      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_ADC_ConfigChannel+0x1b2>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	e018      	b.n	800340c <HAL_ADC_ConfigChannel+0x1e4>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e004      	b.n	800340c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800340c:	429a      	cmp	r2, r3
 800340e:	d106      	bne.n	800341e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f8fb 	bl	8002614 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f8df 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_ADC_ConfigChannel+0x222>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f8d4 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	e01e      	b.n	8003488 <HAL_ADC_ConfigChannel+0x260>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8c9 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800346c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e004      	b.n	8003486 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800347c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x278>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	e018      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x2aa>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e004      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d106      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f898 	bl	8002614 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2102      	movs	r1, #2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f87c 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x2e8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f871 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 8003506:	4603      	mov	r3, r0
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	f003 021f 	and.w	r2, r3, #31
 800350e:	e01e      	b.n	800354e <HAL_ADC_ConfigChannel+0x326>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f866 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800352e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003536:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800353e:	2320      	movs	r3, #32
 8003540:	e004      	b.n	800354c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x33e>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	e016      	b.n	8003594 <HAL_ADC_ConfigChannel+0x36c>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003578:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800357a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e004      	b.n	8003594 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800358a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003594:	429a      	cmp	r2, r3
 8003596:	d106      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	2102      	movs	r1, #2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f837 	bl	8002614 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2103      	movs	r1, #3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f81b 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x3aa>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2103      	movs	r1, #3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f810 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	0e9b      	lsrs	r3, r3, #26
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	e017      	b.n	8003602 <HAL_ADC_ConfigChannel+0x3da>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2103      	movs	r1, #3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f805 	bl	80025e8 <LL_ADC_GetOffsetChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <HAL_ADC_ConfigChannel+0x3f2>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	e011      	b.n	800363e <HAL_ADC_ConfigChannel+0x416>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800362c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003632:	2320      	movs	r3, #32
 8003634:	e003      	b.n	800363e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800363e:	429a      	cmp	r2, r3
 8003640:	d106      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	2103      	movs	r1, #3
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ffe2 	bl	8002614 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff f961 	bl	800291c <LL_ADC_IsEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 813d 	bne.w	80038dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	461a      	mov	r2, r3
 8003670:	f7ff f8b2 	bl	80027d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4aa2      	ldr	r2, [pc, #648]	@ (8003904 <HAL_ADC_ConfigChannel+0x6dc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f040 812e 	bne.w	80038dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x480>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	3301      	adds	r3, #1
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2b09      	cmp	r3, #9
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e019      	b.n	80036dc <HAL_ADC_ConfigChannel+0x4b4>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e003      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2b09      	cmp	r3, #9
 80036d4:	bf94      	ite	ls
 80036d6:	2301      	movls	r3, #1
 80036d8:	2300      	movhi	r3, #0
 80036da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d079      	beq.n	80037d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x4d4>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	3301      	adds	r3, #1
 80036f4:	069b      	lsls	r3, r3, #26
 80036f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036fa:	e015      	b.n	8003728 <HAL_ADC_ConfigChannel+0x500>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800370a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800370c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	069b      	lsls	r3, r3, #26
 8003724:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x520>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	3301      	adds	r3, #1
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	e017      	b.n	8003778 <HAL_ADC_ConfigChannel+0x550>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800375a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_ADC_ConfigChannel+0x576>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	3301      	adds	r3, #1
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	e018      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x5a8>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037b6:	2320      	movs	r3, #32
 80037b8:	e003      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d0:	430b      	orrs	r3, r1
 80037d2:	e07e      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x5c8>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	3301      	adds	r3, #1
 80037e8:	069b      	lsls	r3, r3, #26
 80037ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ee:	e015      	b.n	800381c <HAL_ADC_ConfigChannel+0x5f4>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	069b      	lsls	r3, r3, #26
 8003818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_ADC_ConfigChannel+0x614>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	3301      	adds	r3, #1
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	e017      	b.n	800386c <HAL_ADC_ConfigChannel+0x644>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	61fb      	str	r3, [r7, #28]
  return result;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x670>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	3b1e      	subs	r3, #30
 8003890:	051b      	lsls	r3, r3, #20
 8003892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003896:	e01b      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x6a8>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	613b      	str	r3, [r7, #16]
  return result;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f003 021f 	and.w	r2, r3, #31
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	3b1e      	subs	r3, #30
 80038ca:	051b      	lsls	r3, r3, #20
 80038cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fe ff52 	bl	8002780 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_ADC_ConfigChannel+0x6e0>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80be 	beq.w	8003a66 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d004      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x6d6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a04      	ldr	r2, [pc, #16]	@ (800390c <HAL_ADC_ConfigChannel+0x6e4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10a      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x6ec>
 80038fe:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <HAL_ADC_ConfigChannel+0x6e8>)
 8003900:	e009      	b.n	8003916 <HAL_ADC_ConfigChannel+0x6ee>
 8003902:	bf00      	nop
 8003904:	407f0000 	.word	0x407f0000
 8003908:	80080000 	.word	0x80080000
 800390c:	50000100 	.word	0x50000100
 8003910:	50000300 	.word	0x50000300
 8003914:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_ADC_ConfigChannel+0x854>)
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fe34 	bl	8002584 <LL_ADC_GetCommonPathInternalCh>
 800391c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a56      	ldr	r2, [pc, #344]	@ (8003a80 <HAL_ADC_ConfigChannel+0x858>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x70c>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a55      	ldr	r2, [pc, #340]	@ (8003a84 <HAL_ADC_ConfigChannel+0x85c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d13a      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d134      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003948:	d005      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x72e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a4e      	ldr	r2, [pc, #312]	@ (8003a88 <HAL_ADC_ConfigChannel+0x860>)
 8003950:	4293      	cmp	r3, r2
 8003952:	f040 8085 	bne.w	8003a60 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800395e:	d004      	beq.n	800396a <HAL_ADC_ConfigChannel+0x742>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a49      	ldr	r2, [pc, #292]	@ (8003a8c <HAL_ADC_ConfigChannel+0x864>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_ADC_ConfigChannel+0x746>
 800396a:	4a49      	ldr	r2, [pc, #292]	@ (8003a90 <HAL_ADC_ConfigChannel+0x868>)
 800396c:	e000      	b.n	8003970 <HAL_ADC_ConfigChannel+0x748>
 800396e:	4a43      	ldr	r2, [pc, #268]	@ (8003a7c <HAL_ADC_ConfigChannel+0x854>)
 8003970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7fe fdef 	bl	800255e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003980:	4b44      	ldr	r3, [pc, #272]	@ (8003a94 <HAL_ADC_ConfigChannel+0x86c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	4a44      	ldr	r2, [pc, #272]	@ (8003a98 <HAL_ADC_ConfigChannel+0x870>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800399a:	e002      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3b01      	subs	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a8:	e05a      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3b      	ldr	r2, [pc, #236]	@ (8003a9c <HAL_ADC_ConfigChannel+0x874>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d125      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d11f      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a31      	ldr	r2, [pc, #196]	@ (8003a8c <HAL_ADC_ConfigChannel+0x864>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d104      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x7ac>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a34      	ldr	r2, [pc, #208]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x878>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d047      	beq.n	8003a64 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039dc:	d004      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x7c0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <HAL_ADC_ConfigChannel+0x864>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x7c4>
 80039e8:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <HAL_ADC_ConfigChannel+0x868>)
 80039ea:	e000      	b.n	80039ee <HAL_ADC_ConfigChannel+0x7c6>
 80039ec:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_ADC_ConfigChannel+0x854>)
 80039ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7fe fdb0 	bl	800255e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fe:	e031      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x87c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d12d      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d127      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <HAL_ADC_ConfigChannel+0x864>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a28:	d004      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x80c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_ADC_ConfigChannel+0x864>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x810>
 8003a34:	4a16      	ldr	r2, [pc, #88]	@ (8003a90 <HAL_ADC_ConfigChannel+0x868>)
 8003a36:	e000      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x812>
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <HAL_ADC_ConfigChannel+0x854>)
 8003a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7fe fd8a 	bl	800255e <LL_ADC_SetCommonPathInternalCh>
 8003a4a:	e00c      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a5e:	e002      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	37d8      	adds	r7, #216	@ 0xd8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	50000700 	.word	0x50000700
 8003a80:	c3210000 	.word	0xc3210000
 8003a84:	90c00010 	.word	0x90c00010
 8003a88:	50000600 	.word	0x50000600
 8003a8c:	50000100 	.word	0x50000100
 8003a90:	50000300 	.word	0x50000300
 8003a94:	20000000 	.word	0x20000000
 8003a98:	053e2d63 	.word	0x053e2d63
 8003a9c:	c7520000 	.word	0xc7520000
 8003aa0:	50000500 	.word	0x50000500
 8003aa4:	cb840000 	.word	0xcb840000

08003aa8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ff44 	bl	8002942 <LL_ADC_IsDisableOngoing>
 8003aba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff2b 	bl	800291c <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d047      	beq.n	8003b5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d144      	bne.n	8003b5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030d 	and.w	r3, r3, #13
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ff05 	bl	80028f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2203      	movs	r2, #3
 8003af0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003af2:	f7fe fcf3 	bl	80024dc <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af8:	e029      	b.n	8003b4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e023      	b.n	8003b5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b16:	f7fe fce1 	bl	80024dc <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d914      	bls.n	8003b4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e007      	b.n	8003b5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1dc      	bne.n	8003b16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <LL_ADC_IsEnabled>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsEnabled+0x18>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsEnabled+0x1a>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_StartCalibration>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003b9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsCalibrationOnGoing>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d101      	bne.n	8003bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e04d      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff39 	bl	8003aa8 <ADC_Disable>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d136      	bne.n	8003cae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff96 	bl	8003b8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c60:	e014      	b.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d90d      	bls.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	f023 0312 	bic.w	r3, r3, #18
 8003c78:	f043 0210 	orr.w	r2, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01b      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff94 	bl	8003bbe <LL_ADC_IsCalibrationOnGoing>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e2      	bne.n	8003c62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	f023 0303 	bic.w	r3, r3, #3
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cac:	e005      	b.n	8003cba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0004de01 	.word	0x0004de01

08003cd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b0a1      	sub	sp, #132	@ 0x84
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0e7      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d6a:	d102      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	e009      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6e      	ldr	r2, [pc, #440]	@ (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d102      	bne.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	e001      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0be      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff1d 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003dac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff17 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 80a0 	bne.w	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 809c 	bne.w	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a55      	ldr	r2, [pc, #340]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ddc:	4b56      	ldr	r3, [pc, #344]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003de0:	4b56      	ldr	r3, [pc, #344]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003de2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04b      	beq.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dfe:	035b      	lsls	r3, r3, #13
 8003e00:	430b      	orrs	r3, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a45      	ldr	r2, [pc, #276]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10f      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e20:	f7ff fea1 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e24:	4604      	mov	r4, r0
 8003e26:	4841      	ldr	r0, [pc, #260]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e28:	f7ff fe9d 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4323      	orrs	r3, r4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e012      	b.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e3c:	483c      	ldr	r0, [pc, #240]	@ (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e3e:	f7ff fe92 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	483b      	ldr	r0, [pc, #236]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e46:	f7ff fe8e 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	431c      	orrs	r4, r3
 8003e4e:	483c      	ldr	r0, [pc, #240]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e50:	f7ff fe89 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d056      	beq.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e82:	e047      	b.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a23      	ldr	r2, [pc, #140]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ea4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ea8:	f7ff fe5d 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eac:	4604      	mov	r4, r0
 8003eae:	481f      	ldr	r0, [pc, #124]	@ (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb0:	f7ff fe59 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4323      	orrs	r3, r4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e012      	b.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ec4:	481a      	ldr	r0, [pc, #104]	@ (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec6:	f7ff fe4e 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4819      	ldr	r0, [pc, #100]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ece:	f7ff fe4a 	bl	8003b66 <LL_ADC_IsEnabled>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	431c      	orrs	r4, r3
 8003ed6:	481a      	ldr	r0, [pc, #104]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ed8:	f7ff fe45 	bl	8003b66 <LL_ADC_IsEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4323      	orrs	r3, r4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ef6:	f023 030f 	bic.w	r3, r3, #15
 8003efa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003efc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003efe:	e009      	b.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f12:	e000      	b.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3784      	adds	r7, #132	@ 0x84
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	50000100 	.word	0x50000100
 8003f30:	50000400 	.word	0x50000400
 8003f34:	50000500 	.word	0x50000500
 8003f38:	50000300 	.word	0x50000300
 8003f3c:	50000700 	.word	0x50000700
 8003f40:	50000600 	.word	0x50000600

08003f44 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40010400 	.word	0x40010400

08003f68 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <LL_EXTI_EnableIT_32_63+0x20>)
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	4904      	ldr	r1, [pc, #16]	@ (8003f88 <LL_EXTI_EnableIT_32_63+0x20>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	620b      	str	r3, [r1, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010400 	.word	0x40010400

08003f8c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	4904      	ldr	r1, [pc, #16]	@ (8003fb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010400 	.word	0x40010400

08003fb4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4904      	ldr	r1, [pc, #16]	@ (8003fd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	620b      	str	r3, [r1, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010400 	.word	0x40010400

08003fdc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <LL_EXTI_EnableEvent_0_31+0x20>)
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4904      	ldr	r1, [pc, #16]	@ (8003ffc <LL_EXTI_EnableEvent_0_31+0x20>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]

}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40010400 	.word	0x40010400

08004000 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <LL_EXTI_EnableEvent_32_63+0x20>)
 800400a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800400c:	4904      	ldr	r1, [pc, #16]	@ (8004020 <LL_EXTI_EnableEvent_32_63+0x20>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40010400 	.word	0x40010400

08004024 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <LL_EXTI_DisableEvent_0_31+0x24>)
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	43db      	mvns	r3, r3
 8004034:	4904      	ldr	r1, [pc, #16]	@ (8004048 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004036:	4013      	ands	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010400 	.word	0x40010400

0800404c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	43db      	mvns	r3, r3
 800405c:	4904      	ldr	r1, [pc, #16]	@ (8004070 <LL_EXTI_DisableEvent_32_63+0x24>)
 800405e:	4013      	ands	r3, r2
 8004060:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010400 	.word	0x40010400

08004074 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4904      	ldr	r1, [pc, #16]	@ (8004094 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40010400 	.word	0x40010400

08004098 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80040a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a4:	4904      	ldr	r1, [pc, #16]	@ (80040b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40010400 	.word	0x40010400

080040bc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4904      	ldr	r1, [pc, #16]	@ (80040e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]

}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010400 	.word	0x40010400

080040e4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80040ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	4904      	ldr	r1, [pc, #16]	@ (8004108 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010400 	.word	0x40010400

0800410c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	4904      	ldr	r1, [pc, #16]	@ (800412c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4313      	orrs	r3, r2
 800411e:	60cb      	str	r3, [r1, #12]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40010400 	.word	0x40010400

08004130 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800413a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413c:	4904      	ldr	r1, [pc, #16]	@ (8004150 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40010400 	.word	0x40010400

08004154 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	43db      	mvns	r3, r3
 8004164:	4904      	ldr	r1, [pc, #16]	@ (8004178 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004166:	4013      	ands	r3, r2
 8004168:	60cb      	str	r3, [r1, #12]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010400 	.word	0x40010400

0800417c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	43db      	mvns	r3, r3
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800418e:	4013      	ands	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010400 	.word	0x40010400

080041a4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80041ac:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6153      	str	r3, [r2, #20]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010400 	.word	0x40010400

080041c4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80041cc:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010400 	.word	0x40010400

080041e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e181      	b.n	8004504 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800420a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800420e:	d102      	bne.n	8004216 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e176      	b.n	8004504 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7f5b      	ldrb	r3, [r3, #29]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d108      	bne.n	8004232 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fda1 	bl	8001d74 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b90      	ldr	r3, [pc, #576]	@ (80044a4 <HAL_COMP_Init+0x2c0>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	6979      	ldr	r1, [r7, #20]
 800426c:	430b      	orrs	r3, r1
 800426e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_COMP_Init+0xc8>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <HAL_COMP_Init+0x2c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	4a88      	ldr	r2, [pc, #544]	@ (80044ac <HAL_COMP_Init+0x2c8>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800429e:	e002      	b.n	80042a6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f9      	bne.n	80042a0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a7f      	ldr	r2, [pc, #508]	@ (80044b0 <HAL_COMP_Init+0x2cc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d028      	beq.n	8004308 <HAL_COMP_Init+0x124>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	@ (80044b4 <HAL_COMP_Init+0x2d0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d020      	beq.n	8004302 <HAL_COMP_Init+0x11e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7c      	ldr	r2, [pc, #496]	@ (80044b8 <HAL_COMP_Init+0x2d4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_COMP_Init+0x118>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7b      	ldr	r2, [pc, #492]	@ (80044bc <HAL_COMP_Init+0x2d8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d010      	beq.n	80042f6 <HAL_COMP_Init+0x112>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a79      	ldr	r2, [pc, #484]	@ (80044c0 <HAL_COMP_Init+0x2dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d008      	beq.n	80042f0 <HAL_COMP_Init+0x10c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a78      	ldr	r2, [pc, #480]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_COMP_Init+0x108>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e00f      	b.n	800430c <HAL_COMP_Init+0x128>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e00d      	b.n	800430c <HAL_COMP_Init+0x128>
 80042f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80042f4:	e00a      	b.n	800430c <HAL_COMP_Init+0x128>
 80042f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042fa:	e007      	b.n	800430c <HAL_COMP_Init+0x128>
 80042fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004300:	e004      	b.n	800430c <HAL_COMP_Init+0x128>
 8004302:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004306:	e001      	b.n	800430c <HAL_COMP_Init+0x128>
 8004308:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800430c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80b6 	beq.w	8004488 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_COMP_Init+0x158>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a64      	ldr	r2, [pc, #400]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d103      	bne.n	8004344 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800433c:	6938      	ldr	r0, [r7, #16]
 800433e:	f7ff feab 	bl	8004098 <LL_EXTI_EnableRisingTrig_32_63>
 8004342:	e014      	b.n	800436e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004344:	6938      	ldr	r0, [r7, #16]
 8004346:	f7ff fe95 	bl	8004074 <LL_EXTI_EnableRisingTrig_0_31>
 800434a:	e010      	b.n	800436e <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_COMP_Init+0x17c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5b      	ldr	r2, [pc, #364]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8004360:	6938      	ldr	r0, [r7, #16]
 8004362:	f7ff febf 	bl	80040e4 <LL_EXTI_DisableRisingTrig_32_63>
 8004366:	e002      	b.n	800436e <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004368:	6938      	ldr	r0, [r7, #16]
 800436a:	f7ff fea7 	bl	80040bc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d011      	beq.n	800439e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a51      	ldr	r2, [pc, #324]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_COMP_Init+0x1aa>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4f      	ldr	r2, [pc, #316]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d103      	bne.n	8004396 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800438e:	6938      	ldr	r0, [r7, #16]
 8004390:	f7ff fece 	bl	8004130 <LL_EXTI_EnableFallingTrig_32_63>
 8004394:	e014      	b.n	80043c0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004396:	6938      	ldr	r0, [r7, #16]
 8004398:	f7ff feb8 	bl	800410c <LL_EXTI_EnableFallingTrig_0_31>
 800439c:	e010      	b.n	80043c0 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a48      	ldr	r2, [pc, #288]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_COMP_Init+0x1ce>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a46      	ldr	r2, [pc, #280]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d103      	bne.n	80043ba <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80043b2:	6938      	ldr	r0, [r7, #16]
 80043b4:	f7ff fee2 	bl	800417c <LL_EXTI_DisableFallingTrig_32_63>
 80043b8:	e002      	b.n	80043c0 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f7ff feca 	bl	8004154 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3f      	ldr	r2, [pc, #252]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_COMP_Init+0x1f0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3e      	ldr	r2, [pc, #248]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d103      	bne.n	80043dc <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f7ff fef5 	bl	80041c4 <LL_EXTI_ClearFlag_32_63>
 80043da:	e002      	b.n	80043e2 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80043dc:	6938      	ldr	r0, [r7, #16]
 80043de:	f7ff fee1 	bl	80041a4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_COMP_Init+0x21e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a32      	ldr	r2, [pc, #200]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d103      	bne.n	800440a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004402:	6938      	ldr	r0, [r7, #16]
 8004404:	f7ff fdfc 	bl	8004000 <LL_EXTI_EnableEvent_32_63>
 8004408:	e014      	b.n	8004434 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f7ff fde6 	bl	8003fdc <LL_EXTI_EnableEvent_0_31>
 8004410:	e010      	b.n	8004434 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_COMP_Init+0x242>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a29      	ldr	r2, [pc, #164]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d103      	bne.n	800442e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004426:	6938      	ldr	r0, [r7, #16]
 8004428:	f7ff fe10 	bl	800404c <LL_EXTI_DisableEvent_32_63>
 800442c:	e002      	b.n	8004434 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f7ff fdf8 	bl	8004024 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_COMP_Init+0x270>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8004454:	6938      	ldr	r0, [r7, #16]
 8004456:	f7ff fd87 	bl	8003f68 <LL_EXTI_EnableIT_32_63>
 800445a:	e04b      	b.n	80044f4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800445c:	6938      	ldr	r0, [r7, #16]
 800445e:	f7ff fd71 	bl	8003f44 <LL_EXTI_EnableIT_0_31>
 8004462:	e047      	b.n	80044f4 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a16      	ldr	r2, [pc, #88]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_COMP_Init+0x294>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d103      	bne.n	8004480 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004478:	6938      	ldr	r0, [r7, #16]
 800447a:	f7ff fd9b 	bl	8003fb4 <LL_EXTI_DisableIT_32_63>
 800447e:	e039      	b.n	80044f4 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f7ff fd83 	bl	8003f8c <LL_EXTI_DisableIT_0_31>
 8004486:	e035      	b.n	80044f4 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0d      	ldr	r2, [pc, #52]	@ (80044c4 <HAL_COMP_Init+0x2e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_COMP_Init+0x2b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <HAL_COMP_Init+0x2e4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d117      	bne.n	80044cc <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800449c:	6938      	ldr	r0, [r7, #16]
 800449e:	f7ff fdd5 	bl	800404c <LL_EXTI_DisableEvent_32_63>
 80044a2:	e016      	b.n	80044d2 <HAL_COMP_Init+0x2ee>
 80044a4:	ff007e0f 	.word	0xff007e0f
 80044a8:	20000000 	.word	0x20000000
 80044ac:	053e2d63 	.word	0x053e2d63
 80044b0:	40010200 	.word	0x40010200
 80044b4:	40010204 	.word	0x40010204
 80044b8:	40010208 	.word	0x40010208
 80044bc:	4001020c 	.word	0x4001020c
 80044c0:	40010210 	.word	0x40010210
 80044c4:	40010214 	.word	0x40010214
 80044c8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80044cc:	6938      	ldr	r0, [r7, #16]
 80044ce:	f7ff fda9 	bl	8004024 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004510 <HAL_COMP_Init+0x32c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_COMP_Init+0x302>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <HAL_COMP_Init+0x330>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d103      	bne.n	80044ee <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80044e6:	6938      	ldr	r0, [r7, #16]
 80044e8:	f7ff fd64 	bl	8003fb4 <LL_EXTI_DisableIT_32_63>
 80044ec:	e002      	b.n	80044f4 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80044ee:	6938      	ldr	r0, [r7, #16]
 80044f0:	f7ff fd4c 	bl	8003f8c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7f5b      	ldrb	r3, [r3, #29]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004504:	7ffb      	ldrb	r3, [r7, #31]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40010214 	.word	0x40010214
 8004514:	40010218 	.word	0x40010218

08004518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <__NVIC_SetPriorityGrouping+0x44>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004534:	4013      	ands	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454a:	4a04      	ldr	r2, [pc, #16]	@ (800455c <__NVIC_SetPriorityGrouping+0x44>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	60d3      	str	r3, [r2, #12]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__NVIC_GetPriorityGrouping+0x18>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	0a1b      	lsrs	r3, r3, #8
 800456a:	f003 0307 	and.w	r3, r3, #7
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	2b00      	cmp	r3, #0
 800458c:	db0b      	blt.n	80045a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	f003 021f 	and.w	r2, r3, #31
 8004594:	4907      	ldr	r1, [pc, #28]	@ (80045b4 <__NVIC_EnableIRQ+0x38>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2001      	movs	r0, #1
 800459e:	fa00 f202 	lsl.w	r2, r0, r2
 80045a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	@ (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	@ (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	@ 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004684:	d301      	bcc.n	800468a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004686:	2301      	movs	r3, #1
 8004688:	e00f      	b.n	80046aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <SysTick_Config+0x40>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004692:	210f      	movs	r1, #15
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f7ff ff8e 	bl	80045b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <SysTick_Config+0x40>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a2:	4b04      	ldr	r3, [pc, #16]	@ (80046b4 <SysTick_Config+0x40>)
 80046a4:	2207      	movs	r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000e010 	.word	0xe000e010

080046b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff29 	bl	8004518 <__NVIC_SetPriorityGrouping>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046dc:	f7ff ff40 	bl	8004560 <__NVIC_GetPriorityGrouping>
 80046e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7ff ff90 	bl	800460c <NVIC_EncodePriority>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff5f 	bl	80045b8 <__NVIC_SetPriority>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff33 	bl	800457c <__NVIC_EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ffa4 	bl	8004674 <SysTick_Config>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e014      	b.n	8004772 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd fba1 	bl	8001ea0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e056      	b.n	800483e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	795b      	ldrb	r3, [r3, #5]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_DAC_Start+0x20>
 8004798:	2302      	movs	r3, #2
 800479a:	e050      	b.n	800483e <HAL_DAC_Start+0xc2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047c0:	4b22      	ldr	r3, [pc, #136]	@ (800484c <HAL_DAC_Start+0xd0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	4a22      	ldr	r2, [pc, #136]	@ (8004850 <HAL_DAC_Start+0xd4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80047d2:	e002      	b.n	80047da <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f9      	bne.n	80047d4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d11d      	bne.n	8004830 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	e014      	b.n	8004830 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2102      	movs	r1, #2
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0202 	orr.w	r2, r2, #2
 800482e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000000 	.word	0x20000000
 8004850:	053e2d63 	.word	0x053e2d63

08004854 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e018      	b.n	80048a2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	3308      	adds	r3, #8
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e004      	b.n	8004898 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	3314      	adds	r3, #20
 8004896:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	461a      	mov	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_DAC_ConfigChannel+0x1c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e1a1      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	795b      	ldrb	r3, [r3, #5]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_DAC_ConfigChannel+0x32>
 80048de:	2302      	movs	r3, #2
 80048e0:	e198      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x364>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2202      	movs	r2, #2
 80048ec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d17a      	bne.n	80049ec <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80048f6:	f7fd fdf1 	bl	80024dc <HAL_GetTick>
 80048fa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d13d      	bne.n	800497e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004902:	e018      	b.n	8004936 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004904:	f7fd fdea 	bl	80024dc <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d911      	bls.n	8004936 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f043 0208 	orr.w	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2203      	movs	r2, #3
 8004930:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e16e      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1df      	bne.n	8004904 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800494c:	641a      	str	r2, [r3, #64]	@ 0x40
 800494e:	e020      	b.n	8004992 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004950:	f7fd fdc4 	bl	80024dc <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d90f      	bls.n	800497e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	da0a      	bge.n	800497e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f043 0208 	orr.w	r2, r3, #8
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2203      	movs	r2, #3
 8004978:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e14a      	b.n	8004c14 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	dbe3      	blt.n	8004950 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80049a2:	fa01 f303 	lsl.w	r3, r1, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	ea02 0103 	and.w	r1, r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	409a      	lsls	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	21ff      	movs	r1, #255	@ 0xff
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	ea02 0103 	and.w	r1, r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d11d      	bne.n	8004a30 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	221f      	movs	r2, #31
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	4313      	orrs	r3, r2
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2207      	movs	r2, #7
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a48:	4013      	ands	r3, r2
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d102      	bne.n	8004a5a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	e00f      	b.n	8004a7a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d102      	bne.n	8004a68 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004a62:	2301      	movs	r3, #1
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	e008      	b.n	8004a7a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004a70:	2301      	movs	r3, #1
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	e001      	b.n	8004a7a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	791b      	ldrb	r3, [r3, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_DAC_ConfigChannel+0x1fe>
 8004aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aac:	e000      	b.n	8004ab0 <HAL_DAC_ConfigChannel+0x200>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	4013      	ands	r3, r2
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	795b      	ldrb	r3, [r3, #5]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HAL_DAC_ConfigChannel+0x22a>
 8004ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ad8:	e000      	b.n	8004adc <HAL_DAC_ConfigChannel+0x22c>
 8004ada:	2300      	movs	r3, #0
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d114      	bne.n	8004b1c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004af2:	f003 fd77 	bl	80085e4 <HAL_RCC_GetHCLKFreq>
 8004af6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4a48      	ldr	r2, [pc, #288]	@ (8004c1c <HAL_DAC_ConfigChannel+0x36c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d904      	bls.n	8004b0a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b08:	e00f      	b.n	8004b2a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a44      	ldr	r2, [pc, #272]	@ (8004c20 <HAL_DAC_ConfigChannel+0x370>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d90a      	bls.n	8004b28 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1a:	e006      	b.n	8004b2a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b22:	4313      	orrs	r3, r2
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b26:	e000      	b.n	8004b2a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004b28:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	400a      	ands	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b94:	4313      	orrs	r3, r2
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6819      	ldr	r1, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	22c0      	movs	r2, #192	@ 0xc0
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	400a      	ands	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	ea02 0103 	and.w	r1, r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	09896800 	.word	0x09896800
 8004c20:	04c4b400 	.word	0x04c4b400

08004c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c32:	e15a      	b.n	8004eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 814c 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d005      	beq.n	8004c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d130      	bne.n	8004cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0201 	and.w	r2, r3, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d017      	beq.n	8004d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d123      	bne.n	8004d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80a6 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d98:	4b5b      	ldr	r3, [pc, #364]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004da4:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db0:	4a56      	ldr	r2, [pc, #344]	@ (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	3302      	adds	r3, #2
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	220f      	movs	r2, #15
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dda:	d01f      	beq.n	8004e1c <HAL_GPIO_Init+0x1f8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a4c      	ldr	r2, [pc, #304]	@ (8004f10 <HAL_GPIO_Init+0x2ec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d019      	beq.n	8004e18 <HAL_GPIO_Init+0x1f4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a4b      	ldr	r2, [pc, #300]	@ (8004f14 <HAL_GPIO_Init+0x2f0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_GPIO_Init+0x1f0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a4a      	ldr	r2, [pc, #296]	@ (8004f18 <HAL_GPIO_Init+0x2f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00d      	beq.n	8004e10 <HAL_GPIO_Init+0x1ec>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a49      	ldr	r2, [pc, #292]	@ (8004f1c <HAL_GPIO_Init+0x2f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <HAL_GPIO_Init+0x1e8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a48      	ldr	r2, [pc, #288]	@ (8004f20 <HAL_GPIO_Init+0x2fc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_GPIO_Init+0x1e4>
 8004e04:	2305      	movs	r3, #5
 8004e06:	e00a      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e08:	2306      	movs	r3, #6
 8004e0a:	e008      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e006      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e10:	2303      	movs	r3, #3
 8004e12:	e004      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f002 0203 	and.w	r2, r2, #3
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	4093      	lsls	r3, r2
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e2e:	4937      	ldr	r1, [pc, #220]	@ (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e3c:	4b39      	ldr	r3, [pc, #228]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e66:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e8a:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e90:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ede:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f ae9d 	bne.w	8004c34 <HAL_GPIO_Init+0x10>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	48000400 	.word	0x48000400
 8004f14:	48000800 	.word	0x48000800
 8004f18:	48000c00 	.word	0x48000c00
 8004f1c:	48001000 	.word	0x48001000
 8004f20:	48001400 	.word	0x48001400
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e001      	b.n	8004f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	4613      	mov	r3, r2
 8004f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f68:	787b      	ldrb	r3, [r7, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f74:	e002      	b.n	8004f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f92:	4b08      	ldr	r3, [pc, #32]	@ (8004fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f9e:	4a05      	ldr	r2, [pc, #20]	@ (8004fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f806 	bl	8004fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40010400 	.word	0x40010400

08004fb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0be      	b.n	8005160 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02e      	beq.n	800508c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4d      	ldr	r2, [pc, #308]	@ (8005168 <HAL_HRTIM_Init+0x198>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10b      	bne.n	8005050 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005038:	4b4c      	ldr	r3, [pc, #304]	@ (800516c <HAL_HRTIM_Init+0x19c>)
 800503a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503c:	4a4b      	ldr	r2, [pc, #300]	@ (800516c <HAL_HRTIM_Init+0x19c>)
 800503e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005042:	6613      	str	r3, [r2, #96]	@ 0x60
 8005044:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_HRTIM_Init+0x19c>)
 8005046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005048:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800505e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005074:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fc ff6d 	bl	8001f6c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d012      	beq.n	80050c4 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ac:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
 80050d8:	e03e      	b.n	8005158 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80050da:	7dfa      	ldrb	r2, [r7, #23]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3318      	adds	r3, #24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80050ee:	7dfa      	ldrb	r2, [r7, #23]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	331c      	adds	r3, #28
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005102:	7dfa      	ldrb	r2, [r7, #23]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3320      	adds	r3, #32
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005116:	7dfa      	ldrb	r2, [r7, #23]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3324      	adds	r3, #36	@ 0x24
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800512a:	7dfa      	ldrb	r2, [r7, #23]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3328      	adds	r3, #40	@ 0x28
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800513e:	7dfa      	ldrb	r2, [r7, #23]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3330      	adds	r3, #48	@ 0x30
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	3301      	adds	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d9bd      	bls.n	80050da <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40016800 	.word	0x40016800
 800516c:	40021000 	.word	0x40021000

08005170 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005184:	2302      	movs	r3, #2
 8005186:	e045      	b.n	8005214 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d114      	bne.n	80051ca <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0202 	bic.w	r2, r2, #2
 80051b0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80051c8:	e01f      	b.n	800520a <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0202 	orr.w	r2, r2, #2
 80051da:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80051e6:	f023 010c 	bic.w	r1, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800522a:	f7fd f957 	bl	80024dc <HAL_GetTick>
 800522e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005230:	e014      	b.n	800525c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d010      	beq.n	800525c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fd f94f 	bl	80024dc <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2207      	movs	r2, #7
 8005254:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e011      	b.n	8005280 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d1e1      	bne.n	8005232 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d101      	bne.n	80052a4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e015      	b.n	80052d0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d104      	bne.n	80052bc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa19 	bl	80056ec <HRTIM_MasterBase_Config>
 80052ba:	e004      	b.n	80052c6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fa42 	bl	800574a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d101      	bne.n	80052f4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e07a      	b.n	80053ea <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80052fe:	2302      	movs	r3, #2
 8005300:	e073      	b.n	80053ea <HAL_HRTIM_WaveformTimerConfig+0x112>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b06      	cmp	r3, #6
 8005316:	d104      	bne.n	8005322 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa55 	bl	80057ca <HRTIM_MasterWaveform_Config>
 8005320:	e004      	b.n	800532c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 faec 	bl	8005904 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4403      	add	r3, r0
 800533e:	3320      	adds	r3, #32
 8005340:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	3324      	adds	r3, #36	@ 0x24
 8005356:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4403      	add	r3, r0
 800536a:	3328      	adds	r3, #40	@ 0x28
 800536c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68d9      	ldr	r1, [r3, #12]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4403      	add	r3, r0
 8005380:	332c      	adds	r3, #44	@ 0x2c
 8005382:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6919      	ldr	r1, [r3, #16]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4403      	add	r3, r0
 8005396:	3330      	adds	r3, #48	@ 0x30
 8005398:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fd7f 	bl	8005ea0 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b06      	cmp	r3, #6
 80053a6:	d017      	beq.n	80053d8 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d113      	bne.n	80053d8 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3301      	adds	r3, #1
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c6:	025b      	lsls	r3, r3, #9
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	6809      	ldr	r1, [r1, #0]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3301      	adds	r3, #1
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	440b      	add	r3, r1
 80053d6:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d101      	bne.n	800540e <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 800540a:	2302      	movs	r3, #2
 800540c:	e020      	b.n	8005450 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005418:	2302      	movs	r3, #2
 800541a:	e019      	b.n	8005450 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fbed 	bl	8005c10 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fd31 	bl	8005ea0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d101      	bne.n	8005476 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	e01d      	b.n	80054b2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005480:	2302      	movs	r3, #2
 8005482:	e016      	b.n	80054b2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fc18 	bl	8005cd0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2bff      	cmp	r3, #255	@ 0xff
 80054c8:	d103      	bne.n	80054d2 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fd56 	bl	8005f7c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80054d0:	e00a      	b.n	80054e8 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d103      	bne.n	80054e0 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fddf 	bl	800609c <HRTIM_Master_ISR>
}
 80054de:	e003      	b.n	80054e8 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fe9f 	bl	8006226 <HRTIM_Timer_ISR>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0318 	bic.w	r3, r3, #24
 8005716:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	619a      	str	r2, [r3, #24]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3301      	adds	r3, #1
 800575e:	01db      	lsls	r3, r3, #7
 8005760:	4413      	add	r3, r2
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0318 	bic.w	r3, r3, #24
 800577e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	01db      	lsls	r3, r3, #7
 8005794:	4413      	add	r3, r2
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	01db      	lsls	r3, r3, #7
 80057a6:	440b      	add	r3, r1
 80057a8:	3394      	adds	r3, #148	@ 0x94
 80057aa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6819      	ldr	r1, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	01db      	lsls	r3, r3, #7
 80057b8:	440b      	add	r3, r1
 80057ba:	3398      	adds	r3, #152	@ 0x98
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80057e4:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0320 	bic.w	r3, r3, #32
 80057ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057fe:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	2b20      	cmp	r3, #32
 8005806:	d003      	beq.n	8005810 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d108      	bne.n	8005822 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005816:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f043 0320 	orr.w	r3, r3, #32
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e021      	b.n	8005866 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d108      	bne.n	800583c <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005830:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e014      	b.n	8005866 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d108      	bne.n	8005856 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e007      	b.n	8005866 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f023 0320 	bic.w	r3, r3, #32
 800585c:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005864:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800586c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800587e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005890:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80058a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80058b4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005904:	b480      	push	{r7}
 8005906:	b08b      	sub	sp, #44	@ 0x2c
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3301      	adds	r3, #1
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	4413      	add	r3, r2
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3301      	adds	r3, #1
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	440b      	add	r3, r1
 800592e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3301      	adds	r3, #1
 8005938:	01db      	lsls	r3, r3, #7
 800593a:	4413      	add	r3, r2
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	4413      	add	r3, r2
 800594a:	33e8      	adds	r3, #232	@ 0xe8
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	01db      	lsls	r3, r3, #7
 8005958:	4413      	add	r3, r2
 800595a:	33e4      	adds	r3, #228	@ 0xe4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005968:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	f023 0320 	bic.w	r3, r3, #32
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	2b20      	cmp	r3, #32
 8005982:	d003      	beq.n	800598c <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d108      	bne.n	800599e <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	f043 0320 	orr.w	r3, r3, #32
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	e021      	b.n	80059e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d108      	bne.n	80059b8 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b6:	e014      	b.n	80059e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d108      	bne.n	80059d2 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d0:	e007      	b.n	80059e2 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	f023 0320 	bic.w	r3, r3, #32
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f0:	4313      	orrs	r3, r2
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	4313      	orrs	r3, r2
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a14:	4313      	orrs	r3, r2
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a26:	4313      	orrs	r3, r2
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a4c:	d103      	bne.n	8005a56 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a64:	4313      	orrs	r3, r2
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a76:	4313      	orrs	r3, r2
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a96:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005aac:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005abe:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ace:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005ad2:	d004      	beq.n	8005ade <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8005adc:	d103      	bne.n	8005ae6 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	2b40      	cmp	r3, #64	@ 0x40
 8005ae4:	d108      	bne.n	8005af8 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8005aec:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005afe:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d850      	bhi.n	8005bb8 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b35 	.word	0x08005b35
 8005b20:	08005b4b 	.word	0x08005b4b
 8005b24:	08005b61 	.word	0x08005b61
 8005b28:	08005b77 	.word	0x08005b77
 8005b2c:	08005b8d 	.word	0x08005b8d
 8005b30:	08005ba3 	.word	0x08005ba3
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61fb      	str	r3, [r7, #28]
      break;
 8005b48:	e037      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b50:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
      break;
 8005b5e:	e02c      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005b66:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61fb      	str	r3, [r7, #28]
      break;
 8005b74:	e021      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b7c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61fb      	str	r3, [r7, #28]
      break;
 8005b8a:	e016      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	015b      	lsls	r3, r3, #5
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61fb      	str	r3, [r7, #28]
      break;
 8005ba0:	e00b      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ba8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	019b      	lsls	r3, r3, #6
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]
      break;
 8005bb6:	e000      	b.n	8005bba <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8005bb8:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	01db      	lsls	r3, r3, #7
 8005bc4:	4413      	add	r3, r2
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	01db      	lsls	r3, r3, #7
 8005bd2:	4413      	add	r3, r2
 8005bd4:	33e8      	adds	r3, #232	@ 0xe8
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	01db      	lsls	r3, r3, #7
 8005be2:	4413      	add	r3, r2
 8005be4:	33e4      	adds	r3, #228	@ 0xe4
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	01db      	lsls	r3, r3, #7
 8005bf2:	4413      	add	r3, r2
 8005bf4:	33d4      	adds	r3, #212	@ 0xd4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005c04:	bf00      	nop
 8005c06:	372c      	adds	r7, #44	@ 0x2c
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	01db      	lsls	r3, r3, #7
 8005c24:	4413      	add	r3, r2
 8005c26:	33ec      	adds	r3, #236	@ 0xec
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0310 	bic.w	r3, r3, #16
 8005c32:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c46:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c58:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c6a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11a      	bne.n	8005cb4 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0302 	bic.w	r3, r3, #2
 8005c96:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4413      	add	r3, r2
 8005cbe:	33ec      	adds	r3, #236	@ 0xec
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	601a      	str	r2, [r3, #0]

}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	@ 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	01db      	lsls	r3, r3, #7
 8005cea:	4413      	add	r3, r2
 8005cec:	33e4      	adds	r3, #228	@ 0xe4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	4413      	add	r3, r2
 8005cfc:	33b8      	adds	r3, #184	@ 0xb8
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d08:	d05d      	beq.n	8005dc6 <HRTIM_OutputConfig+0xf6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d10:	d86e      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d18:	d042      	beq.n	8005da0 <HRTIM_OutputConfig+0xd0>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d20:	d866      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d28:	d04d      	beq.n	8005dc6 <HRTIM_OutputConfig+0xf6>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d30:	d85e      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d38:	d032      	beq.n	8005da0 <HRTIM_OutputConfig+0xd0>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d40:	d856      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b80      	cmp	r3, #128	@ 0x80
 8005d46:	d03e      	beq.n	8005dc6 <HRTIM_OutputConfig+0xf6>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b80      	cmp	r3, #128	@ 0x80
 8005d4c:	d850      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b40      	cmp	r3, #64	@ 0x40
 8005d52:	d025      	beq.n	8005da0 <HRTIM_OutputConfig+0xd0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d84a      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d01f      	beq.n	8005da0 <HRTIM_OutputConfig+0xd0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d044      	beq.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d841      	bhi.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d33e      	bcc.n	8005df0 <HRTIM_OutputConfig+0x120>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3b02      	subs	r3, #2
 8005d76:	2201      	movs	r2, #1
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	4b48      	ldr	r3, [pc, #288]	@ (8005e9c <HRTIM_OutputConfig+0x1cc>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bf14      	ite	ne
 8005d82:	2301      	movne	r3, #1
 8005d84:	2300      	moveq	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11c      	bne.n	8005dc6 <HRTIM_OutputConfig+0xf6>
 8005d8c:	f244 0304 	movw	r3, #16388	@ 0x4004
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf14      	ite	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	2300      	moveq	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d027      	beq.n	8005df0 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	01db      	lsls	r3, r3, #7
 8005dac:	440b      	add	r3, r1
 8005dae:	33bc      	adds	r3, #188	@ 0xbc
 8005db0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	01db      	lsls	r3, r3, #7
 8005dbe:	440b      	add	r3, r1
 8005dc0:	33c0      	adds	r3, #192	@ 0xc0
 8005dc2:	601a      	str	r2, [r3, #0]
      break;
 8005dc4:	e015      	b.n	8005df2 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	01db      	lsls	r3, r3, #7
 8005dd2:	440b      	add	r3, r1
 8005dd4:	33c4      	adds	r3, #196	@ 0xc4
 8005dd6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	01db      	lsls	r3, r3, #7
 8005de4:	440b      	add	r3, r1
 8005de6:	33c8      	adds	r3, #200	@ 0xc8
 8005de8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005dea:	2310      	movs	r3, #16
 8005dec:	61bb      	str	r3, [r7, #24]
      break;
 8005dee:	e000      	b.n	8005df2 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8005df0:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005df2:	22fe      	movs	r2, #254	@ 0xfe
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d111      	bne.n	8005e7e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	01db      	lsls	r3, r3, #7
 8005e86:	4413      	add	r3, r2
 8005e88:	33e4      	adds	r3, #228	@ 0xe4
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3724      	adds	r7, #36	@ 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40000041 	.word	0x40000041

08005ea0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d85e      	bhi.n	8005f6e <HRTIM_ForceRegistersUpdate+0xce>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HRTIM_ForceRegistersUpdate+0x18>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005f01 	.word	0x08005f01
 8005ec0:	08005f17 	.word	0x08005f17
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f43 	.word	0x08005f43
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005ed5 	.word	0x08005ed5
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005ee8:	e042      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0202 	orr.w	r2, r2, #2
 8005efa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005efe:	e037      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0204 	orr.w	r2, r2, #4
 8005f10:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f14:	e02c      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f2a:	e021      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0210 	orr.w	r2, r2, #16
 8005f3c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f40:	e016      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0220 	orr.w	r2, r2, #32
 8005f52:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f56:	e00b      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f68:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005f6c:	e000      	b.n	8005f70 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8005f6e:	bf00      	nop
  }
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005f96:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fa9a 	bl	80054f0 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fa92 	bl	8005504 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fa8a 	bl	8005518 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2208      	movs	r2, #8
 800601e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fa82 	bl	800552c <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2210      	movs	r2, #16
 8006042:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fa7a 	bl	8005540 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2240      	movs	r2, #64	@ 0x40
 8006066:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fa72 	bl	8005554 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fa6a 	bl	8005568 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80060ac:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80060b6:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80060e4:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fa3f 	bl	800557c <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800611a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fa36 	bl	8005590 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006140:	2106      	movs	r1, #6
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fa4e 	bl	80055e4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2202      	movs	r2, #2
 8006162:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006164:	2106      	movs	r1, #6
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fa47 	bl	80055fa <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2204      	movs	r2, #4
 8006186:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006188:	2106      	movs	r1, #6
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fa40 	bl	8005610 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2208      	movs	r2, #8
 80061aa:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80061ac:	2106      	movs	r1, #6
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fa39 	bl	8005626 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80061d0:	2106      	movs	r1, #6
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff f9fb 	bl	80055ce <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2220      	movs	r2, #32
 80061f2:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff f9d5 	bl	80055a4 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00c      	beq.n	800621e <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006216:	2106      	movs	r1, #6
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff f9cd 	bl	80055b8 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	01db      	lsls	r3, r3, #7
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	01db      	lsls	r3, r3, #7
 800624a:	4413      	add	r3, r2
 800624c:	338c      	adds	r3, #140	@ 0x8c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d010      	beq.n	800627e <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	01db      	lsls	r3, r3, #7
 800626e:	4413      	add	r3, r2
 8006270:	3388      	adds	r3, #136	@ 0x88
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff f9b3 	bl	80055e4 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	01db      	lsls	r3, r3, #7
 800629a:	4413      	add	r3, r2
 800629c:	3388      	adds	r3, #136	@ 0x88
 800629e:	2202      	movs	r2, #2
 80062a0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f9a8 	bl	80055fa <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d010      	beq.n	80062d6 <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	4413      	add	r3, r2
 80062c8:	3388      	adds	r3, #136	@ 0x88
 80062ca:	2204      	movs	r2, #4
 80062cc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f99d 	bl	8005610 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3388      	adds	r3, #136	@ 0x88
 80062f6:	2208      	movs	r2, #8
 80062f8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f992 	bl	8005626 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d010      	beq.n	800632e <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	01db      	lsls	r3, r3, #7
 800631e:	4413      	add	r3, r2
 8006320:	3388      	adds	r3, #136	@ 0x88
 8006322:	2210      	movs	r2, #16
 8006324:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff f950 	bl	80055ce <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	01db      	lsls	r3, r3, #7
 800634a:	4413      	add	r3, r2
 800634c:	3388      	adds	r3, #136	@ 0x88
 800634e:	2240      	movs	r2, #64	@ 0x40
 8006350:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff f92f 	bl	80055b8 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	01db      	lsls	r3, r3, #7
 8006376:	4413      	add	r3, r2
 8006378:	3388      	adds	r3, #136	@ 0x88
 800637a:	2280      	movs	r2, #128	@ 0x80
 800637c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff f95b 	bl	800563c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d011      	beq.n	80063b4 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	01db      	lsls	r3, r3, #7
 80063a2:	4413      	add	r3, r2
 80063a4:	3388      	adds	r3, #136	@ 0x88
 80063a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063aa:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff f94f 	bl	8005652 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	01db      	lsls	r3, r3, #7
 80063d0:	4413      	add	r3, r2
 80063d2:	3388      	adds	r3, #136	@ 0x88
 80063d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d8:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff f959 	bl	8005694 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d011      	beq.n	8006410 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	3388      	adds	r3, #136	@ 0x88
 8006402:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006406:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff f94d 	bl	80056aa <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	01db      	lsls	r3, r3, #7
 800642c:	4413      	add	r3, r2
 800642e:	3388      	adds	r3, #136	@ 0x88
 8006430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006434:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f941 	bl	80056c0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	3388      	adds	r3, #136	@ 0x88
 800645e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006462:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff f935 	bl	80056d6 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d011      	beq.n	800649a <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00c      	beq.n	800649a <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	01db      	lsls	r3, r3, #7
 8006488:	4413      	add	r3, r2
 800648a:	3388      	adds	r3, #136	@ 0x88
 800648c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006490:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff f8f2 	bl	800567e <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d011      	beq.n	80064c8 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	4413      	add	r3, r2
 80064b8:	3388      	adds	r3, #136	@ 0x88
 80064ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064be:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff f8d0 	bl	8005668 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e0c0      	b.n	8006664 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fb fe9e 	bl	8002238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2203      	movs	r2, #3
 8006500:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f004 fc10 	bl	800ad2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	e03e      	b.n	8006592 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006514:	7bfa      	ldrb	r2, [r7, #15]
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	440b      	add	r3, r1
 8006522:	3311      	adds	r3, #17
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006528:	7bfa      	ldrb	r2, [r7, #15]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	440b      	add	r3, r1
 8006536:	3310      	adds	r3, #16
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	440b      	add	r3, r1
 800654a:	3313      	adds	r3, #19
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006550:	7bfa      	ldrb	r2, [r7, #15]
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	440b      	add	r3, r1
 800655e:	3320      	adds	r3, #32
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	440b      	add	r3, r1
 8006572:	3324      	adds	r3, #36	@ 0x24
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	440b      	add	r3, r1
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	3301      	adds	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	429a      	cmp	r2, r3
 800659a:	d3bb      	bcc.n	8006514 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	e044      	b.n	800662c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	440b      	add	r3, r1
 80065b0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065b8:	7bfa      	ldrb	r2, [r7, #15]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	440b      	add	r3, r1
 80065c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065ca:	7bfa      	ldrb	r2, [r7, #15]
 80065cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	440b      	add	r3, r1
 80065dc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065fa:	7bfa      	ldrb	r2, [r7, #15]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	440b      	add	r3, r1
 8006608:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006610:	7bfa      	ldrb	r2, [r7, #15]
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	440b      	add	r3, r1
 800661e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3301      	adds	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	7bfa      	ldrb	r2, [r7, #15]
 8006632:	429a      	cmp	r2, r3
 8006634:	d3b5      	bcc.n	80065a2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006642:	f004 fb8f 	bl	800ad64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7a9b      	ldrb	r3, [r3, #10]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fa26 	bl	8007aae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f005 f954 	bl	800b926 <USB_ReadInterrupts>
 800667e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f983 	bl	8006996 <PCD_EP_ISR_Handler>

    return;
 8006690:	e110      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006698:	2b00      	cmp	r3, #0
 800669a:	d013      	beq.n	80066c4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ae:	b292      	uxth	r2, r2
 80066b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f92c 	bl	8006912 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f946 	bl	800694e <HAL_PCD_SetAddress>

    return;
 80066c2:	e0f7      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00c      	beq.n	80066e8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066e0:	b292      	uxth	r2, r2
 80066e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80066e6:	e0e5      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006704:	b292      	uxth	r2, r2
 8006706:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800670a:	e0d3      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d034      	beq.n	8006780 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0204 	bic.w	r2, r2, #4
 8006728:	b292      	uxth	r2, r2
 800672a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006736:	b29a      	uxth	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0208 	bic.w	r2, r2, #8
 8006740:	b292      	uxth	r2, r2
 8006742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800674c:	2b01      	cmp	r3, #1
 800674e:	d107      	bne.n	8006760 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006758:	2100      	movs	r1, #0
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 f9d1 	bl	8007b02 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8ea 	bl	800693a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800676e:	b29a      	uxth	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006778:	b292      	uxth	r2, r2
 800677a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800677e:	e099      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006786:	2b00      	cmp	r3, #0
 8006788:	d027      	beq.n	80067da <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0208 	orr.w	r2, r2, #8
 800679c:	b292      	uxth	r2, r2
 800679e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067b4:	b292      	uxth	r2, r2
 80067b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0204 	orr.w	r2, r2, #4
 80067cc:	b292      	uxth	r2, r2
 80067ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8a7 	bl	8006926 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80067d8:	e06c      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d040      	beq.n	8006866 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067f6:	b292      	uxth	r2, r2
 80067f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d12b      	bne.n	800685e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0204 	orr.w	r2, r2, #4
 8006818:	b292      	uxth	r2, r2
 800681a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006826:	b29a      	uxth	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0208 	orr.w	r2, r2, #8
 8006830:	b292      	uxth	r2, r2
 8006832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006846:	b29b      	uxth	r3, r3
 8006848:	089b      	lsrs	r3, r3, #2
 800684a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006854:	2101      	movs	r1, #1
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 f953 	bl	8007b02 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800685c:	e02a      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f861 	bl	8006926 <HAL_PCD_SuspendCallback>
    return;
 8006864:	e026      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00f      	beq.n	8006890 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006882:	b292      	uxth	r2, r2
 8006884:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f838 	bl	80068fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800688e:	e011      	b.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068ac:	b292      	uxth	r2, r2
 80068ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80068b2:	bf00      	nop
  }
}
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_PCD_SetAddress+0x1a>
 8006964:	2302      	movs	r3, #2
 8006966:	e012      	b.n	800698e <HAL_PCD_SetAddress+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f004 ffbd 	bl	800b8fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b092      	sub	sp, #72	@ 0x48
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800699e:	e333      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069a8:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80069aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80069b6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f040 8108 	bne.w	8006bd0 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80069c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d14c      	bne.n	8006a64 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	813b      	strh	r3, [r7, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	893b      	ldrh	r3, [r7, #8]
 80069e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3310      	adds	r3, #16
 80069f2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	4413      	add	r3, r2
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	441a      	add	r2, r3
 8006a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a28:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff50 	bl	80068d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7b1b      	ldrb	r3, [r3, #12]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 82e5 	beq.w	8007008 <PCD_EP_ISR_Handler+0x672>
 8006a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 82e0 	bne.w	8007008 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7b1b      	ldrb	r3, [r3, #12]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	731a      	strb	r2, [r3, #12]
 8006a62:	e2d1      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a6a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006a74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d032      	beq.n	8006ae4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	4413      	add	r3, r2
 8006a98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f004 ff87 	bl	800b9cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006aca:	4013      	ands	r3, r2
 8006acc:	817b      	strh	r3, [r7, #10]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	897a      	ldrh	r2, [r7, #10]
 8006ad4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff04 	bl	80068ea <HAL_PCD_SetupStageCallback>
 8006ae2:	e291      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ae4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f280 828d 	bge.w	8007008 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006afa:	4013      	ands	r3, r2
 8006afc:	81fb      	strh	r3, [r7, #14]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	89fa      	ldrh	r2, [r7, #14]
 8006b04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4413      	add	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b32:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d019      	beq.n	8006b70 <PCD_EP_ISR_Handler+0x1da>
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4a:	6959      	ldr	r1, [r3, #20]
 8006b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b52:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f004 ff39 	bl	800b9cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	441a      	add	r2, r3
 8006b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b66:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fea5 	bl	80068ba <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006b78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 8242 	bne.w	8007008 <PCD_EP_ISR_Handler+0x672>
 8006b84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b8e:	f000 823b 	beq.w	8007008 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba2:	81bb      	strh	r3, [r7, #12]
 8006ba4:	89bb      	ldrh	r3, [r7, #12]
 8006ba6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006baa:	81bb      	strh	r3, [r7, #12]
 8006bac:	89bb      	ldrh	r3, [r7, #12]
 8006bae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bb2:	81bb      	strh	r3, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]
 8006bce:	e21b      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006be2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f280 80f1 	bge.w	8006dce <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006c02:	4013      	ands	r3, r2
 8006c04:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c1a:	b292      	uxth	r2, r2
 8006c1c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c1e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d123      	bne.n	8006c84 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4413      	add	r3, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c60:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006c64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 808b 	beq.w	8006d84 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c78:	88da      	ldrh	r2, [r3, #6]
 8006c7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c7e:	f004 fea5 	bl	800b9cc <USB_ReadPMA>
 8006c82:	e07f      	b.n	8006d84 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c86:	78db      	ldrb	r3, [r3, #3]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d109      	bne.n	8006ca0 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9c6 	bl	8007024 <HAL_PCD_EP_DB_Receive>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c9e:	e071      	b.n	8006d84 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d022      	beq.n	8006d40 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	4413      	add	r3, r2
 8006d14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006d22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d02c      	beq.n	8006d84 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d30:	6959      	ldr	r1, [r3, #20]
 8006d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d34:	891a      	ldrh	r2, [r3, #8]
 8006d36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d3a:	f004 fe47 	bl	800b9cc <USB_ReadPMA>
 8006d3e:	e021      	b.n	8006d84 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4413      	add	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006d68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d76:	6959      	ldr	r1, [r3, #20]
 8006d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d7a:	895a      	ldrh	r2, [r3, #10]
 8006d7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d80:	f004 fe24 	bl	800b9cc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d8c:	441a      	add	r2, r3
 8006d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d9a:	441a      	add	r2, r3
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <PCD_EP_ISR_Handler+0x41e>
 8006da8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d206      	bcs.n	8006dc2 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fd7d 	bl	80068ba <HAL_PCD_DataOutStageCallback>
 8006dc0:	e005      	b.n	8006dce <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f003 ffe9 	bl	800ada0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8117 	beq.w	8007008 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dda:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	3310      	adds	r3, #16
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4413      	add	r3, r2
 8006dec:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	78db      	ldrb	r3, [r3, #3]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	f040 80a1 	bne.w	8006f72 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e32:	2200      	movs	r2, #0
 8006e34:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e38:	7b1b      	ldrb	r3, [r3, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8092 	beq.w	8006f64 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d046      	beq.n	8006ed8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d126      	bne.n	8006ea0 <PCD_EP_ISR_Handler+0x50a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	e061      	b.n	8006f64 <PCD_EP_ISR_Handler+0x5ce>
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d15d      	bne.n	8006f64 <PCD_EP_ISR_Handler+0x5ce>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	00da      	lsls	r2, r3, #3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e045      	b.n	8006f64 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d126      	bne.n	8006f34 <PCD_EP_ISR_Handler+0x59e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	4413      	add	r3, r2
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	00da      	lsls	r2, r3, #3
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f0c:	623b      	str	r3, [r7, #32]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	e017      	b.n	8006f64 <PCD_EP_ISR_Handler+0x5ce>
 8006f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d113      	bne.n	8006f64 <PCD_EP_ISR_Handler+0x5ce>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	4413      	add	r3, r2
 8006f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	00da      	lsls	r2, r3, #3
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	2200      	movs	r2, #0
 8006f62:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fcb1 	bl	80068d2 <HAL_PCD_DataInStageCallback>
 8006f70:	e04a      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d13f      	bne.n	8006ffc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	4413      	add	r3, r2
 8006f96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa0:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d906      	bls.n	8006fba <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb6:	619a      	str	r2, [r3, #24]
 8006fb8:	e002      	b.n	8006fc0 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fc7f 	bl	80068d2 <HAL_PCD_DataInStageCallback>
 8006fd4:	e018      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fdc:	441a      	add	r2, r3
 8006fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006fe8:	441a      	add	r2, r3
 8006fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f003 fed3 	bl	800ada0 <USB_EPStartXfer>
 8006ffa:	e005      	b.n	8007008 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ffe:	461a      	mov	r2, r3
 8007000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f917 	bl	8007236 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007010:	b29b      	uxth	r3, r3
 8007012:	b21b      	sxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	f6ff acc3 	blt.w	80069a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3748      	adds	r7, #72	@ 0x48
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d07c      	beq.n	8007136 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	4413      	add	r3, r2
 8007056:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007060:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	8b7b      	ldrh	r3, [r7, #26]
 8007068:	429a      	cmp	r2, r3
 800706a:	d306      	bcc.n	800707a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	8b7b      	ldrh	r3, [r7, #26]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	619a      	str	r2, [r3, #24]
 8007078:	e002      	b.n	8007080 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d123      	bne.n	80070d0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800709e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a2:	833b      	strh	r3, [r7, #24]
 80070a4:	8b3b      	ldrh	r3, [r7, #24]
 80070a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070aa:	833b      	strh	r3, [r7, #24]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8b3b      	ldrh	r3, [r7, #24]
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01f      	beq.n	800711a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f4:	82fb      	strh	r3, [r7, #22]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800710e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007112:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800711a:	8b7b      	ldrh	r3, [r7, #26]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8085 	beq.w	800722c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	891a      	ldrh	r2, [r3, #8]
 800712e:	8b7b      	ldrh	r3, [r7, #26]
 8007130:	f004 fc4c 	bl	800b9cc <USB_ReadPMA>
 8007134:	e07a      	b.n	800722c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4413      	add	r3, r2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	4413      	add	r3, r2
 8007150:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	8b7b      	ldrh	r3, [r7, #26]
 8007162:	429a      	cmp	r2, r3
 8007164:	d306      	bcc.n	8007174 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	8b7b      	ldrh	r3, [r7, #26]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	619a      	str	r2, [r3, #24]
 8007172:	e002      	b.n	800717a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d123      	bne.n	80071ca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800719c:	83fb      	strh	r3, [r7, #30]
 800719e:	8bfb      	ldrh	r3, [r7, #30]
 80071a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071a4:	83fb      	strh	r3, [r7, #30]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	8bfb      	ldrh	r3, [r7, #30]
 80071b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11f      	bne.n	8007214 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	83bb      	strh	r3, [r7, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	8bbb      	ldrh	r3, [r7, #28]
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007214:	8b7b      	ldrh	r3, [r7, #26]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6959      	ldr	r1, [r3, #20]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	895a      	ldrh	r2, [r3, #10]
 8007226:	8b7b      	ldrh	r3, [r7, #26]
 8007228:	f004 fbd0 	bl	800b9cc <USB_ReadPMA>
    }
  }

  return count;
 800722c:	8b7b      	ldrh	r3, [r7, #26]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b0a6      	sub	sp, #152	@ 0x98
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	4613      	mov	r3, r2
 8007242:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 81f7 	beq.w	800763e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	4413      	add	r3, r2
 800726a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007274:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007280:	429a      	cmp	r2, r3
 8007282:	d907      	bls.n	8007294 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	619a      	str	r2, [r3, #24]
 8007292:	e002      	b.n	800729a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 80e1 	bne.w	8007466 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d126      	bne.n	80072fa <HAL_PCD_EP_DB_Transmit+0xc4>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	4413      	add	r3, r2
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	00da      	lsls	r2, r3, #3
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e01a      	b.n	8007330 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d116      	bne.n	8007330 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	4413      	add	r3, r2
 8007318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	00da      	lsls	r2, r3, #3
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	4413      	add	r3, r2
 8007324:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732c:	2200      	movs	r2, #0
 800732e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d126      	bne.n	800738c <HAL_PCD_EP_DB_Transmit+0x156>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	4413      	add	r3, r2
 8007354:	623b      	str	r3, [r7, #32]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	00da      	lsls	r2, r3, #3
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	4413      	add	r3, r2
 8007360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007370:	b29a      	uxth	r2, r3
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007384:	b29a      	uxth	r2, r3
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e017      	b.n	80073bc <HAL_PCD_EP_DB_Transmit+0x186>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d113      	bne.n	80073bc <HAL_PCD_EP_DB_Transmit+0x186>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	4413      	add	r3, r2
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	2200      	movs	r2, #0
 80073ba:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	78db      	ldrb	r3, [r3, #3]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d123      	bne.n	800740c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073de:	837b      	strh	r3, [r7, #26]
 80073e0:	8b7b      	ldrh	r3, [r7, #26]
 80073e2:	f083 0320 	eor.w	r3, r3, #32
 80073e6:	837b      	strh	r3, [r7, #26]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	441a      	add	r2, r3
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007408:	b29b      	uxth	r3, r3
 800740a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	4619      	mov	r1, r3
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff fa5d 	bl	80068d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01f      	beq.n	8007462 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743c:	833b      	strh	r3, [r7, #24]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8b3b      	ldrh	r3, [r7, #24]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800745a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e31f      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d021      	beq.n	80074b4 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	f040 82ca 	bne.w	8007a54 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	695a      	ldr	r2, [r3, #20]
 80074c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074c8:	441a      	add	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	69da      	ldr	r2, [r3, #28]
 80074d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074d6:	441a      	add	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d309      	bcc.n	80074fc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074f4:	1ad2      	subs	r2, r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	621a      	str	r2, [r3, #32]
 80074fa:	e015      	b.n	8007528 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d107      	bne.n	8007514 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007504:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007508:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007512:	e009      	b.n	8007528 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2200      	movs	r2, #0
 8007526:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d15f      	bne.n	80075f0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	643b      	str	r3, [r7, #64]	@ 0x40
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007544:	4413      	add	r3, r2
 8007546:	643b      	str	r3, [r7, #64]	@ 0x40
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	00da      	lsls	r2, r3, #3
 800754e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007550:	4413      	add	r3, r2
 8007552:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007562:	b29a      	uxth	r2, r3
 8007564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <HAL_PCD_EP_DB_Transmit+0x34e>
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e051      	b.n	8007628 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007586:	2b3e      	cmp	r3, #62	@ 0x3e
 8007588:	d816      	bhi.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x382>
 800758a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_PCD_EP_DB_Transmit+0x36a>
 800759a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800759c:	3301      	adds	r3, #1
 800759e:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	4313      	orrs	r3, r2
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e037      	b.n	8007628 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80075be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_PCD_EP_DB_Transmit+0x398>
 80075c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ca:	3b01      	subs	r3, #1
 80075cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	029b      	lsls	r3, r3, #10
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e01b      	b.n	8007628 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d117      	bne.n	8007628 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007606:	b29b      	uxth	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800760c:	4413      	add	r3, r2
 800760e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	00da      	lsls	r2, r3, #3
 8007616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007618:	4413      	add	r3, r2
 800761a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800761e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007622:	b29a      	uxth	r2, r3
 8007624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007626:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6959      	ldr	r1, [r3, #20]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	891a      	ldrh	r2, [r3, #8]
 8007634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007636:	b29b      	uxth	r3, r3
 8007638:	f004 f985 	bl	800b946 <USB_WritePMA>
 800763c:	e20a      	b.n	8007a54 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007646:	b29b      	uxth	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	4413      	add	r3, r2
 8007658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007662:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800766e:	429a      	cmp	r2, r3
 8007670:	d307      	bcc.n	8007682 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	619a      	str	r2, [r3, #24]
 8007680:	e002      	b.n	8007688 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 80f6 	bne.w	800787e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d126      	bne.n	80076e8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	677b      	str	r3, [r7, #116]	@ 0x74
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ae:	4413      	add	r3, r2
 80076b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	00da      	lsls	r2, r3, #3
 80076b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80076c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e01a      	b.n	800771e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d116      	bne.n	800771e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007704:	4413      	add	r3, r2
 8007706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	00da      	lsls	r2, r3, #3
 800770e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007710:	4413      	add	r3, r2
 8007712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007716:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800771a:	2200      	movs	r2, #0
 800771c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d12f      	bne.n	800778e <HAL_PCD_EP_DB_Transmit+0x558>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	00da      	lsls	r2, r3, #3
 8007752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007756:	4413      	add	r3, r2
 8007758:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800775c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29b      	uxth	r3, r3
 800777c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	e01c      	b.n	80077c8 <HAL_PCD_EP_DB_Transmit+0x592>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d118      	bne.n	80077c8 <HAL_PCD_EP_DB_Transmit+0x592>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077a6:	4413      	add	r3, r2
 80077a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077b6:	4413      	add	r3, r2
 80077b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077c4:	2200      	movs	r2, #0
 80077c6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	78db      	ldrb	r3, [r3, #3]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d127      	bne.n	8007820 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80077ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80077f2:	f083 0320 	eor.w	r3, r3, #32
 80077f6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	441a      	add	r2, r3
 8007808:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800780c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781c:	b29b      	uxth	r3, r3
 800781e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff f853 	bl	80068d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d121      	bne.n	800787a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800784c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007850:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800786a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800786e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007876:	b29b      	uxth	r3, r3
 8007878:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e113      	b.n	8007aa6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d121      	bne.n	80078cc <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800789e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	f040 80be 	bne.w	8007a54 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	695a      	ldr	r2, [r3, #20]
 80078dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078e0:	441a      	add	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	69da      	ldr	r2, [r3, #28]
 80078ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078ee:	441a      	add	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d309      	bcc.n	8007914 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800790c:	1ad2      	subs	r2, r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	621a      	str	r2, [r3, #32]
 8007912:	e015      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d107      	bne.n	800792c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800791c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007920:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800792a:	e009      	b.n	8007940 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d15f      	bne.n	8007a0e <HAL_PCD_EP_DB_Transmit+0x7d8>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007962:	4413      	add	r3, r2
 8007964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	00da      	lsls	r2, r3, #3
 800796c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800796e:	4413      	add	r3, r2
 8007970:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007974:	667b      	str	r3, [r7, #100]	@ 0x64
 8007976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007980:	b29a      	uxth	r2, r3
 8007982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <HAL_PCD_EP_DB_Transmit+0x76c>
 800798c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799a:	b29a      	uxth	r2, r3
 800799c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	e04e      	b.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80079a6:	d816      	bhi.n	80079d6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80079a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_PCD_EP_DB_Transmit+0x788>
 80079b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079ba:	3301      	adds	r3, #1
 80079bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80079be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	e034      	b.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x80a>
 80079d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	663b      	str	r3, [r7, #96]	@ 0x60
 80079dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_PCD_EP_DB_Transmit+0x7b6>
 80079e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e8:	3b01      	subs	r3, #1
 80079ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	e018      	b.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d114      	bne.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a24:	4413      	add	r3, r2
 8007a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a3e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6959      	ldr	r1, [r3, #20]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	895a      	ldrh	r2, [r3, #10]
 8007a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f003 ff79 	bl	800b946 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6e:	82fb      	strh	r3, [r7, #22]
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	f083 0310 	eor.w	r3, r3, #16
 8007a76:	82fb      	strh	r3, [r7, #22]
 8007a78:	8afb      	ldrh	r3, [r7, #22]
 8007a7a:	f083 0320 	eor.w	r3, r3, #32
 8007a7e:	82fb      	strh	r3, [r7, #22]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	8afb      	ldrh	r3, [r7, #22]
 8007a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3798      	adds	r7, #152	@ 0x98
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f043 0302 	orr.w	r3, r3, #2
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d141      	bne.n	8007bae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b36:	d131      	bne.n	8007b9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b38:	4b47      	ldr	r3, [pc, #284]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b3e:	4a46      	ldr	r2, [pc, #280]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b48:	4b43      	ldr	r3, [pc, #268]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b50:	4a41      	ldr	r2, [pc, #260]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b58:	4b40      	ldr	r3, [pc, #256]	@ (8007c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2232      	movs	r2, #50	@ 0x32
 8007b5e:	fb02 f303 	mul.w	r3, r2, r3
 8007b62:	4a3f      	ldr	r2, [pc, #252]	@ (8007c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b64:	fba2 2303 	umull	r2, r3, r2, r3
 8007b68:	0c9b      	lsrs	r3, r3, #18
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b6e:	e002      	b.n	8007b76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b76:	4b38      	ldr	r3, [pc, #224]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b82:	d102      	bne.n	8007b8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f2      	bne.n	8007b70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b8a:	4b33      	ldr	r3, [pc, #204]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b96:	d158      	bne.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e057      	b.n	8007c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007bac:	e04d      	b.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb4:	d141      	bne.n	8007c3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bb6:	4b28      	ldr	r3, [pc, #160]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc2:	d131      	bne.n	8007c28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bc4:	4b24      	ldr	r3, [pc, #144]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bca:	4a23      	ldr	r2, [pc, #140]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bd4:	4b20      	ldr	r3, [pc, #128]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007be4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2232      	movs	r2, #50	@ 0x32
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	4a1c      	ldr	r2, [pc, #112]	@ (8007c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	0c9b      	lsrs	r3, r3, #18
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bfa:	e002      	b.n	8007c02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c02:	4b15      	ldr	r3, [pc, #84]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c0e:	d102      	bne.n	8007c16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f2      	bne.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c22:	d112      	bne.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e011      	b.n	8007c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c28:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c38:	e007      	b.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c3a:	4b07      	ldr	r3, [pc, #28]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c42:	4a05      	ldr	r2, [pc, #20]	@ (8007c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	40007000 	.word	0x40007000
 8007c5c:	20000000 	.word	0x20000000
 8007c60:	431bde83 	.word	0x431bde83

08007c64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c68:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	@ (8007c80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c72:	6093      	str	r3, [r2, #8]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40007000 	.word	0x40007000

08007c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e2fe      	b.n	8008294 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d075      	beq.n	8007d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ca2:	4b97      	ldr	r3, [pc, #604]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 030c 	and.w	r3, r3, #12
 8007caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cac:	4b94      	ldr	r3, [pc, #592]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b0c      	cmp	r3, #12
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x3e>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d002      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x44>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05b      	beq.n	8007d8c <HAL_RCC_OscConfig+0x108>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d157      	bne.n	8007d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e2d9      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce8:	d106      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x74>
 8007cea:	4b85      	ldr	r3, [pc, #532]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a84      	ldr	r2, [pc, #528]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	e01d      	b.n	8007d34 <HAL_RCC_OscConfig+0xb0>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCC_OscConfig+0x98>
 8007d02:	4b7f      	ldr	r3, [pc, #508]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a7e      	ldr	r2, [pc, #504]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a7b      	ldr	r2, [pc, #492]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e00b      	b.n	8007d34 <HAL_RCC_OscConfig+0xb0>
 8007d1c:	4b78      	ldr	r3, [pc, #480]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a77      	ldr	r2, [pc, #476]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	4b75      	ldr	r3, [pc, #468]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a74      	ldr	r2, [pc, #464]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d013      	beq.n	8007d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fa fbce 	bl	80024dc <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fa fbca 	bl	80024dc <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	@ 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e29e      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d56:	4b6a      	ldr	r3, [pc, #424]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0xc0>
 8007d62:	e014      	b.n	8007d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fa fbba 	bl	80024dc <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d6c:	f7fa fbb6 	bl	80024dc <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b64      	cmp	r3, #100	@ 0x64
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e28a      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d7e:	4b60      	ldr	r3, [pc, #384]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f0      	bne.n	8007d6c <HAL_RCC_OscConfig+0xe8>
 8007d8a:	e000      	b.n	8007d8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d075      	beq.n	8007e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9a:	4b59      	ldr	r3, [pc, #356]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 030c 	and.w	r3, r3, #12
 8007da2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007da4:	4b56      	ldr	r3, [pc, #344]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d102      	bne.n	8007dba <HAL_RCC_OscConfig+0x136>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d002      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x13c>
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d11f      	bne.n	8007e00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x154>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e25d      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd8:	4b49      	ldr	r3, [pc, #292]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	061b      	lsls	r3, r3, #24
 8007de6:	4946      	ldr	r1, [pc, #280]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007dec:	4b45      	ldr	r3, [pc, #276]	@ (8007f04 <HAL_RCC_OscConfig+0x280>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fa fb27 	bl	8002444 <HAL_InitTick>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d043      	beq.n	8007e84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e249      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d023      	beq.n	8007e50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e08:	4b3d      	ldr	r3, [pc, #244]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e14:	f7fa fb62 	bl	80024dc <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e1c:	f7fa fb5e 	bl	80024dc <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e232      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e2e:	4b34      	ldr	r3, [pc, #208]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f0      	beq.n	8007e1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3a:	4b31      	ldr	r3, [pc, #196]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	492d      	ldr	r1, [pc, #180]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	604b      	str	r3, [r1, #4]
 8007e4e:	e01a      	b.n	8007e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e50:	4b2b      	ldr	r3, [pc, #172]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7fa fb3e 	bl	80024dc <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e64:	f7fa fb3a 	bl	80024dc <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e20e      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e76:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x1e0>
 8007e82:	e000      	b.n	8007e86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d041      	beq.n	8007f16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01c      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e9a:	4b19      	ldr	r3, [pc, #100]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ea0:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eaa:	f7fa fb17 	bl	80024dc <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eb2:	f7fa fb13 	bl	80024dc <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e1e7      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0ef      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x22e>
 8007ed2:	e020      	b.n	8007f16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eda:	4a09      	ldr	r2, [pc, #36]	@ (8007f00 <HAL_RCC_OscConfig+0x27c>)
 8007edc:	f023 0301 	bic.w	r3, r3, #1
 8007ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee4:	f7fa fafa 	bl	80024dc <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007eea:	e00d      	b.n	8007f08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eec:	f7fa faf6 	bl	80024dc <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d906      	bls.n	8007f08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e1ca      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
 8007efe:	bf00      	nop
 8007f00:	40021000 	.word	0x40021000
 8007f04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f08:	4b8c      	ldr	r3, [pc, #560]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1ea      	bne.n	8007eec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80a6 	beq.w	8008070 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f24:	2300      	movs	r3, #0
 8007f26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f28:	4b84      	ldr	r3, [pc, #528]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_RCC_OscConfig+0x2b4>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <HAL_RCC_OscConfig+0x2b6>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f42:	4a7e      	ldr	r2, [pc, #504]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f56:	2301      	movs	r3, #1
 8007f58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f5a:	4b79      	ldr	r3, [pc, #484]	@ (8008140 <HAL_RCC_OscConfig+0x4bc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d118      	bne.n	8007f98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f66:	4b76      	ldr	r3, [pc, #472]	@ (8008140 <HAL_RCC_OscConfig+0x4bc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a75      	ldr	r2, [pc, #468]	@ (8008140 <HAL_RCC_OscConfig+0x4bc>)
 8007f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f72:	f7fa fab3 	bl	80024dc <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f78:	e008      	b.n	8007f8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f7a:	f7fa faaf 	bl	80024dc <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e183      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8008140 <HAL_RCC_OscConfig+0x4bc>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0f0      	beq.n	8007f7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d108      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x32e>
 8007fa0:	4b66      	ldr	r3, [pc, #408]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa6:	4a65      	ldr	r2, [pc, #404]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fb0:	e024      	b.n	8007ffc <HAL_RCC_OscConfig+0x378>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d110      	bne.n	8007fdc <HAL_RCC_OscConfig+0x358>
 8007fba:	4b60      	ldr	r3, [pc, #384]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fc2:	f043 0304 	orr.w	r3, r3, #4
 8007fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fca:	4b5c      	ldr	r3, [pc, #368]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fd2:	f043 0301 	orr.w	r3, r3, #1
 8007fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fda:	e00f      	b.n	8007ffc <HAL_RCC_OscConfig+0x378>
 8007fdc:	4b57      	ldr	r3, [pc, #348]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe2:	4a56      	ldr	r2, [pc, #344]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fec:	4b53      	ldr	r3, [pc, #332]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff2:	4a52      	ldr	r2, [pc, #328]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d016      	beq.n	8008032 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008004:	f7fa fa6a 	bl	80024dc <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800800a:	e00a      	b.n	8008022 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800c:	f7fa fa66 	bl	80024dc <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800801a:	4293      	cmp	r3, r2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e138      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008022:	4b46      	ldr	r3, [pc, #280]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0ed      	beq.n	800800c <HAL_RCC_OscConfig+0x388>
 8008030:	e015      	b.n	800805e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008032:	f7fa fa53 	bl	80024dc <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008038:	e00a      	b.n	8008050 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800803a:	f7fa fa4f 	bl	80024dc <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e121      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008050:	4b3a      	ldr	r3, [pc, #232]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1ed      	bne.n	800803a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800805e:	7ffb      	ldrb	r3, [r7, #31]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d105      	bne.n	8008070 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008064:	4b35      	ldr	r3, [pc, #212]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008068:	4a34      	ldr	r2, [pc, #208]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 800806a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800806e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d03c      	beq.n	80080f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01c      	beq.n	80080be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008084:	4b2d      	ldr	r3, [pc, #180]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800808a:	4a2c      	ldr	r2, [pc, #176]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fa fa22 	bl	80024dc <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800809c:	f7fa fa1e 	bl	80024dc <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e0f2      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080ae:	4b23      	ldr	r3, [pc, #140]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 80080b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0ef      	beq.n	800809c <HAL_RCC_OscConfig+0x418>
 80080bc:	e01b      	b.n	80080f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080be:	4b1f      	ldr	r3, [pc, #124]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 80080c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080c4:	4a1d      	ldr	r2, [pc, #116]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 80080c6:	f023 0301 	bic.w	r3, r3, #1
 80080ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ce:	f7fa fa05 	bl	80024dc <HAL_GetTick>
 80080d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080d4:	e008      	b.n	80080e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080d6:	f7fa fa01 	bl	80024dc <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e0d5      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080e8:	4b14      	ldr	r3, [pc, #80]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 80080ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1ef      	bne.n	80080d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80c9 	beq.w	8008292 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008100:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b0c      	cmp	r3, #12
 800810a:	f000 8083 	beq.w	8008214 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d15e      	bne.n	80081d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008116:	4b09      	ldr	r3, [pc, #36]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a08      	ldr	r2, [pc, #32]	@ (800813c <HAL_RCC_OscConfig+0x4b8>)
 800811c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008122:	f7fa f9db 	bl	80024dc <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008128:	e00c      	b.n	8008144 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800812a:	f7fa f9d7 	bl	80024dc <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d905      	bls.n	8008144 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e0ab      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
 800813c:	40021000 	.word	0x40021000
 8008140:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008144:	4b55      	ldr	r3, [pc, #340]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1ec      	bne.n	800812a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008150:	4b52      	ldr	r3, [pc, #328]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	4b52      	ldr	r3, [pc, #328]	@ (80082a0 <HAL_RCC_OscConfig+0x61c>)
 8008156:	4013      	ands	r3, r2
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6a11      	ldr	r1, [r2, #32]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008160:	3a01      	subs	r2, #1
 8008162:	0112      	lsls	r2, r2, #4
 8008164:	4311      	orrs	r1, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800816a:	0212      	lsls	r2, r2, #8
 800816c:	4311      	orrs	r1, r2
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008172:	0852      	lsrs	r2, r2, #1
 8008174:	3a01      	subs	r2, #1
 8008176:	0552      	lsls	r2, r2, #21
 8008178:	4311      	orrs	r1, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800817e:	0852      	lsrs	r2, r2, #1
 8008180:	3a01      	subs	r2, #1
 8008182:	0652      	lsls	r2, r2, #25
 8008184:	4311      	orrs	r1, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800818a:	06d2      	lsls	r2, r2, #27
 800818c:	430a      	orrs	r2, r1
 800818e:	4943      	ldr	r1, [pc, #268]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008190:	4313      	orrs	r3, r2
 8008192:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008194:	4b41      	ldr	r3, [pc, #260]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a40      	ldr	r2, [pc, #256]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 800819a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800819e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081a0:	4b3e      	ldr	r3, [pc, #248]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4a3d      	ldr	r2, [pc, #244]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ac:	f7fa f996 	bl	80024dc <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081b4:	f7fa f992 	bl	80024dc <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e066      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081c6:	4b35      	ldr	r3, [pc, #212]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x530>
 80081d2:	e05e      	b.n	8008292 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081d4:	4b31      	ldr	r3, [pc, #196]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a30      	ldr	r2, [pc, #192]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fa f97c 	bl	80024dc <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e8:	f7fa f978 	bl	80024dc <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e04c      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081fa:	4b28      	ldr	r3, [pc, #160]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008206:	4b25      	ldr	r3, [pc, #148]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	4924      	ldr	r1, [pc, #144]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 800820c:	4b25      	ldr	r3, [pc, #148]	@ (80082a4 <HAL_RCC_OscConfig+0x620>)
 800820e:	4013      	ands	r3, r2
 8008210:	60cb      	str	r3, [r1, #12]
 8008212:	e03e      	b.n	8008292 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e039      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008220:	4b1e      	ldr	r3, [pc, #120]	@ (800829c <HAL_RCC_OscConfig+0x618>)
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f003 0203 	and.w	r2, r3, #3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	429a      	cmp	r2, r3
 8008232:	d12c      	bne.n	800828e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	3b01      	subs	r3, #1
 8008240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008242:	429a      	cmp	r2, r3
 8008244:	d123      	bne.n	800828e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d11b      	bne.n	800828e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d113      	bne.n	800828e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	3b01      	subs	r3, #1
 8008274:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d109      	bne.n	800828e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	3b01      	subs	r3, #1
 8008288:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800828a:	429a      	cmp	r2, r3
 800828c:	d001      	beq.n	8008292 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3720      	adds	r7, #32
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40021000 	.word	0x40021000
 80082a0:	019f800c 	.word	0x019f800c
 80082a4:	feeefffc 	.word	0xfeeefffc

080082a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e11e      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082c0:	4b91      	ldr	r3, [pc, #580]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d910      	bls.n	80082f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b8e      	ldr	r3, [pc, #568]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 020f 	bic.w	r2, r3, #15
 80082d6:	498c      	ldr	r1, [pc, #560]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b8a      	ldr	r3, [pc, #552]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e106      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d073      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d129      	bne.n	8008358 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008304:	4b81      	ldr	r3, [pc, #516]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0f4      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008314:	f000 f99e 	bl	8008654 <RCC_GetSysClockFreqFromPLLSource>
 8008318:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	4a7c      	ldr	r2, [pc, #496]	@ (8008510 <HAL_RCC_ClockConfig+0x268>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d93f      	bls.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008322:	4b7a      	ldr	r3, [pc, #488]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008336:	2b00      	cmp	r3, #0
 8008338:	d033      	beq.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800833e:	2b00      	cmp	r3, #0
 8008340:	d12f      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008342:	4b72      	ldr	r3, [pc, #456]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800834a:	4a70      	ldr	r2, [pc, #448]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 800834c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008350:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008352:	2380      	movs	r3, #128	@ 0x80
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	e024      	b.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d107      	bne.n	8008370 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008360:	4b6a      	ldr	r3, [pc, #424]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0c6      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008370:	4b66      	ldr	r3, [pc, #408]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e0be      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008380:	f000 f8ce 	bl	8008520 <HAL_RCC_GetSysClockFreq>
 8008384:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4a61      	ldr	r2, [pc, #388]	@ (8008510 <HAL_RCC_ClockConfig+0x268>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d909      	bls.n	80083a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800838e:	4b5f      	ldr	r3, [pc, #380]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008396:	4a5d      	ldr	r2, [pc, #372]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800839e:	2380      	movs	r3, #128	@ 0x80
 80083a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083a2:	4b5a      	ldr	r3, [pc, #360]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f023 0203 	bic.w	r2, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4957      	ldr	r1, [pc, #348]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b4:	f7fa f892 	bl	80024dc <HAL_GetTick>
 80083b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083bc:	f7fa f88e 	bl	80024dc <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e095      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d2:	4b4e      	ldr	r3, [pc, #312]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 020c 	and.w	r2, r3, #12
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d1eb      	bne.n	80083bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d023      	beq.n	8008438 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083fc:	4b43      	ldr	r3, [pc, #268]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a42      	ldr	r2, [pc, #264]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008402:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008406:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008414:	4b3d      	ldr	r3, [pc, #244]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800841c:	4a3b      	ldr	r2, [pc, #236]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 800841e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008424:	4b39      	ldr	r3, [pc, #228]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4936      	ldr	r1, [pc, #216]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008432:	4313      	orrs	r3, r2
 8008434:	608b      	str	r3, [r1, #8]
 8008436:	e008      	b.n	800844a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b80      	cmp	r3, #128	@ 0x80
 800843c:	d105      	bne.n	800844a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800843e:	4b33      	ldr	r3, [pc, #204]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	4a32      	ldr	r2, [pc, #200]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 8008444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008448:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800844a:	4b2f      	ldr	r3, [pc, #188]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d21d      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008458:	4b2b      	ldr	r3, [pc, #172]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f023 020f 	bic.w	r2, r3, #15
 8008460:	4929      	ldr	r1, [pc, #164]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008468:	f7fa f838 	bl	80024dc <HAL_GetTick>
 800846c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800846e:	e00a      	b.n	8008486 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008470:	f7fa f834 	bl	80024dc <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800847e:	4293      	cmp	r3, r2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e03b      	b.n	80084fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008486:	4b20      	ldr	r3, [pc, #128]	@ (8008508 <HAL_RCC_ClockConfig+0x260>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d1ed      	bne.n	8008470 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084a0:	4b1a      	ldr	r3, [pc, #104]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4917      	ldr	r1, [pc, #92]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084be:	4b13      	ldr	r3, [pc, #76]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	490f      	ldr	r1, [pc, #60]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084d2:	f000 f825 	bl	8008520 <HAL_RCC_GetSysClockFreq>
 80084d6:	4602      	mov	r2, r0
 80084d8:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <HAL_RCC_ClockConfig+0x264>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	091b      	lsrs	r3, r3, #4
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	490c      	ldr	r1, [pc, #48]	@ (8008514 <HAL_RCC_ClockConfig+0x26c>)
 80084e4:	5ccb      	ldrb	r3, [r1, r3]
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	fa22 f303 	lsr.w	r3, r2, r3
 80084ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008518 <HAL_RCC_ClockConfig+0x270>)
 80084f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80084f2:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <HAL_RCC_ClockConfig+0x274>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f9 ffa4 	bl	8002444 <HAL_InitTick>
 80084fc:	4603      	mov	r3, r0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40022000 	.word	0x40022000
 800850c:	40021000 	.word	0x40021000
 8008510:	04c4b400 	.word	0x04c4b400
 8008514:	0800cb28 	.word	0x0800cb28
 8008518:	20000000 	.word	0x20000000
 800851c:	20000004 	.word	0x20000004

08008520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008526:	4b2c      	ldr	r3, [pc, #176]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 030c 	and.w	r3, r3, #12
 800852e:	2b04      	cmp	r3, #4
 8008530:	d102      	bne.n	8008538 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008532:	4b2a      	ldr	r3, [pc, #168]	@ (80085dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	e047      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008538:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 030c 	and.w	r3, r3, #12
 8008540:	2b08      	cmp	r3, #8
 8008542:	d102      	bne.n	800854a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008544:	4b26      	ldr	r3, [pc, #152]	@ (80085e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	e03e      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800854a:	4b23      	ldr	r3, [pc, #140]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 030c 	and.w	r3, r3, #12
 8008552:	2b0c      	cmp	r3, #12
 8008554:	d136      	bne.n	80085c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008556:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008560:	4b1d      	ldr	r3, [pc, #116]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	091b      	lsrs	r3, r3, #4
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	3301      	adds	r3, #1
 800856c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d10c      	bne.n	800858e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008574:	4a1a      	ldr	r2, [pc, #104]	@ (80085e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	fbb2 f3f3 	udiv	r3, r2, r3
 800857c:	4a16      	ldr	r2, [pc, #88]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800857e:	68d2      	ldr	r2, [r2, #12]
 8008580:	0a12      	lsrs	r2, r2, #8
 8008582:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008586:	fb02 f303 	mul.w	r3, r2, r3
 800858a:	617b      	str	r3, [r7, #20]
      break;
 800858c:	e00c      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800858e:	4a13      	ldr	r2, [pc, #76]	@ (80085dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	fbb2 f3f3 	udiv	r3, r2, r3
 8008596:	4a10      	ldr	r2, [pc, #64]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008598:	68d2      	ldr	r2, [r2, #12]
 800859a:	0a12      	lsrs	r2, r2, #8
 800859c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	617b      	str	r3, [r7, #20]
      break;
 80085a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085a8:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	0e5b      	lsrs	r3, r3, #25
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	3301      	adds	r3, #1
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e001      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80085c8:	693b      	ldr	r3, [r7, #16]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40021000 	.word	0x40021000
 80085dc:	00f42400 	.word	0x00f42400
 80085e0:	007a1200 	.word	0x007a1200

080085e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085e8:	4b03      	ldr	r3, [pc, #12]	@ (80085f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80085ea:	681b      	ldr	r3, [r3, #0]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000000 	.word	0x20000000

080085fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008600:	f7ff fff0 	bl	80085e4 <HAL_RCC_GetHCLKFreq>
 8008604:	4602      	mov	r2, r0
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008612:	5ccb      	ldrb	r3, [r1, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40021000 	.word	0x40021000
 8008624:	0800cb38 	.word	0x0800cb38

08008628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800862c:	f7ff ffda 	bl	80085e4 <HAL_RCC_GetHCLKFreq>
 8008630:	4602      	mov	r2, r0
 8008632:	4b06      	ldr	r3, [pc, #24]	@ (800864c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	0adb      	lsrs	r3, r3, #11
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	4904      	ldr	r1, [pc, #16]	@ (8008650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800863e:	5ccb      	ldrb	r3, [r1, r3]
 8008640:	f003 031f 	and.w	r3, r3, #31
 8008644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008648:	4618      	mov	r0, r3
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40021000 	.word	0x40021000
 8008650:	0800cb38 	.word	0x0800cb38

08008654 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800865a:	4b1e      	ldr	r3, [pc, #120]	@ (80086d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008664:	4b1b      	ldr	r3, [pc, #108]	@ (80086d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	091b      	lsrs	r3, r3, #4
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d10c      	bne.n	8008692 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008678:	4a17      	ldr	r2, [pc, #92]	@ (80086d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008680:	4a14      	ldr	r2, [pc, #80]	@ (80086d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008682:	68d2      	ldr	r2, [r2, #12]
 8008684:	0a12      	lsrs	r2, r2, #8
 8008686:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	617b      	str	r3, [r7, #20]
    break;
 8008690:	e00c      	b.n	80086ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008692:	4a12      	ldr	r2, [pc, #72]	@ (80086dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	fbb2 f3f3 	udiv	r3, r2, r3
 800869a:	4a0e      	ldr	r2, [pc, #56]	@ (80086d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800869c:	68d2      	ldr	r2, [r2, #12]
 800869e:	0a12      	lsrs	r2, r2, #8
 80086a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
 80086a8:	617b      	str	r3, [r7, #20]
    break;
 80086aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086ac:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	0e5b      	lsrs	r3, r3, #25
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	3301      	adds	r3, #1
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80086c6:	687b      	ldr	r3, [r7, #4]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	40021000 	.word	0x40021000
 80086d8:	007a1200 	.word	0x007a1200
 80086dc:	00f42400 	.word	0x00f42400

080086e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086e8:	2300      	movs	r3, #0
 80086ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086ec:	2300      	movs	r3, #0
 80086ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8098 	beq.w	800882e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086fe:	2300      	movs	r3, #0
 8008700:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008702:	4b43      	ldr	r3, [pc, #268]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10d      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800870e:	4b40      	ldr	r3, [pc, #256]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008712:	4a3f      	ldr	r2, [pc, #252]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008718:	6593      	str	r3, [r2, #88]	@ 0x58
 800871a:	4b3d      	ldr	r3, [pc, #244]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800871c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008726:	2301      	movs	r3, #1
 8008728:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800872a:	4b3a      	ldr	r3, [pc, #232]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a39      	ldr	r2, [pc, #228]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008736:	f7f9 fed1 	bl	80024dc <HAL_GetTick>
 800873a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800873c:	e009      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800873e:	f7f9 fecd 	bl	80024dc <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d902      	bls.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	74fb      	strb	r3, [r7, #19]
        break;
 8008750:	e005      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008752:	4b30      	ldr	r3, [pc, #192]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0ef      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800875e:	7cfb      	ldrb	r3, [r7, #19]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d159      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008764:	4b2a      	ldr	r3, [pc, #168]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01e      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	429a      	cmp	r2, r3
 800877e:	d019      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008780:	4b23      	ldr	r3, [pc, #140]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800878a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800878c:	4b20      	ldr	r3, [pc, #128]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008792:	4a1f      	ldr	r2, [pc, #124]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800879c:	4b1c      	ldr	r3, [pc, #112]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087ac:	4a18      	ldr	r2, [pc, #96]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087be:	f7f9 fe8d 	bl	80024dc <HAL_GetTick>
 80087c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087c4:	e00b      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c6:	f7f9 fe89 	bl	80024dc <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d902      	bls.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	74fb      	strb	r3, [r7, #19]
            break;
 80087dc:	e006      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087de:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0ec      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80087ec:	7cfb      	ldrb	r3, [r7, #19]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087f2:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008800:	4903      	ldr	r1, [pc, #12]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008808:	e008      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800880a:	7cfb      	ldrb	r3, [r7, #19]
 800880c:	74bb      	strb	r3, [r7, #18]
 800880e:	e005      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008810:	40021000 	.word	0x40021000
 8008814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	7cfb      	ldrb	r3, [r7, #19]
 800881a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800881c:	7c7b      	ldrb	r3, [r7, #17]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d105      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008822:	4ba7      	ldr	r3, [pc, #668]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008826:	4aa6      	ldr	r2, [pc, #664]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800882c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800883a:	4ba1      	ldr	r3, [pc, #644]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008840:	f023 0203 	bic.w	r2, r3, #3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	499d      	ldr	r1, [pc, #628]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800885c:	4b98      	ldr	r3, [pc, #608]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008862:	f023 020c 	bic.w	r2, r3, #12
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4995      	ldr	r1, [pc, #596]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886c:	4313      	orrs	r3, r2
 800886e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800887e:	4b90      	ldr	r3, [pc, #576]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008884:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	498c      	ldr	r1, [pc, #560]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088a0:	4b87      	ldr	r3, [pc, #540]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	4984      	ldr	r1, [pc, #528]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0310 	and.w	r3, r3, #16
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088c2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	497b      	ldr	r1, [pc, #492]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088e4:	4b76      	ldr	r3, [pc, #472]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	4973      	ldr	r1, [pc, #460]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008906:	4b6e      	ldr	r3, [pc, #440]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	496a      	ldr	r1, [pc, #424]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008916:	4313      	orrs	r3, r2
 8008918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008928:	4b65      	ldr	r3, [pc, #404]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800892a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	4962      	ldr	r1, [pc, #392]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008938:	4313      	orrs	r3, r2
 800893a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800894a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800894c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008950:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008958:	4959      	ldr	r1, [pc, #356]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895a:	4313      	orrs	r3, r2
 800895c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800896c:	4b54      	ldr	r3, [pc, #336]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008972:	f023 0203 	bic.w	r2, r3, #3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897a:	4951      	ldr	r1, [pc, #324]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897c:	4313      	orrs	r3, r2
 800897e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800898e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008994:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899c:	4948      	ldr	r1, [pc, #288]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d015      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089b0:	4b43      	ldr	r3, [pc, #268]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	4940      	ldr	r1, [pc, #256]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ce:	d105      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089d0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	4a3a      	ldr	r2, [pc, #232]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d015      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089e8:	4b35      	ldr	r3, [pc, #212]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f6:	4932      	ldr	r1, [pc, #200]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a06:	d105      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a08:	4b2d      	ldr	r3, [pc, #180]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a12:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d015      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a20:	4b27      	ldr	r3, [pc, #156]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2e:	4924      	ldr	r1, [pc, #144]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a3e:	d105      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a40:	4b1f      	ldr	r3, [pc, #124]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4a1e      	ldr	r2, [pc, #120]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d015      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a58:	4b19      	ldr	r3, [pc, #100]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	4916      	ldr	r1, [pc, #88]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a76:	d105      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a78:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4a10      	ldr	r2, [pc, #64]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d019      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	4908      	ldr	r1, [pc, #32]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ab0:	4b03      	ldr	r3, [pc, #12]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4a02      	ldr	r2, [pc, #8]	@ (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aba:	60d3      	str	r3, [r2, #12]
 8008abc:	e002      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008abe:	bf00      	nop
 8008ac0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d015      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008ad0:	4b29      	ldr	r3, [pc, #164]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ade:	4926      	ldr	r1, [pc, #152]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aee:	d105      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008af0:	4b21      	ldr	r3, [pc, #132]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4a20      	ldr	r2, [pc, #128]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008afa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d015      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008b08:	4b1b      	ldr	r3, [pc, #108]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b16:	4918      	ldr	r1, [pc, #96]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b26:	d105      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b28:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	4a12      	ldr	r2, [pc, #72]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d015      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b40:	4b0d      	ldr	r3, [pc, #52]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b4e:	490a      	ldr	r1, [pc, #40]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b5e:	d105      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	4a04      	ldr	r2, [pc, #16]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008b6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40021000 	.word	0x40021000

08008b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d001      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e054      	b.n	8008c3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a26      	ldr	r2, [pc, #152]	@ (8008c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d022      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bbe:	d01d      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a22      	ldr	r2, [pc, #136]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d018      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a21      	ldr	r2, [pc, #132]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d013      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8008c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00e      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c5c <HAL_TIM_Base_Start_IT+0xe0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d009      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a1c      	ldr	r2, [pc, #112]	@ (8008c60 <HAL_TIM_Base_Start_IT+0xe4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d004      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x80>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d115      	bne.n	8008c28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	4b19      	ldr	r3, [pc, #100]	@ (8008c68 <HAL_TIM_Base_Start_IT+0xec>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d015      	beq.n	8008c3a <HAL_TIM_Base_Start_IT+0xbe>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c14:	d011      	beq.n	8008c3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0201 	orr.w	r2, r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c26:	e008      	b.n	8008c3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e000      	b.n	8008c3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40013400 	.word	0x40013400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40015000 	.word	0x40015000
 8008c68:	00010007 	.word	0x00010007

08008c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e049      	b.n	8008d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f9 fa1e 	bl	80020d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f000 fa5c 	bl	8009168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <HAL_TIM_PWM_Start+0x24>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	bf14      	ite	ne
 8008d38:	2301      	movne	r3, #1
 8008d3a:	2300      	moveq	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e03c      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d109      	bne.n	8008d5a <HAL_TIM_PWM_Start+0x3e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	bf14      	ite	ne
 8008d52:	2301      	movne	r3, #1
 8008d54:	2300      	moveq	r3, #0
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	e02f      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	d109      	bne.n	8008d74 <HAL_TIM_PWM_Start+0x58>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	bf14      	ite	ne
 8008d6c:	2301      	movne	r3, #1
 8008d6e:	2300      	moveq	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	e022      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b0c      	cmp	r3, #12
 8008d78:	d109      	bne.n	8008d8e <HAL_TIM_PWM_Start+0x72>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	bf14      	ite	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	e015      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b10      	cmp	r3, #16
 8008d92:	d109      	bne.n	8008da8 <HAL_TIM_PWM_Start+0x8c>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	bf14      	ite	ne
 8008da0:	2301      	movne	r3, #1
 8008da2:	2300      	moveq	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	e008      	b.n	8008dba <HAL_TIM_PWM_Start+0x9e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e0a6      	b.n	8008f10 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0xb6>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dd0:	e023      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d104      	bne.n	8008de2 <HAL_TIM_PWM_Start+0xc6>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de0:	e01b      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Start+0xd6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df0:	e013      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xe6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0xf6>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e10:	e003      	b.n	8008e1a <HAL_TIM_PWM_Start+0xfe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fd7e 	bl	8009924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8008f18 <HAL_TIM_PWM_Start+0x1fc>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d018      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x148>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a39      	ldr	r2, [pc, #228]	@ (8008f1c <HAL_TIM_PWM_Start+0x200>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d013      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x148>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a37      	ldr	r2, [pc, #220]	@ (8008f20 <HAL_TIM_PWM_Start+0x204>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00e      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x148>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a36      	ldr	r2, [pc, #216]	@ (8008f24 <HAL_TIM_PWM_Start+0x208>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d009      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x148>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a34      	ldr	r2, [pc, #208]	@ (8008f28 <HAL_TIM_PWM_Start+0x20c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d004      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x148>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a33      	ldr	r2, [pc, #204]	@ (8008f2c <HAL_TIM_PWM_Start+0x210>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d101      	bne.n	8008e68 <HAL_TIM_PWM_Start+0x14c>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <HAL_TIM_PWM_Start+0x14e>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d007      	beq.n	8008e7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a25      	ldr	r2, [pc, #148]	@ (8008f18 <HAL_TIM_PWM_Start+0x1fc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d022      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e90:	d01d      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a26      	ldr	r2, [pc, #152]	@ (8008f30 <HAL_TIM_PWM_Start+0x214>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d018      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a24      	ldr	r2, [pc, #144]	@ (8008f34 <HAL_TIM_PWM_Start+0x218>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a23      	ldr	r2, [pc, #140]	@ (8008f38 <HAL_TIM_PWM_Start+0x21c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00e      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a19      	ldr	r2, [pc, #100]	@ (8008f1c <HAL_TIM_PWM_Start+0x200>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d009      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a18      	ldr	r2, [pc, #96]	@ (8008f20 <HAL_TIM_PWM_Start+0x204>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d004      	beq.n	8008ece <HAL_TIM_PWM_Start+0x1b2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a18      	ldr	r2, [pc, #96]	@ (8008f2c <HAL_TIM_PWM_Start+0x210>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d115      	bne.n	8008efa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	4b19      	ldr	r3, [pc, #100]	@ (8008f3c <HAL_TIM_PWM_Start+0x220>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b06      	cmp	r3, #6
 8008ede:	d015      	beq.n	8008f0c <HAL_TIM_PWM_Start+0x1f0>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee6:	d011      	beq.n	8008f0c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef8:	e008      	b.n	8008f0c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0201 	orr.w	r2, r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e000      	b.n	8008f0e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40012c00 	.word	0x40012c00
 8008f1c:	40013400 	.word	0x40013400
 8008f20:	40014000 	.word	0x40014000
 8008f24:	40014400 	.word	0x40014400
 8008f28:	40014800 	.word	0x40014800
 8008f2c:	40015000 	.word	0x40015000
 8008f30:	40000400 	.word	0x40000400
 8008f34:	40000800 	.word	0x40000800
 8008f38:	40000c00 	.word	0x40000c00
 8008f3c:	00010007 	.word	0x00010007

08008f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e0ff      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b14      	cmp	r3, #20
 8008f6a:	f200 80f0 	bhi.w	800914e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fc9 	.word	0x08008fc9
 8008f78:	0800914f 	.word	0x0800914f
 8008f7c:	0800914f 	.word	0x0800914f
 8008f80:	0800914f 	.word	0x0800914f
 8008f84:	08009009 	.word	0x08009009
 8008f88:	0800914f 	.word	0x0800914f
 8008f8c:	0800914f 	.word	0x0800914f
 8008f90:	0800914f 	.word	0x0800914f
 8008f94:	0800904b 	.word	0x0800904b
 8008f98:	0800914f 	.word	0x0800914f
 8008f9c:	0800914f 	.word	0x0800914f
 8008fa0:	0800914f 	.word	0x0800914f
 8008fa4:	0800908b 	.word	0x0800908b
 8008fa8:	0800914f 	.word	0x0800914f
 8008fac:	0800914f 	.word	0x0800914f
 8008fb0:	0800914f 	.word	0x0800914f
 8008fb4:	080090cd 	.word	0x080090cd
 8008fb8:	0800914f 	.word	0x0800914f
 8008fbc:	0800914f 	.word	0x0800914f
 8008fc0:	0800914f 	.word	0x0800914f
 8008fc4:	0800910d 	.word	0x0800910d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f97e 	bl	80092d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0204 	bic.w	r2, r2, #4
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	619a      	str	r2, [r3, #24]
      break;
 8009006:	e0a5      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f9f8 	bl	8009404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6999      	ldr	r1, [r3, #24]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	021a      	lsls	r2, r3, #8
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	619a      	str	r2, [r3, #24]
      break;
 8009048:	e084      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fa6b 	bl	800952c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0208 	orr.w	r2, r2, #8
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0204 	bic.w	r2, r2, #4
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	61da      	str	r2, [r3, #28]
      break;
 8009088:	e064      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fadd 	bl	8009650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69d9      	ldr	r1, [r3, #28]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	021a      	lsls	r2, r3, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	61da      	str	r2, [r3, #28]
      break;
 80090ca:	e043      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fb50 	bl	8009778 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0208 	orr.w	r2, r2, #8
 80090e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0204 	bic.w	r2, r2, #4
 80090f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800910a:	e023      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fb9a 	bl	800984c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009126:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009136:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	021a      	lsls	r2, r3, #8
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800914c:	e002      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	75fb      	strb	r3, [r7, #23]
      break;
 8009152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a4c      	ldr	r2, [pc, #304]	@ (80092ac <TIM_Base_SetConfig+0x144>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d017      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009186:	d013      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a49      	ldr	r2, [pc, #292]	@ (80092b0 <TIM_Base_SetConfig+0x148>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00f      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a48      	ldr	r2, [pc, #288]	@ (80092b4 <TIM_Base_SetConfig+0x14c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00b      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a47      	ldr	r2, [pc, #284]	@ (80092b8 <TIM_Base_SetConfig+0x150>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d007      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a46      	ldr	r2, [pc, #280]	@ (80092bc <TIM_Base_SetConfig+0x154>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_Base_SetConfig+0x48>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a45      	ldr	r2, [pc, #276]	@ (80092c0 <TIM_Base_SetConfig+0x158>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d108      	bne.n	80091c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a39      	ldr	r2, [pc, #228]	@ (80092ac <TIM_Base_SetConfig+0x144>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d023      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d0:	d01f      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a36      	ldr	r2, [pc, #216]	@ (80092b0 <TIM_Base_SetConfig+0x148>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01b      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a35      	ldr	r2, [pc, #212]	@ (80092b4 <TIM_Base_SetConfig+0x14c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d017      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a34      	ldr	r2, [pc, #208]	@ (80092b8 <TIM_Base_SetConfig+0x150>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a33      	ldr	r2, [pc, #204]	@ (80092bc <TIM_Base_SetConfig+0x154>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00f      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a33      	ldr	r2, [pc, #204]	@ (80092c4 <TIM_Base_SetConfig+0x15c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00b      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a32      	ldr	r2, [pc, #200]	@ (80092c8 <TIM_Base_SetConfig+0x160>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d007      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a31      	ldr	r2, [pc, #196]	@ (80092cc <TIM_Base_SetConfig+0x164>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d003      	beq.n	8009212 <TIM_Base_SetConfig+0xaa>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a2c      	ldr	r2, [pc, #176]	@ (80092c0 <TIM_Base_SetConfig+0x158>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d108      	bne.n	8009224 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a18      	ldr	r2, [pc, #96]	@ (80092ac <TIM_Base_SetConfig+0x144>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d013      	beq.n	8009278 <TIM_Base_SetConfig+0x110>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a1a      	ldr	r2, [pc, #104]	@ (80092bc <TIM_Base_SetConfig+0x154>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00f      	beq.n	8009278 <TIM_Base_SetConfig+0x110>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1a      	ldr	r2, [pc, #104]	@ (80092c4 <TIM_Base_SetConfig+0x15c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00b      	beq.n	8009278 <TIM_Base_SetConfig+0x110>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a19      	ldr	r2, [pc, #100]	@ (80092c8 <TIM_Base_SetConfig+0x160>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d007      	beq.n	8009278 <TIM_Base_SetConfig+0x110>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a18      	ldr	r2, [pc, #96]	@ (80092cc <TIM_Base_SetConfig+0x164>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d003      	beq.n	8009278 <TIM_Base_SetConfig+0x110>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a13      	ldr	r2, [pc, #76]	@ (80092c0 <TIM_Base_SetConfig+0x158>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d103      	bne.n	8009280 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b01      	cmp	r3, #1
 8009290:	d105      	bne.n	800929e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f023 0201 	bic.w	r2, r3, #1
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	611a      	str	r2, [r3, #16]
  }
}
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40012c00 	.word	0x40012c00
 80092b0:	40000400 	.word	0x40000400
 80092b4:	40000800 	.word	0x40000800
 80092b8:	40000c00 	.word	0x40000c00
 80092bc:	40013400 	.word	0x40013400
 80092c0:	40015000 	.word	0x40015000
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800

080092d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	f023 0201 	bic.w	r2, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f023 0302 	bic.w	r3, r3, #2
 800931c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a30      	ldr	r2, [pc, #192]	@ (80093ec <TIM_OC1_SetConfig+0x11c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d013      	beq.n	8009358 <TIM_OC1_SetConfig+0x88>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a2f      	ldr	r2, [pc, #188]	@ (80093f0 <TIM_OC1_SetConfig+0x120>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00f      	beq.n	8009358 <TIM_OC1_SetConfig+0x88>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a2e      	ldr	r2, [pc, #184]	@ (80093f4 <TIM_OC1_SetConfig+0x124>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00b      	beq.n	8009358 <TIM_OC1_SetConfig+0x88>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a2d      	ldr	r2, [pc, #180]	@ (80093f8 <TIM_OC1_SetConfig+0x128>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <TIM_OC1_SetConfig+0x88>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a2c      	ldr	r2, [pc, #176]	@ (80093fc <TIM_OC1_SetConfig+0x12c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_OC1_SetConfig+0x88>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a2b      	ldr	r2, [pc, #172]	@ (8009400 <TIM_OC1_SetConfig+0x130>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d10c      	bne.n	8009372 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f023 0308 	bic.w	r3, r3, #8
 800935e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 0304 	bic.w	r3, r3, #4
 8009370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a1d      	ldr	r2, [pc, #116]	@ (80093ec <TIM_OC1_SetConfig+0x11c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d013      	beq.n	80093a2 <TIM_OC1_SetConfig+0xd2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1c      	ldr	r2, [pc, #112]	@ (80093f0 <TIM_OC1_SetConfig+0x120>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00f      	beq.n	80093a2 <TIM_OC1_SetConfig+0xd2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1b      	ldr	r2, [pc, #108]	@ (80093f4 <TIM_OC1_SetConfig+0x124>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d00b      	beq.n	80093a2 <TIM_OC1_SetConfig+0xd2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1a      	ldr	r2, [pc, #104]	@ (80093f8 <TIM_OC1_SetConfig+0x128>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d007      	beq.n	80093a2 <TIM_OC1_SetConfig+0xd2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a19      	ldr	r2, [pc, #100]	@ (80093fc <TIM_OC1_SetConfig+0x12c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d003      	beq.n	80093a2 <TIM_OC1_SetConfig+0xd2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a18      	ldr	r2, [pc, #96]	@ (8009400 <TIM_OC1_SetConfig+0x130>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d111      	bne.n	80093c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	621a      	str	r2, [r3, #32]
}
 80093e0:	bf00      	nop
 80093e2:	371c      	adds	r7, #28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40012c00 	.word	0x40012c00
 80093f0:	40013400 	.word	0x40013400
 80093f4:	40014000 	.word	0x40014000
 80093f8:	40014400 	.word	0x40014400
 80093fc:	40014800 	.word	0x40014800
 8009400:	40015000 	.word	0x40015000

08009404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	f023 0210 	bic.w	r2, r3, #16
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800943e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	021b      	lsls	r3, r3, #8
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	4313      	orrs	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 0320 	bic.w	r3, r3, #32
 8009452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a2c      	ldr	r2, [pc, #176]	@ (8009514 <TIM_OC2_SetConfig+0x110>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_OC2_SetConfig+0x74>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a2b      	ldr	r2, [pc, #172]	@ (8009518 <TIM_OC2_SetConfig+0x114>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_OC2_SetConfig+0x74>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a2a      	ldr	r2, [pc, #168]	@ (800951c <TIM_OC2_SetConfig+0x118>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d10d      	bne.n	8009494 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800947e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1f      	ldr	r2, [pc, #124]	@ (8009514 <TIM_OC2_SetConfig+0x110>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <TIM_OC2_SetConfig+0xc0>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a1e      	ldr	r2, [pc, #120]	@ (8009518 <TIM_OC2_SetConfig+0x114>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d00f      	beq.n	80094c4 <TIM_OC2_SetConfig+0xc0>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009520 <TIM_OC2_SetConfig+0x11c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00b      	beq.n	80094c4 <TIM_OC2_SetConfig+0xc0>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009524 <TIM_OC2_SetConfig+0x120>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d007      	beq.n	80094c4 <TIM_OC2_SetConfig+0xc0>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009528 <TIM_OC2_SetConfig+0x124>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <TIM_OC2_SetConfig+0xc0>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a17      	ldr	r2, [pc, #92]	@ (800951c <TIM_OC2_SetConfig+0x118>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d113      	bne.n	80094ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	4313      	orrs	r3, r2
 80094de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40013400 	.word	0x40013400
 800951c:	40015000 	.word	0x40015000
 8009520:	40014000 	.word	0x40014000
 8009524:	40014400 	.word	0x40014400
 8009528:	40014800 	.word	0x40014800

0800952c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800955a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a2b      	ldr	r2, [pc, #172]	@ (8009638 <TIM_OC3_SetConfig+0x10c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d007      	beq.n	800959e <TIM_OC3_SetConfig+0x72>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a2a      	ldr	r2, [pc, #168]	@ (800963c <TIM_OC3_SetConfig+0x110>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <TIM_OC3_SetConfig+0x72>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a29      	ldr	r2, [pc, #164]	@ (8009640 <TIM_OC3_SetConfig+0x114>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d10d      	bne.n	80095ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a1e      	ldr	r2, [pc, #120]	@ (8009638 <TIM_OC3_SetConfig+0x10c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <TIM_OC3_SetConfig+0xbe>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a1d      	ldr	r2, [pc, #116]	@ (800963c <TIM_OC3_SetConfig+0x110>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00f      	beq.n	80095ea <TIM_OC3_SetConfig+0xbe>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <TIM_OC3_SetConfig+0x118>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00b      	beq.n	80095ea <TIM_OC3_SetConfig+0xbe>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009648 <TIM_OC3_SetConfig+0x11c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_OC3_SetConfig+0xbe>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a1b      	ldr	r2, [pc, #108]	@ (800964c <TIM_OC3_SetConfig+0x120>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_OC3_SetConfig+0xbe>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a16      	ldr	r2, [pc, #88]	@ (8009640 <TIM_OC3_SetConfig+0x114>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d113      	bne.n	8009612 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	621a      	str	r2, [r3, #32]
}
 800962c:	bf00      	nop
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	40012c00 	.word	0x40012c00
 800963c:	40013400 	.word	0x40013400
 8009640:	40015000 	.word	0x40015000
 8009644:	40014000 	.word	0x40014000
 8009648:	40014400 	.word	0x40014400
 800964c:	40014800 	.word	0x40014800

08009650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800967e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800968a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800969e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	031b      	lsls	r3, r3, #12
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009760 <TIM_OC4_SetConfig+0x110>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_OC4_SetConfig+0x74>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009764 <TIM_OC4_SetConfig+0x114>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC4_SetConfig+0x74>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a2a      	ldr	r2, [pc, #168]	@ (8009768 <TIM_OC4_SetConfig+0x118>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d10d      	bne.n	80096e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	031b      	lsls	r3, r3, #12
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009760 <TIM_OC4_SetConfig+0x110>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <TIM_OC4_SetConfig+0xc0>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009764 <TIM_OC4_SetConfig+0x114>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00f      	beq.n	8009710 <TIM_OC4_SetConfig+0xc0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a1e      	ldr	r2, [pc, #120]	@ (800976c <TIM_OC4_SetConfig+0x11c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00b      	beq.n	8009710 <TIM_OC4_SetConfig+0xc0>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a1d      	ldr	r2, [pc, #116]	@ (8009770 <TIM_OC4_SetConfig+0x120>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d007      	beq.n	8009710 <TIM_OC4_SetConfig+0xc0>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a1c      	ldr	r2, [pc, #112]	@ (8009774 <TIM_OC4_SetConfig+0x124>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d003      	beq.n	8009710 <TIM_OC4_SetConfig+0xc0>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a17      	ldr	r2, [pc, #92]	@ (8009768 <TIM_OC4_SetConfig+0x118>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d113      	bne.n	8009738 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009716:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800971e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	019b      	lsls	r3, r3, #6
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	019b      	lsls	r3, r3, #6
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	4313      	orrs	r3, r2
 8009736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	621a      	str	r2, [r3, #32]
}
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40012c00 	.word	0x40012c00
 8009764:	40013400 	.word	0x40013400
 8009768:	40015000 	.word	0x40015000
 800976c:	40014000 	.word	0x40014000
 8009770:	40014400 	.word	0x40014400
 8009774:	40014800 	.word	0x40014800

08009778 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80097bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a19      	ldr	r2, [pc, #100]	@ (8009834 <TIM_OC5_SetConfig+0xbc>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d013      	beq.n	80097fa <TIM_OC5_SetConfig+0x82>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a18      	ldr	r2, [pc, #96]	@ (8009838 <TIM_OC5_SetConfig+0xc0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00f      	beq.n	80097fa <TIM_OC5_SetConfig+0x82>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a17      	ldr	r2, [pc, #92]	@ (800983c <TIM_OC5_SetConfig+0xc4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00b      	beq.n	80097fa <TIM_OC5_SetConfig+0x82>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a16      	ldr	r2, [pc, #88]	@ (8009840 <TIM_OC5_SetConfig+0xc8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d007      	beq.n	80097fa <TIM_OC5_SetConfig+0x82>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a15      	ldr	r2, [pc, #84]	@ (8009844 <TIM_OC5_SetConfig+0xcc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d003      	beq.n	80097fa <TIM_OC5_SetConfig+0x82>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a14      	ldr	r2, [pc, #80]	@ (8009848 <TIM_OC5_SetConfig+0xd0>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d109      	bne.n	800980e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	621a      	str	r2, [r3, #32]
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40013400 	.word	0x40013400
 800983c:	40014000 	.word	0x40014000
 8009840:	40014400 	.word	0x40014400
 8009844:	40014800 	.word	0x40014800
 8009848:	40015000 	.word	0x40015000

0800984c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800987a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	051b      	lsls	r3, r3, #20
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a1a      	ldr	r2, [pc, #104]	@ (800990c <TIM_OC6_SetConfig+0xc0>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <TIM_OC6_SetConfig+0x84>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a19      	ldr	r2, [pc, #100]	@ (8009910 <TIM_OC6_SetConfig+0xc4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00f      	beq.n	80098d0 <TIM_OC6_SetConfig+0x84>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a18      	ldr	r2, [pc, #96]	@ (8009914 <TIM_OC6_SetConfig+0xc8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00b      	beq.n	80098d0 <TIM_OC6_SetConfig+0x84>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a17      	ldr	r2, [pc, #92]	@ (8009918 <TIM_OC6_SetConfig+0xcc>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d007      	beq.n	80098d0 <TIM_OC6_SetConfig+0x84>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a16      	ldr	r2, [pc, #88]	@ (800991c <TIM_OC6_SetConfig+0xd0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_OC6_SetConfig+0x84>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <TIM_OC6_SetConfig+0xd4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d109      	bne.n	80098e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	029b      	lsls	r3, r3, #10
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	40012c00 	.word	0x40012c00
 8009910:	40013400 	.word	0x40013400
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800
 8009920:	40015000 	.word	0x40015000

08009924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	fa01 f303 	lsl.w	r3, r1, r3
 800995c:	431a      	orrs	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e074      	b.n	8009a72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a34      	ldr	r2, [pc, #208]	@ (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d009      	beq.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a33      	ldr	r2, [pc, #204]	@ (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d004      	beq.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a31      	ldr	r2, [pc, #196]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d108      	bne.n	80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a21      	ldr	r2, [pc, #132]	@ (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d022      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a08:	d01d      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d018      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d013      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a1c      	ldr	r2, [pc, #112]	@ (8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a15      	ldr	r2, [pc, #84]	@ (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a18      	ldr	r2, [pc, #96]	@ (8009a98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a11      	ldr	r2, [pc, #68]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d10c      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40012c00 	.word	0x40012c00
 8009a84:	40013400 	.word	0x40013400
 8009a88:	40015000 	.word	0x40015000
 8009a8c:	40000400 	.word	0x40000400
 8009a90:	40000800 	.word	0x40000800
 8009a94:	40000c00 	.word	0x40000c00
 8009a98:	40014000 	.word	0x40014000

08009a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d101      	bne.n	8009ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e078      	b.n	8009baa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	041b      	lsls	r3, r3, #16
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d009      	beq.n	8009b5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8009bbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d004      	beq.n	8009b5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a19      	ldr	r2, [pc, #100]	@ (8009bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d11c      	bne.n	8009b98 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b68:	051b      	lsls	r3, r3, #20
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	40012c00 	.word	0x40012c00
 8009bbc:	40013400 	.word	0x40013400
 8009bc0:	40015000 	.word	0x40015000

08009bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e042      	b.n	8009c5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7f8 facb 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2224      	movs	r2, #36	@ 0x24
 8009bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0201 	bic.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fbb2 	bl	800a378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f8b3 	bl	8009d80 <UART_SetConfig>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d101      	bne.n	8009c24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e01b      	b.n	8009c5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689a      	ldr	r2, [r3, #8]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fc31 	bl	800a4bc <UART_CheckIdleState>
 8009c5a:	4603      	mov	r3, r0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08a      	sub	sp, #40	@ 0x28
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	4613      	mov	r3, r2
 8009c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d17b      	bne.n	8009d76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <HAL_UART_Transmit+0x26>
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e074      	b.n	8009d78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2221      	movs	r2, #33	@ 0x21
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c9e:	f7f8 fc1d 	bl	80024dc <HAL_GetTick>
 8009ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	88fa      	ldrh	r2, [r7, #6]
 8009ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	88fa      	ldrh	r2, [r7, #6]
 8009cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cbc:	d108      	bne.n	8009cd0 <HAL_UART_Transmit+0x6c>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d104      	bne.n	8009cd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	61bb      	str	r3, [r7, #24]
 8009cce:	e003      	b.n	8009cd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cd8:	e030      	b.n	8009d3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2180      	movs	r1, #128	@ 0x80
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fc93 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e03d      	b.n	8009d78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	3302      	adds	r3, #2
 8009d16:	61bb      	str	r3, [r7, #24]
 8009d18:	e007      	b.n	8009d2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	3301      	adds	r3, #1
 8009d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1c8      	bne.n	8009cda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2140      	movs	r1, #64	@ 0x40
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fc5c 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e006      	b.n	8009d78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	e000      	b.n	8009d78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009d76:	2302      	movs	r3, #2
  }
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b08c      	sub	sp, #48	@ 0x30
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4baa      	ldr	r3, [pc, #680]	@ (800a058 <UART_SetConfig+0x2d8>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a9f      	ldr	r2, [pc, #636]	@ (800a05c <UART_SetConfig+0x2dc>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d004      	beq.n	8009dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009de8:	4313      	orrs	r3, r2
 8009dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009df6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e00:	430b      	orrs	r3, r1
 8009e02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0a:	f023 010f 	bic.w	r1, r3, #15
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a90      	ldr	r2, [pc, #576]	@ (800a060 <UART_SetConfig+0x2e0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d125      	bne.n	8009e70 <UART_SetConfig+0xf0>
 8009e24:	4b8f      	ldr	r3, [pc, #572]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d81a      	bhi.n	8009e68 <UART_SetConfig+0xe8>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <UART_SetConfig+0xb8>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e59 	.word	0x08009e59
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e61 	.word	0x08009e61
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4e:	e116      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e50:	2302      	movs	r3, #2
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e112      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e10e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e60:	2308      	movs	r3, #8
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e10a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6e:	e106      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a7c      	ldr	r2, [pc, #496]	@ (800a068 <UART_SetConfig+0x2e8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d138      	bne.n	8009eec <UART_SetConfig+0x16c>
 8009e7a:	4b7a      	ldr	r3, [pc, #488]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e80:	f003 030c 	and.w	r3, r3, #12
 8009e84:	2b0c      	cmp	r3, #12
 8009e86:	d82d      	bhi.n	8009ee4 <UART_SetConfig+0x164>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <UART_SetConfig+0x110>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ec5 	.word	0x08009ec5
 8009e94:	08009ee5 	.word	0x08009ee5
 8009e98:	08009ee5 	.word	0x08009ee5
 8009e9c:	08009ee5 	.word	0x08009ee5
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009ee5 	.word	0x08009ee5
 8009ea8:	08009ee5 	.word	0x08009ee5
 8009eac:	08009ee5 	.word	0x08009ee5
 8009eb0:	08009ecd 	.word	0x08009ecd
 8009eb4:	08009ee5 	.word	0x08009ee5
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	08009ee5 	.word	0x08009ee5
 8009ec0:	08009edd 	.word	0x08009edd
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	e0d8      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e0d4      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e0d0      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e0cc      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e0c8      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800a06c <UART_SetConfig+0x2ec>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d125      	bne.n	8009f42 <UART_SetConfig+0x1c2>
 8009ef6:	4b5b      	ldr	r3, [pc, #364]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f00:	2b30      	cmp	r3, #48	@ 0x30
 8009f02:	d016      	beq.n	8009f32 <UART_SetConfig+0x1b2>
 8009f04:	2b30      	cmp	r3, #48	@ 0x30
 8009f06:	d818      	bhi.n	8009f3a <UART_SetConfig+0x1ba>
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d00a      	beq.n	8009f22 <UART_SetConfig+0x1a2>
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d814      	bhi.n	8009f3a <UART_SetConfig+0x1ba>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <UART_SetConfig+0x19a>
 8009f14:	2b10      	cmp	r3, #16
 8009f16:	d008      	beq.n	8009f2a <UART_SetConfig+0x1aa>
 8009f18:	e00f      	b.n	8009f3a <UART_SetConfig+0x1ba>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f20:	e0ad      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f22:	2302      	movs	r3, #2
 8009f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f28:	e0a9      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f2a:	2304      	movs	r3, #4
 8009f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f30:	e0a5      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f32:	2308      	movs	r3, #8
 8009f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f38:	e0a1      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f3a:	2310      	movs	r3, #16
 8009f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f40:	e09d      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a4a      	ldr	r2, [pc, #296]	@ (800a070 <UART_SetConfig+0x2f0>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d125      	bne.n	8009f98 <UART_SetConfig+0x218>
 8009f4c:	4b45      	ldr	r3, [pc, #276]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f58:	d016      	beq.n	8009f88 <UART_SetConfig+0x208>
 8009f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f5c:	d818      	bhi.n	8009f90 <UART_SetConfig+0x210>
 8009f5e:	2b80      	cmp	r3, #128	@ 0x80
 8009f60:	d00a      	beq.n	8009f78 <UART_SetConfig+0x1f8>
 8009f62:	2b80      	cmp	r3, #128	@ 0x80
 8009f64:	d814      	bhi.n	8009f90 <UART_SetConfig+0x210>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <UART_SetConfig+0x1f0>
 8009f6a:	2b40      	cmp	r3, #64	@ 0x40
 8009f6c:	d008      	beq.n	8009f80 <UART_SetConfig+0x200>
 8009f6e:	e00f      	b.n	8009f90 <UART_SetConfig+0x210>
 8009f70:	2300      	movs	r3, #0
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e082      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e07e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e07a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e076      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e072      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a35      	ldr	r2, [pc, #212]	@ (800a074 <UART_SetConfig+0x2f4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d12a      	bne.n	8009ff8 <UART_SetConfig+0x278>
 8009fa2:	4b30      	ldr	r3, [pc, #192]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fb0:	d01a      	beq.n	8009fe8 <UART_SetConfig+0x268>
 8009fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fb6:	d81b      	bhi.n	8009ff0 <UART_SetConfig+0x270>
 8009fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fbc:	d00c      	beq.n	8009fd8 <UART_SetConfig+0x258>
 8009fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc2:	d815      	bhi.n	8009ff0 <UART_SetConfig+0x270>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <UART_SetConfig+0x250>
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fcc:	d008      	beq.n	8009fe0 <UART_SetConfig+0x260>
 8009fce:	e00f      	b.n	8009ff0 <UART_SetConfig+0x270>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e052      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e04e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	e04a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fee:	e046      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff6:	e042      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <UART_SetConfig+0x2dc>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d13a      	bne.n	800a078 <UART_SetConfig+0x2f8>
 800a002:	4b18      	ldr	r3, [pc, #96]	@ (800a064 <UART_SetConfig+0x2e4>)
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a00c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a010:	d01a      	beq.n	800a048 <UART_SetConfig+0x2c8>
 800a012:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a016:	d81b      	bhi.n	800a050 <UART_SetConfig+0x2d0>
 800a018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a01c:	d00c      	beq.n	800a038 <UART_SetConfig+0x2b8>
 800a01e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a022:	d815      	bhi.n	800a050 <UART_SetConfig+0x2d0>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <UART_SetConfig+0x2b0>
 800a028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a02c:	d008      	beq.n	800a040 <UART_SetConfig+0x2c0>
 800a02e:	e00f      	b.n	800a050 <UART_SetConfig+0x2d0>
 800a030:	2300      	movs	r3, #0
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a036:	e022      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a038:	2302      	movs	r3, #2
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e01e      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e01a      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e016      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a056:	e012      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a058:	cfff69f3 	.word	0xcfff69f3
 800a05c:	40008000 	.word	0x40008000
 800a060:	40013800 	.word	0x40013800
 800a064:	40021000 	.word	0x40021000
 800a068:	40004400 	.word	0x40004400
 800a06c:	40004800 	.word	0x40004800
 800a070:	40004c00 	.word	0x40004c00
 800a074:	40005000 	.word	0x40005000
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4aae      	ldr	r2, [pc, #696]	@ (800a33c <UART_SetConfig+0x5bc>)
 800a084:	4293      	cmp	r3, r2
 800a086:	f040 8097 	bne.w	800a1b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a08a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d823      	bhi.n	800a0da <UART_SetConfig+0x35a>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <UART_SetConfig+0x318>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0bd 	.word	0x0800a0bd
 800a09c:	0800a0db 	.word	0x0800a0db
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0db 	.word	0x0800a0db
 800a0a8:	0800a0cb 	.word	0x0800a0cb
 800a0ac:	0800a0db 	.word	0x0800a0db
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0db 	.word	0x0800a0db
 800a0b8:	0800a0d3 	.word	0x0800a0d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0bc:	f7fe fa9e 	bl	80085fc <HAL_RCC_GetPCLK1Freq>
 800a0c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0c2:	e010      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0c4:	4b9e      	ldr	r3, [pc, #632]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a0c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0c8:	e00d      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0ca:	f7fe fa29 	bl	8008520 <HAL_RCC_GetSysClockFreq>
 800a0ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d0:	e009      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0d8:	e005      	b.n	800a0e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8130 	beq.w	800a34e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f2:	4a94      	ldr	r2, [pc, #592]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a100:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4413      	add	r3, r2
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d305      	bcc.n	800a11e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d903      	bls.n	800a126 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a124:	e113      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	2200      	movs	r2, #0
 800a12a:	60bb      	str	r3, [r7, #8]
 800a12c:	60fa      	str	r2, [r7, #12]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	4a84      	ldr	r2, [pc, #528]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2200      	movs	r2, #0
 800a13c:	603b      	str	r3, [r7, #0]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a148:	f7f6 fd0c 	bl	8000b64 <__aeabi_uldivmod>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4610      	mov	r0, r2
 800a152:	4619      	mov	r1, r3
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	020b      	lsls	r3, r1, #8
 800a15e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a162:	0202      	lsls	r2, r0, #8
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	0849      	lsrs	r1, r1, #1
 800a16a:	2000      	movs	r0, #0
 800a16c:	460c      	mov	r4, r1
 800a16e:	4605      	mov	r5, r0
 800a170:	eb12 0804 	adds.w	r8, r2, r4
 800a174:	eb43 0905 	adc.w	r9, r3, r5
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	469a      	mov	sl, r3
 800a180:	4693      	mov	fp, r2
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	4640      	mov	r0, r8
 800a188:	4649      	mov	r1, r9
 800a18a:	f7f6 fceb 	bl	8000b64 <__aeabi_uldivmod>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4613      	mov	r3, r2
 800a194:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a19c:	d308      	bcc.n	800a1b0 <UART_SetConfig+0x430>
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1a4:	d204      	bcs.n	800a1b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6a3a      	ldr	r2, [r7, #32]
 800a1ac:	60da      	str	r2, [r3, #12]
 800a1ae:	e0ce      	b.n	800a34e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1b6:	e0ca      	b.n	800a34e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c0:	d166      	bne.n	800a290 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d827      	bhi.n	800a21a <UART_SetConfig+0x49a>
 800a1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <UART_SetConfig+0x450>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a205 	.word	0x0800a205
 800a1dc:	0800a21b 	.word	0x0800a21b
 800a1e0:	0800a20b 	.word	0x0800a20b
 800a1e4:	0800a21b 	.word	0x0800a21b
 800a1e8:	0800a21b 	.word	0x0800a21b
 800a1ec:	0800a21b 	.word	0x0800a21b
 800a1f0:	0800a213 	.word	0x0800a213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f4:	f7fe fa02 	bl	80085fc <HAL_RCC_GetPCLK1Freq>
 800a1f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1fa:	e014      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fc:	f7fe fa14 	bl	8008628 <HAL_RCC_GetPCLK2Freq>
 800a200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a202:	e010      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a204:	4b4e      	ldr	r3, [pc, #312]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a208:	e00d      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a20a:	f7fe f989 	bl	8008520 <HAL_RCC_GetSysClockFreq>
 800a20e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a210:	e009      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a218:	e005      	b.n	800a226 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8090 	beq.w	800a34e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a232:	4a44      	ldr	r2, [pc, #272]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a238:	461a      	mov	r2, r3
 800a23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a240:	005a      	lsls	r2, r3, #1
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	085b      	lsrs	r3, r3, #1
 800a248:	441a      	add	r2, r3
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2b0f      	cmp	r3, #15
 800a258:	d916      	bls.n	800a288 <UART_SetConfig+0x508>
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a260:	d212      	bcs.n	800a288 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	b29b      	uxth	r3, r3
 800a266:	f023 030f 	bic.w	r3, r3, #15
 800a26a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	b29b      	uxth	r3, r3
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	b29a      	uxth	r2, r3
 800a278:	8bfb      	ldrh	r3, [r7, #30]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	8bfa      	ldrh	r2, [r7, #30]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	e062      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a28e:	e05e      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a290:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a294:	2b08      	cmp	r3, #8
 800a296:	d828      	bhi.n	800a2ea <UART_SetConfig+0x56a>
 800a298:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x520>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2c5 	.word	0x0800a2c5
 800a2a4:	0800a2cd 	.word	0x0800a2cd
 800a2a8:	0800a2d5 	.word	0x0800a2d5
 800a2ac:	0800a2eb 	.word	0x0800a2eb
 800a2b0:	0800a2db 	.word	0x0800a2db
 800a2b4:	0800a2eb 	.word	0x0800a2eb
 800a2b8:	0800a2eb 	.word	0x0800a2eb
 800a2bc:	0800a2eb 	.word	0x0800a2eb
 800a2c0:	0800a2e3 	.word	0x0800a2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c4:	f7fe f99a 	bl	80085fc <HAL_RCC_GetPCLK1Freq>
 800a2c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2ca:	e014      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2cc:	f7fe f9ac 	bl	8008628 <HAL_RCC_GetPCLK2Freq>
 800a2d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2d2:	e010      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2d8:	e00d      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2da:	f7fe f921 	bl	8008520 <HAL_RCC_GetSysClockFreq>
 800a2de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2e0:	e009      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2e8:	e005      	b.n	800a2f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2f4:	bf00      	nop
    }

    if (pclk != 0U)
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d028      	beq.n	800a34e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a300:	4a10      	ldr	r2, [pc, #64]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a306:	461a      	mov	r2, r3
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	441a      	add	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2b0f      	cmp	r3, #15
 800a324:	d910      	bls.n	800a348 <UART_SetConfig+0x5c8>
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a32c:	d20c      	bcs.n	800a348 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	b29a      	uxth	r2, r3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60da      	str	r2, [r3, #12]
 800a338:	e009      	b.n	800a34e <UART_SetConfig+0x5ce>
 800a33a:	bf00      	nop
 800a33c:	40008000 	.word	0x40008000
 800a340:	00f42400 	.word	0x00f42400
 800a344:	0800cb40 	.word	0x0800cb40
      }
      else
      {
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2201      	movs	r2, #1
 800a352:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2201      	movs	r2, #1
 800a35a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2200      	movs	r2, #0
 800a362:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2200      	movs	r2, #0
 800a368:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a36a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3730      	adds	r7, #48	@ 0x30
 800a372:	46bd      	mov	sp, r7
 800a374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01a      	beq.n	800a48e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a476:	d10a      	bne.n	800a48e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b098      	sub	sp, #96	@ 0x60
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4cc:	f7f8 f806 	bl	80024dc <HAL_GetTick>
 800a4d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d12f      	bne.n	800a540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f88e 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d022      	beq.n	800a540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a50e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a518:	647b      	str	r3, [r7, #68]	@ 0x44
 800a51a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e063      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d149      	bne.n	800a5e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f857 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d03c      	beq.n	800a5e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	623b      	str	r3, [r7, #32]
   return(result);
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a586:	633b      	str	r3, [r7, #48]	@ 0x30
 800a588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e6      	bne.n	800a568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0301 	bic.w	r3, r3, #1
 800a5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	69b9      	ldr	r1, [r7, #24]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e5      	bne.n	800a59a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e012      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3758      	adds	r7, #88	@ 0x58
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	4613      	mov	r3, r2
 800a61e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a620:	e04f      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d04b      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7f7 ff57 	bl	80024dc <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <UART_WaitOnFlagUntilTimeout+0x30>
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e04e      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0304 	and.w	r3, r3, #4
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d037      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b80      	cmp	r3, #128	@ 0x80
 800a656:	d034      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	d031      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d110      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2208      	movs	r2, #8
 800a672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f838 	bl	800a6ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2208      	movs	r2, #8
 800a67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e029      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a69c:	d111      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f81e 	bl	800a6ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e00f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69da      	ldr	r2, [r3, #28]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	bf0c      	ite	eq
 800a6d2:	2301      	moveq	r3, #1
 800a6d4:	2300      	movne	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d0a0      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b095      	sub	sp, #84	@ 0x54
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a710:	643b      	str	r3, [r7, #64]	@ 0x40
 800a712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e6      	bne.n	800a6f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3308      	adds	r3, #8
 800a72a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	61fb      	str	r3, [r7, #28]
   return(result);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a73a:	f023 0301 	bic.w	r3, r3, #1
 800a73e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3308      	adds	r3, #8
 800a746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a74a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a74e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e3      	bne.n	800a724 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a760:	2b01      	cmp	r3, #1
 800a762:	d118      	bne.n	800a796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	60bb      	str	r3, [r7, #8]
   return(result);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f023 0310 	bic.w	r3, r3, #16
 800a778:	647b      	str	r3, [r7, #68]	@ 0x44
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6979      	ldr	r1, [r7, #20]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	613b      	str	r3, [r7, #16]
   return(result);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2220      	movs	r2, #32
 800a79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7aa:	bf00      	nop
 800a7ac:	3754      	adds	r7, #84	@ 0x54
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_UARTEx_DisableFifoMode+0x16>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e027      	b.n	800a81c <HAL_UARTEx_DisableFifoMode+0x66>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2224      	movs	r2, #36	@ 0x24
 800a7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 0201 	bic.w	r2, r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a7fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e02d      	b.n	800a89c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2224      	movs	r2, #36	@ 0x24
 800a84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 0201 	bic.w	r2, r2, #1
 800a866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f84f 	bl	800a920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d101      	bne.n	800a8bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e02d      	b.n	800a918 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2224      	movs	r2, #36	@ 0x24
 800a8c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f022 0201 	bic.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f811 	bl	800a920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2220      	movs	r2, #32
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d108      	bne.n	800a942 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a940:	e031      	b.n	800a9a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a942:	2308      	movs	r3, #8
 800a944:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a946:	2308      	movs	r3, #8
 800a948:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	0e5b      	lsrs	r3, r3, #25
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	0f5b      	lsrs	r3, r3, #29
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	7b3a      	ldrb	r2, [r7, #12]
 800a96e:	4911      	ldr	r1, [pc, #68]	@ (800a9b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a970:	5c8a      	ldrb	r2, [r1, r2]
 800a972:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a976:	7b3a      	ldrb	r2, [r7, #12]
 800a978:	490f      	ldr	r1, [pc, #60]	@ (800a9b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a97a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a97c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a980:	b29a      	uxth	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	7b7a      	ldrb	r2, [r7, #13]
 800a98c:	4909      	ldr	r1, [pc, #36]	@ (800a9b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a98e:	5c8a      	ldrb	r2, [r1, r2]
 800a990:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a994:	7b7a      	ldrb	r2, [r7, #13]
 800a996:	4908      	ldr	r1, [pc, #32]	@ (800a9b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a998:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a99a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9a6:	bf00      	nop
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	0800cb58 	.word	0x0800cb58
 800a9b8:	0800cb60 	.word	0x0800cb60

0800a9bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b08b      	sub	sp, #44	@ 0x2c
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	fa93 f3a3 	rbit	r3, r3
 800a9d6:	613b      	str	r3, [r7, #16]
  return result;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a9e2:	2320      	movs	r3, #32
 800a9e4:	e003      	b.n	800a9ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	fab3 f383 	clz	r3, r3
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	2103      	movs	r1, #3
 800a9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f6:	43db      	mvns	r3, r3
 800a9f8:	401a      	ands	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	fa93 f3a3 	rbit	r3, r3
 800aa04:	61fb      	str	r3, [r7, #28]
  return result;
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800aa10:	2320      	movs	r3, #32
 800aa12:	e003      	b.n	800aa1c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	fab3 f383 	clz	r3, r3
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	fa01 f303 	lsl.w	r3, r1, r3
 800aa24:	431a      	orrs	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	601a      	str	r2, [r3, #0]
}
 800aa2a:	bf00      	nop
 800aa2c:	372c      	adds	r7, #44	@ 0x2c
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	401a      	ands	r2, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	431a      	orrs	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	605a      	str	r2, [r3, #4]
}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b08b      	sub	sp, #44	@ 0x2c
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	fa93 f3a3 	rbit	r3, r3
 800aa80:	613b      	str	r3, [r7, #16]
  return result;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	e003      	b.n	800aa98 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	fab3 f383 	clz	r3, r3
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	2103      	movs	r1, #3
 800aa9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	401a      	ands	r2, r3
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	fa93 f3a3 	rbit	r3, r3
 800aaae:	61fb      	str	r3, [r7, #28]
  return result;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aaba:	2320      	movs	r3, #32
 800aabc:	e003      	b.n	800aac6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	fab3 f383 	clz	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	fa01 f303 	lsl.w	r3, r1, r3
 800aace:	431a      	orrs	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800aad4:	bf00      	nop
 800aad6:	372c      	adds	r7, #44	@ 0x2c
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b08b      	sub	sp, #44	@ 0x2c
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	fa93 f3a3 	rbit	r3, r3
 800aafa:	613b      	str	r3, [r7, #16]
  return result;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ab06:	2320      	movs	r3, #32
 800ab08:	e003      	b.n	800ab12 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	fab3 f383 	clz	r3, r3
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	2103      	movs	r1, #3
 800ab16:	fa01 f303 	lsl.w	r3, r1, r3
 800ab1a:	43db      	mvns	r3, r3
 800ab1c:	401a      	ands	r2, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	fa93 f3a3 	rbit	r3, r3
 800ab28:	61fb      	str	r3, [r7, #28]
  return result;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ab34:	2320      	movs	r3, #32
 800ab36:	e003      	b.n	800ab40 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	fab3 f383 	clz	r3, r3
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	fa01 f303 	lsl.w	r3, r1, r3
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	60da      	str	r2, [r3, #12]
}
 800ab4e:	bf00      	nop
 800ab50:	372c      	adds	r7, #44	@ 0x2c
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b08b      	sub	sp, #44	@ 0x2c
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	fa93 f3a3 	rbit	r3, r3
 800ab74:	613b      	str	r3, [r7, #16]
  return result;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ab80:	2320      	movs	r3, #32
 800ab82:	e003      	b.n	800ab8c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	fab3 f383 	clz	r3, r3
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	210f      	movs	r1, #15
 800ab90:	fa01 f303 	lsl.w	r3, r1, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
 800ab9e:	fa93 f3a3 	rbit	r3, r3
 800aba2:	61fb      	str	r3, [r7, #28]
  return result;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800abae:	2320      	movs	r3, #32
 800abb0:	e003      	b.n	800abba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb4:	fab3 f383 	clz	r3, r3
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	431a      	orrs	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800abc8:	bf00      	nop
 800abca:	372c      	adds	r7, #44	@ 0x2c
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b08b      	sub	sp, #44	@ 0x2c
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	fa93 f3a3 	rbit	r3, r3
 800abf0:	613b      	str	r3, [r7, #16]
  return result;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800abfc:	2320      	movs	r3, #32
 800abfe:	e003      	b.n	800ac08 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	fab3 f383 	clz	r3, r3
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	210f      	movs	r1, #15
 800ac0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac10:	43db      	mvns	r3, r3
 800ac12:	401a      	ands	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	fa93 f3a3 	rbit	r3, r3
 800ac20:	61fb      	str	r3, [r7, #28]
  return result;
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ac2c:	2320      	movs	r3, #32
 800ac2e:	e003      	b.n	800ac38 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	fab3 f383 	clz	r3, r3
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac40:	431a      	orrs	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ac46:	bf00      	nop
 800ac48:	372c      	adds	r7, #44	@ 0x2c
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	fa93 f3a3 	rbit	r3, r3
 800ac68:	60fb      	str	r3, [r7, #12]
  return result;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <LL_GPIO_Init+0x26>
    return 32U;
 800ac74:	2320      	movs	r3, #32
 800ac76:	e003      	b.n	800ac80 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	fab3 f383 	clz	r3, r3
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac82:	e048      	b.n	800ad16 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac90:	4013      	ands	r3, r2
 800ac92:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d03a      	beq.n	800ad10 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d003      	beq.n	800acaa <LL_GPIO_Init+0x58>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d10e      	bne.n	800acc8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	461a      	mov	r2, r3
 800acb0:	69b9      	ldr	r1, [r7, #24]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fed7 	bl	800aa66 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	461a      	mov	r2, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff feb7 	bl	800aa36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	461a      	mov	r2, r3
 800acce:	69b9      	ldr	r1, [r7, #24]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ff05 	bl	800aae0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d111      	bne.n	800ad02 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2bff      	cmp	r3, #255	@ 0xff
 800ace2:	d807      	bhi.n	800acf4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	461a      	mov	r2, r3
 800acea:	69b9      	ldr	r1, [r7, #24]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ff34 	bl	800ab5a <LL_GPIO_SetAFPin_0_7>
 800acf2:	e006      	b.n	800ad02 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	461a      	mov	r2, r3
 800acfa:	69b9      	ldr	r1, [r7, #24]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ff69 	bl	800abd4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	461a      	mov	r2, r3
 800ad08:	69b9      	ldr	r1, [r7, #24]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff fe56 	bl	800a9bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	3301      	adds	r3, #1
 800ad14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1af      	bne.n	800ac84 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ad3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	43db      	mvns	r3, r3
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	1d3b      	adds	r3, r7, #4
 800ad6e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b0ac      	sub	sp, #176	@ 0xb0
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	785b      	ldrb	r3, [r3, #1]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	f040 84ca 	bne.w	800b748 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d904      	bls.n	800adca <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adc8:	e003      	b.n	800add2 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	7b1b      	ldrb	r3, [r3, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d122      	bne.n	800ae20 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	6959      	ldr	r1, [r3, #20]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88da      	ldrh	r2, [r3, #6]
 800ade2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fdac 	bl	800b946 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	4413      	add	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	00da      	lsls	r2, r3, #3
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	801a      	strh	r2, [r3, #0]
 800ae1c:	f000 bc6f 	b.w	800b6fe <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	78db      	ldrb	r3, [r3, #3]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	f040 831e 	bne.w	800b466 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	f240 82cf 	bls.w	800b3d6 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	441a      	add	r2, r3
 800ae5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ae60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ae6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	6a1a      	ldr	r2, [r3, #32]
 800ae78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae7c:	1ad2      	subs	r2, r2, r3
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 814f 	beq.w	800b138 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d16b      	bne.n	800af7e <USB_EPStartXfer+0x1de>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb6:	4413      	add	r3, r2
 800aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	00da      	lsls	r2, r3, #3
 800aec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec2:	4413      	add	r3, r2
 800aec4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aec8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed8:	801a      	strh	r2, [r3, #0]
 800aeda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10a      	bne.n	800aef8 <USB_EPStartXfer+0x158>
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	e05b      	b.n	800afb0 <USB_EPStartXfer+0x210>
 800aef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aefc:	2b3e      	cmp	r3, #62	@ 0x3e
 800aefe:	d81c      	bhi.n	800af3a <USB_EPStartXfer+0x19a>
 800af00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af04:	085b      	lsrs	r3, r3, #1
 800af06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d004      	beq.n	800af20 <USB_EPStartXfer+0x180>
 800af16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af1a:	3301      	adds	r3, #1
 800af1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	b29a      	uxth	r2, r3
 800af26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	029b      	lsls	r3, r3, #10
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4313      	orrs	r3, r2
 800af32:	b29a      	uxth	r2, r3
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	e03a      	b.n	800afb0 <USB_EPStartXfer+0x210>
 800af3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <USB_EPStartXfer+0x1ba>
 800af50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af54:	3b01      	subs	r3, #1
 800af56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af64:	b29b      	uxth	r3, r3
 800af66:	029b      	lsls	r3, r3, #10
 800af68:	b29b      	uxth	r3, r3
 800af6a:	4313      	orrs	r3, r2
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af76:	b29a      	uxth	r2, r3
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	801a      	strh	r2, [r3, #0]
 800af7c:	e018      	b.n	800afb0 <USB_EPStartXfer+0x210>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d114      	bne.n	800afb0 <USB_EPStartXfer+0x210>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	4413      	add	r3, r2
 800af94:	633b      	str	r3, [r7, #48]	@ 0x30
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	00da      	lsls	r2, r3, #3
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	4413      	add	r3, r2
 800afa0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afaa:	b29a      	uxth	r2, r3
 800afac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	895b      	ldrh	r3, [r3, #10]
 800afb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	6959      	ldr	r1, [r3, #20]
 800afbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fcbd 	bl	800b946 <USB_WritePMA>
            ep->xfer_buff += len;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	695a      	ldr	r2, [r3, #20]
 800afd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afd4:	441a      	add	r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6a1a      	ldr	r2, [r3, #32]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d907      	bls.n	800aff6 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6a1a      	ldr	r2, [r3, #32]
 800afea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	621a      	str	r2, [r3, #32]
 800aff4:	e006      	b.n	800b004 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2200      	movs	r2, #0
 800b002:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d16b      	bne.n	800b0e4 <USB_EPStartXfer+0x344>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b016:	b29b      	uxth	r3, r3
 800b018:	461a      	mov	r2, r3
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	4413      	add	r3, r2
 800b01e:	61bb      	str	r3, [r7, #24]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	00da      	lsls	r2, r3, #3
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	4413      	add	r3, r2
 800b02a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	b29b      	uxth	r3, r3
 800b036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	801a      	strh	r2, [r3, #0]
 800b040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <USB_EPStartXfer+0x2be>
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b056:	b29a      	uxth	r2, r3
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	801a      	strh	r2, [r3, #0]
 800b05c:	e05d      	b.n	800b11a <USB_EPStartXfer+0x37a>
 800b05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b062:	2b3e      	cmp	r3, #62	@ 0x3e
 800b064:	d81c      	bhi.n	800b0a0 <USB_EPStartXfer+0x300>
 800b066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <USB_EPStartXfer+0x2e6>
 800b07c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b080:	3301      	adds	r3, #1
 800b082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b090:	b29b      	uxth	r3, r3
 800b092:	029b      	lsls	r3, r3, #10
 800b094:	b29b      	uxth	r3, r3
 800b096:	4313      	orrs	r3, r2
 800b098:	b29a      	uxth	r2, r3
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	801a      	strh	r2, [r3, #0]
 800b09e:	e03c      	b.n	800b11a <USB_EPStartXfer+0x37a>
 800b0a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0a4:	095b      	lsrs	r3, r3, #5
 800b0a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b0aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ae:	f003 031f 	and.w	r3, r3, #31
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d104      	bne.n	800b0c0 <USB_EPStartXfer+0x320>
 800b0b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	029b      	lsls	r3, r3, #10
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	801a      	strh	r2, [r3, #0]
 800b0e2:	e01a      	b.n	800b11a <USB_EPStartXfer+0x37a>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	785b      	ldrb	r3, [r3, #1]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d116      	bne.n	800b11a <USB_EPStartXfer+0x37a>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	623b      	str	r3, [r7, #32]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	623b      	str	r3, [r7, #32]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	00da      	lsls	r2, r3, #3
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	4413      	add	r3, r2
 800b10a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b10e:	61fb      	str	r3, [r7, #28]
 800b110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b114:	b29a      	uxth	r2, r3
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	891b      	ldrh	r3, [r3, #8]
 800b11e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	6959      	ldr	r1, [r3, #20]
 800b126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fc08 	bl	800b946 <USB_WritePMA>
 800b136:	e2e2      	b.n	800b6fe <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	785b      	ldrb	r3, [r3, #1]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d16b      	bne.n	800b218 <USB_EPStartXfer+0x478>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	461a      	mov	r2, r3
 800b14e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b150:	4413      	add	r3, r2
 800b152:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	00da      	lsls	r2, r3, #3
 800b15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b162:	647b      	str	r3, [r7, #68]	@ 0x44
 800b164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b16e:	b29a      	uxth	r2, r3
 800b170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b172:	801a      	strh	r2, [r3, #0]
 800b174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <USB_EPStartXfer+0x3f2>
 800b17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b18e:	801a      	strh	r2, [r3, #0]
 800b190:	e05d      	b.n	800b24e <USB_EPStartXfer+0x4ae>
 800b192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b196:	2b3e      	cmp	r3, #62	@ 0x3e
 800b198:	d81c      	bhi.n	800b1d4 <USB_EPStartXfer+0x434>
 800b19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <USB_EPStartXfer+0x41a>
 800b1b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	029b      	lsls	r3, r3, #10
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	e03c      	b.n	800b24e <USB_EPStartXfer+0x4ae>
 800b1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d104      	bne.n	800b1f4 <USB_EPStartXfer+0x454>
 800b1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	029b      	lsls	r3, r3, #10
 800b202:	b29b      	uxth	r3, r3
 800b204:	4313      	orrs	r3, r2
 800b206:	b29b      	uxth	r3, r3
 800b208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b210:	b29a      	uxth	r2, r3
 800b212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	e01a      	b.n	800b24e <USB_EPStartXfer+0x4ae>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d116      	bne.n	800b24e <USB_EPStartXfer+0x4ae>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	653b      	str	r3, [r7, #80]	@ 0x50
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b230:	4413      	add	r3, r2
 800b232:	653b      	str	r3, [r7, #80]	@ 0x50
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	00da      	lsls	r2, r3, #3
 800b23a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b23c:	4413      	add	r3, r2
 800b23e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b248:	b29a      	uxth	r2, r3
 800b24a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b24c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	891b      	ldrh	r3, [r3, #8]
 800b252:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6959      	ldr	r1, [r3, #20]
 800b25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fb6e 	bl	800b946 <USB_WritePMA>
            ep->xfer_buff += len;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	695a      	ldr	r2, [r3, #20]
 800b26e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b272:	441a      	add	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	6a1a      	ldr	r2, [r3, #32]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	429a      	cmp	r2, r3
 800b282:	d907      	bls.n	800b294 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	6a1a      	ldr	r2, [r3, #32]
 800b288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b28c:	1ad2      	subs	r2, r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	621a      	str	r2, [r3, #32]
 800b292:	e006      	b.n	800b2a2 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d16b      	bne.n	800b386 <USB_EPStartXfer+0x5e6>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2be:	4413      	add	r3, r2
 800b2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	00da      	lsls	r2, r3, #3
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <USB_EPStartXfer+0x560>
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fc:	801a      	strh	r2, [r3, #0]
 800b2fe:	e05b      	b.n	800b3b8 <USB_EPStartXfer+0x618>
 800b300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b304:	2b3e      	cmp	r3, #62	@ 0x3e
 800b306:	d81c      	bhi.n	800b342 <USB_EPStartXfer+0x5a2>
 800b308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b30c:	085b      	lsrs	r3, r3, #1
 800b30e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <USB_EPStartXfer+0x588>
 800b31e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b322:	3301      	adds	r3, #1
 800b324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b332:	b29b      	uxth	r3, r3
 800b334:	029b      	lsls	r3, r3, #10
 800b336:	b29b      	uxth	r3, r3
 800b338:	4313      	orrs	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b33e:	801a      	strh	r2, [r3, #0]
 800b340:	e03a      	b.n	800b3b8 <USB_EPStartXfer+0x618>
 800b342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b34c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b350:	f003 031f 	and.w	r3, r3, #31
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <USB_EPStartXfer+0x5c2>
 800b358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b35c:	3b01      	subs	r3, #1
 800b35e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29a      	uxth	r2, r3
 800b368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	029b      	lsls	r3, r3, #10
 800b370:	b29b      	uxth	r3, r3
 800b372:	4313      	orrs	r3, r2
 800b374:	b29b      	uxth	r3, r3
 800b376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b37a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b37e:	b29a      	uxth	r2, r3
 800b380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	e018      	b.n	800b3b8 <USB_EPStartXfer+0x618>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d114      	bne.n	800b3b8 <USB_EPStartXfer+0x618>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39a:	4413      	add	r3, r2
 800b39c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	00da      	lsls	r2, r3, #3
 800b3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	895b      	ldrh	r3, [r3, #10]
 800b3bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	6959      	ldr	r1, [r3, #20]
 800b3c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fab9 	bl	800b946 <USB_WritePMA>
 800b3d4:	e193      	b.n	800b6fe <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b3f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	441a      	add	r2, r3
 800b402:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b424:	b29b      	uxth	r3, r3
 800b426:	461a      	mov	r2, r3
 800b428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b42a:	4413      	add	r3, r2
 800b42c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	00da      	lsls	r2, r3, #3
 800b434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b436:	4413      	add	r3, r2
 800b438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b43c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b442:	b29a      	uxth	r2, r3
 800b444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b446:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	891b      	ldrh	r3, [r3, #8]
 800b44c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	6959      	ldr	r1, [r3, #20]
 800b454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa71 	bl	800b946 <USB_WritePMA>
 800b464:	e14b      	b.n	800b6fe <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	6a1a      	ldr	r2, [r3, #32]
 800b46a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 809a 	beq.w	800b5c0 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	785b      	ldrb	r3, [r3, #1]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d16b      	bne.n	800b570 <USB_EPStartXfer+0x7d0>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4a8:	4413      	add	r3, r2
 800b4aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	00da      	lsls	r2, r3, #3
 800b4b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4ca:	801a      	strh	r2, [r3, #0]
 800b4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <USB_EPStartXfer+0x74a>
 800b4d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	e05b      	b.n	800b5a2 <USB_EPStartXfer+0x802>
 800b4ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4f0:	d81c      	bhi.n	800b52c <USB_EPStartXfer+0x78c>
 800b4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4f6:	085b      	lsrs	r3, r3, #1
 800b4f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	d004      	beq.n	800b512 <USB_EPStartXfer+0x772>
 800b508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b50c:	3301      	adds	r3, #1
 800b50e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	b29a      	uxth	r2, r3
 800b518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	029b      	lsls	r3, r3, #10
 800b520:	b29b      	uxth	r3, r3
 800b522:	4313      	orrs	r3, r2
 800b524:	b29a      	uxth	r2, r3
 800b526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	e03a      	b.n	800b5a2 <USB_EPStartXfer+0x802>
 800b52c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b530:	095b      	lsrs	r3, r3, #5
 800b532:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b53a:	f003 031f 	and.w	r3, r3, #31
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d104      	bne.n	800b54c <USB_EPStartXfer+0x7ac>
 800b542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b546:	3b01      	subs	r3, #1
 800b548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b54c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	b29a      	uxth	r2, r3
 800b552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b556:	b29b      	uxth	r3, r3
 800b558:	029b      	lsls	r3, r3, #10
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	4313      	orrs	r3, r2
 800b55e:	b29b      	uxth	r3, r3
 800b560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b568:	b29a      	uxth	r2, r3
 800b56a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b56c:	801a      	strh	r2, [r3, #0]
 800b56e:	e018      	b.n	800b5a2 <USB_EPStartXfer+0x802>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d114      	bne.n	800b5a2 <USB_EPStartXfer+0x802>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b57e:	b29b      	uxth	r3, r3
 800b580:	461a      	mov	r2, r3
 800b582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b584:	4413      	add	r3, r2
 800b586:	673b      	str	r3, [r7, #112]	@ 0x70
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	00da      	lsls	r2, r3, #3
 800b58e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b590:	4413      	add	r3, r2
 800b592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	6959      	ldr	r1, [r3, #20]
 800b5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9c4 	bl	800b946 <USB_WritePMA>
 800b5be:	e09e      	b.n	800b6fe <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	785b      	ldrb	r3, [r3, #1]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d16b      	bne.n	800b6a0 <USB_EPStartXfer+0x900>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5d8:	4413      	add	r3, r2
 800b5da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	00da      	lsls	r2, r3, #3
 800b5e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <USB_EPStartXfer+0x87a>
 800b604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b612:	b29a      	uxth	r2, r3
 800b614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b616:	801a      	strh	r2, [r3, #0]
 800b618:	e063      	b.n	800b6e2 <USB_EPStartXfer+0x942>
 800b61a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b61e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b620:	d81c      	bhi.n	800b65c <USB_EPStartXfer+0x8bc>
 800b622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b626:	085b      	lsrs	r3, r3, #1
 800b628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <USB_EPStartXfer+0x8a2>
 800b638:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b63c:	3301      	adds	r3, #1
 800b63e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29a      	uxth	r2, r3
 800b648:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	029b      	lsls	r3, r3, #10
 800b650:	b29b      	uxth	r3, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	b29a      	uxth	r2, r3
 800b656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	e042      	b.n	800b6e2 <USB_EPStartXfer+0x942>
 800b65c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b660:	095b      	lsrs	r3, r3, #5
 800b662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b66a:	f003 031f 	and.w	r3, r3, #31
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d104      	bne.n	800b67c <USB_EPStartXfer+0x8dc>
 800b672:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b676:	3b01      	subs	r3, #1
 800b678:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b67c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	b29a      	uxth	r2, r3
 800b682:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b686:	b29b      	uxth	r3, r3
 800b688:	029b      	lsls	r3, r3, #10
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	4313      	orrs	r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b698:	b29a      	uxth	r2, r3
 800b69a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b69c:	801a      	strh	r2, [r3, #0]
 800b69e:	e020      	b.n	800b6e2 <USB_EPStartXfer+0x942>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	785b      	ldrb	r3, [r3, #1]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d11c      	bne.n	800b6e2 <USB_EPStartXfer+0x942>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6bc:	4413      	add	r3, r2
 800b6be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	00da      	lsls	r2, r3, #3
 800b6c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	891b      	ldrh	r3, [r3, #8]
 800b6e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6959      	ldr	r1, [r3, #20]
 800b6ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f924 	bl	800b946 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	4413      	add	r3, r2
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b714:	817b      	strh	r3, [r7, #10]
 800b716:	897b      	ldrh	r3, [r7, #10]
 800b718:	f083 0310 	eor.w	r3, r3, #16
 800b71c:	817b      	strh	r3, [r7, #10]
 800b71e:	897b      	ldrh	r3, [r7, #10]
 800b720:	f083 0320 	eor.w	r3, r3, #32
 800b724:	817b      	strh	r3, [r7, #10]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	441a      	add	r2, r3
 800b730:	897b      	ldrh	r3, [r7, #10]
 800b732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b73a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b73e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b742:	b29b      	uxth	r3, r3
 800b744:	8013      	strh	r3, [r2, #0]
 800b746:	e0d5      	b.n	800b8f4 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	7b1b      	ldrb	r3, [r3, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d156      	bne.n	800b7fe <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d122      	bne.n	800b79e <USB_EPStartXfer+0x9fe>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	78db      	ldrb	r3, [r3, #3]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d11e      	bne.n	800b79e <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b776:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	441a      	add	r2, r3
 800b784:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b790:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b798:	b29b      	uxth	r3, r3
 800b79a:	8013      	strh	r3, [r2, #0]
 800b79c:	e01d      	b.n	800b7da <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b7b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7b4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	441a      	add	r2, r3
 800b7c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b7c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d907      	bls.n	800b7f6 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	699a      	ldr	r2, [r3, #24]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	1ad2      	subs	r2, r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	619a      	str	r2, [r3, #24]
 800b7f4:	e054      	b.n	800b8a0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	619a      	str	r2, [r3, #24]
 800b7fc:	e050      	b.n	800b8a0 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	78db      	ldrb	r3, [r3, #3]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d142      	bne.n	800b88c <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d048      	beq.n	800b8a0 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b81e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <USB_EPStartXfer+0xa96>
 800b82a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10b      	bne.n	800b84e <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b836:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b83a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d12e      	bne.n	800b8a0 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b842:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d128      	bne.n	800b8a0 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b864:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	441a      	add	r2, r3
 800b872:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b87a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b87e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b882:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b886:	b29b      	uxth	r3, r3
 800b888:	8013      	strh	r3, [r2, #0]
 800b88a:	e009      	b.n	800b8a0 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	78db      	ldrb	r3, [r3, #3]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d103      	bne.n	800b89c <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2200      	movs	r2, #0
 800b898:	619a      	str	r2, [r3, #24]
 800b89a:	e001      	b.n	800b8a0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e02a      	b.n	800b8f6 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b8ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b8be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b8c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b8c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b8ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b8ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	441a      	add	r2, r3
 800b8dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b8e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	37b0      	adds	r7, #176	@ 0xb0
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2280      	movs	r2, #128	@ 0x80
 800b914:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b934:	b29b      	uxth	r3, r3
 800b936:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b938:	68fb      	ldr	r3, [r7, #12]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b946:	b480      	push	{r7}
 800b948:	b08b      	sub	sp, #44	@ 0x2c
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	60f8      	str	r0, [r7, #12]
 800b94e:	60b9      	str	r1, [r7, #8]
 800b950:	4611      	mov	r1, r2
 800b952:	461a      	mov	r2, r3
 800b954:	460b      	mov	r3, r1
 800b956:	80fb      	strh	r3, [r7, #6]
 800b958:	4613      	mov	r3, r2
 800b95a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b95c:	88bb      	ldrh	r3, [r7, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	085b      	lsrs	r3, r3, #1
 800b962:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b96c:	88fa      	ldrh	r2, [r7, #6]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b976:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b97c:	e01c      	b.n	800b9b8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	3301      	adds	r3, #1
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	b21b      	sxth	r3, r3
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	b21a      	sxth	r2, r3
 800b990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b994:	4313      	orrs	r3, r2
 800b996:	b21b      	sxth	r3, r3
 800b998:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	8a7a      	ldrh	r2, [r7, #18]
 800b99e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	3302      	adds	r3, #2
 800b9a4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1df      	bne.n	800b97e <USB_WritePMA+0x38>
  }
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	372c      	adds	r7, #44	@ 0x2c
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b08b      	sub	sp, #44	@ 0x2c
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	461a      	mov	r2, r3
 800b9da:	460b      	mov	r3, r1
 800b9dc:	80fb      	strh	r3, [r7, #6]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b9e2:	88bb      	ldrh	r3, [r7, #4]
 800b9e4:	085b      	lsrs	r3, r3, #1
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9f2:	88fa      	ldrh	r2, [r7, #6]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba02:	e018      	b.n	800ba36 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	3302      	adds	r3, #2
 800ba10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ba30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba32:	3b01      	subs	r3, #1
 800ba34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e3      	bne.n	800ba04 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ba3c:	88bb      	ldrh	r3, [r7, #4]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d007      	beq.n	800ba58 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	701a      	strb	r2, [r3, #0]
  }
}
 800ba58:	bf00      	nop
 800ba5a:	372c      	adds	r7, #44	@ 0x2c
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <memset>:
 800ba64:	4402      	add	r2, r0
 800ba66:	4603      	mov	r3, r0
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d100      	bne.n	800ba6e <memset+0xa>
 800ba6c:	4770      	bx	lr
 800ba6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba72:	e7f9      	b.n	800ba68 <memset+0x4>

0800ba74 <__libc_init_array>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4d0d      	ldr	r5, [pc, #52]	@ (800baac <__libc_init_array+0x38>)
 800ba78:	4c0d      	ldr	r4, [pc, #52]	@ (800bab0 <__libc_init_array+0x3c>)
 800ba7a:	1b64      	subs	r4, r4, r5
 800ba7c:	10a4      	asrs	r4, r4, #2
 800ba7e:	2600      	movs	r6, #0
 800ba80:	42a6      	cmp	r6, r4
 800ba82:	d109      	bne.n	800ba98 <__libc_init_array+0x24>
 800ba84:	4d0b      	ldr	r5, [pc, #44]	@ (800bab4 <__libc_init_array+0x40>)
 800ba86:	4c0c      	ldr	r4, [pc, #48]	@ (800bab8 <__libc_init_array+0x44>)
 800ba88:	f001 f83e 	bl	800cb08 <_init>
 800ba8c:	1b64      	subs	r4, r4, r5
 800ba8e:	10a4      	asrs	r4, r4, #2
 800ba90:	2600      	movs	r6, #0
 800ba92:	42a6      	cmp	r6, r4
 800ba94:	d105      	bne.n	800baa2 <__libc_init_array+0x2e>
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba9c:	4798      	blx	r3
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7ee      	b.n	800ba80 <__libc_init_array+0xc>
 800baa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa6:	4798      	blx	r3
 800baa8:	3601      	adds	r6, #1
 800baaa:	e7f2      	b.n	800ba92 <__libc_init_array+0x1e>
 800baac:	0800cd48 	.word	0x0800cd48
 800bab0:	0800cd48 	.word	0x0800cd48
 800bab4:	0800cd48 	.word	0x0800cd48
 800bab8:	0800cd4c 	.word	0x0800cd4c
 800babc:	00000000 	.word	0x00000000

0800bac0 <sin>:
 800bac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bac2:	ec53 2b10 	vmov	r2, r3, d0
 800bac6:	4826      	ldr	r0, [pc, #152]	@ (800bb60 <sin+0xa0>)
 800bac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bacc:	4281      	cmp	r1, r0
 800bace:	d807      	bhi.n	800bae0 <sin+0x20>
 800bad0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bb58 <sin+0x98>
 800bad4:	2000      	movs	r0, #0
 800bad6:	b005      	add	sp, #20
 800bad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800badc:	f000 b90c 	b.w	800bcf8 <__kernel_sin>
 800bae0:	4820      	ldr	r0, [pc, #128]	@ (800bb64 <sin+0xa4>)
 800bae2:	4281      	cmp	r1, r0
 800bae4:	d908      	bls.n	800baf8 <sin+0x38>
 800bae6:	4610      	mov	r0, r2
 800bae8:	4619      	mov	r1, r3
 800baea:	f7f4 fba1 	bl	8000230 <__aeabi_dsub>
 800baee:	ec41 0b10 	vmov	d0, r0, r1
 800baf2:	b005      	add	sp, #20
 800baf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800baf8:	4668      	mov	r0, sp
 800bafa:	f000 f9b9 	bl	800be70 <__ieee754_rem_pio2>
 800bafe:	f000 0003 	and.w	r0, r0, #3
 800bb02:	2801      	cmp	r0, #1
 800bb04:	d00c      	beq.n	800bb20 <sin+0x60>
 800bb06:	2802      	cmp	r0, #2
 800bb08:	d011      	beq.n	800bb2e <sin+0x6e>
 800bb0a:	b9e8      	cbnz	r0, 800bb48 <sin+0x88>
 800bb0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb10:	ed9d 0b00 	vldr	d0, [sp]
 800bb14:	2001      	movs	r0, #1
 800bb16:	f000 f8ef 	bl	800bcf8 <__kernel_sin>
 800bb1a:	ec51 0b10 	vmov	r0, r1, d0
 800bb1e:	e7e6      	b.n	800baee <sin+0x2e>
 800bb20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb24:	ed9d 0b00 	vldr	d0, [sp]
 800bb28:	f000 f81e 	bl	800bb68 <__kernel_cos>
 800bb2c:	e7f5      	b.n	800bb1a <sin+0x5a>
 800bb2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb32:	ed9d 0b00 	vldr	d0, [sp]
 800bb36:	2001      	movs	r0, #1
 800bb38:	f000 f8de 	bl	800bcf8 <__kernel_sin>
 800bb3c:	ec53 2b10 	vmov	r2, r3, d0
 800bb40:	4610      	mov	r0, r2
 800bb42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb46:	e7d2      	b.n	800baee <sin+0x2e>
 800bb48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb4c:	ed9d 0b00 	vldr	d0, [sp]
 800bb50:	f000 f80a 	bl	800bb68 <__kernel_cos>
 800bb54:	e7f2      	b.n	800bb3c <sin+0x7c>
 800bb56:	bf00      	nop
	...
 800bb60:	3fe921fb 	.word	0x3fe921fb
 800bb64:	7fefffff 	.word	0x7fefffff

0800bb68 <__kernel_cos>:
 800bb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	ec57 6b10 	vmov	r6, r7, d0
 800bb70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bb74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bb78:	ed8d 1b00 	vstr	d1, [sp]
 800bb7c:	d206      	bcs.n	800bb8c <__kernel_cos+0x24>
 800bb7e:	4630      	mov	r0, r6
 800bb80:	4639      	mov	r1, r7
 800bb82:	f7f4 ffa7 	bl	8000ad4 <__aeabi_d2iz>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f000 8088 	beq.w	800bc9c <__kernel_cos+0x134>
 800bb8c:	4632      	mov	r2, r6
 800bb8e:	463b      	mov	r3, r7
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fd04 	bl	80005a0 <__aeabi_dmul>
 800bb98:	4b51      	ldr	r3, [pc, #324]	@ (800bce0 <__kernel_cos+0x178>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	f7f4 fcfe 	bl	80005a0 <__aeabi_dmul>
 800bba4:	a340      	add	r3, pc, #256	@ (adr r3, 800bca8 <__kernel_cos+0x140>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	4682      	mov	sl, r0
 800bbac:	468b      	mov	fp, r1
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 fcf5 	bl	80005a0 <__aeabi_dmul>
 800bbb6:	a33e      	add	r3, pc, #248	@ (adr r3, 800bcb0 <__kernel_cos+0x148>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb3a 	bl	8000234 <__adddf3>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f7f4 fcec 	bl	80005a0 <__aeabi_dmul>
 800bbc8:	a33b      	add	r3, pc, #236	@ (adr r3, 800bcb8 <__kernel_cos+0x150>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f7f4 fb2f 	bl	8000230 <__aeabi_dsub>
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	f7f4 fce3 	bl	80005a0 <__aeabi_dmul>
 800bbda:	a339      	add	r3, pc, #228	@ (adr r3, 800bcc0 <__kernel_cos+0x158>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fb28 	bl	8000234 <__adddf3>
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	f7f4 fcda 	bl	80005a0 <__aeabi_dmul>
 800bbec:	a336      	add	r3, pc, #216	@ (adr r3, 800bcc8 <__kernel_cos+0x160>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb1d 	bl	8000230 <__aeabi_dsub>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	f7f4 fcd1 	bl	80005a0 <__aeabi_dmul>
 800bbfe:	a334      	add	r3, pc, #208	@ (adr r3, 800bcd0 <__kernel_cos+0x168>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 fb16 	bl	8000234 <__adddf3>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	f7f4 fcc8 	bl	80005a0 <__aeabi_dmul>
 800bc10:	4622      	mov	r2, r4
 800bc12:	462b      	mov	r3, r5
 800bc14:	f7f4 fcc4 	bl	80005a0 <__aeabi_dmul>
 800bc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	4630      	mov	r0, r6
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 fcbc 	bl	80005a0 <__aeabi_dmul>
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7f4 fafe 	bl	8000230 <__aeabi_dsub>
 800bc34:	4b2b      	ldr	r3, [pc, #172]	@ (800bce4 <__kernel_cos+0x17c>)
 800bc36:	4598      	cmp	r8, r3
 800bc38:	4606      	mov	r6, r0
 800bc3a:	460f      	mov	r7, r1
 800bc3c:	d810      	bhi.n	800bc60 <__kernel_cos+0xf8>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	4650      	mov	r0, sl
 800bc44:	4659      	mov	r1, fp
 800bc46:	f7f4 faf3 	bl	8000230 <__aeabi_dsub>
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4926      	ldr	r1, [pc, #152]	@ (800bce8 <__kernel_cos+0x180>)
 800bc4e:	4602      	mov	r2, r0
 800bc50:	2000      	movs	r0, #0
 800bc52:	f7f4 faed 	bl	8000230 <__aeabi_dsub>
 800bc56:	ec41 0b10 	vmov	d0, r0, r1
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc60:	4b22      	ldr	r3, [pc, #136]	@ (800bcec <__kernel_cos+0x184>)
 800bc62:	4921      	ldr	r1, [pc, #132]	@ (800bce8 <__kernel_cos+0x180>)
 800bc64:	4598      	cmp	r8, r3
 800bc66:	bf8c      	ite	hi
 800bc68:	4d21      	ldrhi	r5, [pc, #132]	@ (800bcf0 <__kernel_cos+0x188>)
 800bc6a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bc6e:	2400      	movs	r4, #0
 800bc70:	4622      	mov	r2, r4
 800bc72:	462b      	mov	r3, r5
 800bc74:	2000      	movs	r0, #0
 800bc76:	f7f4 fadb 	bl	8000230 <__aeabi_dsub>
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	4689      	mov	r9, r1
 800bc80:	462b      	mov	r3, r5
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	f7f4 fad3 	bl	8000230 <__aeabi_dsub>
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	463b      	mov	r3, r7
 800bc8e:	f7f4 facf 	bl	8000230 <__aeabi_dsub>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	e7da      	b.n	800bc52 <__kernel_cos+0xea>
 800bc9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bcd8 <__kernel_cos+0x170>
 800bca0:	e7db      	b.n	800bc5a <__kernel_cos+0xf2>
 800bca2:	bf00      	nop
 800bca4:	f3af 8000 	nop.w
 800bca8:	be8838d4 	.word	0xbe8838d4
 800bcac:	bda8fae9 	.word	0xbda8fae9
 800bcb0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bcb4:	3e21ee9e 	.word	0x3e21ee9e
 800bcb8:	809c52ad 	.word	0x809c52ad
 800bcbc:	3e927e4f 	.word	0x3e927e4f
 800bcc0:	19cb1590 	.word	0x19cb1590
 800bcc4:	3efa01a0 	.word	0x3efa01a0
 800bcc8:	16c15177 	.word	0x16c15177
 800bccc:	3f56c16c 	.word	0x3f56c16c
 800bcd0:	5555554c 	.word	0x5555554c
 800bcd4:	3fa55555 	.word	0x3fa55555
 800bcd8:	00000000 	.word	0x00000000
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	3fe00000 	.word	0x3fe00000
 800bce4:	3fd33332 	.word	0x3fd33332
 800bce8:	3ff00000 	.word	0x3ff00000
 800bcec:	3fe90000 	.word	0x3fe90000
 800bcf0:	3fd20000 	.word	0x3fd20000
 800bcf4:	00000000 	.word	0x00000000

0800bcf8 <__kernel_sin>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	ec55 4b10 	vmov	r4, r5, d0
 800bd00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd04:	b085      	sub	sp, #20
 800bd06:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bd0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bd0e:	4680      	mov	r8, r0
 800bd10:	d205      	bcs.n	800bd1e <__kernel_sin+0x26>
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fedd 	bl	8000ad4 <__aeabi_d2iz>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d052      	beq.n	800bdc4 <__kernel_sin+0xcc>
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	f7f4 fc3b 	bl	80005a0 <__aeabi_dmul>
 800bd2a:	4682      	mov	sl, r0
 800bd2c:	468b      	mov	fp, r1
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 fc33 	bl	80005a0 <__aeabi_dmul>
 800bd3a:	a342      	add	r3, pc, #264	@ (adr r3, 800be44 <__kernel_sin+0x14c>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	e9cd 0100 	strd	r0, r1, [sp]
 800bd44:	4650      	mov	r0, sl
 800bd46:	4659      	mov	r1, fp
 800bd48:	f7f4 fc2a 	bl	80005a0 <__aeabi_dmul>
 800bd4c:	a33f      	add	r3, pc, #252	@ (adr r3, 800be4c <__kernel_sin+0x154>)
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	f7f4 fa6d 	bl	8000230 <__aeabi_dsub>
 800bd56:	4652      	mov	r2, sl
 800bd58:	465b      	mov	r3, fp
 800bd5a:	f7f4 fc21 	bl	80005a0 <__aeabi_dmul>
 800bd5e:	a33d      	add	r3, pc, #244	@ (adr r3, 800be54 <__kernel_sin+0x15c>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f7f4 fa66 	bl	8000234 <__adddf3>
 800bd68:	4652      	mov	r2, sl
 800bd6a:	465b      	mov	r3, fp
 800bd6c:	f7f4 fc18 	bl	80005a0 <__aeabi_dmul>
 800bd70:	a33a      	add	r3, pc, #232	@ (adr r3, 800be5c <__kernel_sin+0x164>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f7f4 fa5b 	bl	8000230 <__aeabi_dsub>
 800bd7a:	4652      	mov	r2, sl
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	f7f4 fc0f 	bl	80005a0 <__aeabi_dmul>
 800bd82:	a338      	add	r3, pc, #224	@ (adr r3, 800be64 <__kernel_sin+0x16c>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa54 	bl	8000234 <__adddf3>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	f1b8 0f00 	cmp.w	r8, #0
 800bd94:	d11b      	bne.n	800bdce <__kernel_sin+0xd6>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4650      	mov	r0, sl
 800bd9c:	4659      	mov	r1, fp
 800bd9e:	f7f4 fbff 	bl	80005a0 <__aeabi_dmul>
 800bda2:	a325      	add	r3, pc, #148	@ (adr r3, 800be38 <__kernel_sin+0x140>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa42 	bl	8000230 <__aeabi_dsub>
 800bdac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb0:	f7f4 fbf6 	bl	80005a0 <__aeabi_dmul>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4620      	mov	r0, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	f7f4 fa3a 	bl	8000234 <__adddf3>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	ec45 4b10 	vmov	d0, r4, r5
 800bdc8:	b005      	add	sp, #20
 800bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd2:	4b1b      	ldr	r3, [pc, #108]	@ (800be40 <__kernel_sin+0x148>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f7f4 fbe3 	bl	80005a0 <__aeabi_dmul>
 800bdda:	4632      	mov	r2, r6
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	463b      	mov	r3, r7
 800bde2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde6:	f7f4 fbdb 	bl	80005a0 <__aeabi_dmul>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	f7f4 fa1d 	bl	8000230 <__aeabi_dsub>
 800bdf6:	4652      	mov	r2, sl
 800bdf8:	465b      	mov	r3, fp
 800bdfa:	f7f4 fbd1 	bl	80005a0 <__aeabi_dmul>
 800bdfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be02:	f7f4 fa15 	bl	8000230 <__aeabi_dsub>
 800be06:	a30c      	add	r3, pc, #48	@ (adr r3, 800be38 <__kernel_sin+0x140>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	4606      	mov	r6, r0
 800be0e:	460f      	mov	r7, r1
 800be10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be14:	f7f4 fbc4 	bl	80005a0 <__aeabi_dmul>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4630      	mov	r0, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fa08 	bl	8000234 <__adddf3>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fa00 	bl	8000230 <__aeabi_dsub>
 800be30:	e7c6      	b.n	800bdc0 <__kernel_sin+0xc8>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	55555549 	.word	0x55555549
 800be3c:	3fc55555 	.word	0x3fc55555
 800be40:	3fe00000 	.word	0x3fe00000
 800be44:	5acfd57c 	.word	0x5acfd57c
 800be48:	3de5d93a 	.word	0x3de5d93a
 800be4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800be50:	3e5ae5e6 	.word	0x3e5ae5e6
 800be54:	57b1fe7d 	.word	0x57b1fe7d
 800be58:	3ec71de3 	.word	0x3ec71de3
 800be5c:	19c161d5 	.word	0x19c161d5
 800be60:	3f2a01a0 	.word	0x3f2a01a0
 800be64:	1110f8a6 	.word	0x1110f8a6
 800be68:	3f811111 	.word	0x3f811111
 800be6c:	00000000 	.word	0x00000000

0800be70 <__ieee754_rem_pio2>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	ec57 6b10 	vmov	r6, r7, d0
 800be78:	4bc5      	ldr	r3, [pc, #788]	@ (800c190 <__ieee754_rem_pio2+0x320>)
 800be7a:	b08d      	sub	sp, #52	@ 0x34
 800be7c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800be80:	4598      	cmp	r8, r3
 800be82:	4604      	mov	r4, r0
 800be84:	9704      	str	r7, [sp, #16]
 800be86:	d807      	bhi.n	800be98 <__ieee754_rem_pio2+0x28>
 800be88:	2200      	movs	r2, #0
 800be8a:	2300      	movs	r3, #0
 800be8c:	ed80 0b00 	vstr	d0, [r0]
 800be90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be94:	2500      	movs	r5, #0
 800be96:	e028      	b.n	800beea <__ieee754_rem_pio2+0x7a>
 800be98:	4bbe      	ldr	r3, [pc, #760]	@ (800c194 <__ieee754_rem_pio2+0x324>)
 800be9a:	4598      	cmp	r8, r3
 800be9c:	d878      	bhi.n	800bf90 <__ieee754_rem_pio2+0x120>
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	4dbd      	ldr	r5, [pc, #756]	@ (800c198 <__ieee754_rem_pio2+0x328>)
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	4630      	mov	r0, r6
 800bea6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4639      	mov	r1, r7
 800beae:	dd38      	ble.n	800bf22 <__ieee754_rem_pio2+0xb2>
 800beb0:	f7f4 f9be 	bl	8000230 <__aeabi_dsub>
 800beb4:	45a8      	cmp	r8, r5
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	d01a      	beq.n	800bef2 <__ieee754_rem_pio2+0x82>
 800bebc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f7f4 f9b5 	bl	8000230 <__aeabi_dsub>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4680      	mov	r8, r0
 800becc:	4689      	mov	r9, r1
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 f9ad 	bl	8000230 <__aeabi_dsub>
 800bed6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	f7f4 f9a8 	bl	8000230 <__aeabi_dsub>
 800bee0:	e9c4 8900 	strd	r8, r9, [r4]
 800bee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bee8:	2501      	movs	r5, #1
 800beea:	4628      	mov	r0, r5
 800beec:	b00d      	add	sp, #52	@ 0x34
 800beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef2:	a39d      	add	r3, pc, #628	@ (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 f99a 	bl	8000230 <__aeabi_dsub>
 800befc:	a39c      	add	r3, pc, #624	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	4606      	mov	r6, r0
 800bf04:	460f      	mov	r7, r1
 800bf06:	f7f4 f993 	bl	8000230 <__aeabi_dsub>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4680      	mov	r8, r0
 800bf10:	4689      	mov	r9, r1
 800bf12:	4630      	mov	r0, r6
 800bf14:	4639      	mov	r1, r7
 800bf16:	f7f4 f98b 	bl	8000230 <__aeabi_dsub>
 800bf1a:	a395      	add	r3, pc, #596	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	e7dc      	b.n	800bedc <__ieee754_rem_pio2+0x6c>
 800bf22:	f7f4 f987 	bl	8000234 <__adddf3>
 800bf26:	45a8      	cmp	r8, r5
 800bf28:	4606      	mov	r6, r0
 800bf2a:	460f      	mov	r7, r1
 800bf2c:	d018      	beq.n	800bf60 <__ieee754_rem_pio2+0xf0>
 800bf2e:	a38c      	add	r3, pc, #560	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	f7f4 f97e 	bl	8000234 <__adddf3>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4689      	mov	r9, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 f974 	bl	8000230 <__aeabi_dsub>
 800bf48:	a385      	add	r3, pc, #532	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 f971 	bl	8000234 <__adddf3>
 800bf52:	f04f 35ff 	mov.w	r5, #4294967295
 800bf56:	e9c4 8900 	strd	r8, r9, [r4]
 800bf5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf5e:	e7c4      	b.n	800beea <__ieee754_rem_pio2+0x7a>
 800bf60:	a381      	add	r3, pc, #516	@ (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 f965 	bl	8000234 <__adddf3>
 800bf6a:	a381      	add	r3, pc, #516	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	4606      	mov	r6, r0
 800bf72:	460f      	mov	r7, r1
 800bf74:	f7f4 f95e 	bl	8000234 <__adddf3>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4689      	mov	r9, r1
 800bf80:	4630      	mov	r0, r6
 800bf82:	4639      	mov	r1, r7
 800bf84:	f7f4 f954 	bl	8000230 <__aeabi_dsub>
 800bf88:	a379      	add	r3, pc, #484	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	e7de      	b.n	800bf4e <__ieee754_rem_pio2+0xde>
 800bf90:	4b82      	ldr	r3, [pc, #520]	@ (800c19c <__ieee754_rem_pio2+0x32c>)
 800bf92:	4598      	cmp	r8, r3
 800bf94:	f200 80d1 	bhi.w	800c13a <__ieee754_rem_pio2+0x2ca>
 800bf98:	f000 f966 	bl	800c268 <fabs>
 800bf9c:	ec57 6b10 	vmov	r6, r7, d0
 800bfa0:	a375      	add	r3, pc, #468	@ (adr r3, 800c178 <__ieee754_rem_pio2+0x308>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	f7f4 faf9 	bl	80005a0 <__aeabi_dmul>
 800bfae:	4b7c      	ldr	r3, [pc, #496]	@ (800c1a0 <__ieee754_rem_pio2+0x330>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f7f4 f93f 	bl	8000234 <__adddf3>
 800bfb6:	f7f4 fd8d 	bl	8000ad4 <__aeabi_d2iz>
 800bfba:	4605      	mov	r5, r0
 800bfbc:	f7f4 fa86 	bl	80004cc <__aeabi_i2d>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfc8:	a363      	add	r3, pc, #396	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 fae7 	bl	80005a0 <__aeabi_dmul>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	4639      	mov	r1, r7
 800bfda:	f7f4 f929 	bl	8000230 <__aeabi_dsub>
 800bfde:	a360      	add	r3, pc, #384	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	4682      	mov	sl, r0
 800bfe6:	468b      	mov	fp, r1
 800bfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfec:	f7f4 fad8 	bl	80005a0 <__aeabi_dmul>
 800bff0:	2d1f      	cmp	r5, #31
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	dc0c      	bgt.n	800c012 <__ieee754_rem_pio2+0x1a2>
 800bff8:	4b6a      	ldr	r3, [pc, #424]	@ (800c1a4 <__ieee754_rem_pio2+0x334>)
 800bffa:	1e6a      	subs	r2, r5, #1
 800bffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c000:	4543      	cmp	r3, r8
 800c002:	d006      	beq.n	800c012 <__ieee754_rem_pio2+0x1a2>
 800c004:	4632      	mov	r2, r6
 800c006:	463b      	mov	r3, r7
 800c008:	4650      	mov	r0, sl
 800c00a:	4659      	mov	r1, fp
 800c00c:	f7f4 f910 	bl	8000230 <__aeabi_dsub>
 800c010:	e00e      	b.n	800c030 <__ieee754_rem_pio2+0x1c0>
 800c012:	463b      	mov	r3, r7
 800c014:	4632      	mov	r2, r6
 800c016:	4650      	mov	r0, sl
 800c018:	4659      	mov	r1, fp
 800c01a:	f7f4 f909 	bl	8000230 <__aeabi_dsub>
 800c01e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c028:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c02c:	2b10      	cmp	r3, #16
 800c02e:	dc02      	bgt.n	800c036 <__ieee754_rem_pio2+0x1c6>
 800c030:	e9c4 0100 	strd	r0, r1, [r4]
 800c034:	e039      	b.n	800c0aa <__ieee754_rem_pio2+0x23a>
 800c036:	a34c      	add	r3, pc, #304	@ (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c040:	f7f4 faae 	bl	80005a0 <__aeabi_dmul>
 800c044:	4606      	mov	r6, r0
 800c046:	460f      	mov	r7, r1
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4650      	mov	r0, sl
 800c04e:	4659      	mov	r1, fp
 800c050:	f7f4 f8ee 	bl	8000230 <__aeabi_dsub>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4680      	mov	r8, r0
 800c05a:	4689      	mov	r9, r1
 800c05c:	4650      	mov	r0, sl
 800c05e:	4659      	mov	r1, fp
 800c060:	f7f4 f8e6 	bl	8000230 <__aeabi_dsub>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	f7f4 f8e2 	bl	8000230 <__aeabi_dsub>
 800c06c:	a340      	add	r3, pc, #256	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07a:	f7f4 fa91 	bl	80005a0 <__aeabi_dmul>
 800c07e:	4632      	mov	r2, r6
 800c080:	463b      	mov	r3, r7
 800c082:	f7f4 f8d5 	bl	8000230 <__aeabi_dsub>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	4640      	mov	r0, r8
 800c090:	4649      	mov	r1, r9
 800c092:	f7f4 f8cd 	bl	8000230 <__aeabi_dsub>
 800c096:	9a05      	ldr	r2, [sp, #20]
 800c098:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	2b31      	cmp	r3, #49	@ 0x31
 800c0a0:	dc20      	bgt.n	800c0e4 <__ieee754_rem_pio2+0x274>
 800c0a2:	e9c4 0100 	strd	r0, r1, [r4]
 800c0a6:	46c2      	mov	sl, r8
 800c0a8:	46cb      	mov	fp, r9
 800c0aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	464b      	mov	r3, r9
 800c0b4:	4659      	mov	r1, fp
 800c0b6:	f7f4 f8bb 	bl	8000230 <__aeabi_dsub>
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	4632      	mov	r2, r6
 800c0be:	f7f4 f8b7 	bl	8000230 <__aeabi_dsub>
 800c0c2:	9b04      	ldr	r3, [sp, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0ca:	f6bf af0e 	bge.w	800beea <__ieee754_rem_pio2+0x7a>
 800c0ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c0d2:	6063      	str	r3, [r4, #4]
 800c0d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0d8:	f8c4 8000 	str.w	r8, [r4]
 800c0dc:	60a0      	str	r0, [r4, #8]
 800c0de:	60e3      	str	r3, [r4, #12]
 800c0e0:	426d      	negs	r5, r5
 800c0e2:	e702      	b.n	800beea <__ieee754_rem_pio2+0x7a>
 800c0e4:	a326      	add	r3, pc, #152	@ (adr r3, 800c180 <__ieee754_rem_pio2+0x310>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ee:	f7f4 fa57 	bl	80005a0 <__aeabi_dmul>
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	460f      	mov	r7, r1
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 f897 	bl	8000230 <__aeabi_dsub>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4682      	mov	sl, r0
 800c108:	468b      	mov	fp, r1
 800c10a:	4640      	mov	r0, r8
 800c10c:	4649      	mov	r1, r9
 800c10e:	f7f4 f88f 	bl	8000230 <__aeabi_dsub>
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	f7f4 f88b 	bl	8000230 <__aeabi_dsub>
 800c11a:	a31b      	add	r3, pc, #108	@ (adr r3, 800c188 <__ieee754_rem_pio2+0x318>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c128:	f7f4 fa3a 	bl	80005a0 <__aeabi_dmul>
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	f7f4 f87e 	bl	8000230 <__aeabi_dsub>
 800c134:	4606      	mov	r6, r0
 800c136:	460f      	mov	r7, r1
 800c138:	e764      	b.n	800c004 <__ieee754_rem_pio2+0x194>
 800c13a:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a8 <__ieee754_rem_pio2+0x338>)
 800c13c:	4598      	cmp	r8, r3
 800c13e:	d935      	bls.n	800c1ac <__ieee754_rem_pio2+0x33c>
 800c140:	4632      	mov	r2, r6
 800c142:	463b      	mov	r3, r7
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 f872 	bl	8000230 <__aeabi_dsub>
 800c14c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c150:	e9c4 0100 	strd	r0, r1, [r4]
 800c154:	e69e      	b.n	800be94 <__ieee754_rem_pio2+0x24>
 800c156:	bf00      	nop
 800c158:	54400000 	.word	0x54400000
 800c15c:	3ff921fb 	.word	0x3ff921fb
 800c160:	1a626331 	.word	0x1a626331
 800c164:	3dd0b461 	.word	0x3dd0b461
 800c168:	1a600000 	.word	0x1a600000
 800c16c:	3dd0b461 	.word	0x3dd0b461
 800c170:	2e037073 	.word	0x2e037073
 800c174:	3ba3198a 	.word	0x3ba3198a
 800c178:	6dc9c883 	.word	0x6dc9c883
 800c17c:	3fe45f30 	.word	0x3fe45f30
 800c180:	2e000000 	.word	0x2e000000
 800c184:	3ba3198a 	.word	0x3ba3198a
 800c188:	252049c1 	.word	0x252049c1
 800c18c:	397b839a 	.word	0x397b839a
 800c190:	3fe921fb 	.word	0x3fe921fb
 800c194:	4002d97b 	.word	0x4002d97b
 800c198:	3ff921fb 	.word	0x3ff921fb
 800c19c:	413921fb 	.word	0x413921fb
 800c1a0:	3fe00000 	.word	0x3fe00000
 800c1a4:	0800cb68 	.word	0x0800cb68
 800c1a8:	7fefffff 	.word	0x7fefffff
 800c1ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c1b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c1b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	f7f4 fc8a 	bl	8000ad4 <__aeabi_d2iz>
 800c1c0:	f7f4 f984 	bl	80004cc <__aeabi_i2d>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1d0:	f7f4 f82e 	bl	8000230 <__aeabi_dsub>
 800c1d4:	4b22      	ldr	r3, [pc, #136]	@ (800c260 <__ieee754_rem_pio2+0x3f0>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f7f4 f9e2 	bl	80005a0 <__aeabi_dmul>
 800c1dc:	460f      	mov	r7, r1
 800c1de:	4606      	mov	r6, r0
 800c1e0:	f7f4 fc78 	bl	8000ad4 <__aeabi_d2iz>
 800c1e4:	f7f4 f972 	bl	80004cc <__aeabi_i2d>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1f4:	f7f4 f81c 	bl	8000230 <__aeabi_dsub>
 800c1f8:	4b19      	ldr	r3, [pc, #100]	@ (800c260 <__ieee754_rem_pio2+0x3f0>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f7f4 f9d0 	bl	80005a0 <__aeabi_dmul>
 800c200:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c204:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c208:	f04f 0803 	mov.w	r8, #3
 800c20c:	2600      	movs	r6, #0
 800c20e:	2700      	movs	r7, #0
 800c210:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	46c2      	mov	sl, r8
 800c21a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c21e:	f7f4 fc27 	bl	8000a70 <__aeabi_dcmpeq>
 800c222:	2800      	cmp	r0, #0
 800c224:	d1f4      	bne.n	800c210 <__ieee754_rem_pio2+0x3a0>
 800c226:	4b0f      	ldr	r3, [pc, #60]	@ (800c264 <__ieee754_rem_pio2+0x3f4>)
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	2302      	movs	r3, #2
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	462a      	mov	r2, r5
 800c230:	4653      	mov	r3, sl
 800c232:	4621      	mov	r1, r4
 800c234:	a806      	add	r0, sp, #24
 800c236:	f000 f81f 	bl	800c278 <__kernel_rem_pio2>
 800c23a:	9b04      	ldr	r3, [sp, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	4605      	mov	r5, r0
 800c240:	f6bf ae53 	bge.w	800beea <__ieee754_rem_pio2+0x7a>
 800c244:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c248:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c24c:	e9c4 2300 	strd	r2, r3, [r4]
 800c250:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c254:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c258:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c25c:	e740      	b.n	800c0e0 <__ieee754_rem_pio2+0x270>
 800c25e:	bf00      	nop
 800c260:	41700000 	.word	0x41700000
 800c264:	0800cbe8 	.word	0x0800cbe8

0800c268 <fabs>:
 800c268:	ec51 0b10 	vmov	r0, r1, d0
 800c26c:	4602      	mov	r2, r0
 800c26e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c272:	ec43 2b10 	vmov	d0, r2, r3
 800c276:	4770      	bx	lr

0800c278 <__kernel_rem_pio2>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	ed2d 8b02 	vpush	{d8}
 800c280:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c284:	f112 0f14 	cmn.w	r2, #20
 800c288:	9306      	str	r3, [sp, #24]
 800c28a:	9104      	str	r1, [sp, #16]
 800c28c:	4bc2      	ldr	r3, [pc, #776]	@ (800c598 <__kernel_rem_pio2+0x320>)
 800c28e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c290:	9008      	str	r0, [sp, #32]
 800c292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	9b06      	ldr	r3, [sp, #24]
 800c29a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c29e:	bfa8      	it	ge
 800c2a0:	1ed4      	subge	r4, r2, #3
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	bfb2      	itee	lt
 800c2a6:	2400      	movlt	r4, #0
 800c2a8:	2318      	movge	r3, #24
 800c2aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800c2ae:	f06f 0317 	mvn.w	r3, #23
 800c2b2:	fb04 3303 	mla	r3, r4, r3, r3
 800c2b6:	eb03 0b02 	add.w	fp, r3, r2
 800c2ba:	9b00      	ldr	r3, [sp, #0]
 800c2bc:	9a05      	ldr	r2, [sp, #20]
 800c2be:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800c588 <__kernel_rem_pio2+0x310>
 800c2c2:	eb03 0802 	add.w	r8, r3, r2
 800c2c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c2c8:	1aa7      	subs	r7, r4, r2
 800c2ca:	ae20      	add	r6, sp, #128	@ 0x80
 800c2cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c2d0:	2500      	movs	r5, #0
 800c2d2:	4545      	cmp	r5, r8
 800c2d4:	dd12      	ble.n	800c2fc <__kernel_rem_pio2+0x84>
 800c2d6:	9b06      	ldr	r3, [sp, #24]
 800c2d8:	aa20      	add	r2, sp, #128	@ 0x80
 800c2da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c2de:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c2e2:	2700      	movs	r7, #0
 800c2e4:	9b00      	ldr	r3, [sp, #0]
 800c2e6:	429f      	cmp	r7, r3
 800c2e8:	dc2e      	bgt.n	800c348 <__kernel_rem_pio2+0xd0>
 800c2ea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800c588 <__kernel_rem_pio2+0x310>
 800c2ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2f6:	46a8      	mov	r8, r5
 800c2f8:	2600      	movs	r6, #0
 800c2fa:	e01b      	b.n	800c334 <__kernel_rem_pio2+0xbc>
 800c2fc:	42ef      	cmn	r7, r5
 800c2fe:	d407      	bmi.n	800c310 <__kernel_rem_pio2+0x98>
 800c300:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c304:	f7f4 f8e2 	bl	80004cc <__aeabi_i2d>
 800c308:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c30c:	3501      	adds	r5, #1
 800c30e:	e7e0      	b.n	800c2d2 <__kernel_rem_pio2+0x5a>
 800c310:	ec51 0b18 	vmov	r0, r1, d8
 800c314:	e7f8      	b.n	800c308 <__kernel_rem_pio2+0x90>
 800c316:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800c31a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c31e:	f7f4 f93f 	bl	80005a0 <__aeabi_dmul>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32a:	f7f3 ff83 	bl	8000234 <__adddf3>
 800c32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c332:	3601      	adds	r6, #1
 800c334:	9b05      	ldr	r3, [sp, #20]
 800c336:	429e      	cmp	r6, r3
 800c338:	dded      	ble.n	800c316 <__kernel_rem_pio2+0x9e>
 800c33a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c33e:	3701      	adds	r7, #1
 800c340:	ecaa 7b02 	vstmia	sl!, {d7}
 800c344:	3508      	adds	r5, #8
 800c346:	e7cd      	b.n	800c2e4 <__kernel_rem_pio2+0x6c>
 800c348:	9b00      	ldr	r3, [sp, #0]
 800c34a:	f8dd 8000 	ldr.w	r8, [sp]
 800c34e:	aa0c      	add	r2, sp, #48	@ 0x30
 800c350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c354:	930a      	str	r3, [sp, #40]	@ 0x28
 800c356:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c358:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c362:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c364:	ab98      	add	r3, sp, #608	@ 0x260
 800c366:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c36a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c36e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c372:	ac0c      	add	r4, sp, #48	@ 0x30
 800c374:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c376:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c37a:	46a1      	mov	r9, r4
 800c37c:	46c2      	mov	sl, r8
 800c37e:	f1ba 0f00 	cmp.w	sl, #0
 800c382:	dc77      	bgt.n	800c474 <__kernel_rem_pio2+0x1fc>
 800c384:	4658      	mov	r0, fp
 800c386:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c38a:	f000 fac5 	bl	800c918 <scalbn>
 800c38e:	ec57 6b10 	vmov	r6, r7, d0
 800c392:	2200      	movs	r2, #0
 800c394:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c398:	4630      	mov	r0, r6
 800c39a:	4639      	mov	r1, r7
 800c39c:	f7f4 f900 	bl	80005a0 <__aeabi_dmul>
 800c3a0:	ec41 0b10 	vmov	d0, r0, r1
 800c3a4:	f000 fb34 	bl	800ca10 <floor>
 800c3a8:	4b7c      	ldr	r3, [pc, #496]	@ (800c59c <__kernel_rem_pio2+0x324>)
 800c3aa:	ec51 0b10 	vmov	r0, r1, d0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f7f4 f8f6 	bl	80005a0 <__aeabi_dmul>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f3 ff38 	bl	8000230 <__aeabi_dsub>
 800c3c0:	460f      	mov	r7, r1
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	f7f4 fb86 	bl	8000ad4 <__aeabi_d2iz>
 800c3c8:	9002      	str	r0, [sp, #8]
 800c3ca:	f7f4 f87f 	bl	80004cc <__aeabi_i2d>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f3 ff2b 	bl	8000230 <__aeabi_dsub>
 800c3da:	f1bb 0f00 	cmp.w	fp, #0
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460f      	mov	r7, r1
 800c3e2:	dd6c      	ble.n	800c4be <__kernel_rem_pio2+0x246>
 800c3e4:	f108 31ff 	add.w	r1, r8, #4294967295
 800c3e8:	ab0c      	add	r3, sp, #48	@ 0x30
 800c3ea:	9d02      	ldr	r5, [sp, #8]
 800c3ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3f0:	f1cb 0018 	rsb	r0, fp, #24
 800c3f4:	fa43 f200 	asr.w	r2, r3, r0
 800c3f8:	4415      	add	r5, r2
 800c3fa:	4082      	lsls	r2, r0
 800c3fc:	1a9b      	subs	r3, r3, r2
 800c3fe:	aa0c      	add	r2, sp, #48	@ 0x30
 800c400:	9502      	str	r5, [sp, #8]
 800c402:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c406:	f1cb 0217 	rsb	r2, fp, #23
 800c40a:	fa43 f902 	asr.w	r9, r3, r2
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	dd64      	ble.n	800c4de <__kernel_rem_pio2+0x266>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	3301      	adds	r3, #1
 800c41a:	9302      	str	r3, [sp, #8]
 800c41c:	4615      	mov	r5, r2
 800c41e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c422:	4590      	cmp	r8, r2
 800c424:	f300 80a1 	bgt.w	800c56a <__kernel_rem_pio2+0x2f2>
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	dd07      	ble.n	800c43e <__kernel_rem_pio2+0x1c6>
 800c42e:	f1bb 0f01 	cmp.w	fp, #1
 800c432:	f000 80c1 	beq.w	800c5b8 <__kernel_rem_pio2+0x340>
 800c436:	f1bb 0f02 	cmp.w	fp, #2
 800c43a:	f000 80c8 	beq.w	800c5ce <__kernel_rem_pio2+0x356>
 800c43e:	f1b9 0f02 	cmp.w	r9, #2
 800c442:	d14c      	bne.n	800c4de <__kernel_rem_pio2+0x266>
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	4955      	ldr	r1, [pc, #340]	@ (800c5a0 <__kernel_rem_pio2+0x328>)
 800c44a:	2000      	movs	r0, #0
 800c44c:	f7f3 fef0 	bl	8000230 <__aeabi_dsub>
 800c450:	4606      	mov	r6, r0
 800c452:	460f      	mov	r7, r1
 800c454:	2d00      	cmp	r5, #0
 800c456:	d042      	beq.n	800c4de <__kernel_rem_pio2+0x266>
 800c458:	4658      	mov	r0, fp
 800c45a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c590 <__kernel_rem_pio2+0x318>
 800c45e:	f000 fa5b 	bl	800c918 <scalbn>
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	ec53 2b10 	vmov	r2, r3, d0
 800c46a:	f7f3 fee1 	bl	8000230 <__aeabi_dsub>
 800c46e:	4606      	mov	r6, r0
 800c470:	460f      	mov	r7, r1
 800c472:	e034      	b.n	800c4de <__kernel_rem_pio2+0x266>
 800c474:	4b4b      	ldr	r3, [pc, #300]	@ (800c5a4 <__kernel_rem_pio2+0x32c>)
 800c476:	2200      	movs	r2, #0
 800c478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c47c:	f7f4 f890 	bl	80005a0 <__aeabi_dmul>
 800c480:	f7f4 fb28 	bl	8000ad4 <__aeabi_d2iz>
 800c484:	f7f4 f822 	bl	80004cc <__aeabi_i2d>
 800c488:	4b47      	ldr	r3, [pc, #284]	@ (800c5a8 <__kernel_rem_pio2+0x330>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	f7f4 f886 	bl	80005a0 <__aeabi_dmul>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c49c:	f7f3 fec8 	bl	8000230 <__aeabi_dsub>
 800c4a0:	f7f4 fb18 	bl	8000ad4 <__aeabi_d2iz>
 800c4a4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c4a8:	f849 0b04 	str.w	r0, [r9], #4
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7f3 fec0 	bl	8000234 <__adddf3>
 800c4b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4bc:	e75f      	b.n	800c37e <__kernel_rem_pio2+0x106>
 800c4be:	d107      	bne.n	800c4d0 <__kernel_rem_pio2+0x258>
 800c4c0:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4c4:	aa0c      	add	r2, sp, #48	@ 0x30
 800c4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c4ce:	e79e      	b.n	800c40e <__kernel_rem_pio2+0x196>
 800c4d0:	4b36      	ldr	r3, [pc, #216]	@ (800c5ac <__kernel_rem_pio2+0x334>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f7f4 faea 	bl	8000aac <__aeabi_dcmpge>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d143      	bne.n	800c564 <__kernel_rem_pio2+0x2ec>
 800c4dc:	4681      	mov	r9, r0
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	f7f4 fac3 	bl	8000a70 <__aeabi_dcmpeq>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f000 80c1 	beq.w	800c672 <__kernel_rem_pio2+0x3fa>
 800c4f0:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	9900      	ldr	r1, [sp, #0]
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	da70      	bge.n	800c5de <__kernel_rem_pio2+0x366>
 800c4fc:	2a00      	cmp	r2, #0
 800c4fe:	f000 808b 	beq.w	800c618 <__kernel_rem_pio2+0x3a0>
 800c502:	f108 38ff 	add.w	r8, r8, #4294967295
 800c506:	ab0c      	add	r3, sp, #48	@ 0x30
 800c508:	f1ab 0b18 	sub.w	fp, fp, #24
 800c50c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0f6      	beq.n	800c502 <__kernel_rem_pio2+0x28a>
 800c514:	4658      	mov	r0, fp
 800c516:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c590 <__kernel_rem_pio2+0x318>
 800c51a:	f000 f9fd 	bl	800c918 <scalbn>
 800c51e:	f108 0301 	add.w	r3, r8, #1
 800c522:	00da      	lsls	r2, r3, #3
 800c524:	9205      	str	r2, [sp, #20]
 800c526:	ec55 4b10 	vmov	r4, r5, d0
 800c52a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c52c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c5a4 <__kernel_rem_pio2+0x32c>
 800c530:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c534:	4646      	mov	r6, r8
 800c536:	f04f 0a00 	mov.w	sl, #0
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	f280 80d1 	bge.w	800c6e2 <__kernel_rem_pio2+0x46a>
 800c540:	4644      	mov	r4, r8
 800c542:	2c00      	cmp	r4, #0
 800c544:	f2c0 80ff 	blt.w	800c746 <__kernel_rem_pio2+0x4ce>
 800c548:	4b19      	ldr	r3, [pc, #100]	@ (800c5b0 <__kernel_rem_pio2+0x338>)
 800c54a:	461f      	mov	r7, r3
 800c54c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c54e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c552:	9306      	str	r3, [sp, #24]
 800c554:	f04f 0a00 	mov.w	sl, #0
 800c558:	f04f 0b00 	mov.w	fp, #0
 800c55c:	2600      	movs	r6, #0
 800c55e:	eba8 0504 	sub.w	r5, r8, r4
 800c562:	e0e4      	b.n	800c72e <__kernel_rem_pio2+0x4b6>
 800c564:	f04f 0902 	mov.w	r9, #2
 800c568:	e754      	b.n	800c414 <__kernel_rem_pio2+0x19c>
 800c56a:	f854 3b04 	ldr.w	r3, [r4], #4
 800c56e:	bb0d      	cbnz	r5, 800c5b4 <__kernel_rem_pio2+0x33c>
 800c570:	b123      	cbz	r3, 800c57c <__kernel_rem_pio2+0x304>
 800c572:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c576:	f844 3c04 	str.w	r3, [r4, #-4]
 800c57a:	2301      	movs	r3, #1
 800c57c:	3201      	adds	r2, #1
 800c57e:	461d      	mov	r5, r3
 800c580:	e74f      	b.n	800c422 <__kernel_rem_pio2+0x1aa>
 800c582:	bf00      	nop
 800c584:	f3af 8000 	nop.w
	...
 800c594:	3ff00000 	.word	0x3ff00000
 800c598:	0800cd30 	.word	0x0800cd30
 800c59c:	40200000 	.word	0x40200000
 800c5a0:	3ff00000 	.word	0x3ff00000
 800c5a4:	3e700000 	.word	0x3e700000
 800c5a8:	41700000 	.word	0x41700000
 800c5ac:	3fe00000 	.word	0x3fe00000
 800c5b0:	0800ccf0 	.word	0x0800ccf0
 800c5b4:	1acb      	subs	r3, r1, r3
 800c5b6:	e7de      	b.n	800c576 <__kernel_rem_pio2+0x2fe>
 800c5b8:	f108 32ff 	add.w	r2, r8, #4294967295
 800c5bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5c6:	a90c      	add	r1, sp, #48	@ 0x30
 800c5c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c5cc:	e737      	b.n	800c43e <__kernel_rem_pio2+0x1c6>
 800c5ce:	f108 32ff 	add.w	r2, r8, #4294967295
 800c5d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5dc:	e7f3      	b.n	800c5c6 <__kernel_rem_pio2+0x34e>
 800c5de:	a90c      	add	r1, sp, #48	@ 0x30
 800c5e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	430a      	orrs	r2, r1
 800c5e8:	e785      	b.n	800c4f6 <__kernel_rem_pio2+0x27e>
 800c5ea:	3401      	adds	r4, #1
 800c5ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	d0fa      	beq.n	800c5ea <__kernel_rem_pio2+0x372>
 800c5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c5fa:	eb0d 0503 	add.w	r5, sp, r3
 800c5fe:	9b06      	ldr	r3, [sp, #24]
 800c600:	aa20      	add	r2, sp, #128	@ 0x80
 800c602:	4443      	add	r3, r8
 800c604:	f108 0701 	add.w	r7, r8, #1
 800c608:	3d98      	subs	r5, #152	@ 0x98
 800c60a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c60e:	4444      	add	r4, r8
 800c610:	42bc      	cmp	r4, r7
 800c612:	da04      	bge.n	800c61e <__kernel_rem_pio2+0x3a6>
 800c614:	46a0      	mov	r8, r4
 800c616:	e6a2      	b.n	800c35e <__kernel_rem_pio2+0xe6>
 800c618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c61a:	2401      	movs	r4, #1
 800c61c:	e7e6      	b.n	800c5ec <__kernel_rem_pio2+0x374>
 800c61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c620:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c624:	f7f3 ff52 	bl	80004cc <__aeabi_i2d>
 800c628:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c8e8 <__kernel_rem_pio2+0x670>
 800c62c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c630:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c638:	46b2      	mov	sl, r6
 800c63a:	f04f 0800 	mov.w	r8, #0
 800c63e:	9b05      	ldr	r3, [sp, #20]
 800c640:	4598      	cmp	r8, r3
 800c642:	dd05      	ble.n	800c650 <__kernel_rem_pio2+0x3d8>
 800c644:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c648:	3701      	adds	r7, #1
 800c64a:	eca5 7b02 	vstmia	r5!, {d7}
 800c64e:	e7df      	b.n	800c610 <__kernel_rem_pio2+0x398>
 800c650:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c654:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c658:	f7f3 ffa2 	bl	80005a0 <__aeabi_dmul>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c664:	f7f3 fde6 	bl	8000234 <__adddf3>
 800c668:	f108 0801 	add.w	r8, r8, #1
 800c66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c670:	e7e5      	b.n	800c63e <__kernel_rem_pio2+0x3c6>
 800c672:	f1cb 0000 	rsb	r0, fp, #0
 800c676:	ec47 6b10 	vmov	d0, r6, r7
 800c67a:	f000 f94d 	bl	800c918 <scalbn>
 800c67e:	ec55 4b10 	vmov	r4, r5, d0
 800c682:	4b9b      	ldr	r3, [pc, #620]	@ (800c8f0 <__kernel_rem_pio2+0x678>)
 800c684:	2200      	movs	r2, #0
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f4 fa0f 	bl	8000aac <__aeabi_dcmpge>
 800c68e:	b300      	cbz	r0, 800c6d2 <__kernel_rem_pio2+0x45a>
 800c690:	4b98      	ldr	r3, [pc, #608]	@ (800c8f4 <__kernel_rem_pio2+0x67c>)
 800c692:	2200      	movs	r2, #0
 800c694:	4620      	mov	r0, r4
 800c696:	4629      	mov	r1, r5
 800c698:	f7f3 ff82 	bl	80005a0 <__aeabi_dmul>
 800c69c:	f7f4 fa1a 	bl	8000ad4 <__aeabi_d2iz>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	f7f3 ff13 	bl	80004cc <__aeabi_i2d>
 800c6a6:	4b92      	ldr	r3, [pc, #584]	@ (800c8f0 <__kernel_rem_pio2+0x678>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f7f3 ff79 	bl	80005a0 <__aeabi_dmul>
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f7f3 fdbb 	bl	8000230 <__aeabi_dsub>
 800c6ba:	f7f4 fa0b 	bl	8000ad4 <__aeabi_d2iz>
 800c6be:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6c0:	f10b 0b18 	add.w	fp, fp, #24
 800c6c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c6c8:	f108 0801 	add.w	r8, r8, #1
 800c6cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c6d0:	e720      	b.n	800c514 <__kernel_rem_pio2+0x29c>
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 f9fd 	bl	8000ad4 <__aeabi_d2iz>
 800c6da:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c6e0:	e718      	b.n	800c514 <__kernel_rem_pio2+0x29c>
 800c6e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c6e8:	f7f3 fef0 	bl	80004cc <__aeabi_i2d>
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	f7f3 ff56 	bl	80005a0 <__aeabi_dmul>
 800c6f4:	4652      	mov	r2, sl
 800c6f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c6fa:	465b      	mov	r3, fp
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	4629      	mov	r1, r5
 800c700:	f7f3 ff4e 	bl	80005a0 <__aeabi_dmul>
 800c704:	3e01      	subs	r6, #1
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	e716      	b.n	800c53a <__kernel_rem_pio2+0x2c2>
 800c70c:	9906      	ldr	r1, [sp, #24]
 800c70e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c712:	9106      	str	r1, [sp, #24]
 800c714:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c718:	f7f3 ff42 	bl	80005a0 <__aeabi_dmul>
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	4650      	mov	r0, sl
 800c722:	4659      	mov	r1, fp
 800c724:	f7f3 fd86 	bl	8000234 <__adddf3>
 800c728:	3601      	adds	r6, #1
 800c72a:	4682      	mov	sl, r0
 800c72c:	468b      	mov	fp, r1
 800c72e:	9b00      	ldr	r3, [sp, #0]
 800c730:	429e      	cmp	r6, r3
 800c732:	dc01      	bgt.n	800c738 <__kernel_rem_pio2+0x4c0>
 800c734:	42ae      	cmp	r6, r5
 800c736:	dde9      	ble.n	800c70c <__kernel_rem_pio2+0x494>
 800c738:	ab48      	add	r3, sp, #288	@ 0x120
 800c73a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c73e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c742:	3c01      	subs	r4, #1
 800c744:	e6fd      	b.n	800c542 <__kernel_rem_pio2+0x2ca>
 800c746:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c748:	2b02      	cmp	r3, #2
 800c74a:	dc0b      	bgt.n	800c764 <__kernel_rem_pio2+0x4ec>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dc35      	bgt.n	800c7bc <__kernel_rem_pio2+0x544>
 800c750:	d059      	beq.n	800c806 <__kernel_rem_pio2+0x58e>
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	f003 0007 	and.w	r0, r3, #7
 800c758:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c75c:	ecbd 8b02 	vpop	{d8}
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c766:	2b03      	cmp	r3, #3
 800c768:	d1f3      	bne.n	800c752 <__kernel_rem_pio2+0x4da>
 800c76a:	9b05      	ldr	r3, [sp, #20]
 800c76c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c770:	eb0d 0403 	add.w	r4, sp, r3
 800c774:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c778:	4625      	mov	r5, r4
 800c77a:	46c2      	mov	sl, r8
 800c77c:	f1ba 0f00 	cmp.w	sl, #0
 800c780:	dc69      	bgt.n	800c856 <__kernel_rem_pio2+0x5de>
 800c782:	4645      	mov	r5, r8
 800c784:	2d01      	cmp	r5, #1
 800c786:	f300 8087 	bgt.w	800c898 <__kernel_rem_pio2+0x620>
 800c78a:	9c05      	ldr	r4, [sp, #20]
 800c78c:	ab48      	add	r3, sp, #288	@ 0x120
 800c78e:	441c      	add	r4, r3
 800c790:	2000      	movs	r0, #0
 800c792:	2100      	movs	r1, #0
 800c794:	f1b8 0f01 	cmp.w	r8, #1
 800c798:	f300 809c 	bgt.w	800c8d4 <__kernel_rem_pio2+0x65c>
 800c79c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c7a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c7a4:	f1b9 0f00 	cmp.w	r9, #0
 800c7a8:	f040 80a6 	bne.w	800c8f8 <__kernel_rem_pio2+0x680>
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	e9c3 5600 	strd	r5, r6, [r3]
 800c7b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c7b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c7ba:	e7ca      	b.n	800c752 <__kernel_rem_pio2+0x4da>
 800c7bc:	9d05      	ldr	r5, [sp, #20]
 800c7be:	ab48      	add	r3, sp, #288	@ 0x120
 800c7c0:	441d      	add	r5, r3
 800c7c2:	4644      	mov	r4, r8
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	2c00      	cmp	r4, #0
 800c7ca:	da35      	bge.n	800c838 <__kernel_rem_pio2+0x5c0>
 800c7cc:	f1b9 0f00 	cmp.w	r9, #0
 800c7d0:	d038      	beq.n	800c844 <__kernel_rem_pio2+0x5cc>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7d8:	9c04      	ldr	r4, [sp, #16]
 800c7da:	e9c4 2300 	strd	r2, r3, [r4]
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c7e6:	f7f3 fd23 	bl	8000230 <__aeabi_dsub>
 800c7ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800c7ec:	2401      	movs	r4, #1
 800c7ee:	45a0      	cmp	r8, r4
 800c7f0:	da2b      	bge.n	800c84a <__kernel_rem_pio2+0x5d2>
 800c7f2:	f1b9 0f00 	cmp.w	r9, #0
 800c7f6:	d002      	beq.n	800c7fe <__kernel_rem_pio2+0x586>
 800c7f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c804:	e7a5      	b.n	800c752 <__kernel_rem_pio2+0x4da>
 800c806:	9c05      	ldr	r4, [sp, #20]
 800c808:	ab48      	add	r3, sp, #288	@ 0x120
 800c80a:	441c      	add	r4, r3
 800c80c:	2000      	movs	r0, #0
 800c80e:	2100      	movs	r1, #0
 800c810:	f1b8 0f00 	cmp.w	r8, #0
 800c814:	da09      	bge.n	800c82a <__kernel_rem_pio2+0x5b2>
 800c816:	f1b9 0f00 	cmp.w	r9, #0
 800c81a:	d002      	beq.n	800c822 <__kernel_rem_pio2+0x5aa>
 800c81c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c820:	4619      	mov	r1, r3
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	e9c3 0100 	strd	r0, r1, [r3]
 800c828:	e793      	b.n	800c752 <__kernel_rem_pio2+0x4da>
 800c82a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c82e:	f7f3 fd01 	bl	8000234 <__adddf3>
 800c832:	f108 38ff 	add.w	r8, r8, #4294967295
 800c836:	e7eb      	b.n	800c810 <__kernel_rem_pio2+0x598>
 800c838:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c83c:	f7f3 fcfa 	bl	8000234 <__adddf3>
 800c840:	3c01      	subs	r4, #1
 800c842:	e7c1      	b.n	800c7c8 <__kernel_rem_pio2+0x550>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	e7c6      	b.n	800c7d8 <__kernel_rem_pio2+0x560>
 800c84a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c84e:	f7f3 fcf1 	bl	8000234 <__adddf3>
 800c852:	3401      	adds	r4, #1
 800c854:	e7cb      	b.n	800c7ee <__kernel_rem_pio2+0x576>
 800c856:	ed35 7b02 	vldmdb	r5!, {d7}
 800c85a:	ed8d 7b00 	vstr	d7, [sp]
 800c85e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c862:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c866:	ec53 2b17 	vmov	r2, r3, d7
 800c86a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c86e:	f7f3 fce1 	bl	8000234 <__adddf3>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c87e:	f7f3 fcd7 	bl	8000230 <__aeabi_dsub>
 800c882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c886:	f7f3 fcd5 	bl	8000234 <__adddf3>
 800c88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c88e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c892:	e9c5 6700 	strd	r6, r7, [r5]
 800c896:	e771      	b.n	800c77c <__kernel_rem_pio2+0x504>
 800c898:	ed34 7b02 	vldmdb	r4!, {d7}
 800c89c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c8a0:	ec51 0b17 	vmov	r0, r1, d7
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	465b      	mov	r3, fp
 800c8a8:	ed8d 7b00 	vstr	d7, [sp]
 800c8ac:	f7f3 fcc2 	bl	8000234 <__adddf3>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8bc:	f7f3 fcb8 	bl	8000230 <__aeabi_dsub>
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	465b      	mov	r3, fp
 800c8c4:	f7f3 fcb6 	bl	8000234 <__adddf3>
 800c8c8:	3d01      	subs	r5, #1
 800c8ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8ce:	e9c4 6700 	strd	r6, r7, [r4]
 800c8d2:	e757      	b.n	800c784 <__kernel_rem_pio2+0x50c>
 800c8d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8d8:	f7f3 fcac 	bl	8000234 <__adddf3>
 800c8dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8e0:	e758      	b.n	800c794 <__kernel_rem_pio2+0x51c>
 800c8e2:	bf00      	nop
 800c8e4:	f3af 8000 	nop.w
	...
 800c8f0:	41700000 	.word	0x41700000
 800c8f4:	3e700000 	.word	0x3e700000
 800c8f8:	9b04      	ldr	r3, [sp, #16]
 800c8fa:	9a04      	ldr	r2, [sp, #16]
 800c8fc:	601d      	str	r5, [r3, #0]
 800c8fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c902:	605c      	str	r4, [r3, #4]
 800c904:	609f      	str	r7, [r3, #8]
 800c906:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c90a:	60d3      	str	r3, [r2, #12]
 800c90c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c910:	6110      	str	r0, [r2, #16]
 800c912:	6153      	str	r3, [r2, #20]
 800c914:	e71d      	b.n	800c752 <__kernel_rem_pio2+0x4da>
 800c916:	bf00      	nop

0800c918 <scalbn>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	ec55 4b10 	vmov	r4, r5, d0
 800c91e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c922:	4606      	mov	r6, r0
 800c924:	462b      	mov	r3, r5
 800c926:	b991      	cbnz	r1, 800c94e <scalbn+0x36>
 800c928:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c92c:	4323      	orrs	r3, r4
 800c92e:	d03b      	beq.n	800c9a8 <scalbn+0x90>
 800c930:	4b33      	ldr	r3, [pc, #204]	@ (800ca00 <scalbn+0xe8>)
 800c932:	4620      	mov	r0, r4
 800c934:	4629      	mov	r1, r5
 800c936:	2200      	movs	r2, #0
 800c938:	f7f3 fe32 	bl	80005a0 <__aeabi_dmul>
 800c93c:	4b31      	ldr	r3, [pc, #196]	@ (800ca04 <scalbn+0xec>)
 800c93e:	429e      	cmp	r6, r3
 800c940:	4604      	mov	r4, r0
 800c942:	460d      	mov	r5, r1
 800c944:	da0f      	bge.n	800c966 <scalbn+0x4e>
 800c946:	a326      	add	r3, pc, #152	@ (adr r3, 800c9e0 <scalbn+0xc8>)
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	e01e      	b.n	800c98c <scalbn+0x74>
 800c94e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c952:	4291      	cmp	r1, r2
 800c954:	d10b      	bne.n	800c96e <scalbn+0x56>
 800c956:	4622      	mov	r2, r4
 800c958:	4620      	mov	r0, r4
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f3 fc6a 	bl	8000234 <__adddf3>
 800c960:	4604      	mov	r4, r0
 800c962:	460d      	mov	r5, r1
 800c964:	e020      	b.n	800c9a8 <scalbn+0x90>
 800c966:	460b      	mov	r3, r1
 800c968:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c96c:	3936      	subs	r1, #54	@ 0x36
 800c96e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c972:	4296      	cmp	r6, r2
 800c974:	dd0d      	ble.n	800c992 <scalbn+0x7a>
 800c976:	2d00      	cmp	r5, #0
 800c978:	a11b      	add	r1, pc, #108	@ (adr r1, 800c9e8 <scalbn+0xd0>)
 800c97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97e:	da02      	bge.n	800c986 <scalbn+0x6e>
 800c980:	a11b      	add	r1, pc, #108	@ (adr r1, 800c9f0 <scalbn+0xd8>)
 800c982:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c986:	a318      	add	r3, pc, #96	@ (adr r3, 800c9e8 <scalbn+0xd0>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	f7f3 fe08 	bl	80005a0 <__aeabi_dmul>
 800c990:	e7e6      	b.n	800c960 <scalbn+0x48>
 800c992:	1872      	adds	r2, r6, r1
 800c994:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c998:	428a      	cmp	r2, r1
 800c99a:	dcec      	bgt.n	800c976 <scalbn+0x5e>
 800c99c:	2a00      	cmp	r2, #0
 800c99e:	dd06      	ble.n	800c9ae <scalbn+0x96>
 800c9a0:	f36f 531e 	bfc	r3, #20, #11
 800c9a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9a8:	ec45 4b10 	vmov	d0, r4, r5
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
 800c9ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c9b2:	da08      	bge.n	800c9c6 <scalbn+0xae>
 800c9b4:	2d00      	cmp	r5, #0
 800c9b6:	a10a      	add	r1, pc, #40	@ (adr r1, 800c9e0 <scalbn+0xc8>)
 800c9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9bc:	dac3      	bge.n	800c946 <scalbn+0x2e>
 800c9be:	a10e      	add	r1, pc, #56	@ (adr r1, 800c9f8 <scalbn+0xe0>)
 800c9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c4:	e7bf      	b.n	800c946 <scalbn+0x2e>
 800c9c6:	3236      	adds	r2, #54	@ 0x36
 800c9c8:	f36f 531e 	bfc	r3, #20, #11
 800c9cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800ca08 <scalbn+0xf0>)
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	e7d8      	b.n	800c98c <scalbn+0x74>
 800c9da:	bf00      	nop
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	c2f8f359 	.word	0xc2f8f359
 800c9e4:	01a56e1f 	.word	0x01a56e1f
 800c9e8:	8800759c 	.word	0x8800759c
 800c9ec:	7e37e43c 	.word	0x7e37e43c
 800c9f0:	8800759c 	.word	0x8800759c
 800c9f4:	fe37e43c 	.word	0xfe37e43c
 800c9f8:	c2f8f359 	.word	0xc2f8f359
 800c9fc:	81a56e1f 	.word	0x81a56e1f
 800ca00:	43500000 	.word	0x43500000
 800ca04:	ffff3cb0 	.word	0xffff3cb0
 800ca08:	3c900000 	.word	0x3c900000
 800ca0c:	00000000 	.word	0x00000000

0800ca10 <floor>:
 800ca10:	ec51 0b10 	vmov	r0, r1, d0
 800ca14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ca20:	2e13      	cmp	r6, #19
 800ca22:	460c      	mov	r4, r1
 800ca24:	4605      	mov	r5, r0
 800ca26:	4680      	mov	r8, r0
 800ca28:	dc34      	bgt.n	800ca94 <floor+0x84>
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	da17      	bge.n	800ca5e <floor+0x4e>
 800ca2e:	a332      	add	r3, pc, #200	@ (adr r3, 800caf8 <floor+0xe8>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 fbfe 	bl	8000234 <__adddf3>
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f7f4 f840 	bl	8000ac0 <__aeabi_dcmpgt>
 800ca40:	b150      	cbz	r0, 800ca58 <floor+0x48>
 800ca42:	2c00      	cmp	r4, #0
 800ca44:	da55      	bge.n	800caf2 <floor+0xe2>
 800ca46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ca4a:	432c      	orrs	r4, r5
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	42ac      	cmp	r4, r5
 800ca50:	4c2b      	ldr	r4, [pc, #172]	@ (800cb00 <floor+0xf0>)
 800ca52:	bf08      	it	eq
 800ca54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ca58:	4621      	mov	r1, r4
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	e023      	b.n	800caa6 <floor+0x96>
 800ca5e:	4f29      	ldr	r7, [pc, #164]	@ (800cb04 <floor+0xf4>)
 800ca60:	4137      	asrs	r7, r6
 800ca62:	ea01 0307 	and.w	r3, r1, r7
 800ca66:	4303      	orrs	r3, r0
 800ca68:	d01d      	beq.n	800caa6 <floor+0x96>
 800ca6a:	a323      	add	r3, pc, #140	@ (adr r3, 800caf8 <floor+0xe8>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f7f3 fbe0 	bl	8000234 <__adddf3>
 800ca74:	2200      	movs	r2, #0
 800ca76:	2300      	movs	r3, #0
 800ca78:	f7f4 f822 	bl	8000ac0 <__aeabi_dcmpgt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d0eb      	beq.n	800ca58 <floor+0x48>
 800ca80:	2c00      	cmp	r4, #0
 800ca82:	bfbe      	ittt	lt
 800ca84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ca88:	4133      	asrlt	r3, r6
 800ca8a:	18e4      	addlt	r4, r4, r3
 800ca8c:	ea24 0407 	bic.w	r4, r4, r7
 800ca90:	2500      	movs	r5, #0
 800ca92:	e7e1      	b.n	800ca58 <floor+0x48>
 800ca94:	2e33      	cmp	r6, #51	@ 0x33
 800ca96:	dd0a      	ble.n	800caae <floor+0x9e>
 800ca98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ca9c:	d103      	bne.n	800caa6 <floor+0x96>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	f7f3 fbc7 	bl	8000234 <__adddf3>
 800caa6:	ec41 0b10 	vmov	d0, r0, r1
 800caaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cab2:	f04f 37ff 	mov.w	r7, #4294967295
 800cab6:	40df      	lsrs	r7, r3
 800cab8:	4207      	tst	r7, r0
 800caba:	d0f4      	beq.n	800caa6 <floor+0x96>
 800cabc:	a30e      	add	r3, pc, #56	@ (adr r3, 800caf8 <floor+0xe8>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	f7f3 fbb7 	bl	8000234 <__adddf3>
 800cac6:	2200      	movs	r2, #0
 800cac8:	2300      	movs	r3, #0
 800caca:	f7f3 fff9 	bl	8000ac0 <__aeabi_dcmpgt>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0c2      	beq.n	800ca58 <floor+0x48>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	da0a      	bge.n	800caec <floor+0xdc>
 800cad6:	2e14      	cmp	r6, #20
 800cad8:	d101      	bne.n	800cade <floor+0xce>
 800cada:	3401      	adds	r4, #1
 800cadc:	e006      	b.n	800caec <floor+0xdc>
 800cade:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cae2:	2301      	movs	r3, #1
 800cae4:	40b3      	lsls	r3, r6
 800cae6:	441d      	add	r5, r3
 800cae8:	4545      	cmp	r5, r8
 800caea:	d3f6      	bcc.n	800cada <floor+0xca>
 800caec:	ea25 0507 	bic.w	r5, r5, r7
 800caf0:	e7b2      	b.n	800ca58 <floor+0x48>
 800caf2:	2500      	movs	r5, #0
 800caf4:	462c      	mov	r4, r5
 800caf6:	e7af      	b.n	800ca58 <floor+0x48>
 800caf8:	8800759c 	.word	0x8800759c
 800cafc:	7e37e43c 	.word	0x7e37e43c
 800cb00:	bff00000 	.word	0xbff00000
 800cb04:	000fffff 	.word	0x000fffff

0800cb08 <_init>:
 800cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0a:	bf00      	nop
 800cb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0e:	bc08      	pop	{r3}
 800cb10:	469e      	mov	lr, r3
 800cb12:	4770      	bx	lr

0800cb14 <_fini>:
 800cb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb16:	bf00      	nop
 800cb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1a:	bc08      	pop	{r3}
 800cb1c:	469e      	mov	lr, r3
 800cb1e:	4770      	bx	lr
