
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c544  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800c71c  0800c71c  0000d71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c764  0800c764  0000e00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c764  0800c764  0000d764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c76c  0800c76c  0000e00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c76c  0800c76c  0000d76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c770  0800c770  0000d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800c774  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  0800c780  0000e00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800c780  0000e620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cdf  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af4  00000000  00000000  00031d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00035810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e5  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e82f  00000000  00000000  00038e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022080  00000000  00000000  000676bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b915  00000000  00000000  0008973c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d5051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008740  00000000  00000000  001d5094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001dd7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c704 	.word	0x0800c704

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800c704 	.word	0x0800c704

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b988 	b.w	8000550 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	468e      	mov	lr, r1
 8000260:	4604      	mov	r4, r0
 8000262:	4688      	mov	r8, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d962      	bls.n	8000334 <__udivmoddi4+0xdc>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	b14e      	cbz	r6, 8000288 <__udivmoddi4+0x30>
 8000274:	f1c6 0320 	rsb	r3, r6, #32
 8000278:	fa01 f806 	lsl.w	r8, r1, r6
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	40b7      	lsls	r7, r6
 8000282:	ea43 0808 	orr.w	r8, r3, r8
 8000286:	40b4      	lsls	r4, r6
 8000288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fbb8 f1fe 	udiv	r1, r8, lr
 8000294:	0c23      	lsrs	r3, r4, #16
 8000296:	fb0e 8811 	mls	r8, lr, r1, r8
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	fb01 f20c 	mul.w	r2, r1, ip
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002ac:	f080 80ea 	bcs.w	8000484 <__udivmoddi4+0x22c>
 80002b0:	429a      	cmp	r2, r3
 80002b2:	f240 80e7 	bls.w	8000484 <__udivmoddi4+0x22c>
 80002b6:	3902      	subs	r1, #2
 80002b8:	443b      	add	r3, r7
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	b2a3      	uxth	r3, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ce:	459c      	cmp	ip, r3
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x8e>
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 80d6 	bcs.w	8000488 <__udivmoddi4+0x230>
 80002dc:	459c      	cmp	ip, r3
 80002de:	f240 80d3 	bls.w	8000488 <__udivmoddi4+0x230>
 80002e2:	443b      	add	r3, r7
 80002e4:	3802      	subs	r0, #2
 80002e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ea:	eba3 030c 	sub.w	r3, r3, ip
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40f3      	lsrs	r3, r6
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xb6>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb0>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa2>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x14c>
 8000316:	4573      	cmp	r3, lr
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xc8>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 8105 	bhi.w	800052a <__udivmoddi4+0x2d2>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb6e 0203 	sbc.w	r2, lr, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4690      	mov	r8, r2
 800032a:	2d00      	cmp	r5, #0
 800032c:	d0e5      	beq.n	80002fa <__udivmoddi4+0xa2>
 800032e:	e9c5 4800 	strd	r4, r8, [r5]
 8000332:	e7e2      	b.n	80002fa <__udivmoddi4+0xa2>
 8000334:	2a00      	cmp	r2, #0
 8000336:	f000 8090 	beq.w	800045a <__udivmoddi4+0x202>
 800033a:	fab2 f682 	clz	r6, r2
 800033e:	2e00      	cmp	r6, #0
 8000340:	f040 80a4 	bne.w	800048c <__udivmoddi4+0x234>
 8000344:	1a8a      	subs	r2, r1, r2
 8000346:	0c03      	lsrs	r3, r0, #16
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	b280      	uxth	r0, r0
 800034e:	b2bc      	uxth	r4, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 fcfe 	udiv	ip, r2, lr
 8000356:	fb0e 221c 	mls	r2, lr, ip, r2
 800035a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035e:	fb04 f20c 	mul.w	r2, r4, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x11e>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f10c 38ff 	add.w	r8, ip, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x11c>
 800036e:	429a      	cmp	r2, r3
 8000370:	f200 80e0 	bhi.w	8000534 <__udivmoddi4+0x2dc>
 8000374:	46c4      	mov	ip, r8
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	fbb3 f2fe 	udiv	r2, r3, lr
 800037c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	fb02 f404 	mul.w	r4, r2, r4
 8000388:	429c      	cmp	r4, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x144>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x142>
 8000394:	429c      	cmp	r4, r3
 8000396:	f200 80ca 	bhi.w	800052e <__udivmoddi4+0x2d6>
 800039a:	4602      	mov	r2, r0
 800039c:	1b1b      	subs	r3, r3, r4
 800039e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x98>
 80003a4:	f1c1 0620 	rsb	r6, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 f706 	lsr.w	r7, r2, r6
 80003ae:	431f      	orrs	r7, r3
 80003b0:	fa0e f401 	lsl.w	r4, lr, r1
 80003b4:	fa20 f306 	lsr.w	r3, r0, r6
 80003b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	fa1f fc87 	uxth.w	ip, r7
 80003ca:	fbbe f0f9 	udiv	r0, lr, r9
 80003ce:	0c1c      	lsrs	r4, r3, #16
 80003d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003dc:	45a6      	cmp	lr, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x1a0>
 80003e4:	193c      	adds	r4, r7, r4
 80003e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ea:	f080 809c 	bcs.w	8000526 <__udivmoddi4+0x2ce>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f240 8099 	bls.w	8000526 <__udivmoddi4+0x2ce>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	eba4 040e 	sub.w	r4, r4, lr
 80003fc:	fa1f fe83 	uxth.w	lr, r3
 8000400:	fbb4 f3f9 	udiv	r3, r4, r9
 8000404:	fb09 4413 	mls	r4, r9, r3, r4
 8000408:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800040c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000410:	45a4      	cmp	ip, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1ce>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f103 3eff 	add.w	lr, r3, #4294967295
 800041a:	f080 8082 	bcs.w	8000522 <__udivmoddi4+0x2ca>
 800041e:	45a4      	cmp	ip, r4
 8000420:	d97f      	bls.n	8000522 <__udivmoddi4+0x2ca>
 8000422:	3b02      	subs	r3, #2
 8000424:	443c      	add	r4, r7
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000432:	4564      	cmp	r4, ip
 8000434:	4673      	mov	r3, lr
 8000436:	46e1      	mov	r9, ip
 8000438:	d362      	bcc.n	8000500 <__udivmoddi4+0x2a8>
 800043a:	d05f      	beq.n	80004fc <__udivmoddi4+0x2a4>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x1fe>
 800043e:	ebb8 0203 	subs.w	r2, r8, r3
 8000442:	eb64 0409 	sbc.w	r4, r4, r9
 8000446:	fa04 f606 	lsl.w	r6, r4, r6
 800044a:	fa22 f301 	lsr.w	r3, r2, r1
 800044e:	431e      	orrs	r6, r3
 8000450:	40cc      	lsrs	r4, r1
 8000452:	e9c5 6400 	strd	r6, r4, [r5]
 8000456:	2100      	movs	r1, #0
 8000458:	e74f      	b.n	80002fa <__udivmoddi4+0xa2>
 800045a:	fbb1 fcf2 	udiv	ip, r1, r2
 800045e:	0c01      	lsrs	r1, r0, #16
 8000460:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046a:	463b      	mov	r3, r7
 800046c:	4638      	mov	r0, r7
 800046e:	463c      	mov	r4, r7
 8000470:	46b8      	mov	r8, r7
 8000472:	46be      	mov	lr, r7
 8000474:	2620      	movs	r6, #32
 8000476:	fbb1 f1f7 	udiv	r1, r1, r7
 800047a:	eba2 0208 	sub.w	r2, r2, r8
 800047e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000482:	e766      	b.n	8000352 <__udivmoddi4+0xfa>
 8000484:	4601      	mov	r1, r0
 8000486:	e718      	b.n	80002ba <__udivmoddi4+0x62>
 8000488:	4610      	mov	r0, r2
 800048a:	e72c      	b.n	80002e6 <__udivmoddi4+0x8e>
 800048c:	f1c6 0220 	rsb	r2, r6, #32
 8000490:	fa2e f302 	lsr.w	r3, lr, r2
 8000494:	40b7      	lsls	r7, r6
 8000496:	40b1      	lsls	r1, r6
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a0:	430a      	orrs	r2, r1
 80004a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb08 f904 	mul.w	r9, r8, r4
 80004b6:	40b0      	lsls	r0, r6
 80004b8:	4589      	cmp	r9, r1
 80004ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004be:	b280      	uxth	r0, r0
 80004c0:	d93e      	bls.n	8000540 <__udivmoddi4+0x2e8>
 80004c2:	1879      	adds	r1, r7, r1
 80004c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c8:	d201      	bcs.n	80004ce <__udivmoddi4+0x276>
 80004ca:	4589      	cmp	r9, r1
 80004cc:	d81f      	bhi.n	800050e <__udivmoddi4+0x2b6>
 80004ce:	eba1 0109 	sub.w	r1, r1, r9
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fb09 f804 	mul.w	r8, r9, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	b292      	uxth	r2, r2
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	4542      	cmp	r2, r8
 80004e6:	d229      	bcs.n	800053c <__udivmoddi4+0x2e4>
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ee:	d2c4      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d2c2      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f4:	f1a9 0102 	sub.w	r1, r9, #2
 80004f8:	443a      	add	r2, r7
 80004fa:	e7be      	b.n	800047a <__udivmoddi4+0x222>
 80004fc:	45f0      	cmp	r8, lr
 80004fe:	d29d      	bcs.n	800043c <__udivmoddi4+0x1e4>
 8000500:	ebbe 0302 	subs.w	r3, lr, r2
 8000504:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000508:	3801      	subs	r0, #1
 800050a:	46e1      	mov	r9, ip
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1e4>
 800050e:	eba7 0909 	sub.w	r9, r7, r9
 8000512:	4449      	add	r1, r9
 8000514:	f1a8 0c02 	sub.w	ip, r8, #2
 8000518:	fbb1 f9fe 	udiv	r9, r1, lr
 800051c:	fb09 f804 	mul.w	r8, r9, r4
 8000520:	e7db      	b.n	80004da <__udivmoddi4+0x282>
 8000522:	4673      	mov	r3, lr
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1ce>
 8000526:	4650      	mov	r0, sl
 8000528:	e766      	b.n	80003f8 <__udivmoddi4+0x1a0>
 800052a:	4608      	mov	r0, r1
 800052c:	e6fd      	b.n	800032a <__udivmoddi4+0xd2>
 800052e:	443b      	add	r3, r7
 8000530:	3a02      	subs	r2, #2
 8000532:	e733      	b.n	800039c <__udivmoddi4+0x144>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	443b      	add	r3, r7
 800053a:	e71c      	b.n	8000376 <__udivmoddi4+0x11e>
 800053c:	4649      	mov	r1, r9
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x222>
 8000540:	eba1 0109 	sub.w	r1, r1, r9
 8000544:	46c4      	mov	ip, r8
 8000546:	fbb1 f9fe 	udiv	r9, r1, lr
 800054a:	fb09 f804 	mul.w	r8, r9, r4
 800054e:	e7c4      	b.n	80004da <__udivmoddi4+0x282>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	@ (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	@ (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fa3a 	bl	8001a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8f3 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fd4d 	bl	8001060 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f93d 	bl	8000844 <MX_ADC1_Init>
  MX_COMP2_Init();
 80005ca:	f000 f9b3 	bl	8000934 <MX_COMP2_Init>
  MX_COMP3_Init();
 80005ce:	f000 f9d7 	bl	8000980 <MX_COMP3_Init>
  MX_COMP4_Init();
 80005d2:	f000 f9fb 	bl	80009cc <MX_COMP4_Init>
  MX_COMP6_Init();
 80005d6:	f000 fa1f 	bl	8000a18 <MX_COMP6_Init>
  MX_DAC1_Init();
 80005da:	f000 fa43 	bl	8000a64 <MX_DAC1_Init>
  MX_DAC2_Init();
 80005de:	f000 fa7b 	bl	8000ad8 <MX_DAC2_Init>
  MX_DAC3_Init();
 80005e2:	f000 fab3 	bl	8000b4c <MX_DAC3_Init>
  MX_HRTIM1_Init();
 80005e6:	f000 faf5 	bl	8000bd4 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 80005ea:	f000 fc97 	bl	8000f1c <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 fcc3 	bl	8000f78 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005f2:	f000 fd0d 	bl	8001010 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80005f6:	f000 fbfd 	bl	8000df4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005fa:	2108      	movs	r1, #8
 80005fc:	4863      	ldr	r0, [pc, #396]	@ (800078c <main+0x1d8>)
 80005fe:	f007 fd37 	bl	8008070 <HAL_TIM_PWM_Start>
  // HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

  char msg[] = "MEOW!\r\n";
 8000602:	4a63      	ldr	r2, [pc, #396]	@ (8000790 <main+0x1dc>)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060c:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg, strlen(msg));
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdff 	bl	8000218 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	485b      	ldr	r0, [pc, #364]	@ (8000794 <main+0x1e0>)
 8000626:	f008 fde9 	bl	80091fc <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 10000);  // HAL_MAX_DELAY
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdf2 	bl	8000218 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	f107 010c 	add.w	r1, r7, #12
 800063c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000640:	4854      	ldr	r0, [pc, #336]	@ (8000794 <main+0x1e0>)
 8000642:	f008 fcb9 	bl	8008fb8 <HAL_UART_Transmit>

  uint8_t transmitBuffer[4];
  uint8_t receiveBuffer[4];

  for (unsigned char i = 0; i < 4; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	75fb      	strb	r3, [r7, #23]
 800064a:	e010      	b.n	800066e <main+0xba>
   {
           transmitBuffer[i] = i + 1;
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	7dfa      	ldrb	r2, [r7, #23]
 8000650:	3201      	adds	r2, #1
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	3318      	adds	r3, #24
 8000656:	443b      	add	r3, r7
 8000658:	f803 2c10 	strb.w	r2, [r3, #-16]
           receiveBuffer[i] = 0;
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	3318      	adds	r3, #24
 8000660:	443b      	add	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (unsigned char i = 0; i < 4; i++)
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	3301      	adds	r3, #1
 800066c:	75fb      	strb	r3, [r7, #23]
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d9eb      	bls.n	800064c <main+0x98>
   }

   HAL_UART_Receive_IT(&huart3, receiveBuffer, 4);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2204      	movs	r2, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4846      	ldr	r0, [pc, #280]	@ (8000794 <main+0x1e0>)
 800067c:	f008 fdbe 	bl	80091fc <HAL_UART_Receive_IT>
   HAL_UART_Transmit_IT(&huart3, transmitBuffer, 4);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2204      	movs	r2, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4842      	ldr	r0, [pc, #264]	@ (8000794 <main+0x1e0>)
 800068a:	f008 fd23 	bl	80090d4 <HAL_UART_Transmit_IT>

  HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f001 fa40 	bl	8001b14 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(pwm_value == 0) step = 1;
 8000694:	4b40      	ldr	r3, [pc, #256]	@ (8000798 <main+0x1e4>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <main+0xee>
 800069c:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <main+0x1e8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
    if(pwm_value == 50) step = -1;
 80006a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000798 <main+0x1e4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b32      	cmp	r3, #50	@ 0x32
 80006a8:	d102      	bne.n	80006b0 <main+0xfc>
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <main+0x1e8>)
 80006ac:	22ff      	movs	r2, #255	@ 0xff
 80006ae:	701a      	strb	r2, [r3, #0]
	pwm_value += step;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <main+0x1e8>)
 80006b2:	f993 3000 	ldrsb.w	r3, [r3]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b37      	ldr	r3, [pc, #220]	@ (8000798 <main+0x1e4>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <main+0x1e4>)
 80006c2:	801a      	strh	r2, [r3, #0]
	setPWM(pwm_value);
 80006c4:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <main+0x1e4>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd9d 	bl	8001208 <setPWM>
	// HAL_Delay(5);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f003 fe60 	bl	800439c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f003 fe59 	bl	800439c <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 80006ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ee:	482c      	ldr	r0, [pc, #176]	@ (80007a0 <main+0x1ec>)
 80006f0:	f003 fe3c 	bl	800436c <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d105      	bne.n	8000706 <main+0x152>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2120      	movs	r1, #32
 80006fe:	4828      	ldr	r0, [pc, #160]	@ (80007a0 <main+0x1ec>)
 8000700:	f003 fe4c 	bl	800439c <HAL_GPIO_WritePin>
 8000704:	e004      	b.n	8000710 <main+0x15c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <main+0x1ec>)
 800070c:	f003 fe46 	bl	800439c <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 8000710:	2120      	movs	r1, #32
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <main+0x1f0>)
 8000714:	f003 fe2a 	bl	800436c <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d107      	bne.n	800072e <main+0x17a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f003 fe38 	bl	800439c <HAL_GPIO_WritePin>
 800072c:	e006      	b.n	800073c <main+0x188>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000738:	f003 fe30 	bl	800439c <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 800073c:	2110      	movs	r1, #16
 800073e:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <main+0x1f0>)
 8000740:	f003 fe14 	bl	800436c <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d105      	bne.n	8000756 <main+0x1a2>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2102      	movs	r1, #2
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <main+0x1ec>)
 8000750:	f003 fe24 	bl	800439c <HAL_GPIO_WritePin>
 8000754:	e004      	b.n	8000760 <main+0x1ac>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <main+0x1ec>)
 800075c:	f003 fe1e 	bl	800439c <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8000760:	2104      	movs	r1, #4
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <main+0x1ec>)
 8000764:	f003 fe02 	bl	800436c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d105      	bne.n	800077a <main+0x1c6>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <main+0x1ec>)
 8000774:	f003 fe12 	bl	800439c <HAL_GPIO_WritePin>
 8000778:	e004      	b.n	8000784 <main+0x1d0>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <main+0x1ec>)
 8000780:	f003 fe0c 	bl	800439c <HAL_GPIO_WritePin>
	}
	    HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	@ 0x64
 8000786:	f001 f9c5 	bl	8001b14 <HAL_Delay>
	if(pwm_value == 0) step = 1;
 800078a:	e783      	b.n	8000694 <main+0xe0>
 800078c:	2000025c 	.word	0x2000025c
 8000790:	0800c71c 	.word	0x0800c71c
 8000794:	200002a8 	.word	0x200002a8
 8000798:	20000618 	.word	0x20000618
 800079c:	2000061a 	.word	0x2000061a
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2238      	movs	r2, #56	@ 0x38
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b ff78 	bl	800c6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f006 fbc8 	bl	8006f60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80007d0:	2322      	movs	r3, #34	@ 0x22
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2340      	movs	r3, #64	@ 0x40
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ee:	2355      	movs	r3, #85	@ 0x55
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80007f2:	2308      	movs	r3, #8
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80007f6:	2308      	movs	r3, #8
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fc60 	bl	80070c8 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800080e:	f000 fd2d 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2303      	movs	r3, #3
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f006 ff5e 	bl	80076ec <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000836:	f000 fd19 	bl	800126c <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f00b ff25 	bl	800c6ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000862:	4b32      	ldr	r3, [pc, #200]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000864:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_ADC1_Init+0xe8>)
 800086c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_ADC1_Init+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_ADC1_Init+0xe8>)
 800088c:	2204      	movs	r2, #4
 800088e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_ADC1_Init+0xe8>)
 800089e:	2201      	movs	r2, #1
 80008a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	4817      	ldr	r0, [pc, #92]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008ce:	f001 fb5b 	bl	8001f88 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008d8:	f000 fcc8 	bl	800126c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008e8:	f002 fc20 	bl	800312c <HAL_ADCEx_MultiModeConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008f2:	f000 fcbb 	bl	800126c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_ADC1_Init+0xec>)
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2306      	movs	r3, #6
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000902:	237f      	movs	r3, #127	@ 0x7f
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000914:	f001 ff72 	bl	80027fc <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800091e:	f000 fca5 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	@ 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028
 8000930:	21800100 	.word	0x21800100

08000934 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_COMP2_Init+0x44>)
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <MX_COMP2_Init+0x48>)
 800093c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_COMP2_Init+0x44>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_COMP2_Init+0x44>)
 8000946:	2240      	movs	r2, #64	@ 0x40
 8000948:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_COMP2_Init+0x44>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_COMP2_Init+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_COMP2_Init+0x44>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_COMP2_Init+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_COMP2_Init+0x44>)
 8000964:	f002 fe3a 	bl	80035dc <HAL_COMP_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 800096e:	f000 fc7d 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000094 	.word	0x20000094
 800097c:	40010204 	.word	0x40010204

08000980 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_COMP3_Init+0x44>)
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <MX_COMP3_Init+0x48>)
 8000988:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_COMP3_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_COMP3_Init+0x44>)
 8000992:	2240      	movs	r2, #64	@ 0x40
 8000994:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_COMP3_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_COMP3_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_COMP3_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_COMP3_Init+0x44>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_COMP3_Init+0x44>)
 80009b0:	f002 fe14 	bl	80035dc <HAL_COMP_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 80009ba:	f000 fc57 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000b8 	.word	0x200000b8
 80009c8:	40010208 	.word	0x40010208

080009cc <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <MX_COMP4_Init+0x48>)
 80009d4:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009de:	2250      	movs	r2, #80	@ 0x50
 80009e0:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_COMP4_Init+0x44>)
 80009fc:	f002 fdee 	bl	80035dc <HAL_COMP_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8000a06:	f000 fc31 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000dc 	.word	0x200000dc
 8000a14:	4001020c 	.word	0x4001020c

08000a18 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <MX_COMP6_Init+0x48>)
 8000a20:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a2a:	2250      	movs	r2, #80	@ 0x50
 8000a2c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_COMP6_Init+0x44>)
 8000a48:	f002 fdc8 	bl	80035dc <HAL_COMP_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000a52:	f000 fc0b 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000100 	.word	0x20000100
 8000a60:	40010214 	.word	0x40010214

08000a64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2230      	movs	r2, #48	@ 0x30
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00b fe1b 	bl	800c6ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_DAC1_Init+0x6c>)
 8000a78:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <MX_DAC1_Init+0x70>)
 8000a7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_DAC1_Init+0x6c>)
 8000a7e:	f003 f856 	bl	8003b2e <HAL_DAC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a88:	f000 fbf0 	bl	800126c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_DAC1_Init+0x6c>)
 8000ab8:	f003 f85c 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ac2:	f000 fbd3 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000124 	.word	0x20000124
 8000ad4:	50000800 	.word	0x50000800

08000ad8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2230      	movs	r2, #48	@ 0x30
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b fde1 	bl	800c6ac <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_DAC2_Init+0x6c>)
 8000aec:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <MX_DAC2_Init+0x70>)
 8000aee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000af0:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <MX_DAC2_Init+0x6c>)
 8000af2:	f003 f81c 	bl	8003b2e <HAL_DAC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000afc:	f000 fbb6 	bl	800126c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b00:	2302      	movs	r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <MX_DAC2_Init+0x6c>)
 8000b2c:	f003 f822 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000b36:	f000 fb99 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	@ 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000138 	.word	0x20000138
 8000b48:	50000c00 	.word	0x50000c00

08000b4c <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2230      	movs	r2, #48	@ 0x30
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00b fda7 	bl	800c6ac <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_DAC3_Init+0x80>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <MX_DAC3_Init+0x84>)
 8000b62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000b64:	4819      	ldr	r0, [pc, #100]	@ (8000bcc <MX_DAC3_Init+0x80>)
 8000b66:	f002 ffe2 	bl	8003b2e <HAL_DAC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000b70:	f000 fb7c 	bl	800126c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b74:	2302      	movs	r3, #2
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <MX_DAC3_Init+0x80>)
 8000ba0:	f002 ffe8 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 fb5f 	bl	800126c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_DAC3_Init+0x80>)
 8000bb6:	f002 ffdd 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000bc0:	f000 fb54 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	@ 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000014c 	.word	0x2000014c
 8000bd0:	50001000 	.word	0x50001000

08000bd4 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0ac      	sub	sp, #176	@ 0xb0
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000bda:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000be8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	2260      	movs	r2, #96	@ 0x60
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00b fd51 	bl	800c6ac <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00b fd4b 	bl	800c6ac <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000c16:	4b75      	ldr	r3, [pc, #468]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c18:	4a75      	ldr	r2, [pc, #468]	@ (8000df0 <MX_HRTIM1_Init+0x21c>)
 8000c1a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000c1c:	4b73      	ldr	r3, [pc, #460]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000c22:	4b72      	ldr	r3, [pc, #456]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000c28:	4870      	ldr	r0, [pc, #448]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c2a:	f003 fbf3 	bl	8004414 <HAL_HRTIM_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000c34:	f000 fb1a 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000c38:	210c      	movs	r1, #12
 8000c3a:	486c      	ldr	r0, [pc, #432]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c3c:	f003 fcba 	bl	80045b4 <HAL_HRTIM_DLLCalibrationStart>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000c46:	f000 fb11 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000c4a:	210a      	movs	r1, #10
 8000c4c:	4867      	ldr	r0, [pc, #412]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c4e:	f003 fd09 	bl	8004664 <HAL_HRTIM_PollForDLLCalibration>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000c58:	f000 fb08 	bl	800126c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000c5c:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000c70:	2308      	movs	r3, #8
 8000c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000c76:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	485b      	ldr	r0, [pc, #364]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000c80:	f003 fd24 	bl	80046cc <HAL_HRTIM_TimeBaseConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000c8a:	f000 faef 	bl	800126c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000c9a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4852      	ldr	r0, [pc, #328]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000ca4:	f003 fdc7 	bl	8004836 <HAL_HRTIM_WaveformTimerControl>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000cae:	f000 fadd 	bl	800126c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000d06:	2300      	movs	r3, #0
 8000d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	461a      	mov	r2, r3
 8000d16:	2104      	movs	r1, #4
 8000d18:	4834      	ldr	r0, [pc, #208]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000d1a:	f003 fcff 	bl	800471c <HAL_HRTIM_WaveformTimerConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000d24:	f000 faa2 	bl	800126c <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	461a      	mov	r2, r3
 8000d32:	2105      	movs	r1, #5
 8000d34:	482d      	ldr	r0, [pc, #180]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000d36:	f003 fcf1 	bl	800471c <HAL_HRTIM_WaveformTimerConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 8000d40:	f000 fa94 	bl	800126c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	481f      	ldr	r0, [pc, #124]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000d6e:	f003 fd95 	bl	800489c <HAL_HRTIM_WaveformOutputConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 8000d78:	f000 fa78 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d82:	2105      	movs	r1, #5
 8000d84:	4819      	ldr	r0, [pc, #100]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000d86:	f003 fd89 	bl	800489c <HAL_HRTIM_WaveformOutputConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8000d90:	f000 fa6c 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8000d94:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	4813      	ldr	r0, [pc, #76]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000d9e:	f003 fc95 	bl	80046cc <HAL_HRTIM_TimeBaseConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8000da8:	f000 fa60 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8000dac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000db0:	461a      	mov	r2, r3
 8000db2:	2105      	movs	r1, #5
 8000db4:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000db6:	f003 fd3e 	bl	8004836 <HAL_HRTIM_WaveformTimerControl>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 8000dc0:	f000 fa54 	bl	800126c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dca:	2105      	movs	r1, #5
 8000dcc:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000dce:	f003 fd65 	bl	800489c <HAL_HRTIM_WaveformOutputConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8000dd8:	f000 fa48 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_HRTIM1_Init+0x218>)
 8000dde:	f000 fbf1 	bl	80015c4 <HAL_HRTIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	37b0      	adds	r7, #176	@ 0xb0
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000160 	.word	0x20000160
 8000df0:	40016800 	.word	0x40016800

08000df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b098      	sub	sp, #96	@ 0x60
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2234      	movs	r2, #52	@ 0x34
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00b fc43 	bl	800c6ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e28:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <MX_TIM1_Init+0x124>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e2e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e3c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e54:	482f      	ldr	r0, [pc, #188]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e56:	f007 f8b3 	bl	8007fc0 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 fa04 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e74:	4619      	mov	r1, r3
 8000e76:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000e78:	f007 ff24 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e82:	f000 f9f3 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	@ 0x60
 8000e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481a      	ldr	r0, [pc, #104]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000eac:	f007 f9f2 	bl	8008294 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000eb6:	f000 f9d9 	bl	800126c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000ef8:	f007 ff7a 	bl	8008df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f02:	f000 f9b3 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f06:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <MX_TIM1_Init+0x120>)
 8000f08:	f000 fc02 	bl	8001710 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3760      	adds	r7, #96	@ 0x60
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000025c 	.word	0x2000025c
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f36:	f7ff fb25 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f7ff fb0a 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000f40:	2310      	movs	r3, #16
 8000f42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <MX_UCPD1_Init+0x58>)
 8000f52:	f00a fca2 	bl	800b89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000f56:	2340      	movs	r3, #64	@ 0x40
 8000f58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <MX_UCPD1_Init+0x58>)
 8000f68:	f00a fc97 	bl	800b89a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400

08000f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <MX_USART3_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fc2:	f007 ffa9 	bl	8008f18 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 f94e 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fd4:	f00a fa4b 	bl	800b46e <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 f945 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000fe6:	f00a fa80 	bl	800b4ea <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f93c 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_USART3_UART_Init+0x90>)
 8000ff6:	f00a fa01 	bl	800b3fc <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f934 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002a8 	.word	0x200002a8
 800100c:	40004800 	.word	0x40004800

08001010 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001016:	4a11      	ldr	r2, [pc, #68]	@ (800105c <MX_USB_PCD_Init+0x4c>)
 8001018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 800101c:	2208      	movs	r2, #8
 800101e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001022:	2202      	movs	r2, #2
 8001024:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001028:	2202      	movs	r2, #2
 800102a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 800102e:	2200      	movs	r2, #0
 8001030:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001034:	2200      	movs	r2, #0
 8001036:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 800103a:	2200      	movs	r2, #0
 800103c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001040:	2200      	movs	r2, #0
 8001042:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_USB_PCD_Init+0x48>)
 8001046:	f004 fc65 	bl	8005914 <HAL_PCD_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001050:	f000 f90c 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000033c 	.word	0x2000033c
 800105c:	40005c00 	.word	0x40005c00

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <MX_GPIO_Init+0x198>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <MX_GPIO_Init+0x198>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <MX_GPIO_Init+0x198>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b5a      	ldr	r3, [pc, #360]	@ (80011f8 <MX_GPIO_Init+0x198>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a59      	ldr	r2, [pc, #356]	@ (80011f8 <MX_GPIO_Init+0x198>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b57      	ldr	r3, [pc, #348]	@ (80011f8 <MX_GPIO_Init+0x198>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a53      	ldr	r2, [pc, #332]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b4e      	ldr	r3, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a4d      	ldr	r2, [pc, #308]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b4b      	ldr	r3, [pc, #300]	@ (80011f8 <MX_GPIO_Init+0x198>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f24c 0108 	movw	r1, #49160	@ 0xc008
 80010dc:	4847      	ldr	r0, [pc, #284]	@ (80011fc <MX_GPIO_Init+0x19c>)
 80010de:	f003 f95d 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	21a2      	movs	r1, #162	@ 0xa2
 80010e6:	4846      	ldr	r0, [pc, #280]	@ (8001200 <MX_GPIO_Init+0x1a0>)
 80010e8:	f003 f958 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f6:	f003 f951 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	4841      	ldr	r0, [pc, #260]	@ (8001204 <MX_GPIO_Init+0x1a4>)
 8001100:	f003 f94c 	bl	800439c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 8001104:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4837      	ldr	r0, [pc, #220]	@ (80011fc <MX_GPIO_Init+0x19c>)
 800111e:	f002 ffa3 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001122:	2330      	movs	r3, #48	@ 0x30
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001126:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4831      	ldr	r0, [pc, #196]	@ (80011fc <MX_GPIO_Init+0x19c>)
 8001138:	f002 ff96 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 800113c:	23a2      	movs	r3, #162	@ 0xa2
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	482b      	ldr	r0, [pc, #172]	@ (8001200 <MX_GPIO_Init+0x1a0>)
 8001154:	f002 ff88 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001158:	f240 4304 	movw	r3, #1028	@ 0x404
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4824      	ldr	r0, [pc, #144]	@ (8001200 <MX_GPIO_Init+0x1a0>)
 8001170:	f002 ff7a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001174:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f002 ff6a 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001194:	2304      	movs	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4816      	ldr	r0, [pc, #88]	@ (8001204 <MX_GPIO_Init+0x1a4>)
 80011ac:	f002 ff5c 	bl	8004068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2008      	movs	r0, #8
 80011b6:	f002 fc86 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ba:	2008      	movs	r0, #8
 80011bc:	f002 fc9d 	bl	8003afa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	200a      	movs	r0, #10
 80011c6:	f002 fc7e 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 fc95 	bl	8003afa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2017      	movs	r0, #23
 80011d6:	f002 fc76 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011da:	2017      	movs	r0, #23
 80011dc:	f002 fc8d 	bl	8003afa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2028      	movs	r0, #40	@ 0x28
 80011e6:	f002 fc6e 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ea:	2028      	movs	r0, #40	@ 0x28
 80011ec:	f002 fc85 	bl	8003afa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000400 	.word	0x48000400
 8001204:	48000c00 	.word	0x48000c00

08001208 <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(uint16_t value)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001212:	2360      	movs	r3, #96	@ 0x60
 8001214:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3); // таймер №1, канал №3
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <setPWM+0x38>)
 800122c:	f007 f832 	bl	8008294 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001230:	2108      	movs	r1, #8
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <setPWM+0x38>)
 8001234:	f006 ff1c 	bl	8008070 <HAL_TIM_PWM_Start>
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000025c 	.word	0x2000025c

08001244 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
    // USART1 завершил прием данных
  }
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
    // USART2 завершил отправку данных
  }
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <Error_Handler+0x8>

08001278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_MspInit+0x44>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_MspInit+0x44>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6613      	str	r3, [r2, #96]	@ 0x60
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_MspInit+0x44>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_MspInit+0x44>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ae:	f005 fefb 	bl	80070a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a0      	sub	sp, #128	@ 0x80
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2254      	movs	r2, #84	@ 0x54
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00b f9e3 	bl	800c6ac <memset>
  if(hadc->Instance==ADC1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ee:	d154      	bne.n	800139a <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fc0f 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800130c:	f7ff ffae 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 8001316:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800131a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131c:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_ADC_MspInit+0xe4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001358:	2304      	movs	r3, #4
 800135a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	2303      	movs	r3, #3
 800135e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001368:	4619      	mov	r1, r3
 800136a:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <HAL_ADC_MspInit+0xe8>)
 800136c:	f002 fe7c 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCKBOOST_VIN_Pin|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001370:	230e      	movs	r3, #14
 8001372:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2303      	movs	r3, #3
 8001376:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f002 fe6f 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2012      	movs	r0, #18
 8001390:	f002 fb99 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001394:	2012      	movs	r0, #18
 8001396:	f002 fbb0 	bl	8003afa <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3780      	adds	r7, #128	@ 0x80
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800

080013ac <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a3d      	ldr	r2, [pc, #244]	@ (80014c0 <HAL_COMP_MspInit+0x114>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d119      	bne.n	8001402 <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a3c      	ldr	r2, [pc, #240]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fc:	f002 fe34 	bl	8004068 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001400:	e05a      	b.n	80014b8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <HAL_COMP_MspInit+0x11c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d119      	bne.n	8001440 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001410:	4a2c      	ldr	r2, [pc, #176]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001418:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f002 fe15 	bl	8004068 <HAL_GPIO_Init>
}
 800143e:	e03b      	b.n	80014b8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a21      	ldr	r2, [pc, #132]	@ (80014cc <HAL_COMP_MspInit+0x120>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d118      	bne.n	800147c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4816      	ldr	r0, [pc, #88]	@ (80014d0 <HAL_COMP_MspInit+0x124>)
 8001476:	f002 fdf7 	bl	8004068 <HAL_GPIO_Init>
}
 800147a:	e01d      	b.n	80014b8 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <HAL_COMP_MspInit+0x128>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d118      	bne.n	80014b8 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_COMP_MspInit+0x118>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 800149e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <HAL_COMP_MspInit+0x124>)
 80014b4:	f002 fdd8 	bl	8004068 <HAL_GPIO_Init>
}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	@ 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010204 	.word	0x40010204
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010208 	.word	0x40010208
 80014cc:	4001020c 	.word	0x4001020c
 80014d0:	48000400 	.word	0x48000400
 80014d4:	40010214 	.word	0x40010214

080014d8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_DAC_MspInit+0x80>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10c      	bne.n	8001504 <HAL_DAC_MspInit+0x2c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <HAL_DAC_MspInit+0x84>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_DAC_MspInit+0x84>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_DAC_MspInit+0x84>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001502:	e022      	b.n	800154a <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <HAL_DAC_MspInit+0x88>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10c      	bne.n	8001528 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_DAC_MspInit+0x84>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <HAL_DAC_MspInit+0x84>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_DAC_MspInit+0x84>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
}
 8001526:	e010      	b.n	800154a <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_DAC_MspInit+0x8c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10b      	bne.n	800154a <HAL_DAC_MspInit+0x72>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_DAC_MspInit+0x84>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_DAC_MspInit+0x84>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_DAC_MspInit+0x84>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	50000800 	.word	0x50000800
 800155c:	40021000 	.word	0x40021000
 8001560:	50000c00 	.word	0x50000c00
 8001564:	50001000 	.word	0x50001000

08001568 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <HAL_HRTIM_MspInit+0x54>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d11b      	bne.n	80015b2 <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_HRTIM_MspInit+0x58>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_HRTIM_MspInit+0x58>)
 8001580:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001584:	6613      	str	r3, [r2, #96]	@ 0x60
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_HRTIM_MspInit+0x58>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2043      	movs	r0, #67	@ 0x43
 8001598:	f002 fa95 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 800159c:	2043      	movs	r0, #67	@ 0x43
 800159e:	f002 faac 	bl	8003afa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	204a      	movs	r0, #74	@ 0x4a
 80015a8:	f002 fa8d 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 80015ac:	204a      	movs	r0, #74	@ 0x4a
 80015ae:	f002 faa4 	bl	8003afa <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40016800 	.word	0x40016800
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a37      	ldr	r2, [pc, #220]	@ (80016c0 <HAL_HRTIM_MspPostInit+0xfc>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d167      	bne.n	80016b6 <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a36      	ldr	r2, [pc, #216]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	4a30      	ldr	r2, [pc, #192]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160a:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a2a      	ldr	r2, [pc, #168]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <HAL_HRTIM_MspPostInit+0x100>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 800162e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001640:	230d      	movs	r3, #13
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	481f      	ldr	r0, [pc, #124]	@ (80016c8 <HAL_HRTIM_MspPostInit+0x104>)
 800164c:	f002 fd0c 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 8001650:	23c0      	movs	r3, #192	@ 0xc0
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001660:	230d      	movs	r3, #13
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4818      	ldr	r0, [pc, #96]	@ (80016cc <HAL_HRTIM_MspPostInit+0x108>)
 800166c:	f002 fcfc 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 8001670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001682:	2303      	movs	r3, #3
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480f      	ldr	r0, [pc, #60]	@ (80016cc <HAL_HRTIM_MspPostInit+0x108>)
 800168e:	f002 fceb 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8001692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80016a4:	230d      	movs	r3, #13
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f002 fcd9 	bl	8004068 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40016800 	.word	0x40016800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000400 	.word	0x48000400
 80016cc:	48000800 	.word	0x48000800

080016d0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <HAL_TIM_PWM_MspInit+0x38>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_TIM_PWM_MspInit+0x3c>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_TIM_PWM_MspInit+0x3c>)
 80016e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_TIM_PWM_MspInit+0x3c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <HAL_TIM_MspPostInit+0x68>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d11d      	bne.n	800176e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_TIM_MspPostInit+0x6c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a11      	ldr	r2, [pc, #68]	@ (800177c <HAL_TIM_MspPostInit+0x6c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_TIM_MspPostInit+0x6c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800175c:	2306      	movs	r3, #6
 800175e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176a:	f002 fc7d 	bl	8004068 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b09e      	sub	sp, #120	@ 0x78
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2254      	movs	r2, #84	@ 0x54
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00a ff83 	bl	800c6ac <memset>
  if(huart->Instance==USART3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_UART_MspInit+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13e      	bne.n	800182e <HAL_UART_MspInit+0xae>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b0:	2304      	movs	r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 f9b1 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff fd50 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80017fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001800:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800180a:	2301      	movs	r3, #1
 800180c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800180e:	2307      	movs	r3, #7
 8001810:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <HAL_UART_MspInit+0xc0>)
 800181a:	f002 fc25 	bl	8004068 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2027      	movs	r0, #39	@ 0x27
 8001824:	f002 f94f 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001828:	2027      	movs	r0, #39	@ 0x27
 800182a:	f002 f966 	bl	8003afa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800182e:	bf00      	nop
 8001830:	3778      	adds	r7, #120	@ 0x78
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004800 	.word	0x40004800
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800

08001844 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b098      	sub	sp, #96	@ 0x60
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2254      	movs	r2, #84	@ 0x54
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00a ff29 	bl	800c6ac <memset>
  if(hpcd->Instance==USB)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a15      	ldr	r2, [pc, #84]	@ (80018b4 <HAL_PCD_MspInit+0x70>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d122      	bne.n	80018aa <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800186a:	2300      	movs	r3, #0
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4618      	mov	r0, r3
 8001874:	f006 f956 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800187e:	f7ff fcf5 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_PCD_MspInit+0x74>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_PCD_MspInit+0x74>)
 8001888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800188c:	6593      	str	r3, [r2, #88]	@ 0x58
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_PCD_MspInit+0x74>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2013      	movs	r0, #19
 80018a0:	f002 f911 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80018a4:	2013      	movs	r0, #19
 80018a6:	f002 f928 	bl	8003afa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3760      	adds	r7, #96	@ 0x60
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40005c00 	.word	0x40005c00
 80018b8:	40021000 	.word	0x40021000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f8e1 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 800191e:	2004      	movs	r0, #4
 8001920:	f002 fd54 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 800192c:	2010      	movs	r0, #16
 800192e:	f002 fd4d 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <ADC1_2_IRQHandler+0x10>)
 800193e:	f000 fcdf 	bl	8002300 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000028 	.word	0x20000028

0800194c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <USB_HP_IRQHandler+0x10>)
 8001952:	f004 f8ad 	bl	8005ab0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000033c 	.word	0x2000033c

08001960 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 8001964:	2020      	movs	r0, #32
 8001966:	f002 fd31 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <USART3_IRQHandler+0x10>)
 8001976:	f007 fc8d 	bl	8009294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002a8 	.word	0x200002a8

08001984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 8001988:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800198c:	f002 fd1e 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8001998:	2106      	movs	r1, #6
 800199a:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <HRTIM1_Master_IRQHandler+0x10>)
 800199c:	f002 ffaf 	bl	80048fe <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
 }
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000160 	.word	0x20000160

080019a8 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 80019ac:	2105      	movs	r1, #5
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <HRTIM1_TIMF_IRQHandler+0x10>)
 80019b0:	f002 ffa5 	bl	80048fe <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000160 	.word	0x20000160

080019bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <LoopForever+0xe>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <LoopForever+0x16>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f00a fe55 	bl	800c6bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a12:	f7fe fdcf 	bl	80005b4 <main>

08001a16 <LoopForever>:

LoopForever:
    b LoopForever
 8001a16:	e7fe      	b.n	8001a16 <LoopForever>
  ldr   r0, =_estack
 8001a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a24:	0800c774 	.word	0x0800c774
  ldr r2, =_sbss
 8001a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a2c:	20000620 	.word	0x20000620

08001a30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC3_IRQHandler>

08001a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f002 f837 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f80e 	bl	8001a64 <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	e001      	b.n	8001a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a54:	f7ff fc10 	bl	8001278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a58:	79fb      	ldrb	r3, [r7, #7]

}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <HAL_InitTick+0x68>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d022      	beq.n	8001abe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_InitTick+0x6c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_InitTick+0x68>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 f842 	bl	8003b16 <HAL_SYSTICK_Config>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10f      	bne.n	8001ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	d809      	bhi.n	8001ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	f002 f80e 	bl	8003ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_InitTick+0x70>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e004      	b.n	8001ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_IncTick+0x1c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a03      	ldr	r2, [pc, #12]	@ (8001af4 <HAL_IncTick+0x1c>)
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	2000061c 	.word	0x2000061c
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000061c 	.word	0x2000061c

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d004      	beq.n	8001b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_Delay+0x40>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b38:	bf00      	nop
 8001b3a:	f7ff ffdf 	bl	8001afc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d8f7      	bhi.n	8001b3a <HAL_Delay+0x26>
  {
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008

08001b58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3360      	adds	r3, #96	@ 0x60
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <LL_ADC_SetOffset+0x44>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	03fff000 	.word	0x03fff000

08001c08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3360      	adds	r3, #96	@ 0x60
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3360      	adds	r3, #96	@ 0x60
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b087      	sub	sp, #28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3360      	adds	r3, #96	@ 0x60
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	@ 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	615a      	str	r2, [r3, #20]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3330      	adds	r3, #48	@ 0x30
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	211f      	movs	r1, #31
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	f003 011f 	and.w	r1, r3, #31
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3314      	adds	r3, #20
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0e5b      	lsrs	r3, r3, #25
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0d1b      	lsrs	r3, r3, #20
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2107      	movs	r1, #7
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0d1b      	lsrs	r3, r3, #20
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0318 	and.w	r3, r3, #24
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	400b      	ands	r3, r1
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0007ffff 	.word	0x0007ffff

08001e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6093      	str	r3, [r2, #8]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eb0:	d101      	bne.n	8001eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <LL_ADC_IsEnabled+0x18>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_ADC_IsEnabled+0x1a>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1a9      	b.n	80022f6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff f985 	bl	80012c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff67 	bl	8001e9c <LL_ADC_IsDeepPowerDownEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff4d 	bl	8001e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff82 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff66 	bl	8001ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff8:	4b9c      	ldr	r3, [pc, #624]	@ (800226c <HAL_ADC_Init+0x2e4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	4a9c      	ldr	r2, [pc, #624]	@ (8002270 <HAL_ADC_Init+0x2e8>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800200c:	e002      	b.n	8002014 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3b01      	subs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff64 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff75 	bl	8001f3a <LL_ADC_REG_IsConversionOngoing>
 8002050:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8142 	bne.w	80022e4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 813e 	bne.w	80022e4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff49 	bl	8001f14 <LL_ADC_IsEnabled>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d141      	bne.n	800210c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002090:	d004      	beq.n	800209c <HAL_ADC_Init+0x114>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_ADC_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d10f      	bne.n	80020bc <HAL_ADC_Init+0x134>
 800209c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020a0:	f7ff ff38 	bl	8001f14 <LL_ADC_IsEnabled>
 80020a4:	4604      	mov	r4, r0
 80020a6:	4873      	ldr	r0, [pc, #460]	@ (8002274 <HAL_ADC_Init+0x2ec>)
 80020a8:	f7ff ff34 	bl	8001f14 <LL_ADC_IsEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4323      	orrs	r3, r4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e012      	b.n	80020e2 <HAL_ADC_Init+0x15a>
 80020bc:	486e      	ldr	r0, [pc, #440]	@ (8002278 <HAL_ADC_Init+0x2f0>)
 80020be:	f7ff ff29 	bl	8001f14 <LL_ADC_IsEnabled>
 80020c2:	4604      	mov	r4, r0
 80020c4:	486d      	ldr	r0, [pc, #436]	@ (800227c <HAL_ADC_Init+0x2f4>)
 80020c6:	f7ff ff25 	bl	8001f14 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	431c      	orrs	r4, r3
 80020ce:	486c      	ldr	r0, [pc, #432]	@ (8002280 <HAL_ADC_Init+0x2f8>)
 80020d0:	f7ff ff20 	bl	8001f14 <LL_ADC_IsEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4323      	orrs	r3, r4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_Init+0x172>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002274 <HAL_ADC_Init+0x2ec>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x176>
 80020fa:	4a62      	ldr	r2, [pc, #392]	@ (8002284 <HAL_ADC_Init+0x2fc>)
 80020fc:	e000      	b.n	8002100 <HAL_ADC_Init+0x178>
 80020fe:	4a62      	ldr	r2, [pc, #392]	@ (8002288 <HAL_ADC_Init+0x300>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f7ff fd26 	bl	8001b58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7f5b      	ldrb	r3, [r3, #29]
 8002110:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002116:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800211c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002122:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800212a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002136:	2b01      	cmp	r3, #1
 8002138:	d106      	bne.n	8002148 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	045b      	lsls	r3, r3, #17
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b48      	ldr	r3, [pc, #288]	@ (800228c <HAL_ADC_Init+0x304>)
 800216c:	4013      	ands	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	430b      	orrs	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fee4 	bl	8001f60 <LL_ADC_INJ_IsConversionOngoing>
 8002198:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d17f      	bne.n	80022a0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d17c      	bne.n	80022a0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021aa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021c2:	f023 0302 	bic.w	r3, r3, #2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6911      	ldr	r1, [r2, #16]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002206:	e013      	b.n	8002230 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002236:	2b01      	cmp	r3, #1
 8002238:	d12a      	bne.n	8002290 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800225c:	430a      	orrs	r2, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	e019      	b.n	80022a0 <HAL_ADC_Init+0x318>
 800226c:	20000000 	.word	0x20000000
 8002270:	053e2d63 	.word	0x053e2d63
 8002274:	50000100 	.word	0x50000100
 8002278:	50000400 	.word	0x50000400
 800227c:	50000500 	.word	0x50000500
 8002280:	50000600 	.word	0x50000600
 8002284:	50000300 	.word	0x50000300
 8002288:	50000700 	.word	0x50000700
 800228c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10c      	bne.n	80022c2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f023 010f 	bic.w	r1, r3, #15
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
 80022c0:	e007      	b.n	80022d2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020f 	bic.w	r2, r2, #15
 80022d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e2:	e007      	b.n	80022f4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	f043 0210 	orr.w	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop

08002300 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	@ 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002324:	d004      	beq.n	8002330 <HAL_ADC_IRQHandler+0x30>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8e      	ldr	r2, [pc, #568]	@ (8002564 <HAL_ADC_IRQHandler+0x264>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_ADC_IRQHandler+0x34>
 8002330:	4b8d      	ldr	r3, [pc, #564]	@ (8002568 <HAL_ADC_IRQHandler+0x268>)
 8002332:	e000      	b.n	8002336 <HAL_ADC_IRQHandler+0x36>
 8002334:	4b8d      	ldr	r3, [pc, #564]	@ (800256c <HAL_ADC_IRQHandler+0x26c>)
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fd82 	bl	8001e40 <LL_ADC_GetMultimode>
 800233c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_ADC_IRQHandler+0x78>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d012      	beq.n	8002378 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fed4 	bl	8003118 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_ADC_IRQHandler+0x8c>
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8094 	beq.w	80024c0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 808e 	beq.w	80024c0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fc9b 	bl	8001cfc <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d072      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a64      	ldr	r2, [pc, #400]	@ (8002564 <HAL_ADC_IRQHandler+0x264>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_ADC_IRQHandler+0xea>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_ADC_IRQHandler+0x270>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_IRQHandler+0xe6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	e003      	b.n	80023ee <HAL_ADC_IRQHandler+0xee>
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_ADC_IRQHandler+0x274>)
 80023e8:	e001      	b.n	80023ee <HAL_ADC_IRQHandler+0xee>
 80023ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d002      	beq.n	8002408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d104      	bne.n	8002412 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	e014      	b.n	800243c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a53      	ldr	r2, [pc, #332]	@ (8002564 <HAL_ADC_IRQHandler+0x264>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_ADC_IRQHandler+0x130>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a53      	ldr	r2, [pc, #332]	@ (8002570 <HAL_ADC_IRQHandler+0x270>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d002      	beq.n	800242c <HAL_ADC_IRQHandler+0x12c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e003      	b.n	8002434 <HAL_ADC_IRQHandler+0x134>
 800242c:	4b51      	ldr	r3, [pc, #324]	@ (8002574 <HAL_ADC_IRQHandler+0x274>)
 800242e:	e001      	b.n	8002434 <HAL_ADC_IRQHandler+0x134>
 8002430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002434:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d135      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b08      	cmp	r3, #8
 8002452:	d12e      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fd6e 	bl	8001f3a <LL_ADC_REG_IsConversionOngoing>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11a      	bne.n	800249a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020c 	bic.w	r2, r2, #12
 8002472:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d112      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002498:	e00b      	b.n	80024b2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f984 	bl	80027c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	220c      	movs	r2, #12
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x1d4>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80b3 	beq.w	8002646 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80ad 	beq.w	8002646 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fc36 	bl	8001d7a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800250e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbf1 	bl	8001cfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800251a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a10      	ldr	r2, [pc, #64]	@ (8002564 <HAL_ADC_IRQHandler+0x264>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_ADC_IRQHandler+0x23a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <HAL_ADC_IRQHandler+0x270>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d002      	beq.n	8002536 <HAL_ADC_IRQHandler+0x236>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e003      	b.n	800253e <HAL_ADC_IRQHandler+0x23e>
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_ADC_IRQHandler+0x274>)
 8002538:	e001      	b.n	800253e <HAL_ADC_IRQHandler+0x23e>
 800253a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4293      	cmp	r3, r2
 8002544:	d008      	beq.n	8002558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b06      	cmp	r3, #6
 8002550:	d002      	beq.n	8002558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d10f      	bne.n	8002578 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e01f      	b.n	80025a2 <HAL_ADC_IRQHandler+0x2a2>
 8002562:	bf00      	nop
 8002564:	50000100 	.word	0x50000100
 8002568:	50000300 	.word	0x50000300
 800256c:	50000700 	.word	0x50000700
 8002570:	50000500 	.word	0x50000500
 8002574:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a8b      	ldr	r2, [pc, #556]	@ (80027ac <HAL_ADC_IRQHandler+0x4ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_ADC_IRQHandler+0x296>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8a      	ldr	r2, [pc, #552]	@ (80027b0 <HAL_ADC_IRQHandler+0x4b0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d002      	beq.n	8002592 <HAL_ADC_IRQHandler+0x292>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e003      	b.n	800259a <HAL_ADC_IRQHandler+0x29a>
 8002592:	4b88      	ldr	r3, [pc, #544]	@ (80027b4 <HAL_ADC_IRQHandler+0x4b4>)
 8002594:	e001      	b.n	800259a <HAL_ADC_IRQHandler+0x29a>
 8002596:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800259a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d047      	beq.n	8002638 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x2c2>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03f      	beq.n	8002638 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d13a      	bne.n	8002638 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025cc:	2b40      	cmp	r3, #64	@ 0x40
 80025ce:	d133      	bne.n	8002638 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12e      	bne.n	8002638 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fcbe 	bl	8001f60 <LL_ADC_INJ_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11a      	bne.n	8002620 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d112      	bne.n	8002638 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800261e:	e00b      	b.n	8002638 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	f043 0210 	orr.w	r2, r3, #16
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fd45 	bl	80030c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2260      	movs	r2, #96	@ 0x60
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d011      	beq.n	8002674 <HAL_ADC_IRQHandler+0x374>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8b4 	bl	80027d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x3a4>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fd2b 	bl	80030f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x3d4>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fd1d 	bl	8003104 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d043      	beq.n	8002766 <HAL_ADC_IRQHandler+0x466>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d03e      	beq.n	8002766 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80026f0:	2301      	movs	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	e021      	b.n	800273a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002704:	d004      	beq.n	8002710 <HAL_ADC_IRQHandler+0x410>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a28      	ldr	r2, [pc, #160]	@ (80027ac <HAL_ADC_IRQHandler+0x4ac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADC_IRQHandler+0x414>
 8002710:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_ADC_IRQHandler+0x4b8>)
 8002712:	e000      	b.n	8002716 <HAL_ADC_IRQHandler+0x416>
 8002714:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <HAL_ADC_IRQHandler+0x4bc>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fba0 	bl	8001e5c <LL_ADC_GetMultiDMATransfer>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
 8002726:	e008      	b.n	800273a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002736:	2301      	movs	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10e      	bne.n	800275e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f845 	bl	80027e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2210      	movs	r2, #16
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d018      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x4a2>
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f043 0208 	orr.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800279a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fc9d 	bl	80030dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	@ 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	50000100 	.word	0x50000100
 80027b0:	50000500 	.word	0x50000500
 80027b4:	50000400 	.word	0x50000400
 80027b8:	50000300 	.word	0x50000300
 80027bc:	50000700 	.word	0x50000700

080027c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x24>
 800281a:	2302      	movs	r3, #2
 800281c:	f000 bc13 	b.w	8003046 <HAL_ADC_ConfigChannel+0x84a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb84 	bl	8001f3a <LL_ADC_REG_IsConversionOngoing>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 83f3 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	f7ff fa6b 	bl	8001d22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fb72 	bl	8001f3a <LL_ADC_REG_IsConversionOngoing>
 8002856:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fb7e 	bl	8001f60 <LL_ADC_INJ_IsConversionOngoing>
 8002864:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002868:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800286c:	2b00      	cmp	r3, #0
 800286e:	f040 81d9 	bne.w	8002c24 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 81d4 	bne.w	8002c24 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002884:	d10f      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	f7ff fa85 	bl	8001da0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fa19 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>
 80028a4:	e00e      	b.n	80028c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7ff fa74 	bl	8001da0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fa09 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d022      	beq.n	800292c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028f6:	f7ff f963 	bl	8001bc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6919      	ldr	r1, [r3, #16]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	461a      	mov	r2, r3
 8002908:	f7ff f9af 	bl	8001c6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x126>
 800291c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002920:	e000      	b.n	8002924 <HAL_ADC_ConfigChannel+0x128>
 8002922:	2300      	movs	r3, #0
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff f9bb 	bl	8001ca0 <LL_ADC_SetOffsetSaturation>
 800292a:	e17b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f968 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x15c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f95d 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	f003 021f 	and.w	r2, r3, #31
 8002956:	e01e      	b.n	8002996 <HAL_ADC_ConfigChannel+0x19a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f952 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800297e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e004      	b.n	8002994 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800298a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1b2>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	e018      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1e4>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e004      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f921 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f905 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x222>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f8fa 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	e01e      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x260>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f8ef 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e004      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x278>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	e018      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x2aa>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e004      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f8be 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2102      	movs	r1, #2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f8a2 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x2e8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f897 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	f003 021f 	and.w	r2, r3, #31
 8002ae2:	e01e      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x326>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f88c 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e004      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x33e>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	e016      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x36c>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e004      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f85d 	bl	8001c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2103      	movs	r1, #3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f841 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x3aa>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2103      	movs	r1, #3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f836 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	e017      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x3da>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2103      	movs	r1, #3
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f82b 	bl	8001c08 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x3f2>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	e011      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x416>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d106      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f808 	bl	8001c34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f973 	bl	8001f14 <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 813d 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f7ff f8d8 	bl	8001df8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4aa2      	ldr	r2, [pc, #648]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	f040 812e 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x480>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e019      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x4b4>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	bf94      	ite	ls
 8002caa:	2301      	movls	r3, #1
 8002cac:	2300      	movhi	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d079      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x4d4>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	069b      	lsls	r3, r3, #26
 8002cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cce:	e015      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x500>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e003      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	069b      	lsls	r3, r3, #26
 8002cf8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x520>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	e017      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x550>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	ea42 0103 	orr.w	r1, r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x576>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	051b      	lsls	r3, r3, #20
 8002d70:	e018      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x5a8>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da4:	430b      	orrs	r3, r1
 8002da6:	e07e      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x5c8>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	3301      	adds	r3, #1
 8002dbc:	069b      	lsls	r3, r3, #26
 8002dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc2:	e015      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x5f4>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	069b      	lsls	r3, r3, #26
 8002dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x614>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	e017      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x644>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	ea42 0103 	orr.w	r1, r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x670>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	3301      	adds	r3, #1
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	3b1e      	subs	r3, #30
 8002e64:	051b      	lsls	r3, r3, #20
 8002e66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	e01b      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x6a8>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	613b      	str	r3, [r7, #16]
  return result;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b1e      	subs	r3, #30
 8002e9e:	051b      	lsls	r3, r3, #20
 8002ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fe ff78 	bl	8001da0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <HAL_ADC_ConfigChannel+0x6e0>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80be 	beq.w	800303a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x6d6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x6ec>
 8002ed2:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ed4:	e009      	b.n	8002eea <HAL_ADC_ConfigChannel+0x6ee>
 8002ed6:	bf00      	nop
 8002ed8:	407f0000 	.word	0x407f0000
 8002edc:	80080000 	.word	0x80080000
 8002ee0:	50000100 	.word	0x50000100
 8002ee4:	50000300 	.word	0x50000300
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_ADC_ConfigChannel+0x854>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fe5a 	bl	8001ba4 <LL_ADC_GetCommonPathInternalCh>
 8002ef0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a56      	ldr	r2, [pc, #344]	@ (8003054 <HAL_ADC_ConfigChannel+0x858>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_ADC_ConfigChannel+0x70c>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a55      	ldr	r2, [pc, #340]	@ (8003058 <HAL_ADC_ConfigChannel+0x85c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d13a      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d134      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f1c:	d005      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x72e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4e      	ldr	r2, [pc, #312]	@ (800305c <HAL_ADC_ConfigChannel+0x860>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f040 8085 	bne.w	8003034 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x742>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a49      	ldr	r2, [pc, #292]	@ (8003060 <HAL_ADC_ConfigChannel+0x864>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x746>
 8002f3e:	4a49      	ldr	r2, [pc, #292]	@ (8003064 <HAL_ADC_ConfigChannel+0x868>)
 8002f40:	e000      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x748>
 8002f42:	4a43      	ldr	r2, [pc, #268]	@ (8003050 <HAL_ADC_ConfigChannel+0x854>)
 8002f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7fe fe15 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f54:	4b44      	ldr	r3, [pc, #272]	@ (8003068 <HAL_ADC_ConfigChannel+0x86c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	4a44      	ldr	r2, [pc, #272]	@ (800306c <HAL_ADC_ConfigChannel+0x870>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f6e:	e002      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f7c:	e05a      	b.n	8003034 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	@ (8003070 <HAL_ADC_ConfigChannel+0x874>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11f      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a31      	ldr	r2, [pc, #196]	@ (8003060 <HAL_ADC_ConfigChannel+0x864>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d104      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x7ac>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a34      	ldr	r2, [pc, #208]	@ (8003074 <HAL_ADC_ConfigChannel+0x878>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d047      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x7c0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_ADC_ConfigChannel+0x864>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x7c4>
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_ADC_ConfigChannel+0x868>)
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c6>
 8002fc0:	4a23      	ldr	r2, [pc, #140]	@ (8003050 <HAL_ADC_ConfigChannel+0x854>)
 8002fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f7fe fdd6 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd2:	e031      	b.n	8003038 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	@ (8003078 <HAL_ADC_ConfigChannel+0x87c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12d      	bne.n	800303a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d127      	bne.n	800303a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_ADC_ConfigChannel+0x864>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ffc:	d004      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x80c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <HAL_ADC_ConfigChannel+0x864>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x810>
 8003008:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <HAL_ADC_ConfigChannel+0x868>)
 800300a:	e000      	b.n	800300e <HAL_ADC_ConfigChannel+0x812>
 800300c:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <HAL_ADC_ConfigChannel+0x854>)
 800300e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f7fe fdb0 	bl	8001b7e <LL_ADC_SetCommonPathInternalCh>
 800301e:	e00c      	b.n	800303a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003032:	e002      	b.n	800303a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003034:	bf00      	nop
 8003036:	e000      	b.n	800303a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003038:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003042:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003046:	4618      	mov	r0, r3
 8003048:	37d8      	adds	r7, #216	@ 0xd8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	50000700 	.word	0x50000700
 8003054:	c3210000 	.word	0xc3210000
 8003058:	90c00010 	.word	0x90c00010
 800305c:	50000600 	.word	0x50000600
 8003060:	50000100 	.word	0x50000100
 8003064:	50000300 	.word	0x50000300
 8003068:	20000000 	.word	0x20000000
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	c7520000 	.word	0xc7520000
 8003074:	50000500 	.word	0x50000500
 8003078:	cb840000 	.word	0xcb840000

0800307c <LL_ADC_IsEnabled>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <LL_ADC_IsEnabled+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_IsEnabled+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d101      	bne.n	80030ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b0a1      	sub	sp, #132	@ 0x84
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e0e7      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003152:	2300      	movs	r3, #0
 8003154:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003156:	2300      	movs	r3, #0
 8003158:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003162:	d102      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003164:	4b6f      	ldr	r3, [pc, #444]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	e009      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6e      	ldr	r2, [pc, #440]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d102      	bne.n	800317a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003174:	4b6d      	ldr	r3, [pc, #436]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e001      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0be      	b.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff7f 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff79 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 80a0 	bne.w	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 809c 	bne.w	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c8:	d004      	beq.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a55      	ldr	r2, [pc, #340]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031d4:	4b56      	ldr	r3, [pc, #344]	@ (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031d6:	e000      	b.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031d8:	4b56      	ldr	r3, [pc, #344]	@ (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d04b      	beq.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031f6:	035b      	lsls	r3, r3, #13
 80031f8:	430b      	orrs	r3, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003208:	d004      	beq.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a45      	ldr	r2, [pc, #276]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10f      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003214:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003218:	f7ff ff30 	bl	800307c <LL_ADC_IsEnabled>
 800321c:	4604      	mov	r4, r0
 800321e:	4841      	ldr	r0, [pc, #260]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003220:	f7ff ff2c 	bl	800307c <LL_ADC_IsEnabled>
 8003224:	4603      	mov	r3, r0
 8003226:	4323      	orrs	r3, r4
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003234:	483c      	ldr	r0, [pc, #240]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003236:	f7ff ff21 	bl	800307c <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	483b      	ldr	r0, [pc, #236]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800323e:	f7ff ff1d 	bl	800307c <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	431c      	orrs	r4, r3
 8003246:	483c      	ldr	r0, [pc, #240]	@ (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003248:	f7ff ff18 	bl	800307c <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	4323      	orrs	r3, r4
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d056      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800325e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003278:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800327a:	e047      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800327c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003286:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003290:	d004      	beq.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a23      	ldr	r2, [pc, #140]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10f      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800329c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032a0:	f7ff feec 	bl	800307c <LL_ADC_IsEnabled>
 80032a4:	4604      	mov	r4, r0
 80032a6:	481f      	ldr	r0, [pc, #124]	@ (8003324 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a8:	f7ff fee8 	bl	800307c <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4323      	orrs	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032bc:	481a      	ldr	r0, [pc, #104]	@ (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032be:	f7ff fedd 	bl	800307c <LL_ADC_IsEnabled>
 80032c2:	4604      	mov	r4, r0
 80032c4:	4819      	ldr	r0, [pc, #100]	@ (800332c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032c6:	f7ff fed9 	bl	800307c <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	431c      	orrs	r4, r3
 80032ce:	481a      	ldr	r0, [pc, #104]	@ (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032d0:	f7ff fed4 	bl	800307c <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f6:	e009      	b.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800330a:	e000      	b.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800330c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003316:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800331a:	4618      	mov	r0, r3
 800331c:	3784      	adds	r7, #132	@ 0x84
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	bf00      	nop
 8003324:	50000100 	.word	0x50000100
 8003328:	50000400 	.word	0x50000400
 800332c:	50000500 	.word	0x50000500
 8003330:	50000300 	.word	0x50000300
 8003334:	50000700 	.word	0x50000700
 8003338:	50000600 	.word	0x50000600

0800333c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <LL_EXTI_EnableIT_0_31+0x20>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4904      	ldr	r1, [pc, #16]	@ (800335c <LL_EXTI_EnableIT_0_31+0x20>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40010400 	.word	0x40010400

08003360 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <LL_EXTI_EnableIT_32_63+0x20>)
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	4904      	ldr	r1, [pc, #16]	@ (8003380 <LL_EXTI_EnableIT_32_63+0x20>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4313      	orrs	r3, r2
 8003372:	620b      	str	r3, [r1, #32]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40010400 	.word	0x40010400

08003384 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	43db      	mvns	r3, r3
 8003394:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003396:	4013      	ands	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010400 	.word	0x40010400

080033ac <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <LL_EXTI_DisableIT_32_63+0x24>)
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4904      	ldr	r1, [pc, #16]	@ (80033d0 <LL_EXTI_DisableIT_32_63+0x24>)
 80033be:	4013      	ands	r3, r2
 80033c0:	620b      	str	r3, [r1, #32]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010400 	.word	0x40010400

080033d4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4904      	ldr	r1, [pc, #16]	@ (80033f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]

}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010400 	.word	0x40010400

080033f8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4313      	orrs	r3, r2
 800340a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010400 	.word	0x40010400

0800341c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	43db      	mvns	r3, r3
 800342c:	4904      	ldr	r1, [pc, #16]	@ (8003440 <LL_EXTI_DisableEvent_0_31+0x24>)
 800342e:	4013      	ands	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010400 	.word	0x40010400

08003444 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <LL_EXTI_DisableEvent_32_63+0x24>)
 800344e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	43db      	mvns	r3, r3
 8003454:	4904      	ldr	r1, [pc, #16]	@ (8003468 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003456:	4013      	ands	r3, r2
 8003458:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010400 	.word	0x40010400

0800346c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40010400 	.word	0x40010400

08003490 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800349a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]

}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010400 	.word	0x40010400

080034dc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80034e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4904      	ldr	r1, [pc, #16]	@ (8003500 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010400 	.word	0x40010400

08003504 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	4904      	ldr	r1, [pc, #16]	@ (8003524 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4313      	orrs	r3, r2
 8003516:	60cb      	str	r3, [r1, #12]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40010400 	.word	0x40010400

08003528 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	43db      	mvns	r3, r3
 800355c:	4904      	ldr	r1, [pc, #16]	@ (8003570 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800355e:	4013      	ands	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010400 	.word	0x40010400

08003574 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800357e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	43db      	mvns	r3, r3
 8003584:	4904      	ldr	r1, [pc, #16]	@ (8003598 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003586:	4013      	ands	r3, r2
 8003588:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010400 	.word	0x40010400

0800359c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6153      	str	r3, [r2, #20]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010400 	.word	0x40010400

080035bc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80035c4:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e181      	b.n	80038fc <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003606:	d102      	bne.n	800360e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e176      	b.n	80038fc <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7f5b      	ldrb	r3, [r3, #29]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fd fec1 	bl	80013ac <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003634:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b90      	ldr	r3, [pc, #576]	@ (800389c <HAL_COMP_Init+0x2c0>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	430b      	orrs	r3, r1
 8003666:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_COMP_Init+0xc8>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d113      	bne.n	80036a4 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800367c:	4b88      	ldr	r3, [pc, #544]	@ (80038a0 <HAL_COMP_Init+0x2c4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	4a88      	ldr	r2, [pc, #544]	@ (80038a4 <HAL_COMP_Init+0x2c8>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003696:	e002      	b.n	800369e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3b01      	subs	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7f      	ldr	r2, [pc, #508]	@ (80038a8 <HAL_COMP_Init+0x2cc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d028      	beq.n	8003700 <HAL_COMP_Init+0x124>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7e      	ldr	r2, [pc, #504]	@ (80038ac <HAL_COMP_Init+0x2d0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d020      	beq.n	80036fa <HAL_COMP_Init+0x11e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7c      	ldr	r2, [pc, #496]	@ (80038b0 <HAL_COMP_Init+0x2d4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_COMP_Init+0x118>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7b      	ldr	r2, [pc, #492]	@ (80038b4 <HAL_COMP_Init+0x2d8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d010      	beq.n	80036ee <HAL_COMP_Init+0x112>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a79      	ldr	r2, [pc, #484]	@ (80038b8 <HAL_COMP_Init+0x2dc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d008      	beq.n	80036e8 <HAL_COMP_Init+0x10c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a78      	ldr	r2, [pc, #480]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_COMP_Init+0x108>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00f      	b.n	8003704 <HAL_COMP_Init+0x128>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e00d      	b.n	8003704 <HAL_COMP_Init+0x128>
 80036e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036ec:	e00a      	b.n	8003704 <HAL_COMP_Init+0x128>
 80036ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036f2:	e007      	b.n	8003704 <HAL_COMP_Init+0x128>
 80036f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80036f8:	e004      	b.n	8003704 <HAL_COMP_Init+0x128>
 80036fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036fe:	e001      	b.n	8003704 <HAL_COMP_Init+0x128>
 8003700:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003704:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80b6 	beq.w	8003880 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d011      	beq.n	8003744 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_COMP_Init+0x158>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a64      	ldr	r2, [pc, #400]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003734:	6938      	ldr	r0, [r7, #16]
 8003736:	f7ff feab 	bl	8003490 <LL_EXTI_EnableRisingTrig_32_63>
 800373a:	e014      	b.n	8003766 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800373c:	6938      	ldr	r0, [r7, #16]
 800373e:	f7ff fe95 	bl	800346c <LL_EXTI_EnableRisingTrig_0_31>
 8003742:	e010      	b.n	8003766 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5c      	ldr	r2, [pc, #368]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_COMP_Init+0x17c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a5b      	ldr	r2, [pc, #364]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003758:	6938      	ldr	r0, [r7, #16]
 800375a:	f7ff febf 	bl	80034dc <LL_EXTI_DisableRisingTrig_32_63>
 800375e:	e002      	b.n	8003766 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003760:	6938      	ldr	r0, [r7, #16]
 8003762:	f7ff fea7 	bl	80034b4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d011      	beq.n	8003796 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a51      	ldr	r2, [pc, #324]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_COMP_Init+0x1aa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4f      	ldr	r2, [pc, #316]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d103      	bne.n	800378e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f7ff fece 	bl	8003528 <LL_EXTI_EnableFallingTrig_32_63>
 800378c:	e014      	b.n	80037b8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800378e:	6938      	ldr	r0, [r7, #16]
 8003790:	f7ff feb8 	bl	8003504 <LL_EXTI_EnableFallingTrig_0_31>
 8003794:	e010      	b.n	80037b8 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a48      	ldr	r2, [pc, #288]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_COMP_Init+0x1ce>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a46      	ldr	r2, [pc, #280]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d103      	bne.n	80037b2 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80037aa:	6938      	ldr	r0, [r7, #16]
 80037ac:	f7ff fee2 	bl	8003574 <LL_EXTI_DisableFallingTrig_32_63>
 80037b0:	e002      	b.n	80037b8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80037b2:	6938      	ldr	r0, [r7, #16]
 80037b4:	f7ff feca 	bl	800354c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3f      	ldr	r2, [pc, #252]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_COMP_Init+0x1f0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3e      	ldr	r2, [pc, #248]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d103      	bne.n	80037d4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80037cc:	6938      	ldr	r0, [r7, #16]
 80037ce:	f7ff fef5 	bl	80035bc <LL_EXTI_ClearFlag_32_63>
 80037d2:	e002      	b.n	80037da <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80037d4:	6938      	ldr	r0, [r7, #16]
 80037d6:	f7ff fee1 	bl	800359c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a34      	ldr	r2, [pc, #208]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_COMP_Init+0x21e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a32      	ldr	r2, [pc, #200]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80037fa:	6938      	ldr	r0, [r7, #16]
 80037fc:	f7ff fdfc 	bl	80033f8 <LL_EXTI_EnableEvent_32_63>
 8003800:	e014      	b.n	800382c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003802:	6938      	ldr	r0, [r7, #16]
 8003804:	f7ff fde6 	bl	80033d4 <LL_EXTI_EnableEvent_0_31>
 8003808:	e010      	b.n	800382c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2b      	ldr	r2, [pc, #172]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_COMP_Init+0x242>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d103      	bne.n	8003826 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800381e:	6938      	ldr	r0, [r7, #16]
 8003820:	f7ff fe10 	bl	8003444 <LL_EXTI_DisableEvent_32_63>
 8003824:	e002      	b.n	800382c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003826:	6938      	ldr	r0, [r7, #16]
 8003828:	f7ff fdf8 	bl	800341c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_COMP_Init+0x270>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800384c:	6938      	ldr	r0, [r7, #16]
 800384e:	f7ff fd87 	bl	8003360 <LL_EXTI_EnableIT_32_63>
 8003852:	e04b      	b.n	80038ec <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003854:	6938      	ldr	r0, [r7, #16]
 8003856:	f7ff fd71 	bl	800333c <LL_EXTI_EnableIT_0_31>
 800385a:	e047      	b.n	80038ec <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a16      	ldr	r2, [pc, #88]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_COMP_Init+0x294>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a15      	ldr	r2, [pc, #84]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003870:	6938      	ldr	r0, [r7, #16]
 8003872:	f7ff fd9b 	bl	80033ac <LL_EXTI_DisableIT_32_63>
 8003876:	e039      	b.n	80038ec <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003878:	6938      	ldr	r0, [r7, #16]
 800387a:	f7ff fd83 	bl	8003384 <LL_EXTI_DisableIT_0_31>
 800387e:	e035      	b.n	80038ec <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <HAL_COMP_Init+0x2e0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_COMP_Init+0x2b8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <HAL_COMP_Init+0x2e4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d117      	bne.n	80038c4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003894:	6938      	ldr	r0, [r7, #16]
 8003896:	f7ff fdd5 	bl	8003444 <LL_EXTI_DisableEvent_32_63>
 800389a:	e016      	b.n	80038ca <HAL_COMP_Init+0x2ee>
 800389c:	ff007e0f 	.word	0xff007e0f
 80038a0:	20000000 	.word	0x20000000
 80038a4:	053e2d63 	.word	0x053e2d63
 80038a8:	40010200 	.word	0x40010200
 80038ac:	40010204 	.word	0x40010204
 80038b0:	40010208 	.word	0x40010208
 80038b4:	4001020c 	.word	0x4001020c
 80038b8:	40010210 	.word	0x40010210
 80038bc:	40010214 	.word	0x40010214
 80038c0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80038c4:	6938      	ldr	r0, [r7, #16]
 80038c6:	f7ff fda9 	bl	800341c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003908 <HAL_COMP_Init+0x32c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_COMP_Init+0x302>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0c      	ldr	r2, [pc, #48]	@ (800390c <HAL_COMP_Init+0x330>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d103      	bne.n	80038e6 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80038de:	6938      	ldr	r0, [r7, #16]
 80038e0:	f7ff fd64 	bl	80033ac <LL_EXTI_DisableIT_32_63>
 80038e4:	e002      	b.n	80038ec <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80038e6:	6938      	ldr	r0, [r7, #16]
 80038e8:	f7ff fd4c 	bl	8003384 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7f5b      	ldrb	r3, [r3, #29]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40010214 	.word	0x40010214
 800390c:	40010218 	.word	0x40010218

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	@ (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	@ (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
         );
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	@ 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff29 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad4:	f7ff ff40 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f7ff ff90 	bl	8003a04 <NVIC_EncodePriority>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff5f 	bl	80039b0 <__NVIC_SetPriority>
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff33 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ffa4 	bl	8003a6c <SysTick_Config>
 8003b24:	4603      	mov	r3, r0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e014      	b.n	8003b6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fd fcc1 	bl	80014d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	@ 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_DAC_ConfigChannel+0x1c>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e1a1      	b.n	8003ed8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	795b      	ldrb	r3, [r3, #5]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DAC_ConfigChannel+0x32>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e198      	b.n	8003ed8 <HAL_DAC_ConfigChannel+0x364>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d17a      	bne.n	8003cb0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003bba:	f7fd ff9f 	bl	8001afc <HAL_GetTick>
 8003bbe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13d      	bne.n	8003c42 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bc6:	e018      	b.n	8003bfa <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bc8:	f7fd ff98 	bl	8001afc <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d911      	bls.n	8003bfa <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f043 0208 	orr.w	r2, r3, #8
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e16e      	b.n	8003ed8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1df      	bne.n	8003bc8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c12:	e020      	b.n	8003c56 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c14:	f7fd ff72 	bl	8001afc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d90f      	bls.n	8003c42 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da0a      	bge.n	8003c42 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f043 0208 	orr.w	r2, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e14a      	b.n	8003ed8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dbe3      	blt.n	8003c14 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	ea02 0103 	and.w	r1, r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	21ff      	movs	r1, #255	@ 0xff
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	ea02 0103 	and.w	r1, r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d11d      	bne.n	8003cf4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	221f      	movs	r2, #31
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2207      	movs	r2, #7
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	e00f      	b.n	8003d3e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d102      	bne.n	8003d2c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d26:	2301      	movs	r3, #1
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	e008      	b.n	8003d3e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d34:	2301      	movs	r3, #1
 8003d36:	623b      	str	r3, [r7, #32]
 8003d38:	e001      	b.n	8003d3e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d60:	4013      	ands	r3, r2
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <HAL_DAC_ConfigChannel+0x1fe>
 8003d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d70:	e000      	b.n	8003d74 <HAL_DAC_ConfigChannel+0x200>
 8003d72:	2300      	movs	r3, #0
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	795b      	ldrb	r3, [r3, #5]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <HAL_DAC_ConfigChannel+0x22a>
 8003d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d9c:	e000      	b.n	8003da0 <HAL_DAC_ConfigChannel+0x22c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d114      	bne.n	8003de0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003db6:	f003 fe37 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8003dba:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4a48      	ldr	r2, [pc, #288]	@ (8003ee0 <HAL_DAC_ConfigChannel+0x36c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d904      	bls.n	8003dce <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	e00f      	b.n	8003dee <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4a44      	ldr	r2, [pc, #272]	@ (8003ee4 <HAL_DAC_ConfigChannel+0x370>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90a      	bls.n	8003dec <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e006      	b.n	8003dee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	4313      	orrs	r3, r2
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dea:	e000      	b.n	8003dee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003dec:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	400a      	ands	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e40:	4013      	ands	r3, r2
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	22c0      	movs	r2, #192	@ 0xc0
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	ea02 0103 	and.w	r1, r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	09896800 	.word	0x09896800
 8003ee4:	04c4b400 	.word	0x04c4b400

08003ee8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d005      	beq.n	8003f0c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2204      	movs	r2, #4
 8003f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	e037      	b.n	8003f7c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 020e 	bic.w	r2, r2, #14
 8003f1a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f2a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	f003 021f 	and.w	r2, r3, #31
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f58:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f70:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f7a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d00d      	beq.n	8003fce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e047      	b.n	800405e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020e 	bic.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f003 021f 	and.w	r2, r3, #31
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800401a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00c      	beq.n	800403e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004032:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800403c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
    }
  }
  return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004076:	e15a      	b.n	800432e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 814c 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d005      	beq.n	80040a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d130      	bne.n	800410a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040de:	2201      	movs	r2, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0201 	and.w	r2, r3, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d017      	beq.n	8004146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d123      	bne.n	800419a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	08da      	lsrs	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3208      	adds	r2, #8
 800415a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	08da      	lsrs	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3208      	adds	r2, #8
 8004194:	6939      	ldr	r1, [r7, #16]
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2203      	movs	r2, #3
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a6 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041dc:	4b5b      	ldr	r3, [pc, #364]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	4a5a      	ldr	r2, [pc, #360]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e8:	4b58      	ldr	r3, [pc, #352]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800421e:	d01f      	beq.n	8004260 <HAL_GPIO_Init+0x1f8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a4c      	ldr	r2, [pc, #304]	@ (8004354 <HAL_GPIO_Init+0x2ec>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d019      	beq.n	800425c <HAL_GPIO_Init+0x1f4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a4b      	ldr	r2, [pc, #300]	@ (8004358 <HAL_GPIO_Init+0x2f0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_GPIO_Init+0x1f0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4a      	ldr	r2, [pc, #296]	@ (800435c <HAL_GPIO_Init+0x2f4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00d      	beq.n	8004254 <HAL_GPIO_Init+0x1ec>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a49      	ldr	r2, [pc, #292]	@ (8004360 <HAL_GPIO_Init+0x2f8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <HAL_GPIO_Init+0x1e8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a48      	ldr	r2, [pc, #288]	@ (8004364 <HAL_GPIO_Init+0x2fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_GPIO_Init+0x1e4>
 8004248:	2305      	movs	r3, #5
 800424a:	e00a      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800424c:	2306      	movs	r3, #6
 800424e:	e008      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004250:	2304      	movs	r3, #4
 8004252:	e006      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004254:	2303      	movs	r3, #3
 8004256:	e004      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004258:	2302      	movs	r3, #2
 800425a:	e002      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004260:	2300      	movs	r3, #0
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f002 0203 	and.w	r2, r2, #3
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	4093      	lsls	r3, r2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004272:	4937      	ldr	r1, [pc, #220]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	3302      	adds	r3, #2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004280:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042a4:	4a30      	ldr	r2, [pc, #192]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004322:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f ae9d 	bne.w	8004078 <HAL_GPIO_Init+0x10>
  }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000
 8004350:	40010000 	.word	0x40010000
 8004354:	48000400 	.word	0x48000400
 8004358:	48000800 	.word	0x48000800
 800435c:	48000c00 	.word	0x48000c00
 8004360:	48001000 	.word	0x48001000
 8004364:	48001400 	.word	0x48001400
 8004368:	40010400 	.word	0x40010400

0800436c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	e001      	b.n	800438e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	4613      	mov	r3, r2
 80043aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ac:	787b      	ldrb	r3, [r7, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b8:	e002      	b.n	80043c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043d6:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043e2:	4a05      	ldr	r2, [pc, #20]	@ (80043f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f806 	bl	80043fc <HAL_GPIO_EXTI_Callback>
  }
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010400 	.word	0x40010400

080043fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0be      	b.n	80045a4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02e      	beq.n	80044d0 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4d      	ldr	r2, [pc, #308]	@ (80045ac <HAL_HRTIM_Init+0x198>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10b      	bne.n	8004494 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800447c:	4b4c      	ldr	r3, [pc, #304]	@ (80045b0 <HAL_HRTIM_Init+0x19c>)
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	4a4b      	ldr	r2, [pc, #300]	@ (80045b0 <HAL_HRTIM_Init+0x19c>)
 8004482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004486:	6613      	str	r3, [r2, #96]	@ 0x60
 8004488:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <HAL_HRTIM_Init+0x19c>)
 800448a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80044a2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044b8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fd f849 	bl	8001568 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004518:	2300      	movs	r3, #0
 800451a:	75fb      	strb	r3, [r7, #23]
 800451c:	e03e      	b.n	800459c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800451e:	7dfa      	ldrb	r2, [r7, #23]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3318      	adds	r3, #24
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004532:	7dfa      	ldrb	r2, [r7, #23]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	331c      	adds	r3, #28
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004546:	7dfa      	ldrb	r2, [r7, #23]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3320      	adds	r3, #32
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800455a:	7dfa      	ldrb	r2, [r7, #23]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	3324      	adds	r3, #36	@ 0x24
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800456e:	7dfa      	ldrb	r2, [r7, #23]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3328      	adds	r3, #40	@ 0x28
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004582:	7dfa      	ldrb	r2, [r7, #23]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3330      	adds	r3, #48	@ 0x30
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	3301      	adds	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d9bd      	bls.n	800451e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40016800 	.word	0x40016800
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_HRTIM_DLLCalibrationStart+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e045      	b.n	8004658 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d114      	bne.n	800460e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0202 	bic.w	r2, r2, #2
 80045f4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 800460c:	e01f      	b.n	800464e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800462a:	f023 010c 	bic.w	r1, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800466e:	f7fd fa45 	bl	8001afc <HAL_GetTick>
 8004672:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004674:	e014      	b.n	80046a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d010      	beq.n	80046a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fd fa3d 	bl	8001afc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2207      	movs	r2, #7
 8004698:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e011      	b.n	80046c4 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80046a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b0:	d1e1      	bne.n	8004676 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d101      	bne.n	80046e8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
 80046e6:	e015      	b.n	8004714 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d104      	bne.n	8004700 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fa19 	bl	8004b30 <HRTIM_MasterBase_Config>
 80046fe:	e004      	b.n	800470a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa42 	bl	8004b8e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d101      	bne.n	8004738 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	e07a      	b.n	800482e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004742:	2302      	movs	r3, #2
 8004744:	e073      	b.n	800482e <HAL_HRTIM_WaveformTimerConfig+0x112>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b06      	cmp	r3, #6
 800475a:	d104      	bne.n	8004766 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fa55 	bl	8004c0e <HRTIM_MasterWaveform_Config>
 8004764:	e004      	b.n	8004770 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 faec 	bl	8004d48 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4403      	add	r3, r0
 8004782:	3320      	adds	r3, #32
 8004784:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4403      	add	r3, r0
 8004798:	3324      	adds	r3, #36	@ 0x24
 800479a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6899      	ldr	r1, [r3, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	3328      	adds	r3, #40	@ 0x28
 80047b0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68d9      	ldr	r1, [r3, #12]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4403      	add	r3, r0
 80047c4:	332c      	adds	r3, #44	@ 0x2c
 80047c6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6919      	ldr	r1, [r3, #16]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4403      	add	r3, r0
 80047da:	3330      	adds	r3, #48	@ 0x30
 80047dc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fd7f 	bl	80052e4 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d017      	beq.n	800481c <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d113      	bne.n	800481c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	4413      	add	r3, r2
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	6809      	ldr	r1, [r1, #0]
 8004810:	431a      	orrs	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	3301      	adds	r3, #1
 8004816:	01db      	lsls	r3, r3, #7
 8004818:	440b      	add	r3, r1
 800481a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d101      	bne.n	8004852 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
 8004850:	e020      	b.n	8004894 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_HRTIM_WaveformTimerControl+0x2a>
 800485c:	2302      	movs	r3, #2
 800485e:	e019      	b.n	8004894 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fbed 	bl	8005054 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fd31 	bl	80052e4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d101      	bne.n	80048ba <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	e01d      	b.n	80048f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e016      	b.n	80048f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fc18 	bl	8005114 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2bff      	cmp	r3, #255	@ 0xff
 800490c:	d103      	bne.n	8004916 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fd56 	bl	80053c0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8004914:	e00a      	b.n	800492c <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d103      	bne.n	8004924 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fddf 	bl	80054e0 <HRTIM_Master_ISR>
}
 8004922:	e003      	b.n	800492c <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fe9f 	bl	800566a <HRTIM_Timer_ISR>
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0318 	bic.w	r3, r3, #24
 8004b5a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	619a      	str	r2, [r3, #24]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	01db      	lsls	r3, r3, #7
 8004ba4:	4413      	add	r3, r2
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0318 	bic.w	r3, r3, #24
 8004bc2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	01db      	lsls	r3, r3, #7
 8004bd8:	4413      	add	r3, r2
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	01db      	lsls	r3, r3, #7
 8004bea:	440b      	add	r3, r1
 8004bec:	3394      	adds	r3, #148	@ 0x94
 8004bee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	01db      	lsls	r3, r3, #7
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3398      	adds	r3, #152	@ 0x98
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004c28:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c42:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d003      	beq.n	8004c54 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d108      	bne.n	8004c66 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c5a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f043 0320 	orr.w	r3, r3, #32
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e021      	b.n	8004caa <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d108      	bne.n	8004c80 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c74:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e014      	b.n	8004caa <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d108      	bne.n	8004c9a <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e007      	b.n	8004caa <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f023 0320 	bic.w	r3, r3, #32
 8004ca0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cb0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cc2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cd4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004ce6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004cf8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b08b      	sub	sp, #44	@ 0x2c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	01db      	lsls	r3, r3, #7
 8004d5e:	4413      	add	r3, r2
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	01db      	lsls	r3, r3, #7
 8004d70:	440b      	add	r3, r1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	01db      	lsls	r3, r3, #7
 8004d7e:	4413      	add	r3, r2
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	01db      	lsls	r3, r3, #7
 8004d8c:	4413      	add	r3, r2
 8004d8e:	33e8      	adds	r3, #232	@ 0xe8
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	01db      	lsls	r3, r3, #7
 8004d9c:	4413      	add	r3, r2
 8004d9e:	33e4      	adds	r3, #228	@ 0xe4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004dac:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	f023 0320 	bic.w	r3, r3, #32
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d003      	beq.n	8004dd0 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d108      	bne.n	8004de2 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	f043 0320 	orr.w	r3, r3, #32
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de0:	e021      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d108      	bne.n	8004dfc <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfa:	e014      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d108      	bne.n	8004e16 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e14:	e007      	b.n	8004e26 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	f023 0320 	bic.w	r3, r3, #32
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e34:	4313      	orrs	r3, r2
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e46:	4313      	orrs	r3, r2
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d103      	bne.n	8004e9a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004eda:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ef0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f02:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004f16:	d004      	beq.n	8004f22 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004f20:	d103      	bne.n	8004f2a <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d108      	bne.n	8004f3c <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004f30:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f42:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d850      	bhi.n	8004ffc <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8004f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f79 	.word	0x08004f79
 8004f64:	08004f8f 	.word	0x08004f8f
 8004f68:	08004fa5 	.word	0x08004fa5
 8004f6c:	08004fbb 	.word	0x08004fbb
 8004f70:	08004fd1 	.word	0x08004fd1
 8004f74:	08004fe7 	.word	0x08004fe7
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f7e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
      break;
 8004f8c:	e037      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f94:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61fb      	str	r3, [r7, #28]
      break;
 8004fa2:	e02c      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004faa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61fb      	str	r3, [r7, #28]
      break;
 8004fb8:	e021      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fc0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61fb      	str	r3, [r7, #28]
      break;
 8004fce:	e016      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fd6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61fb      	str	r3, [r7, #28]
      break;
 8004fe4:	e00b      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004fec:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	019b      	lsls	r3, r3, #6
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]
      break;
 8004ffa:	e000      	b.n	8004ffe <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8004ffc:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	01db      	lsls	r3, r3, #7
 8005008:	4413      	add	r3, r2
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4413      	add	r3, r2
 8005018:	33e8      	adds	r3, #232	@ 0xe8
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	01db      	lsls	r3, r3, #7
 8005026:	4413      	add	r3, r2
 8005028:	33e4      	adds	r3, #228	@ 0xe4
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	01db      	lsls	r3, r3, #7
 8005036:	4413      	add	r3, r2
 8005038:	33d4      	adds	r3, #212	@ 0xd4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005048:	bf00      	nop
 800504a:	372c      	adds	r7, #44	@ 0x2c
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	01db      	lsls	r3, r3, #7
 8005068:	4413      	add	r3, r2
 800506a:	33ec      	adds	r3, #236	@ 0xec
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0310 	bic.w	r3, r3, #16
 8005076:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800508a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509c:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80050ae:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d11a      	bne.n	80050f8 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0302 	bic.w	r3, r3, #2
 80050da:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	4413      	add	r3, r2
 8005102:	33ec      	adds	r3, #236	@ 0xec
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	601a      	str	r2, [r3, #0]

}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	01db      	lsls	r3, r3, #7
 800512e:	4413      	add	r3, r2
 8005130:	33e4      	adds	r3, #228	@ 0xe4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	01db      	lsls	r3, r3, #7
 800513e:	4413      	add	r3, r2
 8005140:	33b8      	adds	r3, #184	@ 0xb8
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514c:	d05d      	beq.n	800520a <HRTIM_OutputConfig+0xf6>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005154:	d86e      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515c:	d042      	beq.n	80051e4 <HRTIM_OutputConfig+0xd0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005164:	d866      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516c:	d04d      	beq.n	800520a <HRTIM_OutputConfig+0xf6>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d85e      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517c:	d032      	beq.n	80051e4 <HRTIM_OutputConfig+0xd0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005184:	d856      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b80      	cmp	r3, #128	@ 0x80
 800518a:	d03e      	beq.n	800520a <HRTIM_OutputConfig+0xf6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b80      	cmp	r3, #128	@ 0x80
 8005190:	d850      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	d025      	beq.n	80051e4 <HRTIM_OutputConfig+0xd0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d84a      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d01f      	beq.n	80051e4 <HRTIM_OutputConfig+0xd0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d044      	beq.n	8005234 <HRTIM_OutputConfig+0x120>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d841      	bhi.n	8005234 <HRTIM_OutputConfig+0x120>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d33e      	bcc.n	8005234 <HRTIM_OutputConfig+0x120>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3b02      	subs	r3, #2
 80051ba:	2201      	movs	r2, #1
 80051bc:	409a      	lsls	r2, r3
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <HRTIM_OutputConfig+0x1cc>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf14      	ite	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	2300      	moveq	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11c      	bne.n	800520a <HRTIM_OutputConfig+0xf6>
 80051d0:	f244 0304 	movw	r3, #16388	@ 0x4004
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d027      	beq.n	8005234 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	01db      	lsls	r3, r3, #7
 80051f0:	440b      	add	r3, r1
 80051f2:	33bc      	adds	r3, #188	@ 0xbc
 80051f4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	01db      	lsls	r3, r3, #7
 8005202:	440b      	add	r3, r1
 8005204:	33c0      	adds	r3, #192	@ 0xc0
 8005206:	601a      	str	r2, [r3, #0]
      break;
 8005208:	e015      	b.n	8005236 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	01db      	lsls	r3, r3, #7
 8005216:	440b      	add	r3, r1
 8005218:	33c4      	adds	r3, #196	@ 0xc4
 800521a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	01db      	lsls	r3, r3, #7
 8005228:	440b      	add	r3, r1
 800522a:	33c8      	adds	r3, #200	@ 0xc8
 800522c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800522e:	2310      	movs	r3, #16
 8005230:	61bb      	str	r3, [r7, #24]
      break;
 8005232:	e000      	b.n	8005236 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8005234:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005236:	22fe      	movs	r2, #254	@ 0xfe
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800523e:	43db      	mvns	r3, r3
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4013      	ands	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	4313      	orrs	r3, r2
 8005264:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	4313      	orrs	r3, r2
 8005274:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	4313      	orrs	r3, r2
 8005294:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d111      	bne.n	80052c2 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10c      	bne.n	80052c2 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d107      	bne.n	80052c2 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	4413      	add	r3, r2
 80052cc:	33e4      	adds	r3, #228	@ 0xe4
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	@ 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40000041 	.word	0x40000041

080052e4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d85e      	bhi.n	80053b2 <HRTIM_ForceRegistersUpdate+0xce>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HRTIM_ForceRegistersUpdate+0x18>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	08005345 	.word	0x08005345
 8005304:	0800535b 	.word	0x0800535b
 8005308:	08005371 	.word	0x08005371
 800530c:	08005387 	.word	0x08005387
 8005310:	0800539d 	.word	0x0800539d
 8005314:	08005319 	.word	0x08005319
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800532c:	e042      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0202 	orr.w	r2, r2, #2
 800533e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005342:	e037      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0204 	orr.w	r2, r2, #4
 8005354:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005358:	e02c      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800536e:	e021      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0210 	orr.w	r2, r2, #16
 8005380:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005384:	e016      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0220 	orr.w	r2, r2, #32
 8005396:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800539a:	e00b      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ac:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80053b0:	e000      	b.n	80053b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 80053b2:	bf00      	nop
  }
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80053d0:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80053da:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fa9a 	bl	8004934 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fa92 	bl	8004948 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2204      	movs	r2, #4
 800543e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fa8a 	bl	800495c <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2208      	movs	r2, #8
 8005462:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fa82 	bl	8004970 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2210      	movs	r2, #16
 8005486:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fa7a 	bl	8004984 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2240      	movs	r2, #64	@ 0x40
 80054aa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fa72 	bl	8004998 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fa6a 	bl	80049ac <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80054fa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d015      	beq.n	8005542 <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005528:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff fa3f 	bl	80049c0 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800555e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fa36 	bl	80049d4 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00c      	beq.n	800558c <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005584:	2106      	movs	r1, #6
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fa4e 	bl	8004a28 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2202      	movs	r2, #2
 80055a6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80055a8:	2106      	movs	r1, #6
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fa47 	bl	8004a3e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2204      	movs	r2, #4
 80055ca:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80055cc:	2106      	movs	r1, #6
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fa40 	bl	8004a54 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80055f0:	2106      	movs	r1, #6
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fa39 	bl	8004a6a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005614:	2106      	movs	r1, #6
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff f9fb 	bl	8004a12 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2220      	movs	r2, #32
 8005636:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f9d5 	bl	80049e8 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2240      	movs	r2, #64	@ 0x40
 8005658:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800565a:	2106      	movs	r1, #6
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff f9cd 	bl	80049fc <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	01db      	lsls	r3, r3, #7
 800568e:	4413      	add	r3, r2
 8005690:	338c      	adds	r3, #140	@ 0x8c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	01db      	lsls	r3, r3, #7
 80056b2:	4413      	add	r3, r2
 80056b4:	3388      	adds	r3, #136	@ 0x88
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff f9b3 	bl	8004a28 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	01db      	lsls	r3, r3, #7
 80056de:	4413      	add	r3, r2
 80056e0:	3388      	adds	r3, #136	@ 0x88
 80056e2:	2202      	movs	r2, #2
 80056e4:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff f9a8 	bl	8004a3e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	01db      	lsls	r3, r3, #7
 800570a:	4413      	add	r3, r2
 800570c:	3388      	adds	r3, #136	@ 0x88
 800570e:	2204      	movs	r2, #4
 8005710:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff f99d 	bl	8004a54 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	01db      	lsls	r3, r3, #7
 8005736:	4413      	add	r3, r2
 8005738:	3388      	adds	r3, #136	@ 0x88
 800573a:	2208      	movs	r2, #8
 800573c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f992 	bl	8004a6a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	01db      	lsls	r3, r3, #7
 8005762:	4413      	add	r3, r2
 8005764:	3388      	adds	r3, #136	@ 0x88
 8005766:	2210      	movs	r2, #16
 8005768:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff f950 	bl	8004a12 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	01db      	lsls	r3, r3, #7
 800578e:	4413      	add	r3, r2
 8005790:	3388      	adds	r3, #136	@ 0x88
 8005792:	2240      	movs	r2, #64	@ 0x40
 8005794:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff f92f 	bl	80049fc <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d010      	beq.n	80057ca <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	01db      	lsls	r3, r3, #7
 80057ba:	4413      	add	r3, r2
 80057bc:	3388      	adds	r3, #136	@ 0x88
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff f95b 	bl	8004a80 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d011      	beq.n	80057f8 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	01db      	lsls	r3, r3, #7
 80057e6:	4413      	add	r3, r2
 80057e8:	3388      	adds	r3, #136	@ 0x88
 80057ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057ee:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff f94f 	bl	8004a96 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00c      	beq.n	8005826 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	01db      	lsls	r3, r3, #7
 8005814:	4413      	add	r3, r2
 8005816:	3388      	adds	r3, #136	@ 0x88
 8005818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800581c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff f959 	bl	8004ad8 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	01db      	lsls	r3, r3, #7
 8005842:	4413      	add	r3, r2
 8005844:	3388      	adds	r3, #136	@ 0x88
 8005846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800584a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff f94d 	bl	8004aee <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	01db      	lsls	r3, r3, #7
 8005870:	4413      	add	r3, r2
 8005872:	3388      	adds	r3, #136	@ 0x88
 8005874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005878:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff f941 	bl	8004b04 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3388      	adds	r3, #136	@ 0x88
 80058a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80058a6:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff f935 	bl	8004b1a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	01db      	lsls	r3, r3, #7
 80058cc:	4413      	add	r3, r2
 80058ce:	3388      	adds	r3, #136	@ 0x88
 80058d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058d4:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff f8f2 	bl	8004ac2 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d011      	beq.n	800590c <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	01db      	lsls	r3, r3, #7
 80058fa:	4413      	add	r3, r2
 80058fc:	3388      	adds	r3, #136	@ 0x88
 80058fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005902:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff f8d0 	bl	8004aac <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e0c0      	b.n	8005aa8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb ff82 	bl	8001844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2203      	movs	r2, #3
 8005944:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f006 f812 	bl	800b976 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	e03e      	b.n	80059d6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	3311      	adds	r3, #17
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800596c:	7bfa      	ldrb	r2, [r7, #15]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	440b      	add	r3, r1
 800597a:	3310      	adds	r3, #16
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	440b      	add	r3, r1
 800598e:	3313      	adds	r3, #19
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005994:	7bfa      	ldrb	r2, [r7, #15]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	440b      	add	r3, r1
 80059a2:	3320      	adds	r3, #32
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	3324      	adds	r3, #36	@ 0x24
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	3301      	adds	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3bb      	bcc.n	8005958 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e044      	b.n	8005a70 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	440b      	add	r3, r1
 80059f4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	440b      	add	r3, r1
 8005a0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	440b      	add	r3, r1
 8005a20:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a54:	7bfa      	ldrb	r2, [r7, #15]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	791b      	ldrb	r3, [r3, #4]
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3b5      	bcc.n	80059e6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a86:	f005 ff91 	bl	800b9ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	7a9b      	ldrb	r3, [r3, #10]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d102      	bne.n	8005aa6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fa26 	bl	8006ef2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f006 fd56 	bl	800c56e <USB_ReadInterrupts>
 8005ac2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f983 	bl	8005dda <PCD_EP_ISR_Handler>

    return;
 8005ad4:	e110      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af2:	b292      	uxth	r2, r2
 8005af4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f92c 	bl	8005d56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005afe:	2100      	movs	r1, #0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f946 	bl	8005d92 <HAL_PCD_SetAddress>

    return;
 8005b06:	e0f7      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b24:	b292      	uxth	r2, r2
 8005b26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b2a:	e0e5      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b48:	b292      	uxth	r2, r2
 8005b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b4e:	e0d3      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d034      	beq.n	8005bc4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0204 	bic.w	r2, r2, #4
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	b292      	uxth	r2, r2
 8005b86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f9d1 	bl	8006f46 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f8ea 	bl	8005d7e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bc2:	e099      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d027      	beq.n	8005c1e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0208 	orr.w	r2, r2, #8
 8005be0:	b292      	uxth	r2, r2
 8005be2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0204 	orr.w	r2, r2, #4
 8005c10:	b292      	uxth	r2, r2
 8005c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f8a7 	bl	8005d6a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c1c:	e06c      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d040      	beq.n	8005caa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12b      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0204 	orr.w	r2, r2, #4
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0208 	orr.w	r2, r2, #8
 8005c74:	b292      	uxth	r2, r2
 8005c76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f953 	bl	8006f46 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005ca0:	e02a      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f861 	bl	8005d6a <HAL_PCD_SuspendCallback>
    return;
 8005ca8:	e026      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f838 	bl	8005d42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005cd2:	e011      	b.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005cf6:	bf00      	nop
  }
}
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_PCD_SetAddress+0x1a>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e012      	b.n	8005dd2 <HAL_PCD_SetAddress+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f006 fbbf 	bl	800c546 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b092      	sub	sp, #72	@ 0x48
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005de2:	e333      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dec:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005dee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005dfa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 8108 	bne.w	8006014 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005e04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d14c      	bne.n	8005ea8 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	813b      	strh	r3, [r7, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	893b      	ldrh	r3, [r7, #8]
 8005e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3310      	adds	r3, #16
 8005e36:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	441a      	add	r2, r3
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff50 	bl	8005d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7b1b      	ldrb	r3, [r3, #12]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 82e5 	beq.w	800644c <PCD_EP_ISR_Handler+0x672>
 8005e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 82e0 	bne.w	800644c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7b1b      	ldrb	r3, [r3, #12]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	731a      	strb	r2, [r3, #12]
 8005ea6:	e2d1      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005eae:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005eb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d032      	beq.n	8005f28 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f006 fb89 	bl	800c614 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005f0e:	4013      	ands	r3, r2
 8005f10:	817b      	strh	r3, [r7, #10]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	897a      	ldrh	r2, [r7, #10]
 8005f18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff04 	bl	8005d2e <HAL_PCD_SetupStageCallback>
 8005f26:	e291      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005f28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f280 828d 	bge.w	800644c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005f3e:	4013      	ands	r3, r2
 8005f40:	81fb      	strh	r3, [r7, #14]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	89fa      	ldrh	r2, [r7, #14]
 8005f48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f76:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d019      	beq.n	8005fb4 <PCD_EP_ISR_Handler+0x1da>
 8005f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8e:	6959      	ldr	r1, [r3, #20]
 8005f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f92:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f96:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f006 fb3b 	bl	800c614 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	441a      	add	r2, r3
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005faa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005fac:	2100      	movs	r1, #0
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fea5 	bl	8005cfe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005fbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 8242 	bne.w	800644c <PCD_EP_ISR_Handler+0x672>
 8005fc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fd2:	f000 823b 	beq.w	800644c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	81bb      	strh	r3, [r7, #12]
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fee:	81bb      	strh	r3, [r7, #12]
 8005ff0:	89bb      	ldrh	r3, [r7, #12]
 8005ff2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ff6:	81bb      	strh	r3, [r7, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	89bb      	ldrh	r3, [r7, #12]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
 8006012:	e21b      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006026:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800602a:	2b00      	cmp	r3, #0
 800602c:	f280 80f1 	bge.w	8006212 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29a      	uxth	r2, r3
 8006042:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006046:	4013      	ands	r3, r2
 8006048:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800605a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800605e:	b292      	uxth	r2, r2
 8006060:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006062:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800607a:	7b1b      	ldrb	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d123      	bne.n	80060c8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	4413      	add	r3, r2
 800609a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80060a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 808b 	beq.w	80061c8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b8:	6959      	ldr	r1, [r3, #20]
 80060ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060bc:	88da      	ldrh	r2, [r3, #6]
 80060be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80060c2:	f006 faa7 	bl	800c614 <USB_ReadPMA>
 80060c6:	e07f      	b.n	80061c8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80060c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ca:	78db      	ldrb	r3, [r3, #3]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d109      	bne.n	80060e4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80060d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060d2:	461a      	mov	r2, r3
 80060d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9c6 	bl	8006468 <HAL_PCD_EP_DB_Receive>
 80060dc:	4603      	mov	r3, r0
 80060de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80060e2:	e071      	b.n	80061c8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006120:	b29b      	uxth	r3, r3
 8006122:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d022      	beq.n	8006184 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	4413      	add	r3, r2
 8006158:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006162:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006166:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800616a:	2b00      	cmp	r3, #0
 800616c:	d02c      	beq.n	80061c8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006174:	6959      	ldr	r1, [r3, #20]
 8006176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006178:	891a      	ldrh	r2, [r3, #8]
 800617a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800617e:	f006 fa49 	bl	800c614 <USB_ReadPMA>
 8006182:	e021      	b.n	80061c8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	4413      	add	r3, r2
 800619e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80061ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ba:	6959      	ldr	r1, [r3, #20]
 80061bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061be:	895a      	ldrh	r2, [r3, #10]
 80061c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061c4:	f006 fa26 	bl	800c614 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80061c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061d0:	441a      	add	r2, r3
 80061d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80061d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061de:	441a      	add	r2, r3
 80061e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <PCD_EP_ISR_Handler+0x41e>
 80061ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80061f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d206      	bcs.n	8006206 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80061f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fd7d 	bl	8005cfe <HAL_PCD_DataOutStageCallback>
 8006204:	e005      	b.n	8006212 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800620c:	4618      	mov	r0, r3
 800620e:	f005 fbeb 	bl	800b9e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006212:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8117 	beq.w	800644c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800621e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	3310      	adds	r3, #16
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800625e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800626a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	2b01      	cmp	r3, #1
 8006270:	f040 80a1 	bne.w	80063b6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006276:	2200      	movs	r2, #0
 8006278:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800627a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627c:	7b1b      	ldrb	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8092 	beq.w	80063a8 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006284:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d046      	beq.n	800631c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800628e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d126      	bne.n	80062e4 <PCD_EP_ISR_Handler+0x50a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	00da      	lsls	r2, r3, #3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e061      	b.n	80063a8 <PCD_EP_ISR_Handler+0x5ce>
 80062e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d15d      	bne.n	80063a8 <PCD_EP_ISR_Handler+0x5ce>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	00da      	lsls	r2, r3, #3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e045      	b.n	80063a8 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d126      	bne.n	8006378 <PCD_EP_ISR_Handler+0x59e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	4413      	add	r3, r2
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
 8006342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	4413      	add	r3, r2
 800634c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006350:	623b      	str	r3, [r7, #32]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006370:	b29a      	uxth	r2, r3
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e017      	b.n	80063a8 <PCD_EP_ISR_Handler+0x5ce>
 8006378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d113      	bne.n	80063a8 <PCD_EP_ISR_Handler+0x5ce>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006388:	b29b      	uxth	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	4413      	add	r3, r2
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	00da      	lsls	r2, r3, #3
 8006398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639a:	4413      	add	r3, r2
 800639c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	2200      	movs	r2, #0
 80063a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fcb1 	bl	8005d16 <HAL_PCD_DataInStageCallback>
 80063b4:	e04a      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80063b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d13f      	bne.n	8006440 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4413      	add	r3, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80063e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d906      	bls.n	80063fe <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80063f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063fa:	619a      	str	r2, [r3, #24]
 80063fc:	e002      	b.n	8006404 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80063fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006400:	2200      	movs	r2, #0
 8006402:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800640c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fc7f 	bl	8005d16 <HAL_PCD_DataInStageCallback>
 8006418:	e018      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800641a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006420:	441a      	add	r2, r3
 8006422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006424:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800642c:	441a      	add	r2, r3
 800642e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006430:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006438:	4618      	mov	r0, r3
 800643a:	f005 fad5 	bl	800b9e8 <USB_EPStartXfer>
 800643e:	e005      	b.n	800644c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006440:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006442:	461a      	mov	r2, r3
 8006444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f917 	bl	800667a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006454:	b29b      	uxth	r3, r3
 8006456:	b21b      	sxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	f6ff acc3 	blt.w	8005de4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3748      	adds	r7, #72	@ 0x48
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d07c      	beq.n	800657a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4413      	add	r3, r2
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	4413      	add	r3, r2
 800649a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	8b7b      	ldrh	r3, [r7, #26]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d306      	bcc.n	80064be <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	8b7b      	ldrh	r3, [r7, #26]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	619a      	str	r2, [r3, #24]
 80064bc:	e002      	b.n	80064c4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d123      	bne.n	8006514 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	833b      	strh	r3, [r7, #24]
 80064e8:	8b3b      	ldrh	r3, [r7, #24]
 80064ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064ee:	833b      	strh	r3, [r7, #24]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	8b3b      	ldrh	r3, [r7, #24]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01f      	beq.n	800655e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006538:	82fb      	strh	r3, [r7, #22]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	8afb      	ldrh	r3, [r7, #22]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800655e:	8b7b      	ldrh	r3, [r7, #26]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8085 	beq.w	8006670 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6959      	ldr	r1, [r3, #20]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	891a      	ldrh	r2, [r3, #8]
 8006572:	8b7b      	ldrh	r3, [r7, #26]
 8006574:	f006 f84e 	bl	800c614 <USB_ReadPMA>
 8006578:	e07a      	b.n	8006670 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	4413      	add	r3, r2
 8006594:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800659e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	8b7b      	ldrh	r3, [r7, #26]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d306      	bcc.n	80065b8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	8b7b      	ldrh	r3, [r7, #26]
 80065b0:	1ad2      	subs	r2, r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	619a      	str	r2, [r3, #24]
 80065b6:	e002      	b.n	80065be <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d123      	bne.n	800660e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e0:	83fb      	strh	r3, [r7, #30]
 80065e2:	8bfb      	ldrh	r3, [r7, #30]
 80065e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065e8:	83fb      	strh	r3, [r7, #30]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	8bfb      	ldrh	r3, [r7, #30]
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11f      	bne.n	8006658 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800662e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006632:	83bb      	strh	r3, [r7, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	8bbb      	ldrh	r3, [r7, #28]
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006650:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006658:	8b7b      	ldrh	r3, [r7, #26]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	6959      	ldr	r1, [r3, #20]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	895a      	ldrh	r2, [r3, #10]
 800666a:	8b7b      	ldrh	r3, [r7, #26]
 800666c:	f005 ffd2 	bl	800c614 <USB_ReadPMA>
    }
  }

  return count;
 8006670:	8b7b      	ldrh	r3, [r7, #26]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b0a6      	sub	sp, #152	@ 0x98
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	4613      	mov	r3, r2
 8006686:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 81f7 	beq.w	8006a82 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d907      	bls.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	619a      	str	r2, [r3, #24]
 80066d6:	e002      	b.n	80066de <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 80e1 	bne.w	80068aa <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d126      	bne.n	800673e <HAL_PCD_EP_DB_Transmit+0xc4>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	4413      	add	r3, r2
 8006706:	633b      	str	r3, [r7, #48]	@ 0x30
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	00da      	lsls	r2, r3, #3
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	4413      	add	r3, r2
 8006712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006722:	b29a      	uxth	r2, r3
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29a      	uxth	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e01a      	b.n	8006774 <HAL_PCD_EP_DB_Transmit+0xfa>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d116      	bne.n	8006774 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006754:	b29b      	uxth	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675a:	4413      	add	r3, r2
 800675c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	00da      	lsls	r2, r3, #3
 8006764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006766:	4413      	add	r3, r2
 8006768:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	2200      	movs	r2, #0
 8006772:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d126      	bne.n	80067d0 <HAL_PCD_EP_DB_Transmit+0x156>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	4413      	add	r3, r2
 8006798:	623b      	str	r3, [r7, #32]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	00da      	lsls	r2, r3, #3
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e017      	b.n	8006800 <HAL_PCD_EP_DB_Transmit+0x186>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d113      	bne.n	8006800 <HAL_PCD_EP_DB_Transmit+0x186>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	4413      	add	r3, r2
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	00da      	lsls	r2, r3, #3
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	4413      	add	r3, r2
 80067f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	2200      	movs	r2, #0
 80067fe:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	78db      	ldrb	r3, [r3, #3]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d123      	bne.n	8006850 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006822:	837b      	strh	r3, [r7, #26]
 8006824:	8b7b      	ldrh	r3, [r7, #26]
 8006826:	f083 0320 	eor.w	r3, r3, #32
 800682a:	837b      	strh	r3, [r7, #26]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	8b7b      	ldrh	r3, [r7, #26]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fa5d 	bl	8005d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01f      	beq.n	80068a6 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	833b      	strh	r3, [r7, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	8b3b      	ldrh	r3, [r7, #24]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e31f      	b.n	8006eea <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d021      	beq.n	80068f8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068fe:	2b01      	cmp	r3, #1
 8006900:	f040 82ca 	bne.w	8006e98 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800690c:	441a      	add	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	69da      	ldr	r2, [r3, #28]
 8006916:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800691a:	441a      	add	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d309      	bcc.n	8006940 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6a1a      	ldr	r2, [r3, #32]
 8006936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	621a      	str	r2, [r3, #32]
 800693e:	e015      	b.n	800696c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006948:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800694c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006956:	e009      	b.n	800696c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d15f      	bne.n	8006a34 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	643b      	str	r3, [r7, #64]	@ 0x40
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006982:	b29b      	uxth	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006988:	4413      	add	r3, r2
 800698a:	643b      	str	r3, [r7, #64]	@ 0x40
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	00da      	lsls	r2, r3, #3
 8006992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006994:	4413      	add	r3, r2
 8006996:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800699c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x34e>
 80069b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e051      	b.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80069c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80069cc:	d816      	bhi.n	80069fc <HAL_PCD_EP_DB_Transmit+0x382>
 80069ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80069de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e0:	3301      	adds	r3, #1
 80069e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	029b      	lsls	r3, r3, #10
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e037      	b.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80069fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_PCD_EP_DB_Transmit+0x398>
 8006a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e01b      	b.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d117      	bne.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a50:	4413      	add	r3, r2
 8006a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00da      	lsls	r2, r3, #3
 8006a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6959      	ldr	r1, [r3, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	891a      	ldrh	r2, [r3, #8]
 8006a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f005 fd87 	bl	800c58e <USB_WritePMA>
 8006a80:	e20a      	b.n	8006e98 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d307      	bcc.n	8006ac6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	619a      	str	r2, [r3, #24]
 8006ac4:	e002      	b.n	8006acc <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 80f6 	bne.w	8006cc2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d126      	bne.n	8006b2c <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af2:	4413      	add	r3, r2
 8006af4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	00da      	lsls	r2, r3, #3
 8006afc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006afe:	4413      	add	r3, r2
 8006b00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e01a      	b.n	8006b62 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d116      	bne.n	8006b62 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b48:	4413      	add	r3, r2
 8006b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	00da      	lsls	r2, r3, #3
 8006b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b54:	4413      	add	r3, r2
 8006b56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b5e:	2200      	movs	r2, #0
 8006b60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d12f      	bne.n	8006bd2 <HAL_PCD_EP_DB_Transmit+0x558>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e01c      	b.n	8006c0c <HAL_PCD_EP_DB_Transmit+0x592>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d118      	bne.n	8006c0c <HAL_PCD_EP_DB_Transmit+0x592>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bea:	4413      	add	r3, r2
 8006bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	00da      	lsls	r2, r3, #3
 8006bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c08:	2200      	movs	r2, #0
 8006c0a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	78db      	ldrb	r3, [r3, #3]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d127      	bne.n	8006c64 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006c32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c36:	f083 0320 	eor.w	r3, r3, #32
 8006c3a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff f853 	bl	8005d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d121      	bne.n	8006cbe <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c94:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e113      	b.n	8006eea <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006cc2:	88fb      	ldrh	r3, [r7, #6]
 8006cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d121      	bne.n	8006d10 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	f040 80be 	bne.w	8006e98 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	695a      	ldr	r2, [r3, #20]
 8006d20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d24:	441a      	add	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d32:	441a      	add	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d309      	bcc.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6a1a      	ldr	r2, [r3, #32]
 8006d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	621a      	str	r2, [r3, #32]
 8006d56:	e015      	b.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006d60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006d6e:	e009      	b.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d15f      	bne.n	8006e52 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006da6:	4413      	add	r3, r2
 8006da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	00da      	lsls	r2, r3, #3
 8006db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006db2:	4413      	add	r3, r2
 8006db4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006db8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <HAL_PCD_EP_DB_Transmit+0x76c>
 8006dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e04e      	b.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dea:	d816      	bhi.n	8006e1a <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_PCD_EP_DB_Transmit+0x788>
 8006dfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dfe:	3301      	adds	r3, #1
 8006e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e034      	b.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e018      	b.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d114      	bne.n	8006e84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e68:	4413      	add	r3, r2
 8006e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00da      	lsls	r2, r3, #3
 8006e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e74:	4413      	add	r3, r2
 8006e76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6959      	ldr	r1, [r3, #20]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	895a      	ldrh	r2, [r3, #10]
 8006e90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f005 fb7b 	bl	800c58e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb2:	82fb      	strh	r3, [r7, #22]
 8006eb4:	8afb      	ldrh	r3, [r7, #22]
 8006eb6:	f083 0310 	eor.w	r3, r3, #16
 8006eba:	82fb      	strh	r3, [r7, #22]
 8006ebc:	8afb      	ldrh	r3, [r7, #22]
 8006ebe:	f083 0320 	eor.w	r3, r3, #32
 8006ec2:	82fb      	strh	r3, [r7, #22]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	441a      	add	r2, r3
 8006ed2:	8afb      	ldrh	r3, [r7, #22]
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006edc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3798      	adds	r7, #152	@ 0x98
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
	...

08006f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d141      	bne.n	8006ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7a:	d131      	bne.n	8006fe0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f7c:	4b47      	ldr	r3, [pc, #284]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f82:	4a46      	ldr	r2, [pc, #280]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f8c:	4b43      	ldr	r3, [pc, #268]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f94:	4a41      	ldr	r2, [pc, #260]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f9c:	4b40      	ldr	r3, [pc, #256]	@ (80070a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2232      	movs	r2, #50	@ 0x32
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80070a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	0c9b      	lsrs	r3, r3, #18
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fb2:	e002      	b.n	8006fba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fba:	4b38      	ldr	r3, [pc, #224]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc6:	d102      	bne.n	8006fce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f2      	bne.n	8006fb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fce:	4b33      	ldr	r3, [pc, #204]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fda:	d158      	bne.n	800708e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e057      	b.n	8007090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ff0:	e04d      	b.n	800708e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff8:	d141      	bne.n	800707e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ffa:	4b28      	ldr	r3, [pc, #160]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007006:	d131      	bne.n	800706c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007008:	4b24      	ldr	r3, [pc, #144]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800700a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800700e:	4a23      	ldr	r2, [pc, #140]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007014:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007018:	4b20      	ldr	r3, [pc, #128]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007020:	4a1e      	ldr	r2, [pc, #120]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007028:	4b1d      	ldr	r3, [pc, #116]	@ (80070a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2232      	movs	r2, #50	@ 0x32
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	4a1c      	ldr	r2, [pc, #112]	@ (80070a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	0c9b      	lsrs	r3, r3, #18
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800703e:	e002      	b.n	8007046 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3b01      	subs	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007046:	4b15      	ldr	r3, [pc, #84]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007052:	d102      	bne.n	800705a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f2      	bne.n	8007040 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007066:	d112      	bne.n	800708e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e011      	b.n	8007090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800706c:	4b0b      	ldr	r3, [pc, #44]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800706e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007072:	4a0a      	ldr	r2, [pc, #40]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007078:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800707c:	e007      	b.n	800708e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800707e:	4b07      	ldr	r3, [pc, #28]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007086:	4a05      	ldr	r2, [pc, #20]	@ (800709c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007088:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800708c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40007000 	.word	0x40007000
 80070a0:	20000000 	.word	0x20000000
 80070a4:	431bde83 	.word	0x431bde83

080070a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4a04      	ldr	r2, [pc, #16]	@ (80070c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070b6:	6093      	str	r3, [r2, #8]
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40007000 	.word	0x40007000

080070c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e2fe      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d075      	beq.n	80071d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e6:	4b97      	ldr	r3, [pc, #604]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 030c 	and.w	r3, r3, #12
 80070ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f0:	4b94      	ldr	r3, [pc, #592]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	d102      	bne.n	8007106 <HAL_RCC_OscConfig+0x3e>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d002      	beq.n	800710c <HAL_RCC_OscConfig+0x44>
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d10b      	bne.n	8007124 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710c:	4b8d      	ldr	r3, [pc, #564]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d05b      	beq.n	80071d0 <HAL_RCC_OscConfig+0x108>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d157      	bne.n	80071d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e2d9      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712c:	d106      	bne.n	800713c <HAL_RCC_OscConfig+0x74>
 800712e:	4b85      	ldr	r3, [pc, #532]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a84      	ldr	r2, [pc, #528]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e01d      	b.n	8007178 <HAL_RCC_OscConfig+0xb0>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007144:	d10c      	bne.n	8007160 <HAL_RCC_OscConfig+0x98>
 8007146:	4b7f      	ldr	r3, [pc, #508]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a7e      	ldr	r2, [pc, #504]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800714c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	4b7c      	ldr	r3, [pc, #496]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a7b      	ldr	r2, [pc, #492]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	e00b      	b.n	8007178 <HAL_RCC_OscConfig+0xb0>
 8007160:	4b78      	ldr	r3, [pc, #480]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a77      	ldr	r2, [pc, #476]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	4b75      	ldr	r3, [pc, #468]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a74      	ldr	r2, [pc, #464]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fa fcbc 	bl	8001afc <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007188:	f7fa fcb8 	bl	8001afc <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b64      	cmp	r3, #100	@ 0x64
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e29e      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800719a:	4b6a      	ldr	r3, [pc, #424]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0xc0>
 80071a6:	e014      	b.n	80071d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a8:	f7fa fca8 	bl	8001afc <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b0:	f7fa fca4 	bl	8001afc <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b64      	cmp	r3, #100	@ 0x64
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e28a      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071c2:	4b60      	ldr	r3, [pc, #384]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0xe8>
 80071ce:	e000      	b.n	80071d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d075      	beq.n	80072ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071de:	4b59      	ldr	r3, [pc, #356]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071e8:	4b56      	ldr	r3, [pc, #344]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d102      	bne.n	80071fe <HAL_RCC_OscConfig+0x136>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d002      	beq.n	8007204 <HAL_RCC_OscConfig+0x13c>
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b04      	cmp	r3, #4
 8007202:	d11f      	bne.n	8007244 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007204:	4b4f      	ldr	r3, [pc, #316]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_RCC_OscConfig+0x154>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e25d      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721c:	4b49      	ldr	r3, [pc, #292]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	4946      	ldr	r1, [pc, #280]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007230:	4b45      	ldr	r3, [pc, #276]	@ (8007348 <HAL_RCC_OscConfig+0x280>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f7fa fc15 	bl	8001a64 <HAL_InitTick>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d043      	beq.n	80072c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e249      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d023      	beq.n	8007294 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800724c:	4b3d      	ldr	r3, [pc, #244]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3c      	ldr	r2, [pc, #240]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007258:	f7fa fc50 	bl	8001afc <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800725e:	e008      	b.n	8007272 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007260:	f7fa fc4c 	bl	8001afc <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e232      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007272:	4b34      	ldr	r3, [pc, #208]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0f0      	beq.n	8007260 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727e:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	492d      	ldr	r1, [pc, #180]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	604b      	str	r3, [r1, #4]
 8007292:	e01a      	b.n	80072ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007294:	4b2b      	ldr	r3, [pc, #172]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2a      	ldr	r2, [pc, #168]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800729a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800729e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fa fc2c 	bl	8001afc <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a8:	f7fa fc28 	bl	8001afc <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e20e      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072ba:	4b22      	ldr	r3, [pc, #136]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x1e0>
 80072c6:	e000      	b.n	80072ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d041      	beq.n	800735a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01c      	beq.n	8007318 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072de:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80072e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072e4:	4a17      	ldr	r2, [pc, #92]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ee:	f7fa fc05 	bl	8001afc <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f6:	f7fa fc01 	bl	8001afc <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e1e7      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007308:	4b0e      	ldr	r3, [pc, #56]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800730a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ef      	beq.n	80072f6 <HAL_RCC_OscConfig+0x22e>
 8007316:	e020      	b.n	800735a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007318:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 800731a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731e:	4a09      	ldr	r2, [pc, #36]	@ (8007344 <HAL_RCC_OscConfig+0x27c>)
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007328:	f7fa fbe8 	bl	8001afc <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800732e:	e00d      	b.n	800734c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007330:	f7fa fbe4 	bl	8001afc <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d906      	bls.n	800734c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e1ca      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
 8007342:	bf00      	nop
 8007344:	40021000 	.word	0x40021000
 8007348:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800734c:	4b8c      	ldr	r3, [pc, #560]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 800734e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1ea      	bne.n	8007330 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80a6 	beq.w	80074b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007368:	2300      	movs	r3, #0
 800736a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800736c:	4b84      	ldr	r3, [pc, #528]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 800736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_OscConfig+0x2b4>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_RCC_OscConfig+0x2b6>
 800737c:	2300      	movs	r3, #0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00d      	beq.n	800739e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007382:	4b7f      	ldr	r3, [pc, #508]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007386:	4a7e      	ldr	r2, [pc, #504]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800738c:	6593      	str	r3, [r2, #88]	@ 0x58
 800738e:	4b7c      	ldr	r3, [pc, #496]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800739a:	2301      	movs	r3, #1
 800739c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800739e:	4b79      	ldr	r3, [pc, #484]	@ (8007584 <HAL_RCC_OscConfig+0x4bc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d118      	bne.n	80073dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073aa:	4b76      	ldr	r3, [pc, #472]	@ (8007584 <HAL_RCC_OscConfig+0x4bc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a75      	ldr	r2, [pc, #468]	@ (8007584 <HAL_RCC_OscConfig+0x4bc>)
 80073b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073b6:	f7fa fba1 	bl	8001afc <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073be:	f7fa fb9d 	bl	8001afc <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e183      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007584 <HAL_RCC_OscConfig+0x4bc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d108      	bne.n	80073f6 <HAL_RCC_OscConfig+0x32e>
 80073e4:	4b66      	ldr	r3, [pc, #408]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	4a65      	ldr	r2, [pc, #404]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073f4:	e024      	b.n	8007440 <HAL_RCC_OscConfig+0x378>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d110      	bne.n	8007420 <HAL_RCC_OscConfig+0x358>
 80073fe:	4b60      	ldr	r3, [pc, #384]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007404:	4a5e      	ldr	r2, [pc, #376]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007406:	f043 0304 	orr.w	r3, r3, #4
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800740e:	4b5c      	ldr	r3, [pc, #368]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007414:	4a5a      	ldr	r2, [pc, #360]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800741e:	e00f      	b.n	8007440 <HAL_RCC_OscConfig+0x378>
 8007420:	4b57      	ldr	r3, [pc, #348]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007426:	4a56      	ldr	r2, [pc, #344]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007430:	4b53      	ldr	r3, [pc, #332]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007436:	4a52      	ldr	r2, [pc, #328]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007438:	f023 0304 	bic.w	r3, r3, #4
 800743c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d016      	beq.n	8007476 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007448:	f7fa fb58 	bl	8001afc <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800744e:	e00a      	b.n	8007466 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007450:	f7fa fb54 	bl	8001afc <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e138      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007466:	4b46      	ldr	r3, [pc, #280]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0ed      	beq.n	8007450 <HAL_RCC_OscConfig+0x388>
 8007474:	e015      	b.n	80074a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007476:	f7fa fb41 	bl	8001afc <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800747c:	e00a      	b.n	8007494 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800747e:	f7fa fb3d 	bl	8001afc <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800748c:	4293      	cmp	r3, r2
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e121      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007494:	4b3a      	ldr	r3, [pc, #232]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1ed      	bne.n	800747e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074a2:	7ffb      	ldrb	r3, [r7, #31]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d105      	bne.n	80074b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a8:	4b35      	ldr	r3, [pc, #212]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80074aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ac:	4a34      	ldr	r2, [pc, #208]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80074ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03c      	beq.n	800753a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01c      	beq.n	8007502 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80074ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80074d0:	f043 0301 	orr.w	r3, r3, #1
 80074d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fa fb10 	bl	8001afc <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e0:	f7fa fb0c 	bl	8001afc <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e0f2      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074f2:	4b23      	ldr	r3, [pc, #140]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 80074f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0ef      	beq.n	80074e0 <HAL_RCC_OscConfig+0x418>
 8007500:	e01b      	b.n	800753a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007502:	4b1f      	ldr	r3, [pc, #124]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007508:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007512:	f7fa faf3 	bl	8001afc <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800751a:	f7fa faef 	bl	8001afc <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e0d5      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800752c:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 800752e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1ef      	bne.n	800751a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80c9 	beq.w	80076d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007544:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 030c 	and.w	r3, r3, #12
 800754c:	2b0c      	cmp	r3, #12
 800754e:	f000 8083 	beq.w	8007658 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d15e      	bne.n	8007618 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a08      	ldr	r2, [pc, #32]	@ (8007580 <HAL_RCC_OscConfig+0x4b8>)
 8007560:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007566:	f7fa fac9 	bl	8001afc <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800756c:	e00c      	b.n	8007588 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756e:	f7fa fac5 	bl	8001afc <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d905      	bls.n	8007588 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e0ab      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
 8007580:	40021000 	.word	0x40021000
 8007584:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007588:	4b55      	ldr	r3, [pc, #340]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1ec      	bne.n	800756e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007594:	4b52      	ldr	r3, [pc, #328]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	4b52      	ldr	r3, [pc, #328]	@ (80076e4 <HAL_RCC_OscConfig+0x61c>)
 800759a:	4013      	ands	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6a11      	ldr	r1, [r2, #32]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075a4:	3a01      	subs	r2, #1
 80075a6:	0112      	lsls	r2, r2, #4
 80075a8:	4311      	orrs	r1, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80075ae:	0212      	lsls	r2, r2, #8
 80075b0:	4311      	orrs	r1, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0552      	lsls	r2, r2, #21
 80075bc:	4311      	orrs	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075c2:	0852      	lsrs	r2, r2, #1
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0652      	lsls	r2, r2, #25
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075ce:	06d2      	lsls	r2, r2, #27
 80075d0:	430a      	orrs	r2, r1
 80075d2:	4943      	ldr	r1, [pc, #268]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d8:	4b41      	ldr	r3, [pc, #260]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a40      	ldr	r2, [pc, #256]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 80075de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075e4:	4b3e      	ldr	r3, [pc, #248]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4a3d      	ldr	r2, [pc, #244]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 80075ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fa fa84 	bl	8001afc <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fa fa80 	bl	8001afc <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e066      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760a:	4b35      	ldr	r3, [pc, #212]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x530>
 8007616:	e05e      	b.n	80076d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007618:	4b31      	ldr	r3, [pc, #196]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a30      	ldr	r2, [pc, #192]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fa fa6a 	bl	8001afc <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762c:	f7fa fa66 	bl	8001afc <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e04c      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800763e:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800764a:	4b25      	ldr	r3, [pc, #148]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	4924      	ldr	r1, [pc, #144]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 8007650:	4b25      	ldr	r3, [pc, #148]	@ (80076e8 <HAL_RCC_OscConfig+0x620>)
 8007652:	4013      	ands	r3, r2
 8007654:	60cb      	str	r3, [r1, #12]
 8007656:	e03e      	b.n	80076d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e039      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007664:	4b1e      	ldr	r3, [pc, #120]	@ (80076e0 <HAL_RCC_OscConfig+0x618>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f003 0203 	and.w	r2, r3, #3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	429a      	cmp	r2, r3
 8007676:	d12c      	bne.n	80076d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	3b01      	subs	r3, #1
 8007684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	429a      	cmp	r2, r3
 8007688:	d123      	bne.n	80076d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d11b      	bne.n	80076d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d113      	bne.n	80076d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	3b01      	subs	r3, #1
 80076b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d109      	bne.n	80076d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	3b01      	subs	r3, #1
 80076cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d001      	beq.n	80076d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3720      	adds	r7, #32
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40021000 	.word	0x40021000
 80076e4:	019f800c 	.word	0x019f800c
 80076e8:	feeefffc 	.word	0xfeeefffc

080076ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e11e      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007704:	4b91      	ldr	r3, [pc, #580]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d910      	bls.n	8007734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b8e      	ldr	r3, [pc, #568]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 020f 	bic.w	r2, r3, #15
 800771a:	498c      	ldr	r1, [pc, #560]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b8a      	ldr	r3, [pc, #552]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e106      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d073      	beq.n	8007828 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d129      	bne.n	800779c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007748:	4b81      	ldr	r3, [pc, #516]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0f4      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007758:	f000 f99e 	bl	8007a98 <RCC_GetSysClockFreqFromPLLSource>
 800775c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4a7c      	ldr	r2, [pc, #496]	@ (8007954 <HAL_RCC_ClockConfig+0x268>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d93f      	bls.n	80077e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007766:	4b7a      	ldr	r3, [pc, #488]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800777a:	2b00      	cmp	r3, #0
 800777c:	d033      	beq.n	80077e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12f      	bne.n	80077e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007786:	4b72      	ldr	r3, [pc, #456]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800778e:	4a70      	ldr	r2, [pc, #448]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007794:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007796:	2380      	movs	r3, #128	@ 0x80
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	e024      	b.n	80077e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d107      	bne.n	80077b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d109      	bne.n	80077c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e0c6      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077b4:	4b66      	ldr	r3, [pc, #408]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0be      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077c4:	f000 f8ce 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 80077c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4a61      	ldr	r2, [pc, #388]	@ (8007954 <HAL_RCC_ClockConfig+0x268>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d909      	bls.n	80077e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077da:	4a5d      	ldr	r2, [pc, #372]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077e2:	2380      	movs	r3, #128	@ 0x80
 80077e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f023 0203 	bic.w	r2, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	4957      	ldr	r1, [pc, #348]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f8:	f7fa f980 	bl	8001afc <HAL_GetTick>
 80077fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fe:	e00a      	b.n	8007816 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007800:	f7fa f97c 	bl	8001afc <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800780e:	4293      	cmp	r3, r2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e095      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007816:	4b4e      	ldr	r3, [pc, #312]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 020c 	and.w	r2, r3, #12
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	429a      	cmp	r2, r3
 8007826:	d1eb      	bne.n	8007800 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d023      	beq.n	800787c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007840:	4b43      	ldr	r3, [pc, #268]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4a42      	ldr	r2, [pc, #264]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007846:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800784a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007858:	4b3d      	ldr	r3, [pc, #244]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007860:	4a3b      	ldr	r2, [pc, #236]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007862:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007866:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007868:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4936      	ldr	r1, [pc, #216]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007876:	4313      	orrs	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
 800787a:	e008      	b.n	800788e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b80      	cmp	r3, #128	@ 0x80
 8007880:	d105      	bne.n	800788e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007882:	4b33      	ldr	r3, [pc, #204]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4a32      	ldr	r2, [pc, #200]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007888:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800788c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800788e:	4b2f      	ldr	r3, [pc, #188]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d21d      	bcs.n	80078d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789c:	4b2b      	ldr	r3, [pc, #172]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 020f 	bic.w	r2, r3, #15
 80078a4:	4929      	ldr	r1, [pc, #164]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078ac:	f7fa f926 	bl	8001afc <HAL_GetTick>
 80078b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b2:	e00a      	b.n	80078ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b4:	f7fa f922 	bl	8001afc <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e03b      	b.n	8007942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ca:	4b20      	ldr	r3, [pc, #128]	@ (800794c <HAL_RCC_ClockConfig+0x260>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1ed      	bne.n	80078b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4917      	ldr	r1, [pc, #92]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007902:	4b13      	ldr	r3, [pc, #76]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	490f      	ldr	r1, [pc, #60]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 8007912:	4313      	orrs	r3, r2
 8007914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007916:	f000 f825 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 800791a:	4602      	mov	r2, r0
 800791c:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <HAL_RCC_ClockConfig+0x264>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	490c      	ldr	r1, [pc, #48]	@ (8007958 <HAL_RCC_ClockConfig+0x26c>)
 8007928:	5ccb      	ldrb	r3, [r1, r3]
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <HAL_RCC_ClockConfig+0x270>)
 8007934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007936:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <HAL_RCC_ClockConfig+0x274>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f7fa f892 	bl	8001a64 <HAL_InitTick>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40022000 	.word	0x40022000
 8007950:	40021000 	.word	0x40021000
 8007954:	04c4b400 	.word	0x04c4b400
 8007958:	0800c724 	.word	0x0800c724
 800795c:	20000000 	.word	0x20000000
 8007960:	20000004 	.word	0x20000004

08007964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800796a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b04      	cmp	r3, #4
 8007974:	d102      	bne.n	800797c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007976:	4b2a      	ldr	r3, [pc, #168]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	e047      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800797c:	4b27      	ldr	r3, [pc, #156]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b08      	cmp	r3, #8
 8007986:	d102      	bne.n	800798e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007988:	4b26      	ldr	r3, [pc, #152]	@ (8007a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	e03e      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800798e:	4b23      	ldr	r3, [pc, #140]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 030c 	and.w	r3, r3, #12
 8007996:	2b0c      	cmp	r3, #12
 8007998:	d136      	bne.n	8007a08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800799a:	4b20      	ldr	r3, [pc, #128]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079a4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	3301      	adds	r3, #1
 80079b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d10c      	bne.n	80079d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	4a16      	ldr	r2, [pc, #88]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079c2:	68d2      	ldr	r2, [r2, #12]
 80079c4:	0a12      	lsrs	r2, r2, #8
 80079c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079ca:	fb02 f303 	mul.w	r3, r2, r3
 80079ce:	617b      	str	r3, [r7, #20]
      break;
 80079d0:	e00c      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079d2:	4a13      	ldr	r2, [pc, #76]	@ (8007a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079da:	4a10      	ldr	r2, [pc, #64]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079dc:	68d2      	ldr	r2, [r2, #12]
 80079de:	0a12      	lsrs	r2, r2, #8
 80079e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	617b      	str	r3, [r7, #20]
      break;
 80079ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	0e5b      	lsrs	r3, r3, #25
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	3301      	adds	r3, #1
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e001      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a0c:	693b      	ldr	r3, [r7, #16]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	00f42400 	.word	0x00f42400
 8007a24:	007a1200 	.word	0x007a1200

08007a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a2c:	4b03      	ldr	r3, [pc, #12]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000000 	.word	0x20000000

08007a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a44:	f7ff fff0 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	4b06      	ldr	r3, [pc, #24]	@ (8007a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	4904      	ldr	r1, [pc, #16]	@ (8007a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a56:	5ccb      	ldrb	r3, [r1, r3]
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40021000 	.word	0x40021000
 8007a68:	0800c734 	.word	0x0800c734

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a70:	f7ff ffda 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0adb      	lsrs	r3, r3, #11
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4904      	ldr	r1, [pc, #16]	@ (8007a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40021000 	.word	0x40021000
 8007a94:	0800c734 	.word	0x0800c734

08007a98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	091b      	lsrs	r3, r3, #4
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10c      	bne.n	8007ad6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007abc:	4a17      	ldr	r2, [pc, #92]	@ (8007b1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	4a14      	ldr	r2, [pc, #80]	@ (8007b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ac6:	68d2      	ldr	r2, [r2, #12]
 8007ac8:	0a12      	lsrs	r2, r2, #8
 8007aca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	617b      	str	r3, [r7, #20]
    break;
 8007ad4:	e00c      	b.n	8007af0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ad6:	4a12      	ldr	r2, [pc, #72]	@ (8007b20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ade:	4a0e      	ldr	r2, [pc, #56]	@ (8007b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ae0:	68d2      	ldr	r2, [r2, #12]
 8007ae2:	0a12      	lsrs	r2, r2, #8
 8007ae4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ae8:	fb02 f303 	mul.w	r3, r2, r3
 8007aec:	617b      	str	r3, [r7, #20]
    break;
 8007aee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007af0:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	0e5b      	lsrs	r3, r3, #25
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	3301      	adds	r3, #1
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b0a:	687b      	ldr	r3, [r7, #4]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40021000 	.word	0x40021000
 8007b1c:	007a1200 	.word	0x007a1200
 8007b20:	00f42400 	.word	0x00f42400

08007b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b30:	2300      	movs	r3, #0
 8007b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8098 	beq.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b42:	2300      	movs	r3, #0
 8007b44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b46:	4b43      	ldr	r3, [pc, #268]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10d      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b52:	4b40      	ldr	r3, [pc, #256]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b56:	4a3f      	ldr	r2, [pc, #252]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	60bb      	str	r3, [r7, #8]
 8007b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a39      	ldr	r2, [pc, #228]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b7a:	f7f9 ffbf 	bl	8001afc <HAL_GetTick>
 8007b7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b80:	e009      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b82:	f7f9 ffbb 	bl	8001afc <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d902      	bls.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	74fb      	strb	r3, [r7, #19]
        break;
 8007b94:	e005      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b96:	4b30      	ldr	r3, [pc, #192]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0ef      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ba2:	7cfb      	ldrb	r3, [r7, #19]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d159      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01e      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d019      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bc4:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bd0:	4b20      	ldr	r3, [pc, #128]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007be0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bf0:	4a18      	ldr	r2, [pc, #96]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c02:	f7f9 ff7b 	bl	8001afc <HAL_GetTick>
 8007c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c08:	e00b      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0a:	f7f9 ff77 	bl	8001afc <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d902      	bls.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8007c20:	e006      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c22:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0ec      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c36:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c44:	4903      	ldr	r1, [pc, #12]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c4c:	e008      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c4e:	7cfb      	ldrb	r3, [r7, #19]
 8007c50:	74bb      	strb	r3, [r7, #18]
 8007c52:	e005      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c54:	40021000 	.word	0x40021000
 8007c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	7cfb      	ldrb	r3, [r7, #19]
 8007c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c60:	7c7b      	ldrb	r3, [r7, #17]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d105      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c66:	4ba7      	ldr	r3, [pc, #668]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6a:	4aa6      	ldr	r2, [pc, #664]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c7e:	4ba1      	ldr	r3, [pc, #644]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c84:	f023 0203 	bic.w	r2, r3, #3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	499d      	ldr	r1, [pc, #628]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ca0:	4b98      	ldr	r3, [pc, #608]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	f023 020c 	bic.w	r2, r3, #12
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	4995      	ldr	r1, [pc, #596]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cc2:	4b90      	ldr	r3, [pc, #576]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	498c      	ldr	r1, [pc, #560]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ce4:	4b87      	ldr	r3, [pc, #540]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	4984      	ldr	r1, [pc, #528]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d06:	4b7f      	ldr	r3, [pc, #508]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	497b      	ldr	r1, [pc, #492]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d28:	4b76      	ldr	r3, [pc, #472]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	4973      	ldr	r1, [pc, #460]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	496a      	ldr	r1, [pc, #424]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d6c:	4b65      	ldr	r3, [pc, #404]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	4962      	ldr	r1, [pc, #392]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	4959      	ldr	r1, [pc, #356]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007db0:	4b54      	ldr	r3, [pc, #336]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007db6:	f023 0203 	bic.w	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	4951      	ldr	r1, [pc, #324]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dd2:	4b4c      	ldr	r3, [pc, #304]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	4948      	ldr	r1, [pc, #288]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d015      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007df4:	4b43      	ldr	r3, [pc, #268]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e02:	4940      	ldr	r1, [pc, #256]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e12:	d105      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e14:	4b3b      	ldr	r3, [pc, #236]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a3a      	ldr	r2, [pc, #232]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e1e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e2c:	4b35      	ldr	r3, [pc, #212]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3a:	4932      	ldr	r1, [pc, #200]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a2c      	ldr	r2, [pc, #176]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d015      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e64:	4b27      	ldr	r3, [pc, #156]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	4924      	ldr	r1, [pc, #144]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e82:	d105      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e84:	4b1f      	ldr	r3, [pc, #124]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4a1e      	ldr	r2, [pc, #120]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e9c:	4b19      	ldr	r3, [pc, #100]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eaa:	4916      	ldr	r1, [pc, #88]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eba:	d105      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ebc:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	4a10      	ldr	r2, [pc, #64]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ec6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	4908      	ldr	r1, [pc, #32]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef2:	d109      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ef4:	4b03      	ldr	r3, [pc, #12]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4a02      	ldr	r2, [pc, #8]	@ (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007efe:	60d3      	str	r3, [r2, #12]
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d015      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f14:	4b29      	ldr	r3, [pc, #164]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	4926      	ldr	r1, [pc, #152]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f32:	d105      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f34:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	4a20      	ldr	r2, [pc, #128]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d015      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f5a:	4918      	ldr	r1, [pc, #96]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d105      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f6c:	4b13      	ldr	r3, [pc, #76]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4a12      	ldr	r2, [pc, #72]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d015      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f84:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f92:	490a      	ldr	r1, [pc, #40]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fa2:	d105      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fa4:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4a04      	ldr	r2, [pc, #16]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40021000 	.word	0x40021000

08007fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e049      	b.n	8008066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7f9 fb72 	bl	80016d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f000 fa5c 	bl	80084bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <HAL_TIM_PWM_Start+0x24>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	bf14      	ite	ne
 800808c:	2301      	movne	r3, #1
 800808e:	2300      	moveq	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e03c      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d109      	bne.n	80080ae <HAL_TIM_PWM_Start+0x3e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	bf14      	ite	ne
 80080a6:	2301      	movne	r3, #1
 80080a8:	2300      	moveq	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	e02f      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d109      	bne.n	80080c8 <HAL_TIM_PWM_Start+0x58>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e022      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b0c      	cmp	r3, #12
 80080cc:	d109      	bne.n	80080e2 <HAL_TIM_PWM_Start+0x72>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e015      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d109      	bne.n	80080fc <HAL_TIM_PWM_Start+0x8c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	e008      	b.n	800810e <HAL_TIM_PWM_Start+0x9e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0a6      	b.n	8008264 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <HAL_TIM_PWM_Start+0xb6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008124:	e023      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d104      	bne.n	8008136 <HAL_TIM_PWM_Start+0xc6>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008134:	e01b      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d104      	bne.n	8008146 <HAL_TIM_PWM_Start+0xd6>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008144:	e013      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d104      	bne.n	8008156 <HAL_TIM_PWM_Start+0xe6>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008154:	e00b      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d104      	bne.n	8008166 <HAL_TIM_PWM_Start+0xf6>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008164:	e003      	b.n	800816e <HAL_TIM_PWM_Start+0xfe>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2201      	movs	r2, #1
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fd7e 	bl	8008c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a3a      	ldr	r2, [pc, #232]	@ (800826c <HAL_TIM_PWM_Start+0x1fc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d018      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a39      	ldr	r2, [pc, #228]	@ (8008270 <HAL_TIM_PWM_Start+0x200>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a37      	ldr	r2, [pc, #220]	@ (8008274 <HAL_TIM_PWM_Start+0x204>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00e      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a36      	ldr	r2, [pc, #216]	@ (8008278 <HAL_TIM_PWM_Start+0x208>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d009      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a34      	ldr	r2, [pc, #208]	@ (800827c <HAL_TIM_PWM_Start+0x20c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d004      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x148>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <HAL_TIM_PWM_Start+0x210>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_PWM_Start+0x14c>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <HAL_TIM_PWM_Start+0x14e>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a25      	ldr	r2, [pc, #148]	@ (800826c <HAL_TIM_PWM_Start+0x1fc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d022      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e4:	d01d      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a26      	ldr	r2, [pc, #152]	@ (8008284 <HAL_TIM_PWM_Start+0x214>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d018      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a24      	ldr	r2, [pc, #144]	@ (8008288 <HAL_TIM_PWM_Start+0x218>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a23      	ldr	r2, [pc, #140]	@ (800828c <HAL_TIM_PWM_Start+0x21c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <HAL_TIM_PWM_Start+0x200>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d009      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <HAL_TIM_PWM_Start+0x204>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d004      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1b2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a18      	ldr	r2, [pc, #96]	@ (8008280 <HAL_TIM_PWM_Start+0x210>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d115      	bne.n	800824e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	4b19      	ldr	r3, [pc, #100]	@ (8008290 <HAL_TIM_PWM_Start+0x220>)
 800822a:	4013      	ands	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b06      	cmp	r3, #6
 8008232:	d015      	beq.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800823a:	d011      	beq.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824c:	e008      	b.n	8008260 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e000      	b.n	8008262 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800
 8008280:	40015000 	.word	0x40015000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	00010007 	.word	0x00010007

08008294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e0ff      	b.n	80084b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b14      	cmp	r3, #20
 80082be:	f200 80f0 	bhi.w	80084a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	080084a3 	.word	0x080084a3
 80082d0:	080084a3 	.word	0x080084a3
 80082d4:	080084a3 	.word	0x080084a3
 80082d8:	0800835d 	.word	0x0800835d
 80082dc:	080084a3 	.word	0x080084a3
 80082e0:	080084a3 	.word	0x080084a3
 80082e4:	080084a3 	.word	0x080084a3
 80082e8:	0800839f 	.word	0x0800839f
 80082ec:	080084a3 	.word	0x080084a3
 80082f0:	080084a3 	.word	0x080084a3
 80082f4:	080084a3 	.word	0x080084a3
 80082f8:	080083df 	.word	0x080083df
 80082fc:	080084a3 	.word	0x080084a3
 8008300:	080084a3 	.word	0x080084a3
 8008304:	080084a3 	.word	0x080084a3
 8008308:	08008421 	.word	0x08008421
 800830c:	080084a3 	.word	0x080084a3
 8008310:	080084a3 	.word	0x080084a3
 8008314:	080084a3 	.word	0x080084a3
 8008318:	08008461 	.word	0x08008461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f97e 	bl	8008624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0208 	orr.w	r2, r2, #8
 8008336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0204 	bic.w	r2, r2, #4
 8008346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6999      	ldr	r1, [r3, #24]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	619a      	str	r2, [r3, #24]
      break;
 800835a:	e0a5      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f9f8 	bl	8008758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6999      	ldr	r1, [r3, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	021a      	lsls	r2, r3, #8
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	619a      	str	r2, [r3, #24]
      break;
 800839c:	e084      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fa6b 	bl	8008880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0208 	orr.w	r2, r2, #8
 80083b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 0204 	bic.w	r2, r2, #4
 80083c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69d9      	ldr	r1, [r3, #28]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	61da      	str	r2, [r3, #28]
      break;
 80083dc:	e064      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fadd 	bl	80089a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69d9      	ldr	r1, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	021a      	lsls	r2, r3, #8
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	61da      	str	r2, [r3, #28]
      break;
 800841e:	e043      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fb50 	bl	8008acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0208 	orr.w	r2, r2, #8
 800843a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0204 	bic.w	r2, r2, #4
 800844a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800845e:	e023      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fb9a 	bl	8008ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800847a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800848a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	021a      	lsls	r2, r3, #8
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084a0:	e002      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
      break;
 80084a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop

080084bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a4c      	ldr	r2, [pc, #304]	@ (8008600 <TIM_Base_SetConfig+0x144>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d017      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084da:	d013      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a49      	ldr	r2, [pc, #292]	@ (8008604 <TIM_Base_SetConfig+0x148>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00f      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a48      	ldr	r2, [pc, #288]	@ (8008608 <TIM_Base_SetConfig+0x14c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00b      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a47      	ldr	r2, [pc, #284]	@ (800860c <TIM_Base_SetConfig+0x150>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a46      	ldr	r2, [pc, #280]	@ (8008610 <TIM_Base_SetConfig+0x154>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0x48>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a45      	ldr	r2, [pc, #276]	@ (8008614 <TIM_Base_SetConfig+0x158>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d108      	bne.n	8008516 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a39      	ldr	r2, [pc, #228]	@ (8008600 <TIM_Base_SetConfig+0x144>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d023      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008524:	d01f      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a36      	ldr	r2, [pc, #216]	@ (8008604 <TIM_Base_SetConfig+0x148>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01b      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a35      	ldr	r2, [pc, #212]	@ (8008608 <TIM_Base_SetConfig+0x14c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d017      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a34      	ldr	r2, [pc, #208]	@ (800860c <TIM_Base_SetConfig+0x150>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a33      	ldr	r2, [pc, #204]	@ (8008610 <TIM_Base_SetConfig+0x154>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00f      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a33      	ldr	r2, [pc, #204]	@ (8008618 <TIM_Base_SetConfig+0x15c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00b      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a32      	ldr	r2, [pc, #200]	@ (800861c <TIM_Base_SetConfig+0x160>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a31      	ldr	r2, [pc, #196]	@ (8008620 <TIM_Base_SetConfig+0x164>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d003      	beq.n	8008566 <TIM_Base_SetConfig+0xaa>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2c      	ldr	r2, [pc, #176]	@ (8008614 <TIM_Base_SetConfig+0x158>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d108      	bne.n	8008578 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <TIM_Base_SetConfig+0x144>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d013      	beq.n	80085cc <TIM_Base_SetConfig+0x110>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008610 <TIM_Base_SetConfig+0x154>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00f      	beq.n	80085cc <TIM_Base_SetConfig+0x110>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008618 <TIM_Base_SetConfig+0x15c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00b      	beq.n	80085cc <TIM_Base_SetConfig+0x110>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a19      	ldr	r2, [pc, #100]	@ (800861c <TIM_Base_SetConfig+0x160>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <TIM_Base_SetConfig+0x110>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a18      	ldr	r2, [pc, #96]	@ (8008620 <TIM_Base_SetConfig+0x164>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_Base_SetConfig+0x110>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a13      	ldr	r2, [pc, #76]	@ (8008614 <TIM_Base_SetConfig+0x158>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d103      	bne.n	80085d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d105      	bne.n	80085f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f023 0201 	bic.w	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	611a      	str	r2, [r3, #16]
  }
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40000400 	.word	0x40000400
 8008608:	40000800 	.word	0x40000800
 800860c:	40000c00 	.word	0x40000c00
 8008610:	40013400 	.word	0x40013400
 8008614:	40015000 	.word	0x40015000
 8008618:	40014000 	.word	0x40014000
 800861c:	40014400 	.word	0x40014400
 8008620:	40014800 	.word	0x40014800

08008624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f023 0201 	bic.w	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f023 0302 	bic.w	r3, r3, #2
 8008670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4313      	orrs	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a30      	ldr	r2, [pc, #192]	@ (8008740 <TIM_OC1_SetConfig+0x11c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d013      	beq.n	80086ac <TIM_OC1_SetConfig+0x88>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a2f      	ldr	r2, [pc, #188]	@ (8008744 <TIM_OC1_SetConfig+0x120>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00f      	beq.n	80086ac <TIM_OC1_SetConfig+0x88>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a2e      	ldr	r2, [pc, #184]	@ (8008748 <TIM_OC1_SetConfig+0x124>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_OC1_SetConfig+0x88>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a2d      	ldr	r2, [pc, #180]	@ (800874c <TIM_OC1_SetConfig+0x128>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_OC1_SetConfig+0x88>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a2c      	ldr	r2, [pc, #176]	@ (8008750 <TIM_OC1_SetConfig+0x12c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_OC1_SetConfig+0x88>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a2b      	ldr	r2, [pc, #172]	@ (8008754 <TIM_OC1_SetConfig+0x130>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d10c      	bne.n	80086c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f023 0308 	bic.w	r3, r3, #8
 80086b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f023 0304 	bic.w	r3, r3, #4
 80086c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008740 <TIM_OC1_SetConfig+0x11c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d013      	beq.n	80086f6 <TIM_OC1_SetConfig+0xd2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008744 <TIM_OC1_SetConfig+0x120>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00f      	beq.n	80086f6 <TIM_OC1_SetConfig+0xd2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008748 <TIM_OC1_SetConfig+0x124>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00b      	beq.n	80086f6 <TIM_OC1_SetConfig+0xd2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a1a      	ldr	r2, [pc, #104]	@ (800874c <TIM_OC1_SetConfig+0x128>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d007      	beq.n	80086f6 <TIM_OC1_SetConfig+0xd2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a19      	ldr	r2, [pc, #100]	@ (8008750 <TIM_OC1_SetConfig+0x12c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC1_SetConfig+0xd2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a18      	ldr	r2, [pc, #96]	@ (8008754 <TIM_OC1_SetConfig+0x130>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d111      	bne.n	800871a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	621a      	str	r2, [r3, #32]
}
 8008734:	bf00      	nop
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400
 8008748:	40014000 	.word	0x40014000
 800874c:	40014400 	.word	0x40014400
 8008750:	40014800 	.word	0x40014800
 8008754:	40015000 	.word	0x40015000

08008758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f023 0210 	bic.w	r2, r3, #16
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 0320 	bic.w	r3, r3, #32
 80087a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008868 <TIM_OC2_SetConfig+0x110>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d007      	beq.n	80087cc <TIM_OC2_SetConfig+0x74>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a2b      	ldr	r2, [pc, #172]	@ (800886c <TIM_OC2_SetConfig+0x114>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC2_SetConfig+0x74>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008870 <TIM_OC2_SetConfig+0x118>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d10d      	bne.n	80087e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008868 <TIM_OC2_SetConfig+0x110>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <TIM_OC2_SetConfig+0xc0>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a1e      	ldr	r2, [pc, #120]	@ (800886c <TIM_OC2_SetConfig+0x114>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00f      	beq.n	8008818 <TIM_OC2_SetConfig+0xc0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008874 <TIM_OC2_SetConfig+0x11c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_OC2_SetConfig+0xc0>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a1d      	ldr	r2, [pc, #116]	@ (8008878 <TIM_OC2_SetConfig+0x120>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_OC2_SetConfig+0xc0>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a1c      	ldr	r2, [pc, #112]	@ (800887c <TIM_OC2_SetConfig+0x124>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_OC2_SetConfig+0xc0>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <TIM_OC2_SetConfig+0x118>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d113      	bne.n	8008840 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800881e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	621a      	str	r2, [r3, #32]
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40013400 	.word	0x40013400
 8008870:	40015000 	.word	0x40015000
 8008874:	40014000 	.word	0x40014000
 8008878:	40014400 	.word	0x40014400
 800887c:	40014800 	.word	0x40014800

08008880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a2b      	ldr	r2, [pc, #172]	@ (800898c <TIM_OC3_SetConfig+0x10c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d007      	beq.n	80088f2 <TIM_OC3_SetConfig+0x72>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <TIM_OC3_SetConfig+0x110>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d003      	beq.n	80088f2 <TIM_OC3_SetConfig+0x72>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a29      	ldr	r2, [pc, #164]	@ (8008994 <TIM_OC3_SetConfig+0x114>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10d      	bne.n	800890e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800890c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a1e      	ldr	r2, [pc, #120]	@ (800898c <TIM_OC3_SetConfig+0x10c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d013      	beq.n	800893e <TIM_OC3_SetConfig+0xbe>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a1d      	ldr	r2, [pc, #116]	@ (8008990 <TIM_OC3_SetConfig+0x110>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00f      	beq.n	800893e <TIM_OC3_SetConfig+0xbe>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a1d      	ldr	r2, [pc, #116]	@ (8008998 <TIM_OC3_SetConfig+0x118>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00b      	beq.n	800893e <TIM_OC3_SetConfig+0xbe>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a1c      	ldr	r2, [pc, #112]	@ (800899c <TIM_OC3_SetConfig+0x11c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d007      	beq.n	800893e <TIM_OC3_SetConfig+0xbe>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a1b      	ldr	r2, [pc, #108]	@ (80089a0 <TIM_OC3_SetConfig+0x120>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d003      	beq.n	800893e <TIM_OC3_SetConfig+0xbe>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a16      	ldr	r2, [pc, #88]	@ (8008994 <TIM_OC3_SetConfig+0x114>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d113      	bne.n	8008966 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800894c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4313      	orrs	r3, r2
 8008958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4313      	orrs	r3, r2
 8008964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	621a      	str	r2, [r3, #32]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	40012c00 	.word	0x40012c00
 8008990:	40013400 	.word	0x40013400
 8008994:	40015000 	.word	0x40015000
 8008998:	40014000 	.word	0x40014000
 800899c:	40014400 	.word	0x40014400
 80089a0:	40014800 	.word	0x40014800

080089a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	031b      	lsls	r3, r3, #12
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a2c      	ldr	r2, [pc, #176]	@ (8008ab4 <TIM_OC4_SetConfig+0x110>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_OC4_SetConfig+0x74>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ab8 <TIM_OC4_SetConfig+0x114>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_OC4_SetConfig+0x74>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a2a      	ldr	r2, [pc, #168]	@ (8008abc <TIM_OC4_SetConfig+0x118>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10d      	bne.n	8008a34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a1f      	ldr	r2, [pc, #124]	@ (8008ab4 <TIM_OC4_SetConfig+0x110>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d013      	beq.n	8008a64 <TIM_OC4_SetConfig+0xc0>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab8 <TIM_OC4_SetConfig+0x114>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00f      	beq.n	8008a64 <TIM_OC4_SetConfig+0xc0>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	@ (8008ac0 <TIM_OC4_SetConfig+0x11c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <TIM_OC4_SetConfig+0xc0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac4 <TIM_OC4_SetConfig+0x120>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d007      	beq.n	8008a64 <TIM_OC4_SetConfig+0xc0>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <TIM_OC4_SetConfig+0x124>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_OC4_SetConfig+0xc0>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a17      	ldr	r2, [pc, #92]	@ (8008abc <TIM_OC4_SetConfig+0x118>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d113      	bne.n	8008a8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	019b      	lsls	r3, r3, #6
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	019b      	lsls	r3, r3, #6
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	40012c00 	.word	0x40012c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40015000 	.word	0x40015000
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40014400 	.word	0x40014400
 8008ac8:	40014800 	.word	0x40014800

08008acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	041b      	lsls	r3, r3, #16
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <TIM_OC5_SetConfig+0xbc>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <TIM_OC5_SetConfig+0x82>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a18      	ldr	r2, [pc, #96]	@ (8008b8c <TIM_OC5_SetConfig+0xc0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_OC5_SetConfig+0x82>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a17      	ldr	r2, [pc, #92]	@ (8008b90 <TIM_OC5_SetConfig+0xc4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_OC5_SetConfig+0x82>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a16      	ldr	r2, [pc, #88]	@ (8008b94 <TIM_OC5_SetConfig+0xc8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_OC5_SetConfig+0x82>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a15      	ldr	r2, [pc, #84]	@ (8008b98 <TIM_OC5_SetConfig+0xcc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_OC5_SetConfig+0x82>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a14      	ldr	r2, [pc, #80]	@ (8008b9c <TIM_OC5_SetConfig+0xd0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d109      	bne.n	8008b62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	621a      	str	r2, [r3, #32]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40013400 	.word	0x40013400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800
 8008b9c:	40015000 	.word	0x40015000

08008ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	051b      	lsls	r3, r3, #20
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8008c60 <TIM_OC6_SetConfig+0xc0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d013      	beq.n	8008c24 <TIM_OC6_SetConfig+0x84>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a19      	ldr	r2, [pc, #100]	@ (8008c64 <TIM_OC6_SetConfig+0xc4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00f      	beq.n	8008c24 <TIM_OC6_SetConfig+0x84>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a18      	ldr	r2, [pc, #96]	@ (8008c68 <TIM_OC6_SetConfig+0xc8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00b      	beq.n	8008c24 <TIM_OC6_SetConfig+0x84>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a17      	ldr	r2, [pc, #92]	@ (8008c6c <TIM_OC6_SetConfig+0xcc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d007      	beq.n	8008c24 <TIM_OC6_SetConfig+0x84>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a16      	ldr	r2, [pc, #88]	@ (8008c70 <TIM_OC6_SetConfig+0xd0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_OC6_SetConfig+0x84>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	@ (8008c74 <TIM_OC6_SetConfig+0xd4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d109      	bne.n	8008c38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	029b      	lsls	r3, r3, #10
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40013400 	.word	0x40013400
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400
 8008c70:	40014800 	.word	0x40014800
 8008c74:	40015000 	.word	0x40015000

08008c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a1a      	ldr	r2, [r3, #32]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a1a      	ldr	r2, [r3, #32]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e074      	b.n	8008dc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a34      	ldr	r2, [pc, #208]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a33      	ldr	r2, [pc, #204]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a31      	ldr	r2, [pc, #196]	@ (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d108      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a21      	ldr	r2, [pc, #132]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d022      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5c:	d01d      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a1f      	ldr	r2, [pc, #124]	@ (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d018      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d013      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1c      	ldr	r2, [pc, #112]	@ (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00e      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a15      	ldr	r2, [pc, #84]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d009      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d004      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a11      	ldr	r2, [pc, #68]	@ (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d10c      	bne.n	8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40013400 	.word	0x40013400
 8008ddc:	40015000 	.word	0x40015000
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40014000 	.word	0x40014000

08008df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e078      	b.n	8008efe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1c      	ldr	r2, [pc, #112]	@ (8008f0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d009      	beq.n	8008eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a19      	ldr	r2, [pc, #100]	@ (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d11c      	bne.n	8008eec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	051b      	lsls	r3, r3, #20
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40012c00 	.word	0x40012c00
 8008f10:	40013400 	.word	0x40013400
 8008f14:	40015000 	.word	0x40015000

08008f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e042      	b.n	8008fb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7f8 fc1f 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2224      	movs	r2, #36	@ 0x24
 8008f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0201 	bic.w	r2, r2, #1
 8008f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 ffea 	bl	8009f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fceb 	bl	8009944 <UART_SetConfig>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e01b      	b.n	8008fb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689a      	ldr	r2, [r3, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0201 	orr.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f869 	bl	800a080 <UART_CheckIdleState>
 8008fae:	4603      	mov	r3, r0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	@ 0x28
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	d17b      	bne.n	80090ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_UART_Transmit+0x26>
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e074      	b.n	80090cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2221      	movs	r2, #33	@ 0x21
 8008fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ff2:	f7f8 fd83 	bl	8001afc <HAL_GetTick>
 8008ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009010:	d108      	bne.n	8009024 <HAL_UART_Transmit+0x6c>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	e003      	b.n	800902c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800902c:	e030      	b.n	8009090 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2200      	movs	r2, #0
 8009036:	2180      	movs	r1, #128	@ 0x80
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f001 f8cb 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2220      	movs	r2, #32
 8009048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e03d      	b.n	80090cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009064:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	3302      	adds	r3, #2
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e007      	b.n	800907e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	781a      	ldrb	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	3301      	adds	r3, #1
 800907c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009096:	b29b      	uxth	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1c8      	bne.n	800902e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	2140      	movs	r1, #64	@ 0x40
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f001 f894 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e006      	b.n	80090cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e000      	b.n	80090cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
  }
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3720      	adds	r7, #32
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b091      	sub	sp, #68	@ 0x44
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d178      	bne.n	80091de <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <HAL_UART_Transmit_IT+0x24>
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e071      	b.n	80091e0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2221      	movs	r2, #33	@ 0x21
 8009124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800912c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009130:	d12a      	bne.n	8009188 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800913a:	d107      	bne.n	800914c <HAL_UART_Transmit_IT+0x78>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a29      	ldr	r2, [pc, #164]	@ (80091ec <HAL_UART_Transmit_IT+0x118>)
 8009148:	679a      	str	r2, [r3, #120]	@ 0x78
 800914a:	e002      	b.n	8009152 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a28      	ldr	r2, [pc, #160]	@ (80091f0 <HAL_UART_Transmit_IT+0x11c>)
 8009150:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009172:	637a      	str	r2, [r7, #52]	@ 0x34
 8009174:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e5      	bne.n	8009152 <HAL_UART_Transmit_IT+0x7e>
 8009186:	e028      	b.n	80091da <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009190:	d107      	bne.n	80091a2 <HAL_UART_Transmit_IT+0xce>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d103      	bne.n	80091a2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <HAL_UART_Transmit_IT+0x120>)
 800919e:	679a      	str	r2, [r3, #120]	@ 0x78
 80091a0:	e002      	b.n	80091a8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4a14      	ldr	r2, [pc, #80]	@ (80091f8 <HAL_UART_Transmit_IT+0x124>)
 80091a6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	613b      	str	r3, [r7, #16]
   return(result);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c6:	623b      	str	r3, [r7, #32]
 80091c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	69f9      	ldr	r1, [r7, #28]
 80091cc:	6a3a      	ldr	r2, [r7, #32]
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	e000      	b.n	80091e0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80091de:	2302      	movs	r3, #2
  }
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3744      	adds	r7, #68	@ 0x44
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	0800a83f 	.word	0x0800a83f
 80091f0:	0800a75f 	.word	0x0800a75f
 80091f4:	0800a69d 	.word	0x0800a69d
 80091f8:	0800a5e5 	.word	0x0800a5e5

080091fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009210:	2b20      	cmp	r3, #32
 8009212:	d137      	bne.n	8009284 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_UART_Receive_IT+0x24>
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e030      	b.n	8009286 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a18      	ldr	r2, [pc, #96]	@ (8009290 <HAL_UART_Receive_IT+0x94>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d01f      	beq.n	8009274 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d018      	beq.n	8009274 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	613b      	str	r3, [r7, #16]
   return(result);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009256:	627b      	str	r3, [r7, #36]	@ 0x24
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	623b      	str	r3, [r7, #32]
 8009262:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	69f9      	ldr	r1, [r7, #28]
 8009266:	6a3a      	ldr	r2, [r7, #32]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	61bb      	str	r3, [r7, #24]
   return(result);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	461a      	mov	r2, r3
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f001 f818 	bl	800a2b0 <UART_Start_Receive_IT>
 8009280:	4603      	mov	r3, r0
 8009282:	e000      	b.n	8009286 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009284:	2302      	movs	r3, #2
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3728      	adds	r7, #40	@ 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40008000 	.word	0x40008000

08009294 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b0ba      	sub	sp, #232	@ 0xe8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80092be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80092c2:	4013      	ands	r3, r2
 80092c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80092c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d11b      	bne.n	8009308 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d015      	beq.n	8009308 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d105      	bne.n	80092f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d009      	beq.n	8009308 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8300 	beq.w	80098fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
      }
      return;
 8009306:	e2fa      	b.n	80098fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8123 	beq.w	8009558 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009312:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009316:	4b8d      	ldr	r3, [pc, #564]	@ (800954c <HAL_UART_IRQHandler+0x2b8>)
 8009318:	4013      	ands	r3, r2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800931e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009322:	4b8b      	ldr	r3, [pc, #556]	@ (8009550 <HAL_UART_IRQHandler+0x2bc>)
 8009324:	4013      	ands	r3, r2
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 8116 	beq.w	8009558 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800932c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d011      	beq.n	800935c <HAL_UART_IRQHandler+0xc8>
 8009338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800933c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2201      	movs	r2, #1
 800934a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009352:	f043 0201 	orr.w	r2, r3, #1
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800935c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d011      	beq.n	800938c <HAL_UART_IRQHandler+0xf8>
 8009368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2202      	movs	r2, #2
 800937a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009382:	f043 0204 	orr.w	r2, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800938c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d011      	beq.n	80093bc <HAL_UART_IRQHandler+0x128>
 8009398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00b      	beq.n	80093bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2204      	movs	r2, #4
 80093aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b2:	f043 0202 	orr.w	r2, r3, #2
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d017      	beq.n	80093f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d105      	bne.n	80093e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093d8:	4b5c      	ldr	r3, [pc, #368]	@ (800954c <HAL_UART_IRQHandler+0x2b8>)
 80093da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2208      	movs	r2, #8
 80093e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ee:	f043 0208 	orr.w	r2, r3, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009400:	2b00      	cmp	r3, #0
 8009402:	d012      	beq.n	800942a <HAL_UART_IRQHandler+0x196>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009408:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00c      	beq.n	800942a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009420:	f043 0220 	orr.w	r2, r3, #32
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8266 	beq.w	8009902 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d013      	beq.n	800946a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d105      	bne.n	800945a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800944e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800947e:	2b40      	cmp	r3, #64	@ 0x40
 8009480:	d005      	beq.n	800948e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009486:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800948a:	2b00      	cmp	r3, #0
 800948c:	d054      	beq.n	8009538 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 f830 	bl	800a4f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949e:	2b40      	cmp	r3, #64	@ 0x40
 80094a0:	d146      	bne.n	8009530 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1d9      	bne.n	80094a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d017      	beq.n	8009528 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fe:	4a15      	ldr	r2, [pc, #84]	@ (8009554 <HAL_UART_IRQHandler+0x2c0>)
 8009500:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009508:	4618      	mov	r0, r3
 800950a:	f7fa fd46 	bl	8003f9a <HAL_DMA_Abort_IT>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d019      	beq.n	8009548 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009522:	4610      	mov	r0, r2
 8009524:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009526:	e00f      	b.n	8009548 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f9f5 	bl	8009918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952e:	e00b      	b.n	8009548 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f9f1 	bl	8009918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009536:	e007      	b.n	8009548 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9ed 	bl	8009918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009546:	e1dc      	b.n	8009902 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	bf00      	nop
    return;
 800954a:	e1da      	b.n	8009902 <HAL_UART_IRQHandler+0x66e>
 800954c:	10000001 	.word	0x10000001
 8009550:	04000120 	.word	0x04000120
 8009554:	0800a5c1 	.word	0x0800a5c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800955c:	2b01      	cmp	r3, #1
 800955e:	f040 8170 	bne.w	8009842 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8169 	beq.w	8009842 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009574:	f003 0310 	and.w	r3, r3, #16
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8162 	beq.w	8009842 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2210      	movs	r2, #16
 8009584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b40      	cmp	r3, #64	@ 0x40
 8009592:	f040 80d8 	bne.w	8009746 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80af 	beq.w	800970c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095b8:	429a      	cmp	r2, r3
 80095ba:	f080 80a7 	bcs.w	800970c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0320 	and.w	r3, r3, #32
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 8087 	bne.w	80096ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800960a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009612:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800961e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1da      	bne.n	80095dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800964a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800964e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009652:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800965c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e1      	bne.n	8009626 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009686:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800968c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e3      	bne.n	8009662 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b8:	f023 0310 	bic.w	r3, r3, #16
 80096bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e4      	bne.n	80096a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fa fbff 	bl	8003ee8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2202      	movs	r2, #2
 80096ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f911 	bl	800992c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800970a:	e0fc      	b.n	8009906 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009716:	429a      	cmp	r2, r3
 8009718:	f040 80f5 	bne.w	8009906 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	f040 80eb 	bne.w	8009906 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f8f4 	bl	800992c <HAL_UARTEx_RxEventCallback>
      return;
 8009744:	e0df      	b.n	8009906 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009752:	b29b      	uxth	r3, r3
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 80d1 	beq.w	800990a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80cc 	beq.w	800990a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009794:	647b      	str	r3, [r7, #68]	@ 0x44
 8009796:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800979a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e4      	bne.n	8009772 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3308      	adds	r3, #8
 80097ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	623b      	str	r3, [r7, #32]
   return(result);
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097be:	f023 0301 	bic.w	r3, r3, #1
 80097c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3308      	adds	r3, #8
 80097cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80097d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e1      	bne.n	80097a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	60fb      	str	r3, [r7, #12]
   return(result);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f023 0310 	bic.w	r3, r3, #16
 800980c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800981a:	61fb      	str	r3, [r7, #28]
 800981c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	617b      	str	r3, [r7, #20]
   return(result);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e4      	bne.n	80097f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2202      	movs	r2, #2
 8009832:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f876 	bl	800992c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009840:	e063      	b.n	800990a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00e      	beq.n	800986c <HAL_UART_IRQHandler+0x5d8>
 800984e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d008      	beq.n	800986c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009862:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 fdab 	bl	800b3c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800986a:	e051      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009874:	2b00      	cmp	r3, #0
 8009876:	d014      	beq.n	80098a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d008      	beq.n	80098a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009894:	2b00      	cmp	r3, #0
 8009896:	d03a      	beq.n	800990e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
    }
    return;
 80098a0:	e035      	b.n	800990e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <HAL_UART_IRQHandler+0x62e>
 80098ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 f834 	bl	800a928 <UART_EndTransmit_IT>
    return;
 80098c0:	e026      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <HAL_UART_IRQHandler+0x64e>
 80098ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fd84 	bl	800b3e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098e0:	e016      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d010      	beq.n	8009910 <HAL_UART_IRQHandler+0x67c>
 80098ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da0c      	bge.n	8009910 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 fd6c 	bl	800b3d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fc:	e008      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
      return;
 80098fe:	bf00      	nop
 8009900:	e006      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
    return;
 8009902:	bf00      	nop
 8009904:	e004      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
      return;
 8009906:	bf00      	nop
 8009908:	e002      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
      return;
 800990a:	bf00      	nop
 800990c:	e000      	b.n	8009910 <HAL_UART_IRQHandler+0x67c>
    return;
 800990e:	bf00      	nop
  }
}
 8009910:	37e8      	adds	r7, #232	@ 0xe8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop

08009918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009948:	b08c      	sub	sp, #48	@ 0x30
 800994a:	af00      	add	r7, sp, #0
 800994c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	431a      	orrs	r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	431a      	orrs	r2, r3
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	4313      	orrs	r3, r2
 800996a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4baa      	ldr	r3, [pc, #680]	@ (8009c1c <UART_SetConfig+0x2d8>)
 8009974:	4013      	ands	r3, r2
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	6812      	ldr	r2, [r2, #0]
 800997a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800997c:	430b      	orrs	r3, r1
 800997e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a9f      	ldr	r2, [pc, #636]	@ (8009c20 <UART_SetConfig+0x2dc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d004      	beq.n	80099b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ac:	4313      	orrs	r3, r2
 80099ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80099ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ce:	f023 010f 	bic.w	r1, r3, #15
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a90      	ldr	r2, [pc, #576]	@ (8009c24 <UART_SetConfig+0x2e0>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d125      	bne.n	8009a34 <UART_SetConfig+0xf0>
 80099e8:	4b8f      	ldr	r3, [pc, #572]	@ (8009c28 <UART_SetConfig+0x2e4>)
 80099ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d81a      	bhi.n	8009a2c <UART_SetConfig+0xe8>
 80099f6:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0xb8>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e116      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a14:	2302      	movs	r3, #2
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e112      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e10e      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e10a      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e106      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a7c      	ldr	r2, [pc, #496]	@ (8009c2c <UART_SetConfig+0x2e8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d138      	bne.n	8009ab0 <UART_SetConfig+0x16c>
 8009a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8009c28 <UART_SetConfig+0x2e4>)
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a44:	f003 030c 	and.w	r3, r3, #12
 8009a48:	2b0c      	cmp	r3, #12
 8009a4a:	d82d      	bhi.n	8009aa8 <UART_SetConfig+0x164>
 8009a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <UART_SetConfig+0x110>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a89 	.word	0x08009a89
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009aa9 	.word	0x08009aa9
 8009a60:	08009aa9 	.word	0x08009aa9
 8009a64:	08009a99 	.word	0x08009a99
 8009a68:	08009aa9 	.word	0x08009aa9
 8009a6c:	08009aa9 	.word	0x08009aa9
 8009a70:	08009aa9 	.word	0x08009aa9
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8e:	e0d8      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a96:	e0d4      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9e:	e0d0      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa6:	e0cc      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aae:	e0c8      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8009c30 <UART_SetConfig+0x2ec>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d125      	bne.n	8009b06 <UART_SetConfig+0x1c2>
 8009aba:	4b5b      	ldr	r3, [pc, #364]	@ (8009c28 <UART_SetConfig+0x2e4>)
 8009abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ac4:	2b30      	cmp	r3, #48	@ 0x30
 8009ac6:	d016      	beq.n	8009af6 <UART_SetConfig+0x1b2>
 8009ac8:	2b30      	cmp	r3, #48	@ 0x30
 8009aca:	d818      	bhi.n	8009afe <UART_SetConfig+0x1ba>
 8009acc:	2b20      	cmp	r3, #32
 8009ace:	d00a      	beq.n	8009ae6 <UART_SetConfig+0x1a2>
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d814      	bhi.n	8009afe <UART_SetConfig+0x1ba>
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <UART_SetConfig+0x19a>
 8009ad8:	2b10      	cmp	r3, #16
 8009ada:	d008      	beq.n	8009aee <UART_SetConfig+0x1aa>
 8009adc:	e00f      	b.n	8009afe <UART_SetConfig+0x1ba>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae4:	e0ad      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aec:	e0a9      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009aee:	2304      	movs	r3, #4
 8009af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af4:	e0a5      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009af6:	2308      	movs	r3, #8
 8009af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afc:	e0a1      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009afe:	2310      	movs	r3, #16
 8009b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b04:	e09d      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8009c34 <UART_SetConfig+0x2f0>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d125      	bne.n	8009b5c <UART_SetConfig+0x218>
 8009b10:	4b45      	ldr	r3, [pc, #276]	@ (8009c28 <UART_SetConfig+0x2e4>)
 8009b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b1c:	d016      	beq.n	8009b4c <UART_SetConfig+0x208>
 8009b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b20:	d818      	bhi.n	8009b54 <UART_SetConfig+0x210>
 8009b22:	2b80      	cmp	r3, #128	@ 0x80
 8009b24:	d00a      	beq.n	8009b3c <UART_SetConfig+0x1f8>
 8009b26:	2b80      	cmp	r3, #128	@ 0x80
 8009b28:	d814      	bhi.n	8009b54 <UART_SetConfig+0x210>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <UART_SetConfig+0x1f0>
 8009b2e:	2b40      	cmp	r3, #64	@ 0x40
 8009b30:	d008      	beq.n	8009b44 <UART_SetConfig+0x200>
 8009b32:	e00f      	b.n	8009b54 <UART_SetConfig+0x210>
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3a:	e082      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b42:	e07e      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4a:	e07a      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b52:	e076      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5a:	e072      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a35      	ldr	r2, [pc, #212]	@ (8009c38 <UART_SetConfig+0x2f4>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d12a      	bne.n	8009bbc <UART_SetConfig+0x278>
 8009b66:	4b30      	ldr	r3, [pc, #192]	@ (8009c28 <UART_SetConfig+0x2e4>)
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b74:	d01a      	beq.n	8009bac <UART_SetConfig+0x268>
 8009b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b7a:	d81b      	bhi.n	8009bb4 <UART_SetConfig+0x270>
 8009b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b80:	d00c      	beq.n	8009b9c <UART_SetConfig+0x258>
 8009b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b86:	d815      	bhi.n	8009bb4 <UART_SetConfig+0x270>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <UART_SetConfig+0x250>
 8009b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b90:	d008      	beq.n	8009ba4 <UART_SetConfig+0x260>
 8009b92:	e00f      	b.n	8009bb4 <UART_SetConfig+0x270>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9a:	e052      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba2:	e04e      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009ba4:	2304      	movs	r3, #4
 8009ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009baa:	e04a      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009bac:	2308      	movs	r3, #8
 8009bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb2:	e046      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009bb4:	2310      	movs	r3, #16
 8009bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bba:	e042      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a17      	ldr	r2, [pc, #92]	@ (8009c20 <UART_SetConfig+0x2dc>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d13a      	bne.n	8009c3c <UART_SetConfig+0x2f8>
 8009bc6:	4b18      	ldr	r3, [pc, #96]	@ (8009c28 <UART_SetConfig+0x2e4>)
 8009bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bd4:	d01a      	beq.n	8009c0c <UART_SetConfig+0x2c8>
 8009bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bda:	d81b      	bhi.n	8009c14 <UART_SetConfig+0x2d0>
 8009bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009be0:	d00c      	beq.n	8009bfc <UART_SetConfig+0x2b8>
 8009be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009be6:	d815      	bhi.n	8009c14 <UART_SetConfig+0x2d0>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <UART_SetConfig+0x2b0>
 8009bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf0:	d008      	beq.n	8009c04 <UART_SetConfig+0x2c0>
 8009bf2:	e00f      	b.n	8009c14 <UART_SetConfig+0x2d0>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfa:	e022      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c02:	e01e      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009c04:	2304      	movs	r3, #4
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0a:	e01a      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009c0c:	2308      	movs	r3, #8
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e016      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009c14:	2310      	movs	r3, #16
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1a:	e012      	b.n	8009c42 <UART_SetConfig+0x2fe>
 8009c1c:	cfff69f3 	.word	0xcfff69f3
 8009c20:	40008000 	.word	0x40008000
 8009c24:	40013800 	.word	0x40013800
 8009c28:	40021000 	.word	0x40021000
 8009c2c:	40004400 	.word	0x40004400
 8009c30:	40004800 	.word	0x40004800
 8009c34:	40004c00 	.word	0x40004c00
 8009c38:	40005000 	.word	0x40005000
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4aae      	ldr	r2, [pc, #696]	@ (8009f00 <UART_SetConfig+0x5bc>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	f040 8097 	bne.w	8009d7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c52:	2b08      	cmp	r3, #8
 8009c54:	d823      	bhi.n	8009c9e <UART_SetConfig+0x35a>
 8009c56:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <UART_SetConfig+0x318>)
 8009c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c9f 	.word	0x08009c9f
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009c9f 	.word	0x08009c9f
 8009c6c:	08009c8f 	.word	0x08009c8f
 8009c70:	08009c9f 	.word	0x08009c9f
 8009c74:	08009c9f 	.word	0x08009c9f
 8009c78:	08009c9f 	.word	0x08009c9f
 8009c7c:	08009c97 	.word	0x08009c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c80:	f7fd fede 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c86:	e010      	b.n	8009caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c88:	4b9e      	ldr	r3, [pc, #632]	@ (8009f04 <UART_SetConfig+0x5c0>)
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c8c:	e00d      	b.n	8009caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8e:	f7fd fe69 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8009c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c94:	e009      	b.n	8009caa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c9c:	e005      	b.n	8009caa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8130 	beq.w	8009f12 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb6:	4a94      	ldr	r2, [pc, #592]	@ (8009f08 <UART_SetConfig+0x5c4>)
 8009cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d305      	bcc.n	8009ce2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d903      	bls.n	8009cea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ce8:	e113      	b.n	8009f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	2200      	movs	r2, #0
 8009cee:	60bb      	str	r3, [r7, #8]
 8009cf0:	60fa      	str	r2, [r7, #12]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf6:	4a84      	ldr	r2, [pc, #528]	@ (8009f08 <UART_SetConfig+0x5c4>)
 8009cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2200      	movs	r2, #0
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d0c:	f7f6 fa8c 	bl	8000228 <__aeabi_uldivmod>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4610      	mov	r0, r2
 8009d16:	4619      	mov	r1, r3
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	f04f 0300 	mov.w	r3, #0
 8009d20:	020b      	lsls	r3, r1, #8
 8009d22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d26:	0202      	lsls	r2, r0, #8
 8009d28:	6979      	ldr	r1, [r7, #20]
 8009d2a:	6849      	ldr	r1, [r1, #4]
 8009d2c:	0849      	lsrs	r1, r1, #1
 8009d2e:	2000      	movs	r0, #0
 8009d30:	460c      	mov	r4, r1
 8009d32:	4605      	mov	r5, r0
 8009d34:	eb12 0804 	adds.w	r8, r2, r4
 8009d38:	eb43 0905 	adc.w	r9, r3, r5
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	469a      	mov	sl, r3
 8009d44:	4693      	mov	fp, r2
 8009d46:	4652      	mov	r2, sl
 8009d48:	465b      	mov	r3, fp
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fa6b 	bl	8000228 <__aeabi_uldivmod>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4613      	mov	r3, r2
 8009d58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d60:	d308      	bcc.n	8009d74 <UART_SetConfig+0x430>
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d68:	d204      	bcs.n	8009d74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6a3a      	ldr	r2, [r7, #32]
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	e0ce      	b.n	8009f12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d7a:	e0ca      	b.n	8009f12 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d84:	d166      	bne.n	8009e54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d827      	bhi.n	8009dde <UART_SetConfig+0x49a>
 8009d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d94 <UART_SetConfig+0x450>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009ddf 	.word	0x08009ddf
 8009da4:	08009dcf 	.word	0x08009dcf
 8009da8:	08009ddf 	.word	0x08009ddf
 8009dac:	08009ddf 	.word	0x08009ddf
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009dd7 	.word	0x08009dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db8:	f7fd fe42 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dbe:	e014      	b.n	8009dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc0:	f7fd fe54 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dc6:	e010      	b.n	8009dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8009f04 <UART_SetConfig+0x5c0>)
 8009dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dcc:	e00d      	b.n	8009dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dce:	f7fd fdc9 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8009dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dd4:	e009      	b.n	8009dea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ddc:	e005      	b.n	8009dea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8090 	beq.w	8009f12 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	4a44      	ldr	r2, [pc, #272]	@ (8009f08 <UART_SetConfig+0x5c4>)
 8009df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e04:	005a      	lsls	r2, r3, #1
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	085b      	lsrs	r3, r3, #1
 8009e0c:	441a      	add	r2, r3
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	2b0f      	cmp	r3, #15
 8009e1c:	d916      	bls.n	8009e4c <UART_SetConfig+0x508>
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e24:	d212      	bcs.n	8009e4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f023 030f 	bic.w	r3, r3, #15
 8009e2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	8bfb      	ldrh	r3, [r7, #30]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	8bfa      	ldrh	r2, [r7, #30]
 8009e48:	60da      	str	r2, [r3, #12]
 8009e4a:	e062      	b.n	8009f12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e52:	e05e      	b.n	8009f12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d828      	bhi.n	8009eae <UART_SetConfig+0x56a>
 8009e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <UART_SetConfig+0x520>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	08009eaf 	.word	0x08009eaf
 8009e74:	08009e9f 	.word	0x08009e9f
 8009e78:	08009eaf 	.word	0x08009eaf
 8009e7c:	08009eaf 	.word	0x08009eaf
 8009e80:	08009eaf 	.word	0x08009eaf
 8009e84:	08009ea7 	.word	0x08009ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e88:	f7fd fdda 	bl	8007a40 <HAL_RCC_GetPCLK1Freq>
 8009e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e8e:	e014      	b.n	8009eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e90:	f7fd fdec 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e96:	e010      	b.n	8009eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e98:	4b1a      	ldr	r3, [pc, #104]	@ (8009f04 <UART_SetConfig+0x5c0>)
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e9c:	e00d      	b.n	8009eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e9e:	f7fd fd61 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8009ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ea4:	e009      	b.n	8009eba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eac:	e005      	b.n	8009eba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d028      	beq.n	8009f12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	4a10      	ldr	r2, [pc, #64]	@ (8009f08 <UART_SetConfig+0x5c4>)
 8009ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	441a      	add	r2, r3
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	d910      	bls.n	8009f0c <UART_SetConfig+0x5c8>
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef0:	d20c      	bcs.n	8009f0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60da      	str	r2, [r3, #12]
 8009efc:	e009      	b.n	8009f12 <UART_SetConfig+0x5ce>
 8009efe:	bf00      	nop
 8009f00:	40008000 	.word	0x40008000
 8009f04:	00f42400 	.word	0x00f42400
 8009f08:	0800c73c 	.word	0x0800c73c
      }
      else
      {
        ret = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2200      	movs	r2, #0
 8009f26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3730      	adds	r7, #48	@ 0x30
 8009f36:	46bd      	mov	sp, r7
 8009f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00a      	beq.n	8009faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01a      	beq.n	800a052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03a:	d10a      	bne.n	800a052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	605a      	str	r2, [r3, #4]
  }
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b098      	sub	sp, #96	@ 0x60
 800a084:	af02      	add	r7, sp, #8
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a090:	f7f7 fd34 	bl	8001afc <HAL_GetTick>
 800a094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d12f      	bne.n	800a104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f88e 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d022      	beq.n	800a104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e6      	bne.n	800a0be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e063      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d149      	bne.n	800a1a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a11a:	2200      	movs	r2, #0
 800a11c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f857 	bl	800a1d4 <UART_WaitOnFlagUntilTimeout>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d03c      	beq.n	800a1a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a14c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e6      	bne.n	800a12c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a17e:	61fa      	str	r2, [r7, #28]
 800a180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69b9      	ldr	r1, [r7, #24]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	617b      	str	r3, [r7, #20]
   return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e012      	b.n	800a1cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3758      	adds	r7, #88	@ 0x58
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	e04f      	b.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d04b      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7f7 fc85 	bl	8001afc <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e04e      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d037      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b80      	cmp	r3, #128	@ 0x80
 800a21a:	d034      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b40      	cmp	r3, #64	@ 0x40
 800a220:	d031      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d110      	bne.n	800a252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2208      	movs	r2, #8
 800a236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f95b 	bl	800a4f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2208      	movs	r2, #8
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e029      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a260:	d111      	bne.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a26a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 f941 	bl	800a4f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e00f      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	bf0c      	ite	eq
 800a296:	2301      	moveq	r3, #1
 800a298:	2300      	movne	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d0a0      	beq.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b0a3      	sub	sp, #140	@ 0x8c
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2e2:	d10e      	bne.n	800a302 <UART_Start_Receive_IT+0x52>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <UART_Start_Receive_IT+0x48>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2f6:	e02d      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	22ff      	movs	r2, #255	@ 0xff
 800a2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a300:	e028      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10d      	bne.n	800a326 <UART_Start_Receive_IT+0x76>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <UART_Start_Receive_IT+0x6c>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	22ff      	movs	r2, #255	@ 0xff
 800a316:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a31a:	e01b      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	227f      	movs	r2, #127	@ 0x7f
 800a320:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a324:	e016      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32e:	d10d      	bne.n	800a34c <UART_Start_Receive_IT+0x9c>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <UART_Start_Receive_IT+0x92>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	227f      	movs	r2, #127	@ 0x7f
 800a33c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a340:	e008      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	223f      	movs	r2, #63	@ 0x3f
 800a346:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a34a:	e003      	b.n	800a354 <UART_Start_Receive_IT+0xa4>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2222      	movs	r2, #34	@ 0x22
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3308      	adds	r3, #8
 800a384:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a388:	673a      	str	r2, [r7, #112]	@ 0x70
 800a38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a38e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e3      	bne.n	800a364 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d14f      	bne.n	800a446 <UART_Start_Receive_IT+0x196>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3ac:	88fa      	ldrh	r2, [r7, #6]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d349      	bcc.n	800a446 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3ba:	d107      	bne.n	800a3cc <UART_Start_Receive_IT+0x11c>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d103      	bne.n	800a3cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a47      	ldr	r2, [pc, #284]	@ (800a4e4 <UART_Start_Receive_IT+0x234>)
 800a3c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3ca:	e002      	b.n	800a3d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a46      	ldr	r2, [pc, #280]	@ (800a4e8 <UART_Start_Receive_IT+0x238>)
 800a3d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d01a      	beq.n	800a410 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a402:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e4      	bne.n	800a3da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a430:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a432:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_Start_Receive_IT+0x160>
 800a444:	e046      	b.n	800a4d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a44e:	d107      	bne.n	800a460 <UART_Start_Receive_IT+0x1b0>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d103      	bne.n	800a460 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4a24      	ldr	r2, [pc, #144]	@ (800a4ec <UART_Start_Receive_IT+0x23c>)
 800a45c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a45e:	e002      	b.n	800a466 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a23      	ldr	r2, [pc, #140]	@ (800a4f0 <UART_Start_Receive_IT+0x240>)
 800a464:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d019      	beq.n	800a4a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a482:	677b      	str	r3, [r7, #116]	@ 0x74
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e6      	bne.n	800a46e <UART_Start_Receive_IT+0x1be>
 800a4a0:	e018      	b.n	800a4d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f043 0320 	orr.w	r3, r3, #32
 800a4b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4c0:	623b      	str	r3, [r7, #32]
 800a4c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	69f9      	ldr	r1, [r7, #28]
 800a4c6:	6a3a      	ldr	r2, [r7, #32]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e6      	bne.n	800a4a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	378c      	adds	r7, #140	@ 0x8c
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	0800b055 	.word	0x0800b055
 800a4e8:	0800acf1 	.word	0x0800acf1
 800a4ec:	0800ab39 	.word	0x0800ab39
 800a4f0:	0800a981 	.word	0x0800a981

0800a4f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b095      	sub	sp, #84	@ 0x54
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a51a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a51c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a520:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e6      	bne.n	800a4fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3308      	adds	r3, #8
 800a534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e3      	bne.n	800a52e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d118      	bne.n	800a5a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f023 0310 	bic.w	r3, r3, #16
 800a582:	647b      	str	r3, [r7, #68]	@ 0x44
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6979      	ldr	r1, [r7, #20]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	613b      	str	r3, [r7, #16]
   return(result);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e6      	bne.n	800a56e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5b4:	bf00      	nop
 800a5b6:	3754      	adds	r7, #84	@ 0x54
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff f99e 	bl	8009918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b08f      	sub	sp, #60	@ 0x3c
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f2:	2b21      	cmp	r3, #33	@ 0x21
 800a5f4:	d14c      	bne.n	800a690 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d132      	bne.n	800a668 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	e853 3f00 	ldrex	r3, [r3]
 800a60e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a622:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e6      	bne.n	800a602 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	60bb      	str	r3, [r7, #8]
   return(result);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a648:	633b      	str	r3, [r7, #48]	@ 0x30
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	61bb      	str	r3, [r7, #24]
 800a654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6979      	ldr	r1, [r7, #20]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e6      	bne.n	800a634 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a666:	e013      	b.n	800a690 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a66c:	781a      	ldrb	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a690:	bf00      	nop
 800a692:	373c      	adds	r7, #60	@ 0x3c
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b091      	sub	sp, #68	@ 0x44
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6aa:	2b21      	cmp	r3, #33	@ 0x21
 800a6ac:	d151      	bne.n	800a752 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d132      	bne.n	800a720 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	e853 3f00 	ldrex	r3, [r3]
 800a6c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e0:	e841 2300 	strex	r3, r2, [r1]
 800a6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1e6      	bne.n	800a6ba <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70a:	61fb      	str	r3, [r7, #28]
 800a70c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	617b      	str	r3, [r7, #20]
   return(result);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e6      	bne.n	800a6ec <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a71e:	e018      	b.n	800a752 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a734:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73a:	1c9a      	adds	r2, r3, #2
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a746:	b29b      	uxth	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a752:	bf00      	nop
 800a754:	3744      	adds	r7, #68	@ 0x44
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a75e:	b480      	push	{r7}
 800a760:	b091      	sub	sp, #68	@ 0x44
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a76c:	2b21      	cmp	r3, #33	@ 0x21
 800a76e:	d160      	bne.n	800a832 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a776:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a778:	e057      	b.n	800a82a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a780:	b29b      	uxth	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d133      	bne.n	800a7ee <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3308      	adds	r3, #8
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	e853 3f00 	ldrex	r3, [r3]
 800a794:	623b      	str	r3, [r7, #32]
   return(result);
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a79c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ae:	e841 2300 	strex	r3, r2, [r1]
 800a7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e5      	bne.n	800a786 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	69b9      	ldr	r1, [r7, #24]
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e6      	bne.n	800a7ba <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a7ec:	e021      	b.n	800a832 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d013      	beq.n	800a824 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a818:	b29b      	uxth	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a824:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a826:	3b01      	subs	r3, #1
 800a828:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a82a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1a4      	bne.n	800a77a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a830:	e7ff      	b.n	800a832 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a832:	bf00      	nop
 800a834:	3744      	adds	r7, #68	@ 0x44
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a83e:	b480      	push	{r7}
 800a840:	b091      	sub	sp, #68	@ 0x44
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a84c:	2b21      	cmp	r3, #33	@ 0x21
 800a84e:	d165      	bne.n	800a91c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a856:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a858:	e05c      	b.n	800a914 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a860:	b29b      	uxth	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d133      	bne.n	800a8ce <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3308      	adds	r3, #8
 800a86c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	61fb      	str	r3, [r7, #28]
   return(result);
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3308      	adds	r3, #8
 800a884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a88c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a88e:	e841 2300 	strex	r3, r2, [r1]
 800a892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e5      	bne.n	800a866 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6979      	ldr	r1, [r7, #20]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e6      	bne.n	800a89a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a8cc:	e026      	b.n	800a91c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d018      	beq.n	800a90e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8f0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f6:	1c9a      	adds	r2, r3, #2
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a902:	b29b      	uxth	r3, r3
 800a904:	3b01      	subs	r3, #1
 800a906:	b29a      	uxth	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a90e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a910:	3b01      	subs	r3, #1
 800a912:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a914:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a916:	2b00      	cmp	r3, #0
 800a918:	d19f      	bne.n	800a85a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a91a:	e7ff      	b.n	800a91c <UART_TxISR_16BIT_FIFOEN+0xde>
 800a91c:	bf00      	nop
 800a91e:	3744      	adds	r7, #68	@ 0x44
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a944:	61fb      	str	r3, [r7, #28]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	61bb      	str	r3, [r7, #24]
 800a950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	6979      	ldr	r1, [r7, #20]
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	613b      	str	r3, [r7, #16]
   return(result);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e6      	bne.n	800a930 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7f6 fc71 	bl	8001258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a976:	bf00      	nop
 800a978:	3720      	adds	r7, #32
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b09c      	sub	sp, #112	@ 0x70
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a98e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a998:	2b22      	cmp	r3, #34	@ 0x22
 800a99a:	f040 80be 	bne.w	800ab1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a9ac:	b2d9      	uxtb	r1, r3
 800a9ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b8:	400a      	ands	r2, r1
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 80a1 	bne.w	800ab2a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e6      	bne.n	800a9e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3308      	adds	r3, #8
 800aa20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3308      	adds	r3, #8
 800aa38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e5      	bne.n	800aa1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a33      	ldr	r2, [pc, #204]	@ (800ab34 <UART_RxISR_8BIT+0x1b4>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d01f      	beq.n	800aaac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d018      	beq.n	800aaac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	623b      	str	r3, [r7, #32]
   return(result);
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa8e:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa98:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e6      	bne.n	800aa7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d12e      	bne.n	800ab12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 0310 	bic.w	r3, r3, #16
 800aace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	69b9      	ldr	r1, [r7, #24]
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	617b      	str	r3, [r7, #20]
   return(result);
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e6      	bne.n	800aaba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f003 0310 	and.w	r3, r3, #16
 800aaf6:	2b10      	cmp	r3, #16
 800aaf8:	d103      	bne.n	800ab02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2210      	movs	r2, #16
 800ab00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7fe ff0e 	bl	800992c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab10:	e00b      	b.n	800ab2a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f6 fb96 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 800ab18:	e007      	b.n	800ab2a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f042 0208 	orr.w	r2, r2, #8
 800ab28:	619a      	str	r2, [r3, #24]
}
 800ab2a:	bf00      	nop
 800ab2c:	3770      	adds	r7, #112	@ 0x70
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	40008000 	.word	0x40008000

0800ab38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b09c      	sub	sp, #112	@ 0x70
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab50:	2b22      	cmp	r3, #34	@ 0x22
 800ab52:	f040 80be 	bne.w	800acd2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ab66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ab6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ab6e:	4013      	ands	r3, r2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab7a:	1c9a      	adds	r2, r3, #2
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 80a1 	bne.w	800ace2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba8:	e853 3f00 	ldrex	r3, [r3]
 800abac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800abae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abbe:	657b      	str	r3, [r7, #84]	@ 0x54
 800abc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800abc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e6      	bne.n	800aba0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe4:	f023 0301 	bic.w	r3, r3, #1
 800abe8:	663b      	str	r3, [r7, #96]	@ 0x60
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3308      	adds	r3, #8
 800abf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abf2:	643a      	str	r2, [r7, #64]	@ 0x40
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e5      	bne.n	800abd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a33      	ldr	r2, [pc, #204]	@ (800acec <UART_RxISR_16BIT+0x1b4>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d01f      	beq.n	800ac64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d018      	beq.n	800ac64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	e853 3f00 	ldrex	r3, [r3]
 800ac3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e6      	bne.n	800ac32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d12e      	bne.n	800acca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f023 0310 	bic.w	r3, r3, #16
 800ac86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac90:	61bb      	str	r3, [r7, #24]
 800ac92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6979      	ldr	r1, [r7, #20]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e6      	bne.n	800ac72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	f003 0310 	and.w	r3, r3, #16
 800acae:	2b10      	cmp	r3, #16
 800acb0:	d103      	bne.n	800acba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2210      	movs	r2, #16
 800acb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7fe fe32 	bl	800992c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acc8:	e00b      	b.n	800ace2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f6 faba 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 800acd0:	e007      	b.n	800ace2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0208 	orr.w	r2, r2, #8
 800ace0:	619a      	str	r2, [r3, #24]
}
 800ace2:	bf00      	nop
 800ace4:	3770      	adds	r7, #112	@ 0x70
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	40008000 	.word	0x40008000

0800acf0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b0ac      	sub	sp, #176	@ 0xb0
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800acfe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad26:	2b22      	cmp	r3, #34	@ 0x22
 800ad28:	f040 8183 	bne.w	800b032 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad36:	e126      	b.n	800af86 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ad46:	b2d9      	uxtb	r1, r3
 800ad48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad52:	400a      	ands	r2, r1
 800ad54:	b2d2      	uxtb	r2, r2
 800ad56:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d053      	beq.n	800ae32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d011      	beq.n	800adba <UART_RxISR_8BIT_FIFOEN+0xca>
 800ad96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ad9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2201      	movs	r2, #1
 800ada8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb0:	f043 0201 	orr.w	r2, r3, #1
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d011      	beq.n	800adea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800adc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00b      	beq.n	800adea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2202      	movs	r2, #2
 800add8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade0:	f043 0204 	orr.w	r2, r3, #4
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adee:	f003 0304 	and.w	r3, r3, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d011      	beq.n	800ae1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800adf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2204      	movs	r2, #4
 800ae08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae10:	f043 0202 	orr.w	r2, r3, #2
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7fe fd77 	bl	8009918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 80a3 	bne.w	800af86 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ae4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae64:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ae68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ae70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e4      	bne.n	800ae40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ae86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae8c:	f023 0301 	bic.w	r3, r3, #1
 800ae90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3308      	adds	r3, #8
 800ae9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aea0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aea4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aeac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e1      	bne.n	800ae76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a60      	ldr	r2, [pc, #384]	@ (800b04c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d021      	beq.n	800af14 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d01a      	beq.n	800af14 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aee6:	e853 3f00 	ldrex	r3, [r3]
 800aeea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aeec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af00:	657b      	str	r3, [r7, #84]	@ 0x54
 800af02:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800af0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e4      	bne.n	800aede <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d130      	bne.n	800af7e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2a:	e853 3f00 	ldrex	r3, [r3]
 800af2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af32:	f023 0310 	bic.w	r3, r3, #16
 800af36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af44:	643b      	str	r3, [r7, #64]	@ 0x40
 800af46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e4      	bne.n	800af22 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	f003 0310 	and.w	r3, r3, #16
 800af62:	2b10      	cmp	r3, #16
 800af64:	d103      	bne.n	800af6e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2210      	movs	r2, #16
 800af6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7fe fcd8 	bl	800992c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800af7c:	e00e      	b.n	800af9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7f6 f960 	bl	8001244 <HAL_UART_RxCpltCallback>
        break;
 800af84:	e00a      	b.n	800af9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af86:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d006      	beq.n	800af9c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800af8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b00      	cmp	r3, #0
 800af98:	f47f aece 	bne.w	800ad38 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afa2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afa6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d049      	beq.n	800b042 <UART_RxISR_8BIT_FIFOEN+0x352>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afb4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800afb8:	429a      	cmp	r2, r3
 800afba:	d242      	bcs.n	800b042 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3308      	adds	r3, #8
 800afc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	61fb      	str	r3, [r7, #28]
   return(result);
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800afe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800afe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e3      	bne.n	800afbc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a16      	ldr	r2, [pc, #88]	@ (800b050 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800aff8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	60bb      	str	r3, [r7, #8]
   return(result);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f043 0320 	orr.w	r3, r3, #32
 800b00e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b01c:	61bb      	str	r3, [r7, #24]
 800b01e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6979      	ldr	r1, [r7, #20]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	613b      	str	r3, [r7, #16]
   return(result);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e4      	bne.n	800affa <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b030:	e007      	b.n	800b042 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	699a      	ldr	r2, [r3, #24]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0208 	orr.w	r2, r2, #8
 800b040:	619a      	str	r2, [r3, #24]
}
 800b042:	bf00      	nop
 800b044:	37b0      	adds	r7, #176	@ 0xb0
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	40008000 	.word	0x40008000
 800b050:	0800a981 	.word	0x0800a981

0800b054 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b0ae      	sub	sp, #184	@ 0xb8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b062:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b08a:	2b22      	cmp	r3, #34	@ 0x22
 800b08c:	f040 8187 	bne.w	800b39e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b096:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b09a:	e12a      	b.n	800b2f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b0ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b0b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c4:	1c9a      	adds	r2, r3, #2
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d053      	beq.n	800b19a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d011      	beq.n	800b122 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b0fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00b      	beq.n	800b122 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2201      	movs	r2, #1
 800b110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b118:	f043 0201 	orr.w	r2, r3, #1
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d011      	beq.n	800b152 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b12e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00b      	beq.n	800b152 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2202      	movs	r2, #2
 800b140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b148:	f043 0204 	orr.w	r2, r3, #4
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b156:	f003 0304 	and.w	r3, r3, #4
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d011      	beq.n	800b182 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b15e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00b      	beq.n	800b182 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2204      	movs	r2, #4
 800b170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b178:	f043 0202 	orr.w	r2, r3, #2
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe fbc3 	bl	8009918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f040 80a5 	bne.w	800b2f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b1b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e2      	bne.n	800b1a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b1f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3308      	adds	r3, #8
 800b206:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b20a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b20c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b210:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b212:	e841 2300 	strex	r3, r2, [r1]
 800b216:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1e1      	bne.n	800b1e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2220      	movs	r2, #32
 800b222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a60      	ldr	r2, [pc, #384]	@ (800b3b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d021      	beq.n	800b280 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d01a      	beq.n	800b280 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b25a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b25e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b26c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b26e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b272:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b27a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e4      	bne.n	800b24a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b284:	2b01      	cmp	r3, #1
 800b286:	d130      	bne.n	800b2ea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29e:	f023 0310 	bic.w	r3, r3, #16
 800b2a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b2b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e4      	bne.n	800b28e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	f003 0310 	and.w	r3, r3, #16
 800b2ce:	2b10      	cmp	r3, #16
 800b2d0:	d103      	bne.n	800b2da <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2210      	movs	r2, #16
 800b2d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fe fb22 	bl	800992c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b2e8:	e00e      	b.n	800b308 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7f5 ffaa 	bl	8001244 <HAL_UART_RxCpltCallback>
        break;
 800b2f0:	e00a      	b.n	800b308 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d006      	beq.n	800b308 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	f47f aeca 	bne.w	800b09c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b30e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b312:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b316:	2b00      	cmp	r3, #0
 800b318:	d049      	beq.n	800b3ae <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b320:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b324:	429a      	cmp	r2, r3
 800b326:	d242      	bcs.n	800b3ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3308      	adds	r3, #8
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b332:	e853 3f00 	ldrex	r3, [r3]
 800b336:	623b      	str	r3, [r7, #32]
   return(result);
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b33e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3308      	adds	r3, #8
 800b348:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b34c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e3      	bne.n	800b328 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a16      	ldr	r2, [pc, #88]	@ (800b3bc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b364:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	60fb      	str	r3, [r7, #12]
   return(result);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f043 0320 	orr.w	r3, r3, #32
 800b37a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	69b9      	ldr	r1, [r7, #24]
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	617b      	str	r3, [r7, #20]
   return(result);
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e4      	bne.n	800b366 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b39c:	e007      	b.n	800b3ae <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	699a      	ldr	r2, [r3, #24]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f042 0208 	orr.w	r2, r2, #8
 800b3ac:	619a      	str	r2, [r3, #24]
}
 800b3ae:	bf00      	nop
 800b3b0:	37b8      	adds	r7, #184	@ 0xb8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	40008000 	.word	0x40008000
 800b3bc:	0800ab39 	.word	0x0800ab39

0800b3c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d101      	bne.n	800b412 <HAL_UARTEx_DisableFifoMode+0x16>
 800b40e:	2302      	movs	r3, #2
 800b410:	e027      	b.n	800b462 <HAL_UARTEx_DisableFifoMode+0x66>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2224      	movs	r2, #36	@ 0x24
 800b41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 0201 	bic.w	r2, r2, #1
 800b438:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b440:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2220      	movs	r2, #32
 800b454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d101      	bne.n	800b486 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b482:	2302      	movs	r3, #2
 800b484:	e02d      	b.n	800b4e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2224      	movs	r2, #36	@ 0x24
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f022 0201 	bic.w	r2, r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f850 	bl	800b568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2220      	movs	r2, #32
 800b4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d101      	bne.n	800b502 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4fe:	2302      	movs	r3, #2
 800b500:	e02d      	b.n	800b55e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2224      	movs	r2, #36	@ 0x24
 800b50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0201 	bic.w	r2, r2, #1
 800b528:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	430a      	orrs	r2, r1
 800b53c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f812 	bl	800b568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2220      	movs	r2, #32
 800b550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b574:	2b00      	cmp	r3, #0
 800b576:	d108      	bne.n	800b58a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b588:	e031      	b.n	800b5ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b58a:	2308      	movs	r3, #8
 800b58c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b58e:	2308      	movs	r3, #8
 800b590:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	0e5b      	lsrs	r3, r3, #25
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	f003 0307 	and.w	r3, r3, #7
 800b5a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	0f5b      	lsrs	r3, r3, #29
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	7b3a      	ldrb	r2, [r7, #12]
 800b5b6:	4911      	ldr	r1, [pc, #68]	@ (800b5fc <UARTEx_SetNbDataToProcess+0x94>)
 800b5b8:	5c8a      	ldrb	r2, [r1, r2]
 800b5ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5be:	7b3a      	ldrb	r2, [r7, #12]
 800b5c0:	490f      	ldr	r1, [pc, #60]	@ (800b600 <UARTEx_SetNbDataToProcess+0x98>)
 800b5c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	7b7a      	ldrb	r2, [r7, #13]
 800b5d4:	4909      	ldr	r1, [pc, #36]	@ (800b5fc <UARTEx_SetNbDataToProcess+0x94>)
 800b5d6:	5c8a      	ldrb	r2, [r1, r2]
 800b5d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5dc:	7b7a      	ldrb	r2, [r7, #13]
 800b5de:	4908      	ldr	r1, [pc, #32]	@ (800b600 <UARTEx_SetNbDataToProcess+0x98>)
 800b5e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5ee:	bf00      	nop
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	0800c754 	.word	0x0800c754
 800b600:	0800c75c 	.word	0x0800c75c

0800b604 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b604:	b480      	push	{r7}
 800b606:	b08b      	sub	sp, #44	@ 0x2c
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	fa93 f3a3 	rbit	r3, r3
 800b61e:	613b      	str	r3, [r7, #16]
  return result;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b62a:	2320      	movs	r3, #32
 800b62c:	e003      	b.n	800b636 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	fab3 f383 	clz	r3, r3
 800b634:	b2db      	uxtb	r3, r3
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	2103      	movs	r1, #3
 800b63a:	fa01 f303 	lsl.w	r3, r1, r3
 800b63e:	43db      	mvns	r3, r3
 800b640:	401a      	ands	r2, r3
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	fa93 f3a3 	rbit	r3, r3
 800b64c:	61fb      	str	r3, [r7, #28]
  return result;
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b658:	2320      	movs	r3, #32
 800b65a:	e003      	b.n	800b664 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65e:	fab3 f383 	clz	r3, r3
 800b662:	b2db      	uxtb	r3, r3
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	fa01 f303 	lsl.w	r3, r1, r3
 800b66c:	431a      	orrs	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]
}
 800b672:	bf00      	nop
 800b674:	372c      	adds	r7, #44	@ 0x2c
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b67e:	b480      	push	{r7}
 800b680:	b085      	sub	sp, #20
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	43db      	mvns	r3, r3
 800b692:	401a      	ands	r2, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	fb01 f303 	mul.w	r3, r1, r3
 800b69c:	431a      	orrs	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	605a      	str	r2, [r3, #4]
}
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b08b      	sub	sp, #44	@ 0x2c
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689a      	ldr	r2, [r3, #8]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	fa93 f3a3 	rbit	r3, r3
 800b6c8:	613b      	str	r3, [r7, #16]
  return result;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b6d4:	2320      	movs	r3, #32
 800b6d6:	e003      	b.n	800b6e0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	fab3 f383 	clz	r3, r3
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	2103      	movs	r1, #3
 800b6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	401a      	ands	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	fa93 f3a3 	rbit	r3, r3
 800b6f6:	61fb      	str	r3, [r7, #28]
  return result;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b702:	2320      	movs	r3, #32
 800b704:	e003      	b.n	800b70e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	fab3 f383 	clz	r3, r3
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	6879      	ldr	r1, [r7, #4]
 800b712:	fa01 f303 	lsl.w	r3, r1, r3
 800b716:	431a      	orrs	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b71c:	bf00      	nop
 800b71e:	372c      	adds	r7, #44	@ 0x2c
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b728:	b480      	push	{r7}
 800b72a:	b08b      	sub	sp, #44	@ 0x2c
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	fa93 f3a3 	rbit	r3, r3
 800b742:	613b      	str	r3, [r7, #16]
  return result;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b74e:	2320      	movs	r3, #32
 800b750:	e003      	b.n	800b75a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	fab3 f383 	clz	r3, r3
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	2103      	movs	r1, #3
 800b75e:	fa01 f303 	lsl.w	r3, r1, r3
 800b762:	43db      	mvns	r3, r3
 800b764:	401a      	ands	r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	fa93 f3a3 	rbit	r3, r3
 800b770:	61fb      	str	r3, [r7, #28]
  return result;
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b77c:	2320      	movs	r3, #32
 800b77e:	e003      	b.n	800b788 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b782:	fab3 f383 	clz	r3, r3
 800b786:	b2db      	uxtb	r3, r3
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	6879      	ldr	r1, [r7, #4]
 800b78c:	fa01 f303 	lsl.w	r3, r1, r3
 800b790:	431a      	orrs	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	60da      	str	r2, [r3, #12]
}
 800b796:	bf00      	nop
 800b798:	372c      	adds	r7, #44	@ 0x2c
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b08b      	sub	sp, #44	@ 0x2c
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1a      	ldr	r2, [r3, #32]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	fa93 f3a3 	rbit	r3, r3
 800b7bc:	613b      	str	r3, [r7, #16]
  return result;
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	e003      	b.n	800b7d4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	fab3 f383 	clz	r3, r3
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	210f      	movs	r1, #15
 800b7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7dc:	43db      	mvns	r3, r3
 800b7de:	401a      	ands	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	fa93 f3a3 	rbit	r3, r3
 800b7ea:	61fb      	str	r3, [r7, #28]
  return result;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	e003      	b.n	800b802 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	fab3 f383 	clz	r3, r3
 800b800:	b2db      	uxtb	r3, r3
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	fa01 f303 	lsl.w	r3, r1, r3
 800b80a:	431a      	orrs	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b810:	bf00      	nop
 800b812:	372c      	adds	r7, #44	@ 0x2c
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b08b      	sub	sp, #44	@ 0x2c
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	0a1b      	lsrs	r3, r3, #8
 800b830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	fa93 f3a3 	rbit	r3, r3
 800b838:	613b      	str	r3, [r7, #16]
  return result;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b844:	2320      	movs	r3, #32
 800b846:	e003      	b.n	800b850 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	fab3 f383 	clz	r3, r3
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	210f      	movs	r1, #15
 800b854:	fa01 f303 	lsl.w	r3, r1, r3
 800b858:	43db      	mvns	r3, r3
 800b85a:	401a      	ands	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	fa93 f3a3 	rbit	r3, r3
 800b868:	61fb      	str	r3, [r7, #28]
  return result;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b874:	2320      	movs	r3, #32
 800b876:	e003      	b.n	800b880 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87a:	fab3 f383 	clz	r3, r3
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	fa01 f303 	lsl.w	r3, r1, r3
 800b888:	431a      	orrs	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b88e:	bf00      	nop
 800b890:	372c      	adds	r7, #44	@ 0x2c
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	fa93 f3a3 	rbit	r3, r3
 800b8b0:	60fb      	str	r3, [r7, #12]
  return result;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <LL_GPIO_Init+0x26>
    return 32U;
 800b8bc:	2320      	movs	r3, #32
 800b8be:	e003      	b.n	800b8c8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	fab3 f383 	clz	r3, r3
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b8ca:	e048      	b.n	800b95e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d8:	4013      	ands	r3, r2
 800b8da:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d03a      	beq.n	800b958 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d003      	beq.n	800b8f2 <LL_GPIO_Init+0x58>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d10e      	bne.n	800b910 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff fed7 	bl	800b6ae <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	461a      	mov	r2, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff feb7 	bl	800b67e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	461a      	mov	r2, r3
 800b916:	69b9      	ldr	r1, [r7, #24]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ff05 	bl	800b728 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	2b02      	cmp	r3, #2
 800b924:	d111      	bne.n	800b94a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	2bff      	cmp	r3, #255	@ 0xff
 800b92a:	d807      	bhi.n	800b93c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	695b      	ldr	r3, [r3, #20]
 800b930:	461a      	mov	r2, r3
 800b932:	69b9      	ldr	r1, [r7, #24]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff ff34 	bl	800b7a2 <LL_GPIO_SetAFPin_0_7>
 800b93a:	e006      	b.n	800b94a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	461a      	mov	r2, r3
 800b942:	69b9      	ldr	r1, [r7, #24]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff ff69 	bl	800b81c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	461a      	mov	r2, r3
 800b950:	69b9      	ldr	r1, [r7, #24]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fe56 	bl	800b604 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	3301      	adds	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	fa22 f303 	lsr.w	r3, r2, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1af      	bne.n	800b8cc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b97e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	43db      	mvns	r3, r3
 800b992:	b29b      	uxth	r3, r3
 800b994:	4013      	ands	r3, r2
 800b996:	b29a      	uxth	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	1d3b      	adds	r3, r7, #4
 800b9b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b0ac      	sub	sp, #176	@ 0xb0
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	f040 84ca 	bne.w	800c390 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	699a      	ldr	r2, [r3, #24]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d904      	bls.n	800ba12 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ba10:	e003      	b.n	800ba1a <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	7b1b      	ldrb	r3, [r3, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d122      	bne.n	800ba68 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6959      	ldr	r1, [r3, #20]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	88da      	ldrh	r2, [r3, #6]
 800ba2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fdac 	bl	800c58e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	613b      	str	r3, [r7, #16]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	461a      	mov	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	4413      	add	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	00da      	lsls	r2, r3, #3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	4413      	add	r3, r2
 800ba54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	801a      	strh	r2, [r3, #0]
 800ba64:	f000 bc6f 	b.w	800c346 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	78db      	ldrb	r3, [r3, #3]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	f040 831e 	bne.w	800c0ae <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	6a1a      	ldr	r2, [r3, #32]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	f240 82cf 	bls.w	800c01e <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba96:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	441a      	add	r2, r3
 800baa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800baa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bab0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab8:	b29b      	uxth	r3, r3
 800baba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	6a1a      	ldr	r2, [r3, #32]
 800bac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bac4:	1ad2      	subs	r2, r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 814f 	beq.w	800bd80 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	785b      	ldrb	r3, [r3, #1]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d16b      	bne.n	800bbc6 <USB_EPStartXfer+0x1de>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	461a      	mov	r2, r3
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	4413      	add	r3, r2
 800bb00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	00da      	lsls	r2, r3, #3
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb10:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb20:	801a      	strh	r2, [r3, #0]
 800bb22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10a      	bne.n	800bb40 <USB_EPStartXfer+0x158>
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	801a      	strh	r2, [r3, #0]
 800bb3e:	e05b      	b.n	800bbf8 <USB_EPStartXfer+0x210>
 800bb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb44:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb46:	d81c      	bhi.n	800bb82 <USB_EPStartXfer+0x19a>
 800bb48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bb52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <USB_EPStartXfer+0x180>
 800bb5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb62:	3301      	adds	r3, #1
 800bb64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	029b      	lsls	r3, r3, #10
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e03a      	b.n	800bbf8 <USB_EPStartXfer+0x210>
 800bb82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb86:	095b      	lsrs	r3, r3, #5
 800bb88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bb8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb90:	f003 031f 	and.w	r3, r3, #31
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <USB_EPStartXfer+0x1ba>
 800bb98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	029b      	lsls	r3, r3, #10
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	e018      	b.n	800bbf8 <USB_EPStartXfer+0x210>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	785b      	ldrb	r3, [r3, #1]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d114      	bne.n	800bbf8 <USB_EPStartXfer+0x210>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbda:	4413      	add	r3, r2
 800bbdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	00da      	lsls	r2, r3, #3
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	895b      	ldrh	r3, [r3, #10]
 800bbfc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	6959      	ldr	r1, [r3, #20]
 800bc04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fcbd 	bl	800c58e <USB_WritePMA>
            ep->xfer_buff += len;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	695a      	ldr	r2, [r3, #20]
 800bc18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc1c:	441a      	add	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	6a1a      	ldr	r2, [r3, #32]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d907      	bls.n	800bc3e <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	6a1a      	ldr	r2, [r3, #32]
 800bc32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc36:	1ad2      	subs	r2, r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	621a      	str	r2, [r3, #32]
 800bc3c:	e006      	b.n	800bc4c <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	785b      	ldrb	r3, [r3, #1]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d16b      	bne.n	800bd2c <USB_EPStartXfer+0x344>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	461a      	mov	r2, r3
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	4413      	add	r3, r2
 800bc66:	61bb      	str	r3, [r7, #24]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	00da      	lsls	r2, r3, #3
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	4413      	add	r3, r2
 800bc72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	801a      	strh	r2, [r3, #0]
 800bc88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <USB_EPStartXfer+0x2be>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	801a      	strh	r2, [r3, #0]
 800bca4:	e05d      	b.n	800bd62 <USB_EPStartXfer+0x37a>
 800bca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcac:	d81c      	bhi.n	800bce8 <USB_EPStartXfer+0x300>
 800bcae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bcb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <USB_EPStartXfer+0x2e6>
 800bcc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcc8:	3301      	adds	r3, #1
 800bcca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	029b      	lsls	r3, r3, #10
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	801a      	strh	r2, [r3, #0]
 800bce6:	e03c      	b.n	800bd62 <USB_EPStartXfer+0x37a>
 800bce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcec:	095b      	lsrs	r3, r3, #5
 800bcee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcf6:	f003 031f 	and.w	r3, r3, #31
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d104      	bne.n	800bd08 <USB_EPStartXfer+0x320>
 800bcfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd02:	3b01      	subs	r3, #1
 800bd04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	029b      	lsls	r3, r3, #10
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	801a      	strh	r2, [r3, #0]
 800bd2a:	e01a      	b.n	800bd62 <USB_EPStartXfer+0x37a>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	785b      	ldrb	r3, [r3, #1]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d116      	bne.n	800bd62 <USB_EPStartXfer+0x37a>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	623b      	str	r3, [r7, #32]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	461a      	mov	r2, r3
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	4413      	add	r3, r2
 800bd46:	623b      	str	r3, [r7, #32]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	00da      	lsls	r2, r3, #3
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	4413      	add	r3, r2
 800bd52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd56:	61fb      	str	r3, [r7, #28]
 800bd58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	891b      	ldrh	r3, [r3, #8]
 800bd66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	6959      	ldr	r1, [r3, #20]
 800bd6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fc08 	bl	800c58e <USB_WritePMA>
 800bd7e:	e2e2      	b.n	800c346 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d16b      	bne.n	800be60 <USB_EPStartXfer+0x478>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	461a      	mov	r2, r3
 800bd96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd98:	4413      	add	r3, r2
 800bd9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	00da      	lsls	r2, r3, #3
 800bda2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bda4:	4413      	add	r3, r2
 800bda6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdba:	801a      	strh	r2, [r3, #0]
 800bdbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <USB_EPStartXfer+0x3f2>
 800bdc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdd6:	801a      	strh	r2, [r3, #0]
 800bdd8:	e05d      	b.n	800be96 <USB_EPStartXfer+0x4ae>
 800bdda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdde:	2b3e      	cmp	r3, #62	@ 0x3e
 800bde0:	d81c      	bhi.n	800be1c <USB_EPStartXfer+0x434>
 800bde2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bdec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <USB_EPStartXfer+0x41a>
 800bdf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29a      	uxth	r2, r3
 800be08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	029b      	lsls	r3, r3, #10
 800be10:	b29b      	uxth	r3, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	b29a      	uxth	r2, r3
 800be16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be18:	801a      	strh	r2, [r3, #0]
 800be1a:	e03c      	b.n	800be96 <USB_EPStartXfer+0x4ae>
 800be1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be20:	095b      	lsrs	r3, r3, #5
 800be22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be2a:	f003 031f 	and.w	r3, r3, #31
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d104      	bne.n	800be3c <USB_EPStartXfer+0x454>
 800be32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be36:	3b01      	subs	r3, #1
 800be38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	b29a      	uxth	r2, r3
 800be42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be46:	b29b      	uxth	r3, r3
 800be48:	029b      	lsls	r3, r3, #10
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	4313      	orrs	r3, r2
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be58:	b29a      	uxth	r2, r3
 800be5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be5c:	801a      	strh	r2, [r3, #0]
 800be5e:	e01a      	b.n	800be96 <USB_EPStartXfer+0x4ae>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d116      	bne.n	800be96 <USB_EPStartXfer+0x4ae>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be72:	b29b      	uxth	r3, r3
 800be74:	461a      	mov	r2, r3
 800be76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be78:	4413      	add	r3, r2
 800be7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	00da      	lsls	r2, r3, #3
 800be82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be84:	4413      	add	r3, r2
 800be86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be90:	b29a      	uxth	r2, r3
 800be92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	891b      	ldrh	r3, [r3, #8]
 800be9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	6959      	ldr	r1, [r3, #20]
 800bea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fb6e 	bl	800c58e <USB_WritePMA>
            ep->xfer_buff += len;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beba:	441a      	add	r2, r3
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	6a1a      	ldr	r2, [r3, #32]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d907      	bls.n	800bedc <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	6a1a      	ldr	r2, [r3, #32]
 800bed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed4:	1ad2      	subs	r2, r2, r3
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	621a      	str	r2, [r3, #32]
 800beda:	e006      	b.n	800beea <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2200      	movs	r2, #0
 800bee8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	643b      	str	r3, [r7, #64]	@ 0x40
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	785b      	ldrb	r3, [r3, #1]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d16b      	bne.n	800bfce <USB_EPStartXfer+0x5e6>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf06:	4413      	add	r3, r2
 800bf08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	00da      	lsls	r2, r3, #3
 800bf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf12:	4413      	add	r3, r2
 800bf14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <USB_EPStartXfer+0x560>
 800bf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf44:	801a      	strh	r2, [r3, #0]
 800bf46:	e05b      	b.n	800c000 <USB_EPStartXfer+0x618>
 800bf48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf4e:	d81c      	bhi.n	800bf8a <USB_EPStartXfer+0x5a2>
 800bf50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <USB_EPStartXfer+0x588>
 800bf66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	029b      	lsls	r3, r3, #10
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4313      	orrs	r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	e03a      	b.n	800c000 <USB_EPStartXfer+0x618>
 800bf8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf98:	f003 031f 	and.w	r3, r3, #31
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <USB_EPStartXfer+0x5c2>
 800bfa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bfaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	029b      	lsls	r3, r3, #10
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	e018      	b.n	800c000 <USB_EPStartXfer+0x618>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	785b      	ldrb	r3, [r3, #1]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d114      	bne.n	800c000 <USB_EPStartXfer+0x618>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	461a      	mov	r2, r3
 800bfe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfe2:	4413      	add	r3, r2
 800bfe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	00da      	lsls	r2, r3, #3
 800bfec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfee:	4413      	add	r3, r2
 800bff0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bffe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	895b      	ldrh	r3, [r3, #10]
 800c004:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	6959      	ldr	r1, [r3, #20]
 800c00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c010:	b29b      	uxth	r3, r3
 800c012:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fab9 	bl	800c58e <USB_WritePMA>
 800c01c:	e193      	b.n	800c346 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	b29b      	uxth	r3, r3
 800c034:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c03c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	441a      	add	r2, r3
 800c04a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c04e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c05e:	b29b      	uxth	r3, r3
 800c060:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	461a      	mov	r2, r3
 800c070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c072:	4413      	add	r3, r2
 800c074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	00da      	lsls	r2, r3, #3
 800c07c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c07e:	4413      	add	r3, r2
 800c080:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c084:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c08e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	891b      	ldrh	r3, [r3, #8]
 800c094:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	6959      	ldr	r1, [r3, #20]
 800c09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fa71 	bl	800c58e <USB_WritePMA>
 800c0ac:	e14b      	b.n	800c346 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	6a1a      	ldr	r2, [r3, #32]
 800c0b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 809a 	beq.w	800c208 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d16b      	bne.n	800c1b8 <USB_EPStartXfer+0x7d0>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f0:	4413      	add	r3, r2
 800c0f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	00da      	lsls	r2, r3, #3
 800c0fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c102:	667b      	str	r3, [r7, #100]	@ 0x64
 800c104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c10e:	b29a      	uxth	r2, r3
 800c110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c112:	801a      	strh	r2, [r3, #0]
 800c114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <USB_EPStartXfer+0x74a>
 800c11c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	b29b      	uxth	r3, r3
 800c122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	e05b      	b.n	800c1ea <USB_EPStartXfer+0x802>
 800c132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c136:	2b3e      	cmp	r3, #62	@ 0x3e
 800c138:	d81c      	bhi.n	800c174 <USB_EPStartXfer+0x78c>
 800c13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c13e:	085b      	lsrs	r3, r3, #1
 800c140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d004      	beq.n	800c15a <USB_EPStartXfer+0x772>
 800c150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c154:	3301      	adds	r3, #1
 800c156:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c15a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	b29a      	uxth	r2, r3
 800c160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c164:	b29b      	uxth	r3, r3
 800c166:	029b      	lsls	r3, r3, #10
 800c168:	b29b      	uxth	r3, r3
 800c16a:	4313      	orrs	r3, r2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c170:	801a      	strh	r2, [r3, #0]
 800c172:	e03a      	b.n	800c1ea <USB_EPStartXfer+0x802>
 800c174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c178:	095b      	lsrs	r3, r3, #5
 800c17a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c182:	f003 031f 	and.w	r3, r3, #31
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <USB_EPStartXfer+0x7ac>
 800c18a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c18e:	3b01      	subs	r3, #1
 800c190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	029b      	lsls	r3, r3, #10
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1b4:	801a      	strh	r2, [r3, #0]
 800c1b6:	e018      	b.n	800c1ea <USB_EPStartXfer+0x802>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d114      	bne.n	800c1ea <USB_EPStartXfer+0x802>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1cc:	4413      	add	r3, r2
 800c1ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00da      	lsls	r2, r3, #3
 800c1d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1d8:	4413      	add	r3, r2
 800c1da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	895b      	ldrh	r3, [r3, #10]
 800c1ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	6959      	ldr	r1, [r3, #20]
 800c1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f9c4 	bl	800c58e <USB_WritePMA>
 800c206:	e09e      	b.n	800c346 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	785b      	ldrb	r3, [r3, #1]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d16b      	bne.n	800c2e8 <USB_EPStartXfer+0x900>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	461a      	mov	r2, r3
 800c21e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c220:	4413      	add	r3, r2
 800c222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	00da      	lsls	r2, r3, #3
 800c22a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c22c:	4413      	add	r3, r2
 800c22e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c232:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c23e:	b29a      	uxth	r2, r3
 800c240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c242:	801a      	strh	r2, [r3, #0]
 800c244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <USB_EPStartXfer+0x87a>
 800c24c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	e063      	b.n	800c32a <USB_EPStartXfer+0x942>
 800c262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c266:	2b3e      	cmp	r3, #62	@ 0x3e
 800c268:	d81c      	bhi.n	800c2a4 <USB_EPStartXfer+0x8bc>
 800c26a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c26e:	085b      	lsrs	r3, r3, #1
 800c270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <USB_EPStartXfer+0x8a2>
 800c280:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c284:	3301      	adds	r3, #1
 800c286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c28a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	b29a      	uxth	r2, r3
 800c290:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c294:	b29b      	uxth	r3, r3
 800c296:	029b      	lsls	r3, r3, #10
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4313      	orrs	r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2a0:	801a      	strh	r2, [r3, #0]
 800c2a2:	e042      	b.n	800c32a <USB_EPStartXfer+0x942>
 800c2a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2a8:	095b      	lsrs	r3, r3, #5
 800c2aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c2ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2b2:	f003 031f 	and.w	r3, r3, #31
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d104      	bne.n	800c2c4 <USB_EPStartXfer+0x8dc>
 800c2ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c2c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	029b      	lsls	r3, r3, #10
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2e4:	801a      	strh	r2, [r3, #0]
 800c2e6:	e020      	b.n	800c32a <USB_EPStartXfer+0x942>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d11c      	bne.n	800c32a <USB_EPStartXfer+0x942>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c304:	4413      	add	r3, r2
 800c306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	00da      	lsls	r2, r3, #3
 800c310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c314:	4413      	add	r3, r2
 800c316:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c31a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c322:	b29a      	uxth	r2, r3
 800c324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c328:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	891b      	ldrh	r3, [r3, #8]
 800c32e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	6959      	ldr	r1, [r3, #20]
 800c336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f924 	bl	800c58e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4413      	add	r3, r2
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c35c:	817b      	strh	r3, [r7, #10]
 800c35e:	897b      	ldrh	r3, [r7, #10]
 800c360:	f083 0310 	eor.w	r3, r3, #16
 800c364:	817b      	strh	r3, [r7, #10]
 800c366:	897b      	ldrh	r3, [r7, #10]
 800c368:	f083 0320 	eor.w	r3, r3, #32
 800c36c:	817b      	strh	r3, [r7, #10]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	441a      	add	r2, r3
 800c378:	897b      	ldrh	r3, [r7, #10]
 800c37a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c37e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	8013      	strh	r3, [r2, #0]
 800c38e:	e0d5      	b.n	800c53c <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	7b1b      	ldrb	r3, [r3, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d156      	bne.n	800c446 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d122      	bne.n	800c3e6 <USB_EPStartXfer+0x9fe>
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	78db      	ldrb	r3, [r3, #3]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11e      	bne.n	800c3e6 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3be:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	441a      	add	r2, r3
 800c3cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c3d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	8013      	strh	r3, [r2, #0]
 800c3e4:	e01d      	b.n	800c422 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c3f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3fc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	441a      	add	r2, r3
 800c40a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800c40e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c41e:	b29b      	uxth	r3, r3
 800c420:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	699a      	ldr	r2, [r3, #24]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d907      	bls.n	800c43e <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	1ad2      	subs	r2, r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	619a      	str	r2, [r3, #24]
 800c43c:	e054      	b.n	800c4e8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2200      	movs	r2, #0
 800c442:	619a      	str	r2, [r3, #24]
 800c444:	e050      	b.n	800c4e8 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	78db      	ldrb	r3, [r3, #3]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d142      	bne.n	800c4d4 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d048      	beq.n	800c4e8 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c466:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c46a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <USB_EPStartXfer+0xa96>
 800c472:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c47e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c486:	2b00      	cmp	r3, #0
 800c488:	d12e      	bne.n	800c4e8 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c48a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c48e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c492:	2b00      	cmp	r3, #0
 800c494:	d128      	bne.n	800c4e8 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ac:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	441a      	add	r2, r3
 800c4ba:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800c4be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	8013      	strh	r3, [r2, #0]
 800c4d2:	e009      	b.n	800c4e8 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	78db      	ldrb	r3, [r3, #3]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d103      	bne.n	800c4e4 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	619a      	str	r2, [r3, #24]
 800c4e2:	e001      	b.n	800c4e8 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e02a      	b.n	800c53e <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c502:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c506:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c50a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c50e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c512:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c516:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	441a      	add	r2, r3
 800c524:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c52c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c538:	b29b      	uxth	r3, r3
 800c53a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	37b0      	adds	r7, #176	@ 0xb0
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c552:	78fb      	ldrb	r3, [r7, #3]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d103      	bne.n	800c560 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2280      	movs	r2, #128	@ 0x80
 800c55c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c56e:	b480      	push	{r7}
 800c570:	b085      	sub	sp, #20
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c580:	68fb      	ldr	r3, [r7, #12]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c58e:	b480      	push	{r7}
 800c590:	b08b      	sub	sp, #44	@ 0x2c
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	4611      	mov	r1, r2
 800c59a:	461a      	mov	r2, r3
 800c59c:	460b      	mov	r3, r1
 800c59e:	80fb      	strh	r3, [r7, #6]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c5a4:	88bb      	ldrh	r3, [r7, #4]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	085b      	lsrs	r3, r3, #1
 800c5aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c5b4:	88fa      	ldrh	r2, [r7, #6]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5c4:	e01c      	b.n	800c600 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	b21b      	sxth	r3, r3
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	b21a      	sxth	r2, r3
 800c5d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	b21b      	sxth	r3, r3
 800c5e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	8a7a      	ldrh	r2, [r7, #18]
 800c5e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	3302      	adds	r3, #2
 800c5ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1df      	bne.n	800c5c6 <USB_WritePMA+0x38>
  }
}
 800c606:	bf00      	nop
 800c608:	bf00      	nop
 800c60a:	372c      	adds	r7, #44	@ 0x2c
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c614:	b480      	push	{r7}
 800c616:	b08b      	sub	sp, #44	@ 0x2c
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4611      	mov	r1, r2
 800c620:	461a      	mov	r2, r3
 800c622:	460b      	mov	r3, r1
 800c624:	80fb      	strh	r3, [r7, #6]
 800c626:	4613      	mov	r3, r2
 800c628:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c62a:	88bb      	ldrh	r3, [r7, #4]
 800c62c:	085b      	lsrs	r3, r3, #1
 800c62e:	b29b      	uxth	r3, r3
 800c630:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c63a:	88fa      	ldrh	r2, [r7, #6]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c644:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	627b      	str	r3, [r7, #36]	@ 0x24
 800c64a:	e018      	b.n	800c67e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	b29b      	uxth	r3, r3
 800c652:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	3302      	adds	r3, #2
 800c658:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3301      	adds	r3, #1
 800c666:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	0a1b      	lsrs	r3, r3, #8
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	3301      	adds	r3, #1
 800c676:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67a:	3b01      	subs	r3, #1
 800c67c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1e3      	bne.n	800c64c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c684:	88bb      	ldrh	r3, [r7, #4]
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d007      	beq.n	800c6a0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	b29b      	uxth	r3, r3
 800c696:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	701a      	strb	r2, [r3, #0]
  }
}
 800c6a0:	bf00      	nop
 800c6a2:	372c      	adds	r7, #44	@ 0x2c
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <memset>:
 800c6ac:	4402      	add	r2, r0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d100      	bne.n	800c6b6 <memset+0xa>
 800c6b4:	4770      	bx	lr
 800c6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ba:	e7f9      	b.n	800c6b0 <memset+0x4>

0800c6bc <__libc_init_array>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4d0d      	ldr	r5, [pc, #52]	@ (800c6f4 <__libc_init_array+0x38>)
 800c6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c6f8 <__libc_init_array+0x3c>)
 800c6c2:	1b64      	subs	r4, r4, r5
 800c6c4:	10a4      	asrs	r4, r4, #2
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	42a6      	cmp	r6, r4
 800c6ca:	d109      	bne.n	800c6e0 <__libc_init_array+0x24>
 800c6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c6fc <__libc_init_array+0x40>)
 800c6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c700 <__libc_init_array+0x44>)
 800c6d0:	f000 f818 	bl	800c704 <_init>
 800c6d4:	1b64      	subs	r4, r4, r5
 800c6d6:	10a4      	asrs	r4, r4, #2
 800c6d8:	2600      	movs	r6, #0
 800c6da:	42a6      	cmp	r6, r4
 800c6dc:	d105      	bne.n	800c6ea <__libc_init_array+0x2e>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e4:	4798      	blx	r3
 800c6e6:	3601      	adds	r6, #1
 800c6e8:	e7ee      	b.n	800c6c8 <__libc_init_array+0xc>
 800c6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ee:	4798      	blx	r3
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	e7f2      	b.n	800c6da <__libc_init_array+0x1e>
 800c6f4:	0800c76c 	.word	0x0800c76c
 800c6f8:	0800c76c 	.word	0x0800c76c
 800c6fc:	0800c76c 	.word	0x0800c76c
 800c700:	0800c770 	.word	0x0800c770

0800c704 <_init>:
 800c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c706:	bf00      	nop
 800c708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70a:	bc08      	pop	{r3}
 800c70c:	469e      	mov	lr, r3
 800c70e:	4770      	bx	lr

0800c710 <_fini>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	bf00      	nop
 800c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c716:	bc08      	pop	{r3}
 800c718:	469e      	mov	lr, r3
 800c71a:	4770      	bx	lr
