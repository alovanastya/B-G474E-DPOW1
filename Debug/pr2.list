
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e508  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800e6e0  0800e6e0  0000f6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  0001000c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e900  0800e900  0000f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e908  0800e908  0000f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e90c  0800e90c  0000f90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800e910  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  2000000c  0800e91c  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800e91c  0001084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000253d7  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  00035413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018b8  00000000  00000000  0003b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee11  00000000  00000000  0003ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230cc  00000000  00000000  0006b851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014cabe  00000000  00000000  0008e91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db3db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f80  00000000  00000000  001db420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001e43a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e6c8 	.word	0x0800e6c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800e6c8 	.word	0x0800e6c8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ed6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f6ad 1d78 	subw	sp, sp, #2424	@ 0x978
 8000ef6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 fcd1 	bl	800289e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f97e 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fe68 	bl	8001bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f04:	f000 fe1c 	bl	8001b40 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f08:	f000 f9c6 	bl	8001298 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000f0c:	f000 fa3c 	bl	8001388 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000f10:	f000 fa60 	bl	80013d4 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000f14:	f000 fa84 	bl	8001420 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000f18:	f000 faa8 	bl	800146c <MX_COMP6_Init>
  MX_DAC1_Init();
 8000f1c:	f000 facc 	bl	80014b8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000f20:	f000 fb14 	bl	800154c <MX_DAC2_Init>
  MX_DAC3_Init();
 8000f24:	f000 fb4c 	bl	80015c0 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 8000f28:	f000 fb8e 	bl	8001648 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 8000f2c:	f000 fd66 	bl	80019fc <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 8000f30:	f000 fd92 	bl	8001a58 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000f34:	f000 fddc 	bl	8001af0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f38:	f000 fc96 	bl	8001868 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000f3c:	f000 fd28 	bl	8001990 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000f40:	489f      	ldr	r0, [pc, #636]	@ (80011c0 <main+0x2d0>)
 8000f42:	f008 fda7 	bl	8009a94 <HAL_TIM_Base_Start_IT>

  __HAL_DAC_ENABLE(&hdac3, DAC_CHANNEL_1);
 8000f46:	4b9f      	ldr	r3, [pc, #636]	@ (80011c4 <main+0x2d4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80011c4 <main+0x2d4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_2);
 8000f56:	4b9c      	ldr	r3, [pc, #624]	@ (80011c8 <main+0x2d8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b9a      	ldr	r3, [pc, #616]	@ (80011c8 <main+0x2d8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f64:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f66:	2108      	movs	r1, #8
 8000f68:	4895      	ldr	r0, [pc, #596]	@ (80011c0 <main+0x2d0>)
 8000f6a:	f008 fe63 	bl	8009c34 <HAL_TIM_PWM_Start>

  char msg[] = "MEOW!\r\n";
 8000f6e:	4a97      	ldr	r2, [pc, #604]	@ (80011cc <main+0x2dc>)
 8000f70:	f507 6316 	add.w	r3, r7, #2400	@ 0x960
 8000f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f78:	e883 0003 	stmia.w	r3, {r0, r1}
  // HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 8000f7c:	f507 6316 	add.w	r3, r7, #2400	@ 0x960
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f949 	bl	8000218 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f507 6316 	add.w	r3, r7, #2400	@ 0x960
 8000f8e:	4619      	mov	r1, r3
 8000f90:	488f      	ldr	r0, [pc, #572]	@ (80011d0 <main+0x2e0>)
 8000f92:	f009 ffbb 	bl	800af0c <HAL_UART_Transmit_DMA>
  HAL_Delay(5);
 8000f96:	2005      	movs	r0, #5
 8000f98:	f001 fcf2 	bl	8002980 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f9c:	217f      	movs	r1, #127	@ 0x7f
 8000f9e:	488d      	ldr	r0, [pc, #564]	@ (80011d4 <main+0x2e4>)
 8000fa0:	f003 f87a 	bl	8004098 <HAL_ADCEx_Calibration_Start>

  //int curr_voltage_mV = (ch_res * 3300) / 4095;
  //printf("  CH%d=%d.%dV\r", chn, curr_voltage_mV / 1000, (curr_voltage_mV % 1000) / 100);

  uint32_t sineWave_1[SAMPLE_COUNT_1];
  for (int i = 0; i < SAMPLE_COUNT_1; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 8000faa:	e03f      	b.n	800102c <main+0x13c>
  {
      sineWave_1[i] = OFFSET + AMPLITUDE * sin(2 * M_PI * i / SAMPLE_COUNT_1);
 8000fac:	f8d7 096c 	ldr.w	r0, [r7, #2412]	@ 0x96c
 8000fb0:	f7ff fa8c 	bl	80004cc <__aeabi_i2d>
 8000fb4:	a380      	add	r3, pc, #512	@ (adr r3, 80011b8 <main+0x2c8>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff faf1 	bl	80005a0 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b83      	ldr	r3, [pc, #524]	@ (80011d8 <main+0x2e8>)
 8000fcc:	f7ff fc12 	bl	80007f4 <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b17 	vmov	d7, r2, r3
 8000fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fdc:	eef0 0a67 	vmov.f32	s1, s15
 8000fe0:	f00c fb4e 	bl	800d680 <sin>
 8000fe4:	ec51 0b10 	vmov	r0, r1, d0
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b7b      	ldr	r3, [pc, #492]	@ (80011dc <main+0x2ec>)
 8000fee:	f7ff fad7 	bl	80005a0 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b78      	ldr	r3, [pc, #480]	@ (80011e0 <main+0x2f0>)
 8001000:	f7ff f918 	bl	8000234 <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd8a 	bl	8000b24 <__aeabi_d2uiz>
 8001010:	4601      	mov	r1, r0
 8001012:	f507 6317 	add.w	r3, r7, #2416	@ 0x970
 8001016:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 800101a:	f8d7 296c 	ldr.w	r2, [r7, #2412]	@ 0x96c
 800101e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SAMPLE_COUNT_1; i++)
 8001022:	f8d7 396c 	ldr.w	r3, [r7, #2412]	@ 0x96c
 8001026:	3301      	adds	r3, #1
 8001028:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 800102c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	@ 0x96c
 8001030:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001034:	dbba      	blt.n	8000fac <main+0xbc>
  }


  uint32_t sineWave_2[SAMPLE_COUNT_2];
  for (int i = 0; i < SAMPLE_COUNT_2; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3968 	str.w	r3, [r7, #2408]	@ 0x968
 800103c:	e03f      	b.n	80010be <main+0x1ce>
  {
      sineWave_2[i] = OFFSET + AMPLITUDE * sin(2 * M_PI * i / SAMPLE_COUNT_2);
 800103e:	f8d7 0968 	ldr.w	r0, [r7, #2408]	@ 0x968
 8001042:	f7ff fa43 	bl	80004cc <__aeabi_i2d>
 8001046:	a35c      	add	r3, pc, #368	@ (adr r3, 80011b8 <main+0x2c8>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff faa8 	bl	80005a0 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b61      	ldr	r3, [pc, #388]	@ (80011e4 <main+0x2f4>)
 800105e:	f7ff fbc9 	bl	80007f4 <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	ec43 2b17 	vmov	d7, r2, r3
 800106a:	eeb0 0a47 	vmov.f32	s0, s14
 800106e:	eef0 0a67 	vmov.f32	s1, s15
 8001072:	f00c fb05 	bl	800d680 <sin>
 8001076:	ec51 0b10 	vmov	r0, r1, d0
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <main+0x2ec>)
 8001080:	f7ff fa8e 	bl	80005a0 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b53      	ldr	r3, [pc, #332]	@ (80011e0 <main+0x2f0>)
 8001092:	f7ff f8cf 	bl	8000234 <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd41 	bl	8000b24 <__aeabi_d2uiz>
 80010a2:	4601      	mov	r1, r0
 80010a4:	f507 6317 	add.w	r3, r7, #2416	@ 0x970
 80010a8:	f5a3 6317 	sub.w	r3, r3, #2416	@ 0x970
 80010ac:	f8d7 2968 	ldr.w	r2, [r7, #2408]	@ 0x968
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SAMPLE_COUNT_2; i++)
 80010b4:	f8d7 3968 	ldr.w	r3, [r7, #2408]	@ 0x968
 80010b8:	3301      	adds	r3, #1
 80010ba:	f8c7 3968 	str.w	r3, [r7, #2408]	@ 0x968
 80010be:	f8d7 3968 	ldr.w	r3, [r7, #2408]	@ 0x968
 80010c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80010c4:	ddbb      	ble.n	800103e <main+0x14e>
	  sineWave_3[i] = sineWave_1[i] + sineWave_2[i];
  }
  */

   // HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
   HAL_TIM_Base_Start(&htim6);
 80010c6:	4848      	ldr	r0, [pc, #288]	@ (80011e8 <main+0x2f8>)
 80010c8:	f008 fc74 	bl	80099b4 <HAL_TIM_Base_Start>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2,(uint32_t*)sineWave_1,SAMPLE_COUNT_1,DAC_ALIGN_12B_R);
 80010cc:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010d8:	2110      	movs	r1, #16
 80010da:	483b      	ldr	r0, [pc, #236]	@ (80011c8 <main+0x2d8>)
 80010dc:	f003 fd94 	bl	8004c08 <HAL_DAC_Start_DMA>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(pwm_value == 0) step = 1;
 80010e0:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <main+0x2fc>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <main+0x1fe>
 80010e8:	4b41      	ldr	r3, [pc, #260]	@ (80011f0 <main+0x300>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
    if(pwm_value == 50) step = -1;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <main+0x2fc>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2b32      	cmp	r3, #50	@ 0x32
 80010f4:	d102      	bne.n	80010fc <main+0x20c>
 80010f6:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <main+0x300>)
 80010f8:	22ff      	movs	r2, #255	@ 0xff
 80010fa:	701a      	strb	r2, [r3, #0]
	pwm_value += step;
 80010fc:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <main+0x300>)
 80010fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <main+0x2fc>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4413      	add	r3, r2
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <main+0x2fc>)
 800110e:	801a      	strh	r2, [r3, #0]
	setPWM(pwm_value);
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <main+0x2fc>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fe31 	bl	8001d7c <setPWM>
	// HAL_Delay(5);

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 800111a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800111e:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <main+0x304>)
 8001120:	f004 fdc6 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d105      	bne.n	8001136 <main+0x246>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2120      	movs	r1, #32
 800112e:	4831      	ldr	r0, [pc, #196]	@ (80011f4 <main+0x304>)
 8001130:	f004 fdd6 	bl	8005ce0 <HAL_GPIO_WritePin>
 8001134:	e004      	b.n	8001140 <main+0x250>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	482e      	ldr	r0, [pc, #184]	@ (80011f4 <main+0x304>)
 800113c:	f004 fdd0 	bl	8005ce0 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 8001140:	2120      	movs	r1, #32
 8001142:	482d      	ldr	r0, [pc, #180]	@ (80011f8 <main+0x308>)
 8001144:	f004 fdb4 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <main+0x26e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f004 fdc2 	bl	8005ce0 <HAL_GPIO_WritePin>
 800115c:	e006      	b.n	800116c <main+0x27c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001164:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001168:	f004 fdba 	bl	8005ce0 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 800116c:	2110      	movs	r1, #16
 800116e:	4822      	ldr	r0, [pc, #136]	@ (80011f8 <main+0x308>)
 8001170:	f004 fd9e 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d105      	bne.n	8001186 <main+0x296>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2102      	movs	r1, #2
 800117e:	481d      	ldr	r0, [pc, #116]	@ (80011f4 <main+0x304>)
 8001180:	f004 fdae 	bl	8005ce0 <HAL_GPIO_WritePin>
 8001184:	e004      	b.n	8001190 <main+0x2a0>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	481a      	ldr	r0, [pc, #104]	@ (80011f4 <main+0x304>)
 800118c:	f004 fda8 	bl	8005ce0 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8001190:	2104      	movs	r1, #4
 8001192:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <main+0x304>)
 8001194:	f004 fd8c 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <main+0x2ba>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2180      	movs	r1, #128	@ 0x80
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <main+0x304>)
 80011a4:	f004 fd9c 	bl	8005ce0 <HAL_GPIO_WritePin>
 80011a8:	e79a      	b.n	80010e0 <main+0x1f0>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <main+0x304>)
 80011b0:	f004 fd96 	bl	8005ce0 <HAL_GPIO_WritePin>
	if(pwm_value == 0) step = 1;
 80011b4:	e794      	b.n	80010e0 <main+0x1f0>
 80011b6:	bf00      	nop
 80011b8:	54442d18 	.word	0x54442d18
 80011bc:	401921fb 	.word	0x401921fb
 80011c0:	2000031c 	.word	0x2000031c
 80011c4:	2000014c 	.word	0x2000014c
 80011c8:	20000124 	.word	0x20000124
 80011cc:	0800e6e0 	.word	0x0800e6e0
 80011d0:	20000414 	.word	0x20000414
 80011d4:	20000028 	.word	0x20000028
 80011d8:	40790000 	.word	0x40790000
 80011dc:	409f4000 	.word	0x409f4000
 80011e0:	40a00000 	.word	0x40a00000
 80011e4:	40690000 	.word	0x40690000
 80011e8:	20000368 	.word	0x20000368
 80011ec:	20000844 	.word	0x20000844
 80011f0:	20000846 	.word	0x20000846
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	@ 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	2238      	movs	r2, #56	@ 0x38
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f00c fa0a 	bl	800d624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800121e:	2000      	movs	r0, #0
 8001220:	f007 fb40 	bl	80088a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001224:	2322      	movs	r3, #34	@ 0x22
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800123e:	2304      	movs	r3, #4
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001242:	2355      	movs	r3, #85	@ 0x55
 8001244:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001246:	2308      	movs	r3, #8
 8001248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800124a:	2308      	movs	r3, #8
 800124c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fbd8 	bl	8008a0c <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001262:	f000 fdb3 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2303      	movs	r3, #3
 800126c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fed6 	bl	8009030 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800128a:	f000 fd9f 	bl	8001dcc <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	@ 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800129e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2220      	movs	r2, #32
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00c f9b7 	bl	800d624 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b6:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012be:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <MX_ADC1_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_ADC1_Init+0xe8>)
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_ADC1_Init+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <MX_ADC1_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001320:	4817      	ldr	r0, [pc, #92]	@ (8001380 <MX_ADC1_Init+0xe8>)
 8001322:	f001 fd8d 	bl	8002e40 <HAL_ADC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800132c:	f000 fd4e 	bl	8001dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <MX_ADC1_Init+0xe8>)
 800133c:	f002 ff40 	bl	80041c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001346:	f000 fd41 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_ADC1_Init+0xec>)
 800134c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800134e:	2306      	movs	r3, #6
 8001350:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001356:	237f      	movs	r3, #127	@ 0x7f
 8001358:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800135a:	2304      	movs	r3, #4
 800135c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_ADC1_Init+0xe8>)
 8001368:	f002 f9a4 	bl	80036b4 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001372:	f000 fd2b 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3730      	adds	r7, #48	@ 0x30
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000028 	.word	0x20000028
 8001384:	08600004 	.word	0x08600004

08001388 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_COMP2_Init+0x44>)
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <MX_COMP2_Init+0x48>)
 8001390:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_COMP2_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_COMP2_Init+0x44>)
 800139a:	2240      	movs	r2, #64	@ 0x40
 800139c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_COMP2_Init+0x44>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_COMP2_Init+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_COMP2_Init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_COMP2_Init+0x44>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_COMP2_Init+0x44>)
 80013b8:	f003 f95a 	bl	8004670 <HAL_COMP_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80013c2:	f000 fd03 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000094 	.word	0x20000094
 80013d0:	40010204 	.word	0x40010204

080013d4 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <MX_COMP3_Init+0x48>)
 80013dc:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_COMP3_Init+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_COMP3_Init+0x44>)
 8001404:	f003 f934 	bl	8004670 <HAL_COMP_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 800140e:	f000 fcdd 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000b8 	.word	0x200000b8
 800141c:	40010208 	.word	0x40010208

08001420 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_Init 0 */
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */
  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_COMP4_Init+0x44>)
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <MX_COMP4_Init+0x48>)
 8001428:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_COMP4_Init+0x44>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_COMP4_Init+0x44>)
 8001432:	2250      	movs	r2, #80	@ 0x50
 8001434:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_COMP4_Init+0x44>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_COMP4_Init+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_COMP4_Init+0x44>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_COMP4_Init+0x44>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_COMP4_Init+0x44>)
 8001450:	f003 f90e 	bl	8004670 <HAL_COMP_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 800145a:	f000 fcb7 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000dc 	.word	0x200000dc
 8001468:	4001020c 	.word	0x4001020c

0800146c <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP6_Init 0 */
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */
  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_COMP6_Init+0x44>)
 8001472:	4a10      	ldr	r2, [pc, #64]	@ (80014b4 <MX_COMP6_Init+0x48>)
 8001474:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_COMP6_Init+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_COMP6_Init+0x44>)
 800147e:	2250      	movs	r2, #80	@ 0x50
 8001480:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_COMP6_Init+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_COMP6_Init+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <MX_COMP6_Init+0x44>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_COMP6_Init+0x44>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_COMP6_Init+0x44>)
 800149c:	f003 f8e8 	bl	8004670 <HAL_COMP_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 80014a6:	f000 fc91 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000100 	.word	0x20000100
 80014b4:	40010214 	.word	0x40010214

080014b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2230      	movs	r2, #48	@ 0x30
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00c f8ad 	bl	800d624 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <MX_DAC1_Init+0x8c>)
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <MX_DAC1_Init+0x90>)
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d0:	481c      	ldr	r0, [pc, #112]	@ (8001544 <MX_DAC1_Init+0x8c>)
 80014d2:	f003 fb76 	bl	8004bc2 <HAL_DAC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014dc:	f000 fc76 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014e0:	2302      	movs	r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_DAC1_Init+0x8c>)
 800150c:	f003 fcce 	bl	8004eac <HAL_DAC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001516:	f000 fc59 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800151a:	231e      	movs	r3, #30
 800151c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	2210      	movs	r2, #16
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_DAC1_Init+0x8c>)
 800152e:	f003 fcbd 	bl	8004eac <HAL_DAC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001538:	f000 fc48 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000124 	.word	0x20000124
 8001548:	50000800 	.word	0x50000800

0800154c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2230      	movs	r2, #48	@ 0x30
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00c f863 	bl	800d624 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_DAC2_Init+0x6c>)
 8001560:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <MX_DAC2_Init+0x70>)
 8001562:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001564:	4814      	ldr	r0, [pc, #80]	@ (80015b8 <MX_DAC2_Init+0x6c>)
 8001566:	f003 fb2c 	bl	8004bc2 <HAL_DAC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001570:	f000 fc2c 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001574:	2302      	movs	r3, #2
 8001576:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <MX_DAC2_Init+0x6c>)
 80015a0:	f003 fc84 	bl	8004eac <HAL_DAC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80015aa:	f000 fc0f 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000138 	.word	0x20000138
 80015bc:	50000c00 	.word	0x50000c00

080015c0 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2230      	movs	r2, #48	@ 0x30
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00c f829 	bl	800d624 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <MX_DAC3_Init+0x80>)
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <MX_DAC3_Init+0x84>)
 80015d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80015d8:	4819      	ldr	r0, [pc, #100]	@ (8001640 <MX_DAC3_Init+0x80>)
 80015da:	f003 faf2 	bl	8004bc2 <HAL_DAC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80015e4:	f000 fbf2 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015e8:	2302      	movs	r3, #2
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001600:	2302      	movs	r3, #2
 8001602:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <MX_DAC3_Init+0x80>)
 8001614:	f003 fc4a 	bl	8004eac <HAL_DAC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800161e:	f000 fbd5 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	2210      	movs	r2, #16
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_DAC3_Init+0x80>)
 800162a:	f003 fc3f 	bl	8004eac <HAL_DAC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001634:	f000 fbca 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	@ 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000014c 	.word	0x2000014c
 8001644:	50001000 	.word	0x50001000

08001648 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ac      	sub	sp, #176	@ 0xb0
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800164e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800165c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001674:	2260      	movs	r2, #96	@ 0x60
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00b ffd3 	bl	800d624 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2220      	movs	r2, #32
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00b ffcd 	bl	800d624 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800168a:	4b75      	ldr	r3, [pc, #468]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 800168c:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <MX_HRTIM1_Init+0x21c>)
 800168e:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001690:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001696:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800169c:	4870      	ldr	r0, [pc, #448]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 800169e:	f004 fb5b 	bl	8005d58 <HAL_HRTIM_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 80016a8:	f000 fb90 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80016ac:	210c      	movs	r1, #12
 80016ae:	486c      	ldr	r0, [pc, #432]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80016b0:	f004 fc22 	bl	8005ef8 <HAL_HRTIM_DLLCalibrationStart>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 80016ba:	f000 fb87 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80016be:	210a      	movs	r1, #10
 80016c0:	4867      	ldr	r0, [pc, #412]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80016c2:	f004 fc71 	bl	8005fa8 <HAL_HRTIM_PollForDLLCalibration>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 80016cc:	f000 fb7e 	bl	8001dcc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 80016d0:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 80016d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80016e4:	2308      	movs	r3, #8
 80016e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80016ea:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80016ee:	461a      	mov	r2, r3
 80016f0:	2104      	movs	r1, #4
 80016f2:	485b      	ldr	r0, [pc, #364]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80016f4:	f004 fc8c 	bl	8006010 <HAL_HRTIM_TimeBaseConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 80016fe:	f000 fb65 	bl	8001dcc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 800170e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001712:	461a      	mov	r2, r3
 8001714:	2104      	movs	r1, #4
 8001716:	4852      	ldr	r0, [pc, #328]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001718:	f004 fd2f 	bl	800617a <HAL_HRTIM_WaveformTimerControl>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8001722:	f000 fb53 	bl	8001dcc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8001736:	2301      	movs	r3, #1
 8001738:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800173a:	2300      	movs	r3, #0
 800173c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001742:	2300      	movs	r3, #0
 8001744:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001752:	2300      	movs	r3, #0
 8001754:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001756:	2300      	movs	r3, #0
 8001758:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800175a:	2300      	movs	r3, #0
 800175c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800175e:	2300      	movs	r3, #0
 8001760:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001766:	2300      	movs	r3, #0
 8001768:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800176a:	2300      	movs	r3, #0
 800176c:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800176e:	2300      	movs	r3, #0
 8001770:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001776:	2300      	movs	r3, #0
 8001778:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800177a:	2300      	movs	r3, #0
 800177c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001788:	461a      	mov	r2, r3
 800178a:	2104      	movs	r1, #4
 800178c:	4834      	ldr	r0, [pc, #208]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 800178e:	f004 fc67 	bl	8006060 <HAL_HRTIM_WaveformTimerConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8001798:	f000 fb18 	bl	8001dcc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 800179c:	2300      	movs	r3, #0
 800179e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	461a      	mov	r2, r3
 80017a6:	2105      	movs	r1, #5
 80017a8:	482d      	ldr	r0, [pc, #180]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80017aa:	f004 fc59 	bl	8006060 <HAL_HRTIM_WaveformTimerConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 80017b4:	f000 fb0a 	bl	8001dcc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017de:	2104      	movs	r1, #4
 80017e0:	481f      	ldr	r0, [pc, #124]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80017e2:	f004 fcfd 	bl	80061e0 <HAL_HRTIM_WaveformOutputConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 80017ec:	f000 faee 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f6:	2105      	movs	r1, #5
 80017f8:	4819      	ldr	r0, [pc, #100]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 80017fa:	f004 fcf1 	bl	80061e0 <HAL_HRTIM_WaveformOutputConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001804:	f000 fae2 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8001808:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800180c:	461a      	mov	r2, r3
 800180e:	2105      	movs	r1, #5
 8001810:	4813      	ldr	r0, [pc, #76]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001812:	f004 fbfd 	bl	8006010 <HAL_HRTIM_TimeBaseConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 800181c:	f000 fad6 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8001820:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001824:	461a      	mov	r2, r3
 8001826:	2105      	movs	r1, #5
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 800182a:	f004 fca6 	bl	800617a <HAL_HRTIM_WaveformTimerControl>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 8001834:	f000 faca 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800183e:	2105      	movs	r1, #5
 8001840:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001842:	f004 fccd 	bl	80061e0 <HAL_HRTIM_WaveformOutputConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 800184c:	f000 fabe 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_HRTIM1_Init+0x218>)
 8001852:	f000 fcf7 	bl	8002244 <HAL_HRTIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	37b0      	adds	r7, #176	@ 0xb0
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000220 	.word	0x20000220
 8001864:	40016800 	.word	0x40016800

08001868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b098      	sub	sp, #96	@ 0x60
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2234      	movs	r2, #52	@ 0x34
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00b fec5 	bl	800d624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <MX_TIM1_Init+0x120>)
 800189c:	4a3b      	ldr	r2, [pc, #236]	@ (800198c <MX_TIM1_Init+0x124>)
 800189e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 80018a0:	4b39      	ldr	r3, [pc, #228]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018a2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80018a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80018ae:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018bc:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018c8:	482f      	ldr	r0, [pc, #188]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018ca:	f008 f95b 	bl	8009b84 <HAL_TIM_PWM_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80018d4:	f000 fa7a 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018e8:	4619      	mov	r1, r3
 80018ea:	4827      	ldr	r0, [pc, #156]	@ (8001988 <MX_TIM1_Init+0x120>)
 80018ec:	f009 f94e 	bl	800ab8c <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018f6:	f000 fa69 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fa:	2360      	movs	r3, #96	@ 0x60
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001902:	2300      	movs	r3, #0
 8001904:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001916:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800191a:	2208      	movs	r2, #8
 800191c:	4619      	mov	r1, r3
 800191e:	481a      	ldr	r0, [pc, #104]	@ (8001988 <MX_TIM1_Init+0x120>)
 8001920:	f008 fbea 	bl	800a0f8 <HAL_TIM_PWM_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800192a:	f000 fa4f 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001946:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	@ (8001988 <MX_TIM1_Init+0x120>)
 800196c:	f009 f9a4 	bl	800acb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001976:	f000 fa29 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800197a:	4803      	ldr	r0, [pc, #12]	@ (8001988 <MX_TIM1_Init+0x120>)
 800197c:	f000 fd5c 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3760      	adds	r7, #96	@ 0x60
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000031c 	.word	0x2000031c
 800198c:	40012c00 	.word	0x40012c00

08001990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019a2:	4a15      	ldr	r2, [pc, #84]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1700;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019a8:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80019ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019b6:	2264      	movs	r2, #100	@ 0x64
 80019b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019c2:	f007 ff9f 	bl	8009904 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019cc:	f000 f9fe 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019d0:	2320      	movs	r3, #32
 80019d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_TIM6_Init+0x64>)
 80019de:	f009 f8d5 	bl	800ab8c <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019e8:	f000 f9f0 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000368 	.word	0x20000368
 80019f8:	40001000 	.word	0x40001000

080019fc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a12:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a16:	f7ff fa53 	bl	8000ec0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7ff fa38 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a20:	2310      	movs	r3, #16
 8001a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a24:	2303      	movs	r3, #3
 8001a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <MX_UCPD1_Init+0x58>)
 8001a32:	f00a feee 	bl	800c812 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a36:	2340      	movs	r3, #64	@ 0x40
 8001a38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <MX_UCPD1_Init+0x58>)
 8001a48:	f00a fee3 	bl	800c812 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	48000400 	.word	0x48000400

08001a58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <MX_USART3_UART_Init+0x94>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001aa2:	f009 f9e3 	bl	800ae6c <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001aac:	f000 f98e 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ab4:	f00a fc97 	bl	800c3e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001abe:	f000 f985 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ac6:	f00a fccc 	bl	800c462 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f000 f97c 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ad6:	f00a fc4d 	bl	800c374 <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f000 f974 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000414 	.word	0x20000414
 8001aec:	40004800 	.word	0x40004800

08001af0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001af4:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001af6:	4a11      	ldr	r2, [pc, #68]	@ (8001b3c <MX_USB_PCD_Init+0x4c>)
 8001af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001afc:	2208      	movs	r2, #8
 8001afe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b00:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b02:	2202      	movs	r2, #2
 8001b04:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <MX_USB_PCD_Init+0x48>)
 8001b26:	f005 fb97 	bl	8007258 <HAL_PCD_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001b30:	f000 f94c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000568 	.word	0x20000568
 8001b3c:	40005c00 	.word	0x40005c00

08001b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b52:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b62:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_DMA_Init+0x90>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	200b      	movs	r0, #11
 8001b7c:	f002 ffed 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b80:	200b      	movs	r0, #11
 8001b82:	f003 f804 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	200c      	movs	r0, #12
 8001b8c:	f002 ffe5 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b90:	200c      	movs	r0, #12
 8001b92:	f002 fffc 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	200d      	movs	r0, #13
 8001b9c:	f002 ffdd 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ba0:	200d      	movs	r0, #13
 8001ba2:	f002 fff4 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	200e      	movs	r0, #14
 8001bac:	f002 ffd5 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bb0:	200e      	movs	r0, #14
 8001bb2:	f002 ffec 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f002 ffcd 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bc0:	200f      	movs	r0, #15
 8001bc2:	f002 ffe4 	bl	8004b8e <HAL_NVIC_EnableIRQ>

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b60      	ldr	r3, [pc, #384]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a5f      	ldr	r2, [pc, #380]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b5a      	ldr	r3, [pc, #360]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	4a59      	ldr	r2, [pc, #356]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0e:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	4a53      	ldr	r2, [pc, #332]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	4a4d      	ldr	r2, [pc, #308]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d6c <MX_GPIO_Init+0x198>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f24c 0108 	movw	r1, #49160	@ 0xc008
 8001c50:	4847      	ldr	r0, [pc, #284]	@ (8001d70 <MX_GPIO_Init+0x19c>)
 8001c52:	f004 f845 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	21a2      	movs	r1, #162	@ 0xa2
 8001c5a:	4846      	ldr	r0, [pc, #280]	@ (8001d74 <MX_GPIO_Init+0x1a0>)
 8001c5c:	f004 f840 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f004 f839 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	4841      	ldr	r0, [pc, #260]	@ (8001d78 <MX_GPIO_Init+0x1a4>)
 8001c74:	f004 f834 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 8001c78:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4837      	ldr	r0, [pc, #220]	@ (8001d70 <MX_GPIO_Init+0x19c>)
 8001c92:	f003 fe8b 	bl	80059ac <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001c96:	2330      	movs	r3, #48	@ 0x30
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4831      	ldr	r0, [pc, #196]	@ (8001d70 <MX_GPIO_Init+0x19c>)
 8001cac:	f003 fe7e 	bl	80059ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 8001cb0:	23a2      	movs	r3, #162	@ 0xa2
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	482b      	ldr	r0, [pc, #172]	@ (8001d74 <MX_GPIO_Init+0x1a0>)
 8001cc8:	f003 fe70 	bl	80059ac <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001ccc:	f240 4304 	movw	r3, #1028	@ 0x404
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4824      	ldr	r0, [pc, #144]	@ (8001d74 <MX_GPIO_Init+0x1a0>)
 8001ce4:	f003 fe62 	bl	80059ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001ce8:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d04:	f003 fe52 	bl	80059ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4816      	ldr	r0, [pc, #88]	@ (8001d78 <MX_GPIO_Init+0x1a4>)
 8001d20:	f003 fe44 	bl	80059ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2008      	movs	r0, #8
 8001d2a:	f002 ff16 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d2e:	2008      	movs	r0, #8
 8001d30:	f002 ff2d 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f002 ff0e 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f002 ff25 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2017      	movs	r0, #23
 8001d4a:	f002 ff06 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d4e:	2017      	movs	r0, #23
 8001d50:	f002 ff1d 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2028      	movs	r0, #40	@ 0x28
 8001d5a:	f002 fefe 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d5e:	2028      	movs	r0, #40	@ 0x28
 8001d60:	f002 ff15 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	@ 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000c00 	.word	0x48000c00

08001d7c <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(uint16_t value)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d86:	2360      	movs	r3, #96	@ 0x60
 8001d88:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3); // таймер №1, канал №3
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <setPWM+0x38>)
 8001da0:	f008 f9aa 	bl	800a0f8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001da4:	2108      	movs	r1, #8
 8001da6:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <setPWM+0x38>)
 8001da8:	f007 ff44 	bl	8009c34 <HAL_TIM_PWM_Start>
}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000031c 	.word	0x2000031c

08001db8 <HAL_UART_TxCpltCallback>:
    // USART1 завершил прием данных
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
    // USART2 завершил отправку данных
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <HAL_MspInit+0x44>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <HAL_MspInit+0x44>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_MspInit+0x44>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_MspInit+0x44>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <HAL_MspInit+0x44>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_MspInit+0x44>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e0e:	f006 fded 	bl	80089ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0a0      	sub	sp, #128	@ 0x80
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	2254      	movs	r2, #84	@ 0x54
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00b fbef 	bl	800d624 <memset>
  if(hadc->Instance==ADC1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4e:	d154      	bne.n	8001efa <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5c:	f107 0318 	add.w	r3, r7, #24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 fb01 	bl	8009468 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e6c:	f7ff ffae 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e74:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea4:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_ADC_MspInit+0xe4>)
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480f      	ldr	r0, [pc, #60]	@ (8001f08 <HAL_ADC_MspInit+0xe8>)
 8001ecc:	f003 fd6e 	bl	80059ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001ed0:	230e      	movs	r3, #14
 8001ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f003 fd61 	bl	80059ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2012      	movs	r0, #18
 8001ef0:	f002 fe33 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ef4:	2012      	movs	r0, #18
 8001ef6:	f002 fe4a 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3780      	adds	r7, #128	@ 0x80
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48000800 	.word	0x48000800

08001f0c <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3d      	ldr	r2, [pc, #244]	@ (8002020 <HAL_COMP_MspInit+0x114>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d119      	bne.n	8001f62 <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a3c      	ldr	r2, [pc, #240]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5c:	f003 fd26 	bl	80059ac <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001f60:	e05a      	b.n	8002018 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <HAL_COMP_MspInit+0x11c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d119      	bne.n	8001fa0 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a2c      	ldr	r2, [pc, #176]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001f84:	2301      	movs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9a:	f003 fd07 	bl	80059ac <HAL_GPIO_Init>
}
 8001f9e:	e03b      	b.n	8002018 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a21      	ldr	r2, [pc, #132]	@ (800202c <HAL_COMP_MspInit+0x120>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d118      	bne.n	8001fdc <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4816      	ldr	r0, [pc, #88]	@ (8002030 <HAL_COMP_MspInit+0x124>)
 8001fd6:	f003 fce9 	bl	80059ac <HAL_GPIO_Init>
}
 8001fda:	e01d      	b.n	8002018 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <HAL_COMP_MspInit+0x128>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d118      	bne.n	8002018 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <HAL_COMP_MspInit+0x118>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8001ffe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	4807      	ldr	r0, [pc, #28]	@ (8002030 <HAL_COMP_MspInit+0x124>)
 8002014:	f003 fcca 	bl	80059ac <HAL_GPIO_Init>
}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	@ 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010204 	.word	0x40010204
 8002024:	40021000 	.word	0x40021000
 8002028:	40010208 	.word	0x40010208
 800202c:	4001020c 	.word	0x4001020c
 8002030:	48000400 	.word	0x48000400
 8002034:	40010214 	.word	0x40010214

08002038 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	@ 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5c      	ldr	r2, [pc, #368]	@ (80021c8 <HAL_DAC_MspInit+0x190>)
 8002056:	4293      	cmp	r3, r2
 8002058:	f040 8086 	bne.w	8002168 <HAL_DAC_MspInit+0x130>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800205c:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a5a      	ldr	r2, [pc, #360]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	4b55      	ldr	r3, [pc, #340]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	4a54      	ldr	r2, [pc, #336]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002080:	4b52      	ldr	r3, [pc, #328]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800208c:	2320      	movs	r3, #32
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f003 fc83 	bl	80059ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel5;
 80020a6:	4b4a      	ldr	r3, [pc, #296]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020a8:	4a4a      	ldr	r2, [pc, #296]	@ (80021d4 <HAL_DAC_MspInit+0x19c>)
 80020aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80020ac:	4b48      	ldr	r3, [pc, #288]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020ae:	2207      	movs	r2, #7
 80020b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b2:	4b47      	ldr	r3, [pc, #284]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020b4:	2210      	movs	r2, #16
 80020b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b8:	4b45      	ldr	r3, [pc, #276]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80020be:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020c4:	4b42      	ldr	r3, [pc, #264]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020cc:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80020d4:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020d6:	2220      	movs	r2, #32
 80020d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80020e2:	483b      	ldr	r0, [pc, #236]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020e4:	f003 f930 	bl	8005348 <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 80020ee:	f7ff fe6d 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a36      	ldr	r2, [pc, #216]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	4a35      	ldr	r2, [pc, #212]	@ (80021d0 <HAL_DAC_MspInit+0x198>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80020fe:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002100:	4a36      	ldr	r2, [pc, #216]	@ (80021dc <HAL_DAC_MspInit+0x1a4>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002104:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002106:	2206      	movs	r2, #6
 8002108:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 800210c:	2210      	movs	r2, #16
 800210e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 800211e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002122:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002124:	4b2c      	ldr	r3, [pc, #176]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800212a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002132:	4b29      	ldr	r3, [pc, #164]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800213a:	4827      	ldr	r0, [pc, #156]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 800213c:	f003 f904 	bl	8005348 <HAL_DMA_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 8002146:	f7ff fe41 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <HAL_DAC_MspInit+0x1a0>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2036      	movs	r0, #54	@ 0x36
 800215c:	f002 fcfd 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002160:	2036      	movs	r0, #54	@ 0x36
 8002162:	f002 fd14 	bl	8004b8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002166:	e02a      	b.n	80021be <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <HAL_DAC_MspInit+0x1a8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10c      	bne.n	800218c <HAL_DAC_MspInit+0x154>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
}
 800218a:	e018      	b.n	80021be <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <HAL_DAC_MspInit+0x1ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d113      	bne.n	80021be <HAL_DAC_MspInit+0x186>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002196:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	4a0c      	ldr	r2, [pc, #48]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_DAC_MspInit+0x194>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2036      	movs	r0, #54	@ 0x36
 80021b4:	f002 fcd1 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b8:	2036      	movs	r0, #54	@ 0x36
 80021ba:	f002 fce8 	bl	8004b8e <HAL_NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3730      	adds	r7, #48	@ 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	50000800 	.word	0x50000800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	20000160 	.word	0x20000160
 80021d4:	40020058 	.word	0x40020058
 80021d8:	200001c0 	.word	0x200001c0
 80021dc:	4002001c 	.word	0x4002001c
 80021e0:	50000c00 	.word	0x50000c00
 80021e4:	50001000 	.word	0x50001000

080021e8 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a11      	ldr	r2, [pc, #68]	@ (800223c <HAL_HRTIM_MspInit+0x54>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d11b      	bne.n	8002232 <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_HRTIM_MspInit+0x58>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a10      	ldr	r2, [pc, #64]	@ (8002240 <HAL_HRTIM_MspInit+0x58>)
 8002200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_HRTIM_MspInit+0x58>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2043      	movs	r0, #67	@ 0x43
 8002218:	f002 fc9f 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 800221c:	2043      	movs	r0, #67	@ 0x43
 800221e:	f002 fcb6 	bl	8004b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	204a      	movs	r0, #74	@ 0x4a
 8002228:	f002 fc97 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 800222c:	204a      	movs	r0, #74	@ 0x4a
 800222e:	f002 fcae 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40016800 	.word	0x40016800
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a37      	ldr	r2, [pc, #220]	@ (8002340 <HAL_HRTIM_MspPostInit+0xfc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d167      	bne.n	8002336 <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	4a36      	ldr	r2, [pc, #216]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002272:	4b34      	ldr	r3, [pc, #208]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	4b31      	ldr	r3, [pc, #196]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a30      	ldr	r2, [pc, #192]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b2e      	ldr	r3, [pc, #184]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a2:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_HRTIM_MspPostInit+0x100>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80022ae:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022c0:	230d      	movs	r3, #13
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	481f      	ldr	r0, [pc, #124]	@ (8002348 <HAL_HRTIM_MspPostInit+0x104>)
 80022cc:	f003 fb6e 	bl	80059ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80022d0:	23c0      	movs	r3, #192	@ 0xc0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022e0:	230d      	movs	r3, #13
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4818      	ldr	r0, [pc, #96]	@ (800234c <HAL_HRTIM_MspPostInit+0x108>)
 80022ec:	f003 fb5e 	bl	80059ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 80022f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8002302:	2303      	movs	r3, #3
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	480f      	ldr	r0, [pc, #60]	@ (800234c <HAL_HRTIM_MspPostInit+0x108>)
 800230e:	f003 fb4d 	bl	80059ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8002312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002324:	230d      	movs	r3, #13
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002332:	f003 fb3b 	bl	80059ac <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	@ 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40016800 	.word	0x40016800
 8002344:	40021000 	.word	0x40021000
 8002348:	48000400 	.word	0x48000400
 800234c:	48000800 	.word	0x48000800

08002350 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_TIM_PWM_MspInit+0x38>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10b      	bne.n	800237a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 8002368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800236c:	6613      	str	r3, [r2, #96]	@ 0x60
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <HAL_TIM_Base_MspInit+0x98>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d13e      	bne.n	8002420 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_TIM_Base_MspInit+0x9c>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	4a21      	ldr	r2, [pc, #132]	@ (800242c <HAL_TIM_Base_MspInit+0x9c>)
 80023a8:	f043 0310 	orr.w	r3, r3, #16
 80023ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_TIM_Base_MspInit+0x9c>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel3;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_TIM_Base_MspInit+0xa4>)
 80023be:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023c2:	2208      	movs	r2, #8
 80023c4:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023d4:	2280      	movs	r2, #128	@ 0x80
 80023d6:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023de:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e6:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 80023f4:	480e      	ldr	r0, [pc, #56]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 80023f6:	f002 ffa7 	bl	8005348 <HAL_DMA_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002400:	f7ff fce4 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 8002408:	621a      	str	r2, [r3, #32]
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_TIM_Base_MspInit+0xa0>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2036      	movs	r0, #54	@ 0x36
 8002416:	f002 fba0 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800241a:	2036      	movs	r0, #54	@ 0x36
 800241c:	f002 fbb7 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40001000 	.word	0x40001000
 800242c:	40021000 	.word	0x40021000
 8002430:	200003b4 	.word	0x200003b4
 8002434:	40020030 	.word	0x40020030

08002438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <HAL_TIM_MspPostInit+0x68>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11d      	bne.n	8002496 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002476:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002484:	2306      	movs	r3, #6
 8002486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002492:	f003 fa8b 	bl	80059ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b09e      	sub	sp, #120	@ 0x78
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	2254      	movs	r2, #84	@ 0x54
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00b f8ab 	bl	800d624 <memset>
  if(huart->Instance==USART3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_UART_MspInit+0x160>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f040 8092 	bne.w	80025fe <HAL_UART_MspInit+0x156>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024da:	2304      	movs	r3, #4
 80024dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f006 ffbe 	bl	8009468 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024f2:	f7ff fc6b 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f6:	4b45      	ldr	r3, [pc, #276]	@ (800260c <HAL_UART_MspInit+0x164>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	4a44      	ldr	r2, [pc, #272]	@ (800260c <HAL_UART_MspInit+0x164>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002500:	6593      	str	r3, [r2, #88]	@ 0x58
 8002502:	4b42      	ldr	r3, [pc, #264]	@ (800260c <HAL_UART_MspInit+0x164>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	4b3f      	ldr	r3, [pc, #252]	@ (800260c <HAL_UART_MspInit+0x164>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	4a3e      	ldr	r2, [pc, #248]	@ (800260c <HAL_UART_MspInit+0x164>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251a:	4b3c      	ldr	r3, [pc, #240]	@ (800260c <HAL_UART_MspInit+0x164>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002526:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800252a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002534:	2301      	movs	r3, #1
 8002536:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002538:	2307      	movs	r3, #7
 800253a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002540:	4619      	mov	r1, r3
 8002542:	4833      	ldr	r0, [pc, #204]	@ (8002610 <HAL_UART_MspInit+0x168>)
 8002544:	f003 fa32 	bl	80059ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002548:	4b32      	ldr	r3, [pc, #200]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 800254a:	4a33      	ldr	r2, [pc, #204]	@ (8002618 <HAL_UART_MspInit+0x170>)
 800254c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002550:	221c      	movs	r2, #28
 8002552:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002554:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255a:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002560:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256c:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002572:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002578:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800257e:	4825      	ldr	r0, [pc, #148]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002580:	f002 fee2 	bl	8005348 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800258a:	f7ff fc1f 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a20      	ldr	r2, [pc, #128]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002596:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_UART_MspInit+0x16c>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 800259c:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <HAL_UART_MspInit+0x174>)
 800259e:	4a20      	ldr	r2, [pc, #128]	@ (8002620 <HAL_UART_MspInit+0x178>)
 80025a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025a4:	221d      	movs	r2, #29
 80025a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025aa:	2210      	movs	r2, #16
 80025ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ae:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025b6:	2280      	movs	r2, #128	@ 0x80
 80025b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025d2:	4812      	ldr	r0, [pc, #72]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025d4:	f002 feb8 	bl	8005348 <HAL_DMA_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80025de:	f7ff fbf5 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025e8:	4a0c      	ldr	r2, [pc, #48]	@ (800261c <HAL_UART_MspInit+0x174>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2027      	movs	r0, #39	@ 0x27
 80025f4:	f002 fab1 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025f8:	2027      	movs	r0, #39	@ 0x27
 80025fa:	f002 fac8 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80025fe:	bf00      	nop
 8002600:	3778      	adds	r7, #120	@ 0x78
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40004800 	.word	0x40004800
 800260c:	40021000 	.word	0x40021000
 8002610:	48000800 	.word	0x48000800
 8002614:	200004a8 	.word	0x200004a8
 8002618:	40020008 	.word	0x40020008
 800261c:	20000508 	.word	0x20000508
 8002620:	40020044 	.word	0x40020044

08002624 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b098      	sub	sp, #96	@ 0x60
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2254      	movs	r2, #84	@ 0x54
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f00a fff5 	bl	800d624 <memset>
  if(hpcd->Instance==USB)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a15      	ldr	r2, [pc, #84]	@ (8002694 <HAL_PCD_MspInit+0x70>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d122      	bne.n	800268a <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002648:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800264a:	2300      	movs	r3, #0
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4618      	mov	r0, r3
 8002654:	f006 ff08 	bl	8009468 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800265e:	f7ff fbb5 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_PCD_MspInit+0x74>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_PCD_MspInit+0x74>)
 8002668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_PCD_MspInit+0x74>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2013      	movs	r0, #19
 8002680:	f002 fa6b 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8002684:	2013      	movs	r0, #19
 8002686:	f002 fa82 	bl	8004b8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 800268a:	bf00      	nop
 800268c:	3760      	adds	r7, #96	@ 0x60
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40005c00 	.word	0x40005c00
 8002698:	40021000 	.word	0x40021000

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <NMI_Handler+0x4>

080026a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <MemManage_Handler+0x4>

080026b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f2:	f000 f927 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}

080026fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 80026fe:	2004      	movs	r0, #4
 8002700:	f003 fb06 	bl	8005d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 800270c:	2010      	movs	r0, #16
 800270e:	f003 faff 	bl	8005d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA1_Channel1_IRQHandler+0x10>)
 800271e:	f002 fff6 	bl	800570e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200004a8 	.word	0x200004a8

0800272c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA1_Channel2_IRQHandler+0x10>)
 8002732:	f002 ffec 	bl	800570e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200001c0 	.word	0x200001c0

08002740 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA1_Channel3_IRQHandler+0x10>)
 8002746:	f002 ffe2 	bl	800570e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200003b4 	.word	0x200003b4

08002754 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <DMA1_Channel4_IRQHandler+0x10>)
 800275a:	f002 ffd8 	bl	800570e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000508 	.word	0x20000508

08002768 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <DMA1_Channel5_IRQHandler+0x10>)
 800276e:	f002 ffce 	bl	800570e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000160 	.word	0x20000160

0800277c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <ADC1_2_IRQHandler+0x10>)
 8002782:	f000 fd19 	bl	80031b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000028 	.word	0x20000028

08002790 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <USB_HP_IRQHandler+0x10>)
 8002796:	f004 fe2d 	bl	80073f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000568 	.word	0x20000568

080027a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 80027a8:	2020      	movs	r0, #32
 80027aa:	f003 fab1 	bl	8005d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <USART3_IRQHandler+0x10>)
 80027ba:	f008 fc27 	bl	800b00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000414 	.word	0x20000414

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 80027cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027d0:	f003 fa9e 	bl	8005d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027dc:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <TIM6_DAC_IRQHandler+0x1c>)
 80027de:	f007 fb3b 	bl	8009e58 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <TIM6_DAC_IRQHandler+0x20>)
 80027e4:	f002 fae4 	bl	8004db0 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <TIM6_DAC_IRQHandler+0x24>)
 80027ea:	f002 fae1 	bl	8004db0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000368 	.word	0x20000368
 80027f8:	20000124 	.word	0x20000124
 80027fc:	2000014c 	.word	0x2000014c

08002800 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002804:	2106      	movs	r1, #6
 8002806:	4802      	ldr	r0, [pc, #8]	@ (8002810 <HRTIM1_Master_IRQHandler+0x10>)
 8002808:	f003 fd1b 	bl	8006242 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000220 	.word	0x20000220

08002814 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 8002818:	2105      	movs	r1, #5
 800281a:	4802      	ldr	r0, [pc, #8]	@ (8002824 <HRTIM1_TIMF_IRQHandler+0x10>)
 800281c:	f003 fd11 	bl	8006242 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000220 	.word	0x20000220

08002828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <SystemInit+0x20>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <SystemInit+0x20>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800284c:	480d      	ldr	r0, [pc, #52]	@ (8002884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800284e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002850:	f7ff ffea 	bl	8002828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002854:	480c      	ldr	r0, [pc, #48]	@ (8002888 <LoopForever+0x6>)
  ldr r1, =_edata
 8002856:	490d      	ldr	r1, [pc, #52]	@ (800288c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002858:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <LoopForever+0xe>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800286c:	4c0a      	ldr	r4, [pc, #40]	@ (8002898 <LoopForever+0x16>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287a:	f00a fedb 	bl	800d634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287e:	f7fe fb37 	bl	8000ef0 <main>

08002882 <LoopForever>:

LoopForever:
    b LoopForever
 8002882:	e7fe      	b.n	8002882 <LoopForever>
  ldr   r0, =_estack
 8002884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002890:	0800e910 	.word	0x0800e910
  ldr r2, =_sbss
 8002894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002898:	2000084c 	.word	0x2000084c

0800289c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC3_IRQHandler>

0800289e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f002 f94b 	bl	8004b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f80e 	bl	80028d0 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	71fb      	strb	r3, [r7, #7]
 80028be:	e001      	b.n	80028c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028c0:	f7ff fa8a 	bl	8001dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c4:	79fb      	ldrb	r3, [r7, #7]

}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028dc:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <HAL_InitTick+0x68>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d022      	beq.n	800292a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_InitTick+0x6c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <HAL_InitTick+0x68>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 f956 	bl	8004baa <HAL_SYSTICK_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	d809      	bhi.n	800291e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290a:	2200      	movs	r2, #0
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	f04f 30ff 	mov.w	r0, #4294967295
 8002912:	f002 f922 	bl	8004b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <HAL_InitTick+0x70>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e007      	b.n	800292e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e004      	b.n	800292e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000008 	.word	0x20000008
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_IncTick+0x1c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_IncTick+0x20>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4413      	add	r3, r2
 8002952:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <HAL_IncTick+0x1c>)
 8002954:	6013      	str	r3, [r2, #0]
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	20000848 	.word	0x20000848
 8002964:	20000008 	.word	0x20000008

08002968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b03      	ldr	r3, [pc, #12]	@ (800297c <HAL_GetTick+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000848 	.word	0x20000848

08002980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff ffee 	bl	8002968 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d004      	beq.n	80029a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_Delay+0x40>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a4:	bf00      	nop
 80029a6:	f7ff ffdf 	bl	8002968 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d8f7      	bhi.n	80029a6 <HAL_Delay+0x26>
  {
  }
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000008 	.word	0x20000008

080029c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3360      	adds	r3, #96	@ 0x60
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <LL_ADC_SetOffset+0x44>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	03fff000 	.word	0x03fff000

08002a74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3360      	adds	r3, #96	@ 0x60
 8002a82:	461a      	mov	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3360      	adds	r3, #96	@ 0x60
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3360      	adds	r3, #96	@ 0x60
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3360      	adds	r3, #96	@ 0x60
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	615a      	str	r2, [r3, #20]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b087      	sub	sp, #28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3330      	adds	r3, #48	@ 0x30
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	211f      	movs	r1, #31
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	f003 011f 	and.w	r1, r3, #31
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	0e5b      	lsrs	r3, r3, #25
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0d1b      	lsrs	r3, r3, #20
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2107      	movs	r1, #7
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	401a      	ands	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0d1b      	lsrs	r3, r3, #20
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0318 	and.w	r3, r3, #24
 8002c86:	4908      	ldr	r1, [pc, #32]	@ (8002ca8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c88:	40d9      	lsrs	r1, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	0007ffff 	.word	0x0007ffff

08002cac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6093      	str	r3, [r2, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <LL_ADC_IsEnabled+0x18>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_ADC_IsEnabled+0x1a>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_IsDisableOngoing+0x18>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_ADC_IsDisableOngoing+0x1a>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d101      	bne.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1a9      	b.n	80031ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe ffd9 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff41 	bl	8002d08 <LL_ADC_IsDeepPowerDownEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff27 	bl	8002ce4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff5c 	bl	8002d58 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d115      	bne.n	8002ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff40 	bl	8002d30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8003124 <HAL_ADC_Init+0x2e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a9c      	ldr	r2, [pc, #624]	@ (8003128 <HAL_ADC_Init+0x2e8>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff3e 	bl	8002d58 <LL_ADC_IsInternalRegulatorEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff76 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8002f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8142 	bne.w	800319c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 813e 	bne.w	800319c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f28:	f043 0202 	orr.w	r2, r3, #2
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff37 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d141      	bne.n	8002fc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f48:	d004      	beq.n	8002f54 <HAL_ADC_Init+0x114>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_ADC_Init+0x2ec>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10f      	bne.n	8002f74 <HAL_ADC_Init+0x134>
 8002f54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f58:	f7ff ff26 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	4873      	ldr	r0, [pc, #460]	@ (800312c <HAL_ADC_Init+0x2ec>)
 8002f60:	f7ff ff22 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4323      	orrs	r3, r4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e012      	b.n	8002f9a <HAL_ADC_Init+0x15a>
 8002f74:	486e      	ldr	r0, [pc, #440]	@ (8003130 <HAL_ADC_Init+0x2f0>)
 8002f76:	f7ff ff17 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	486d      	ldr	r0, [pc, #436]	@ (8003134 <HAL_ADC_Init+0x2f4>)
 8002f7e:	f7ff ff13 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	431c      	orrs	r4, r3
 8002f86:	486c      	ldr	r0, [pc, #432]	@ (8003138 <HAL_ADC_Init+0x2f8>)
 8002f88:	f7ff ff0e 	bl	8002da8 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_Init+0x172>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_ADC_Init+0x2ec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Init+0x176>
 8002fb2:	4a62      	ldr	r2, [pc, #392]	@ (800313c <HAL_ADC_Init+0x2fc>)
 8002fb4:	e000      	b.n	8002fb8 <HAL_ADC_Init+0x178>
 8002fb6:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_ADC_Init+0x300>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7ff fd00 	bl	80029c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7f5b      	ldrb	r3, [r3, #29]
 8002fc8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fda:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fe2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	045b      	lsls	r3, r3, #17
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <HAL_ADC_Init+0x304>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fee5 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 8003050:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d17f      	bne.n	8003158 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d17c      	bne.n	8003158 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003062:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800306a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800307a:	f023 0302 	bic.w	r3, r3, #2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800309e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6911      	ldr	r1, [r2, #16]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030be:	e013      	b.n	80030e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12a      	bne.n	8003148 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003114:	430a      	orrs	r2, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e019      	b.n	8003158 <HAL_ADC_Init+0x318>
 8003124:	20000000 	.word	0x20000000
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	50000100 	.word	0x50000100
 8003130:	50000400 	.word	0x50000400
 8003134:	50000500 	.word	0x50000500
 8003138:	50000600 	.word	0x50000600
 800313c:	50000300 	.word	0x50000300
 8003140:	50000700 	.word	0x50000700
 8003144:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10c      	bne.n	800317a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f023 010f 	bic.w	r1, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
 8003178:	e007      	b.n	800318a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 020f 	bic.w	r2, r2, #15
 8003188:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	@ 0x5c
 800319a:	e007      	b.n	80031ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop

080031b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031dc:	d004      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x30>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a8e      	ldr	r2, [pc, #568]	@ (800341c <HAL_ADC_IRQHandler+0x264>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_IRQHandler+0x34>
 80031e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003420 <HAL_ADC_IRQHandler+0x268>)
 80031ea:	e000      	b.n	80031ee <HAL_ADC_IRQHandler+0x36>
 80031ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003424 <HAL_ADC_IRQHandler+0x26c>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd5c 	bl	8002cac <LL_ADC_GetMultimode>
 80031f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <HAL_ADC_IRQHandler+0x78>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 ffc2 	bl	80041ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_ADC_IRQHandler+0x8c>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8094 	beq.w	8003378 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 808e 	beq.w	8003378 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fc75 	bl	8002b68 <LL_ADC_REG_IsTriggerSourceSWStart>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d072      	beq.n	800336a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a64      	ldr	r2, [pc, #400]	@ (800341c <HAL_ADC_IRQHandler+0x264>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_ADC_IRQHandler+0xea>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a65      	ldr	r2, [pc, #404]	@ (8003428 <HAL_ADC_IRQHandler+0x270>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d002      	beq.n	800329e <HAL_ADC_IRQHandler+0xe6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	e003      	b.n	80032a6 <HAL_ADC_IRQHandler+0xee>
 800329e:	4b63      	ldr	r3, [pc, #396]	@ (800342c <HAL_ADC_IRQHandler+0x274>)
 80032a0:	e001      	b.n	80032a6 <HAL_ADC_IRQHandler+0xee>
 80032a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d008      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d002      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d104      	bne.n	80032ca <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	e014      	b.n	80032f4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a53      	ldr	r2, [pc, #332]	@ (800341c <HAL_ADC_IRQHandler+0x264>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x130>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a53      	ldr	r2, [pc, #332]	@ (8003428 <HAL_ADC_IRQHandler+0x270>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d002      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x12c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e003      	b.n	80032ec <HAL_ADC_IRQHandler+0x134>
 80032e4:	4b51      	ldr	r3, [pc, #324]	@ (800342c <HAL_ADC_IRQHandler+0x274>)
 80032e6:	e001      	b.n	80032ec <HAL_ADC_IRQHandler+0x134>
 80032e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032ec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d135      	bne.n	800336a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b08      	cmp	r3, #8
 800330a:	d12e      	bne.n	800336a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fd6f 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11a      	bne.n	8003352 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 020c 	bic.w	r2, r2, #12
 800332a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d112      	bne.n	800336a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003350:	e00b      	b.n	800336a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f984 	bl	8003678 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	220c      	movs	r2, #12
 8003376:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_ADC_IRQHandler+0x1d4>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80b3 	beq.w	80034fe <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80ad 	beq.w	80034fe <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fc10 	bl	8002be6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033c6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fbcb 	bl	8002b68 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a10      	ldr	r2, [pc, #64]	@ (800341c <HAL_ADC_IRQHandler+0x264>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x23a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_ADC_IRQHandler+0x270>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d002      	beq.n	80033ee <HAL_ADC_IRQHandler+0x236>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_IRQHandler+0x23e>
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_ADC_IRQHandler+0x274>)
 80033f0:	e001      	b.n	80033f6 <HAL_ADC_IRQHandler+0x23e>
 80033f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d008      	beq.n	8003410 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d002      	beq.n	8003410 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b07      	cmp	r3, #7
 800340e:	d10f      	bne.n	8003430 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	e01f      	b.n	800345a <HAL_ADC_IRQHandler+0x2a2>
 800341a:	bf00      	nop
 800341c:	50000100 	.word	0x50000100
 8003420:	50000300 	.word	0x50000300
 8003424:	50000700 	.word	0x50000700
 8003428:	50000500 	.word	0x50000500
 800342c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a8b      	ldr	r2, [pc, #556]	@ (8003664 <HAL_ADC_IRQHandler+0x4ac>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_ADC_IRQHandler+0x296>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a8a      	ldr	r2, [pc, #552]	@ (8003668 <HAL_ADC_IRQHandler+0x4b0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d002      	beq.n	800344a <HAL_ADC_IRQHandler+0x292>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e003      	b.n	8003452 <HAL_ADC_IRQHandler+0x29a>
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_ADC_IRQHandler+0x4b4>)
 800344c:	e001      	b.n	8003452 <HAL_ADC_IRQHandler+0x29a>
 800344e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003452:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d047      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_ADC_IRQHandler+0x2c2>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03f      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13a      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d133      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12e      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fcbf 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11a      	bne.n	80034d8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d112      	bne.n	80034f0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034d6:	e00b      	b.n	80034f0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fe33 	bl	800415c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2260      	movs	r2, #96	@ 0x60
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d011      	beq.n	800352c <HAL_ADC_IRQHandler+0x374>
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8b4 	bl	800368c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2280      	movs	r2, #128	@ 0x80
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d012      	beq.n	800355c <HAL_ADC_IRQHandler+0x3a4>
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fe19 	bl	8004184 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <HAL_ADC_IRQHandler+0x3d4>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fe0b 	bl	8004198 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d043      	beq.n	800361e <HAL_ADC_IRQHandler+0x466>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03e      	beq.n	800361e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80035a8:	2301      	movs	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ac:	e021      	b.n	80035f2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_IRQHandler+0x410>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a28      	ldr	r2, [pc, #160]	@ (8003664 <HAL_ADC_IRQHandler+0x4ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_IRQHandler+0x414>
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_ADC_IRQHandler+0x4b8>)
 80035ca:	e000      	b.n	80035ce <HAL_ADC_IRQHandler+0x416>
 80035cc:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <HAL_ADC_IRQHandler+0x4bc>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb7a 	bl	8002cc8 <LL_ADC_GetMultiDMATransfer>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035de:	e008      	b.n	80035f2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035ee:	2301      	movs	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10e      	bne.n	8003616 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003608:	f043 0202 	orr.w	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f845 	bl	80036a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2210      	movs	r2, #16
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <HAL_ADC_IRQHandler+0x4a2>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	2b00      	cmp	r3, #0
 8003630:	d013      	beq.n	800365a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003642:	f043 0208 	orr.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003652:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fd8b 	bl	8004170 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800365a:	bf00      	nop
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	50000100 	.word	0x50000100
 8003668:	50000500 	.word	0x50000500
 800366c:	50000400 	.word	0x50000400
 8003670:	50000300 	.word	0x50000300
 8003674:	50000700 	.word	0x50000700

08003678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0b6      	sub	sp, #216	@ 0xd8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x24>
 80036d2:	2302      	movs	r3, #2
 80036d4:	f000 bc13 	b.w	8003efe <HAL_ADC_ConfigChannel+0x84a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fb85 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 83f3 	bne.w	8003ed8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7ff fa45 	bl	8002b8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fb73 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 800370e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fb7f 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 800371c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003720:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 81d9 	bne.w	8003adc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800372a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 81d4 	bne.w	8003adc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800373c:	d10f      	bne.n	800375e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	4619      	mov	r1, r3
 800374a:	f7ff fa5f 	bl	8002c0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f9f3 	bl	8002b42 <LL_ADC_SetSamplingTimeCommonConfig>
 800375c:	e00e      	b.n	800377c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	461a      	mov	r2, r3
 800376c:	f7ff fa4e 	bl	8002c0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f9e3 	bl	8002b42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d022      	beq.n	80037e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037ae:	f7ff f93d 	bl	8002a2c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6919      	ldr	r1, [r3, #16]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7ff f989 	bl	8002ad6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <HAL_ADC_ConfigChannel+0x126>
 80037d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d8:	e000      	b.n	80037dc <HAL_ADC_ConfigChannel+0x128>
 80037da:	2300      	movs	r3, #0
 80037dc:	461a      	mov	r2, r3
 80037de:	f7ff f995 	bl	8002b0c <LL_ADC_SetOffsetSaturation>
 80037e2:	e17b      	b.n	8003adc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f942 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x15c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f937 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	f003 021f 	and.w	r2, r3, #31
 800380e:	e01e      	b.n	800384e <HAL_ADC_ConfigChannel+0x19a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f92c 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800382e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003832:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800383e:	2320      	movs	r3, #32
 8003840:	e004      	b.n	800384c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x1b2>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	e018      	b.n	8003898 <HAL_ADC_ConfigChannel+0x1e4>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e004      	b.n	8003898 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800388e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003898:	429a      	cmp	r2, r3
 800389a:	d106      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f8fb 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f8df 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x222>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f8d4 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	0e9b      	lsrs	r3, r3, #26
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	e01e      	b.n	8003914 <HAL_ADC_ConfigChannel+0x260>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff f8c9 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e004      	b.n	8003912 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_ADC_ConfigChannel+0x278>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	e018      	b.n	800395e <HAL_ADC_ConfigChannel+0x2aa>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003940:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e004      	b.n	800395e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800395e:	429a      	cmp	r2, r3
 8003960:	d106      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff f898 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2102      	movs	r1, #2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff f87c 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 800397c:	4603      	mov	r3, r0
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_ADC_ConfigChannel+0x2e8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f871 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003992:	4603      	mov	r3, r0
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	f003 021f 	and.w	r2, r3, #31
 800399a:	e01e      	b.n	80039da <HAL_ADC_ConfigChannel+0x326>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2102      	movs	r1, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f866 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e004      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x33e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	e016      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x36c>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	e004      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d106      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f837 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2103      	movs	r1, #3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f81b 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x3aa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2103      	movs	r1, #3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f810 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	0e9b      	lsrs	r3, r3, #26
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	e017      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x3da>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2103      	movs	r1, #3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f805 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a78:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e003      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x3f2>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0e9b      	lsrs	r3, r3, #26
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	e011      	b.n	8003aca <HAL_ADC_ConfigChannel+0x416>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	e003      	b.n	8003aca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d106      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ffe2 	bl	8002aa0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f961 	bl	8002da8 <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f040 813d 	bne.w	8003d68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7ff f8b2 	bl	8002c64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4aa2      	ldr	r2, [pc, #648]	@ (8003d90 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	f040 812e 	bne.w	8003d68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x480>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e019      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x4b4>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e003      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	bf94      	ite	ls
 8003b62:	2301      	movls	r3, #1
 8003b64:	2300      	movhi	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d079      	beq.n	8003c60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x4d4>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	0e9b      	lsrs	r3, r3, #26
 8003b7e:	3301      	adds	r3, #1
 8003b80:	069b      	lsls	r3, r3, #26
 8003b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b86:	e015      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x500>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e003      	b.n	8003bac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	069b      	lsls	r3, r3, #26
 8003bb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x520>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	e017      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x550>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	ea42 0103 	orr.w	r1, r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x576>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e9b      	lsrs	r3, r3, #26
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	051b      	lsls	r3, r3, #20
 8003c28:	e018      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x5a8>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c42:	2320      	movs	r3, #32
 8003c44:	e003      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f003 021f 	and.w	r2, r3, #31
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	e07e      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x5c8>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7a:	e015      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x5f4>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e003      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	069b      	lsls	r3, r3, #26
 8003ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x614>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	e017      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x644>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x670>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b1e      	subs	r3, #30
 8003d1c:	051b      	lsls	r3, r3, #20
 8003d1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	e01b      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x6a8>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	613b      	str	r3, [r7, #16]
  return result;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e003      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	3b1e      	subs	r3, #30
 8003d56:	051b      	lsls	r3, r3, #20
 8003d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fe ff52 	bl	8002c0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80be 	beq.w	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d7e:	d004      	beq.n	8003d8a <HAL_ADC_ConfigChannel+0x6d6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a04      	ldr	r2, [pc, #16]	@ (8003d98 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10a      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x6ec>
 8003d8a:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <HAL_ADC_ConfigChannel+0x6e8>)
 8003d8c:	e009      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x6ee>
 8003d8e:	bf00      	nop
 8003d90:	407f0000 	.word	0x407f0000
 8003d94:	80080000 	.word	0x80080000
 8003d98:	50000100 	.word	0x50000100
 8003d9c:	50000300 	.word	0x50000300
 8003da0:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_ADC_ConfigChannel+0x854>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fe34 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 8003da8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a56      	ldr	r2, [pc, #344]	@ (8003f0c <HAL_ADC_ConfigChannel+0x858>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_ADC_ConfigChannel+0x70c>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a55      	ldr	r2, [pc, #340]	@ (8003f10 <HAL_ADC_ConfigChannel+0x85c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d13a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d134      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd4:	d005      	beq.n	8003de2 <HAL_ADC_ConfigChannel+0x72e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4e      	ldr	r2, [pc, #312]	@ (8003f14 <HAL_ADC_ConfigChannel+0x860>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f040 8085 	bne.w	8003eec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_ConfigChannel+0x742>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a49      	ldr	r2, [pc, #292]	@ (8003f18 <HAL_ADC_ConfigChannel+0x864>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x746>
 8003df6:	4a49      	ldr	r2, [pc, #292]	@ (8003f1c <HAL_ADC_ConfigChannel+0x868>)
 8003df8:	e000      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x748>
 8003dfa:	4a43      	ldr	r2, [pc, #268]	@ (8003f08 <HAL_ADC_ConfigChannel+0x854>)
 8003dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7fe fdef 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e0c:	4b44      	ldr	r3, [pc, #272]	@ (8003f20 <HAL_ADC_ConfigChannel+0x86c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	4a44      	ldr	r2, [pc, #272]	@ (8003f24 <HAL_ADC_ConfigChannel+0x870>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e26:	e002      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f9      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e34:	e05a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f28 <HAL_ADC_ConfigChannel+0x874>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d125      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11f      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a31      	ldr	r2, [pc, #196]	@ (8003f18 <HAL_ADC_ConfigChannel+0x864>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d104      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x7ac>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a34      	ldr	r2, [pc, #208]	@ (8003f2c <HAL_ADC_ConfigChannel+0x878>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d047      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e68:	d004      	beq.n	8003e74 <HAL_ADC_ConfigChannel+0x7c0>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f18 <HAL_ADC_ConfigChannel+0x864>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x7c4>
 8003e74:	4a29      	ldr	r2, [pc, #164]	@ (8003f1c <HAL_ADC_ConfigChannel+0x868>)
 8003e76:	e000      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x7c6>
 8003e78:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <HAL_ADC_ConfigChannel+0x854>)
 8003e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe fdb0 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e8a:	e031      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <HAL_ADC_ConfigChannel+0x87c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12d      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d127      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_ADC_ConfigChannel+0x864>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x80c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <HAL_ADC_ConfigChannel+0x864>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x810>
 8003ec0:	4a16      	ldr	r2, [pc, #88]	@ (8003f1c <HAL_ADC_ConfigChannel+0x868>)
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x812>
 8003ec4:	4a10      	ldr	r2, [pc, #64]	@ (8003f08 <HAL_ADC_ConfigChannel+0x854>)
 8003ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fd8a 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 8003ed6:	e00c      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003eea:	e002      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eec:	bf00      	nop
 8003eee:	e000      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003efa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	37d8      	adds	r7, #216	@ 0xd8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	50000700 	.word	0x50000700
 8003f0c:	c3210000 	.word	0xc3210000
 8003f10:	90c00010 	.word	0x90c00010
 8003f14:	50000600 	.word	0x50000600
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	50000300 	.word	0x50000300
 8003f20:	20000000 	.word	0x20000000
 8003f24:	053e2d63 	.word	0x053e2d63
 8003f28:	c7520000 	.word	0xc7520000
 8003f2c:	50000500 	.word	0x50000500
 8003f30:	cb840000 	.word	0xcb840000

08003f34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe ff44 	bl	8002dce <LL_ADC_IsDisableOngoing>
 8003f46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe ff2b 	bl	8002da8 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d047      	beq.n	8003fe8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d144      	bne.n	8003fe8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030d 	and.w	r3, r3, #13
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10c      	bne.n	8003f86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe ff05 	bl	8002d80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f7e:	f7fe fcf3 	bl	8002968 <HAL_GetTick>
 8003f82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f84:	e029      	b.n	8003fda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e023      	b.n	8003fea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fa2:	f7fe fce1 	bl	8002968 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d914      	bls.n	8003fda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e007      	b.n	8003fea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1dc      	bne.n	8003fa2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <LL_ADC_IsEnabled>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <LL_ADC_IsEnabled+0x18>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <LL_ADC_IsEnabled+0x1a>
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_ADC_StartCalibration>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800402a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004034:	4313      	orrs	r3, r2
 8004036:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_IsCalibrationOnGoing>:
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405e:	d101      	bne.n	8004064 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_ADC_REG_IsConversionOngoing>:
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d101      	bne.n	800408a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e04d      	b.n	8004150 <HAL_ADCEx_Calibration_Start+0xb8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff39 	bl	8003f34 <ADC_Disable>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d136      	bne.n	800413a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040d4:	f023 0302 	bic.w	r3, r3, #2
 80040d8:	f043 0202 	orr.w	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff96 	bl	8004018 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040ec:	e014      	b.n	8004118 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <HAL_ADCEx_Calibration_Start+0xc0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d90d      	bls.n	8004118 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f023 0312 	bic.w	r3, r3, #18
 8004104:	f043 0210 	orr.w	r2, r3, #16
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e01b      	b.n	8004150 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff94 	bl	800404a <LL_ADC_IsCalibrationOnGoing>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e2      	bne.n	80040ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412c:	f023 0303 	bic.w	r3, r3, #3
 8004130:	f043 0201 	orr.w	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004138:	e005      	b.n	8004146 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	0004de01 	.word	0x0004de01

0800415c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b0a1      	sub	sp, #132	@ 0x84
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0e7      	b.n	80043ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041e6:	2300      	movs	r3, #0
 80041e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041ea:	2300      	movs	r3, #0
 80041ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f6:	d102      	bne.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041f8:	4b6f      	ldr	r3, [pc, #444]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	e009      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6e      	ldr	r2, [pc, #440]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004208:	4b6d      	ldr	r3, [pc, #436]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e001      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0be      	b.n	80043ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff1d 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 8004238:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff17 	bl	8004072 <LL_ADC_REG_IsConversionOngoing>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 80a0 	bne.w	800438c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800424c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 809c 	bne.w	800438c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800425c:	d004      	beq.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a55      	ldr	r2, [pc, #340]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004268:	4b56      	ldr	r3, [pc, #344]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800426a:	e000      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800426c:	4b56      	ldr	r3, [pc, #344]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d04b      	beq.n	8004310 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800428a:	035b      	lsls	r3, r3, #13
 800428c:	430b      	orrs	r3, r1
 800428e:	431a      	orrs	r2, r3
 8004290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004292:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800429c:	d004      	beq.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a45      	ldr	r2, [pc, #276]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10f      	bne.n	80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042ac:	f7ff fea1 	bl	8003ff2 <LL_ADC_IsEnabled>
 80042b0:	4604      	mov	r4, r0
 80042b2:	4841      	ldr	r0, [pc, #260]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042b4:	f7ff fe9d 	bl	8003ff2 <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4323      	orrs	r3, r4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e012      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80042c8:	483c      	ldr	r0, [pc, #240]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042ca:	f7ff fe92 	bl	8003ff2 <LL_ADC_IsEnabled>
 80042ce:	4604      	mov	r4, r0
 80042d0:	483b      	ldr	r0, [pc, #236]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042d2:	f7ff fe8e 	bl	8003ff2 <LL_ADC_IsEnabled>
 80042d6:	4603      	mov	r3, r0
 80042d8:	431c      	orrs	r4, r3
 80042da:	483c      	ldr	r0, [pc, #240]	@ (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042dc:	f7ff fe89 	bl	8003ff2 <LL_ADC_IsEnabled>
 80042e0:	4603      	mov	r3, r0
 80042e2:	4323      	orrs	r3, r4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d056      	beq.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042fa:	f023 030f 	bic.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	6892      	ldr	r2, [r2, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	431a      	orrs	r2, r3
 800430a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800430e:	e047      	b.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004310:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004324:	d004      	beq.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a23      	ldr	r2, [pc, #140]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10f      	bne.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004330:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004334:	f7ff fe5d 	bl	8003ff2 <LL_ADC_IsEnabled>
 8004338:	4604      	mov	r4, r0
 800433a:	481f      	ldr	r0, [pc, #124]	@ (80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800433c:	f7ff fe59 	bl	8003ff2 <LL_ADC_IsEnabled>
 8004340:	4603      	mov	r3, r0
 8004342:	4323      	orrs	r3, r4
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e012      	b.n	8004376 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004350:	481a      	ldr	r0, [pc, #104]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004352:	f7ff fe4e 	bl	8003ff2 <LL_ADC_IsEnabled>
 8004356:	4604      	mov	r4, r0
 8004358:	4819      	ldr	r0, [pc, #100]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800435a:	f7ff fe4a 	bl	8003ff2 <LL_ADC_IsEnabled>
 800435e:	4603      	mov	r3, r0
 8004360:	431c      	orrs	r4, r3
 8004362:	481a      	ldr	r0, [pc, #104]	@ (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004364:	f7ff fe45 	bl	8003ff2 <LL_ADC_IsEnabled>
 8004368:	4603      	mov	r3, r0
 800436a:	4323      	orrs	r3, r4
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800437a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004382:	f023 030f 	bic.w	r3, r3, #15
 8004386:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004388:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800438a:	e009      	b.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800439e:	e000      	b.n	80043a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3784      	adds	r7, #132	@ 0x84
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	50000100 	.word	0x50000100
 80043bc:	50000400 	.word	0x50000400
 80043c0:	50000500 	.word	0x50000500
 80043c4:	50000300 	.word	0x50000300
 80043c8:	50000700 	.word	0x50000700
 80043cc:	50000600 	.word	0x50000600

080043d0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4904      	ldr	r1, [pc, #16]	@ (80043f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40010400 	.word	0x40010400

080043f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <LL_EXTI_EnableIT_32_63+0x20>)
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	4904      	ldr	r1, [pc, #16]	@ (8004414 <LL_EXTI_EnableIT_32_63+0x20>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	620b      	str	r3, [r1, #32]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40010400 	.word	0x40010400

08004418 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <LL_EXTI_DisableIT_0_31+0x24>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	43db      	mvns	r3, r3
 8004428:	4904      	ldr	r1, [pc, #16]	@ (800443c <LL_EXTI_DisableIT_0_31+0x24>)
 800442a:	4013      	ands	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010400 	.word	0x40010400

08004440 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004448:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <LL_EXTI_DisableIT_32_63+0x24>)
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	43db      	mvns	r3, r3
 8004450:	4904      	ldr	r1, [pc, #16]	@ (8004464 <LL_EXTI_DisableIT_32_63+0x24>)
 8004452:	4013      	ands	r3, r2
 8004454:	620b      	str	r3, [r1, #32]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010400 	.word	0x40010400

08004468 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4904      	ldr	r1, [pc, #16]	@ (8004488 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]

}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40010400 	.word	0x40010400

0800448c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <LL_EXTI_EnableEvent_32_63+0x20>)
 8004496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004498:	4904      	ldr	r1, [pc, #16]	@ (80044ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4313      	orrs	r3, r2
 800449e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40010400 	.word	0x40010400

080044b0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044b8:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	43db      	mvns	r3, r3
 80044c0:	4904      	ldr	r1, [pc, #16]	@ (80044d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010400 	.word	0x40010400

080044d8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80044e0:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80044e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	4904      	ldr	r1, [pc, #16]	@ (80044fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010400 	.word	0x40010400

08004500 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4904      	ldr	r1, [pc, #16]	@ (8004520 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]

}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40010400 	.word	0x40010400

08004524 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800452e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004530:	4904      	ldr	r1, [pc, #16]	@ (8004544 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4313      	orrs	r3, r2
 8004536:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40010400 	.word	0x40010400

08004548 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004550:	4b06      	ldr	r3, [pc, #24]	@ (800456c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	43db      	mvns	r3, r3
 8004558:	4904      	ldr	r1, [pc, #16]	@ (800456c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800455a:	4013      	ands	r3, r2
 800455c:	608b      	str	r3, [r1, #8]

}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010400 	.word	0x40010400

08004570 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004578:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800457a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	43db      	mvns	r3, r3
 8004580:	4904      	ldr	r1, [pc, #16]	@ (8004594 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004582:	4013      	ands	r3, r2
 8004584:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010400 	.word	0x40010400

08004598 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	4904      	ldr	r1, [pc, #16]	@ (80045b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40010400 	.word	0x40010400

080045bc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	4904      	ldr	r1, [pc, #16]	@ (80045dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4904      	ldr	r1, [pc, #16]	@ (8004604 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010400 	.word	0x40010400

08004608 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	43db      	mvns	r3, r3
 8004618:	4904      	ldr	r1, [pc, #16]	@ (800462c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800461a:	4013      	ands	r3, r2
 800461c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010400 	.word	0x40010400

08004630 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6153      	str	r3, [r2, #20]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010400 	.word	0x40010400

08004650 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010400 	.word	0x40010400

08004670 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e181      	b.n	8004990 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800469a:	d102      	bne.n	80046a2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e176      	b.n	8004990 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7f5b      	ldrb	r3, [r3, #29]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fd fc27 	bl	8001f0c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b90      	ldr	r3, [pc, #576]	@ (8004930 <HAL_COMP_Init+0x2c0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6979      	ldr	r1, [r7, #20]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_COMP_Init+0xc8>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004710:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_COMP_Init+0x2c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	4a88      	ldr	r2, [pc, #544]	@ (8004938 <HAL_COMP_Init+0x2c8>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800472a:	e002      	b.n	8004732 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3b01      	subs	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f9      	bne.n	800472c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7f      	ldr	r2, [pc, #508]	@ (800493c <HAL_COMP_Init+0x2cc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d028      	beq.n	8004794 <HAL_COMP_Init+0x124>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7e      	ldr	r2, [pc, #504]	@ (8004940 <HAL_COMP_Init+0x2d0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d020      	beq.n	800478e <HAL_COMP_Init+0x11e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7c      	ldr	r2, [pc, #496]	@ (8004944 <HAL_COMP_Init+0x2d4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_COMP_Init+0x118>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7b      	ldr	r2, [pc, #492]	@ (8004948 <HAL_COMP_Init+0x2d8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d010      	beq.n	8004782 <HAL_COMP_Init+0x112>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a79      	ldr	r2, [pc, #484]	@ (800494c <HAL_COMP_Init+0x2dc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d008      	beq.n	800477c <HAL_COMP_Init+0x10c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a78      	ldr	r2, [pc, #480]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_COMP_Init+0x108>
 8004774:	2301      	movs	r3, #1
 8004776:	e00f      	b.n	8004798 <HAL_COMP_Init+0x128>
 8004778:	2302      	movs	r3, #2
 800477a:	e00d      	b.n	8004798 <HAL_COMP_Init+0x128>
 800477c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004780:	e00a      	b.n	8004798 <HAL_COMP_Init+0x128>
 8004782:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004786:	e007      	b.n	8004798 <HAL_COMP_Init+0x128>
 8004788:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800478c:	e004      	b.n	8004798 <HAL_COMP_Init+0x128>
 800478e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004792:	e001      	b.n	8004798 <HAL_COMP_Init+0x128>
 8004794:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004798:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80b6 	beq.w	8004914 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d011      	beq.n	80047d8 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a65      	ldr	r2, [pc, #404]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_COMP_Init+0x158>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a64      	ldr	r2, [pc, #400]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80047c8:	6938      	ldr	r0, [r7, #16]
 80047ca:	f7ff feab 	bl	8004524 <LL_EXTI_EnableRisingTrig_32_63>
 80047ce:	e014      	b.n	80047fa <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80047d0:	6938      	ldr	r0, [r7, #16]
 80047d2:	f7ff fe95 	bl	8004500 <LL_EXTI_EnableRisingTrig_0_31>
 80047d6:	e010      	b.n	80047fa <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_COMP_Init+0x17c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	f7ff febf 	bl	8004570 <LL_EXTI_DisableRisingTrig_32_63>
 80047f2:	e002      	b.n	80047fa <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80047f4:	6938      	ldr	r0, [r7, #16]
 80047f6:	f7ff fea7 	bl	8004548 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a51      	ldr	r2, [pc, #324]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_COMP_Init+0x1aa>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a4f      	ldr	r2, [pc, #316]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d103      	bne.n	8004822 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800481a:	6938      	ldr	r0, [r7, #16]
 800481c:	f7ff fece 	bl	80045bc <LL_EXTI_EnableFallingTrig_32_63>
 8004820:	e014      	b.n	800484c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004822:	6938      	ldr	r0, [r7, #16]
 8004824:	f7ff feb8 	bl	8004598 <LL_EXTI_EnableFallingTrig_0_31>
 8004828:	e010      	b.n	800484c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a48      	ldr	r2, [pc, #288]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_COMP_Init+0x1ce>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a46      	ldr	r2, [pc, #280]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d103      	bne.n	8004846 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800483e:	6938      	ldr	r0, [r7, #16]
 8004840:	f7ff fee2 	bl	8004608 <LL_EXTI_DisableFallingTrig_32_63>
 8004844:	e002      	b.n	800484c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004846:	6938      	ldr	r0, [r7, #16]
 8004848:	f7ff feca 	bl	80045e0 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3f      	ldr	r2, [pc, #252]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_COMP_Init+0x1f0>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3e      	ldr	r2, [pc, #248]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004860:	6938      	ldr	r0, [r7, #16]
 8004862:	f7ff fef5 	bl	8004650 <LL_EXTI_ClearFlag_32_63>
 8004866:	e002      	b.n	800486e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f7ff fee1 	bl	8004630 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a34      	ldr	r2, [pc, #208]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_COMP_Init+0x21e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a32      	ldr	r2, [pc, #200]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d103      	bne.n	8004896 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800488e:	6938      	ldr	r0, [r7, #16]
 8004890:	f7ff fdfc 	bl	800448c <LL_EXTI_EnableEvent_32_63>
 8004894:	e014      	b.n	80048c0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004896:	6938      	ldr	r0, [r7, #16]
 8004898:	f7ff fde6 	bl	8004468 <LL_EXTI_EnableEvent_0_31>
 800489c:	e010      	b.n	80048c0 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_COMP_Init+0x242>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d103      	bne.n	80048ba <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80048b2:	6938      	ldr	r0, [r7, #16]
 80048b4:	f7ff fe10 	bl	80044d8 <LL_EXTI_DisableEvent_32_63>
 80048b8:	e002      	b.n	80048c0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80048ba:	6938      	ldr	r0, [r7, #16]
 80048bc:	f7ff fdf8 	bl	80044b0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d011      	beq.n	80048f0 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_COMP_Init+0x270>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1e      	ldr	r2, [pc, #120]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80048e0:	6938      	ldr	r0, [r7, #16]
 80048e2:	f7ff fd87 	bl	80043f4 <LL_EXTI_EnableIT_32_63>
 80048e6:	e04b      	b.n	8004980 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80048e8:	6938      	ldr	r0, [r7, #16]
 80048ea:	f7ff fd71 	bl	80043d0 <LL_EXTI_EnableIT_0_31>
 80048ee:	e047      	b.n	8004980 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_COMP_Init+0x294>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d103      	bne.n	800490c <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004904:	6938      	ldr	r0, [r7, #16]
 8004906:	f7ff fd9b 	bl	8004440 <LL_EXTI_DisableIT_32_63>
 800490a:	e039      	b.n	8004980 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800490c:	6938      	ldr	r0, [r7, #16]
 800490e:	f7ff fd83 	bl	8004418 <LL_EXTI_DisableIT_0_31>
 8004912:	e035      	b.n	8004980 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <HAL_COMP_Init+0x2e0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_COMP_Init+0x2b8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0c      	ldr	r2, [pc, #48]	@ (8004954 <HAL_COMP_Init+0x2e4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d117      	bne.n	8004958 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004928:	6938      	ldr	r0, [r7, #16]
 800492a:	f7ff fdd5 	bl	80044d8 <LL_EXTI_DisableEvent_32_63>
 800492e:	e016      	b.n	800495e <HAL_COMP_Init+0x2ee>
 8004930:	ff007e0f 	.word	0xff007e0f
 8004934:	20000000 	.word	0x20000000
 8004938:	053e2d63 	.word	0x053e2d63
 800493c:	40010200 	.word	0x40010200
 8004940:	40010204 	.word	0x40010204
 8004944:	40010208 	.word	0x40010208
 8004948:	4001020c 	.word	0x4001020c
 800494c:	40010210 	.word	0x40010210
 8004950:	40010214 	.word	0x40010214
 8004954:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004958:	6938      	ldr	r0, [r7, #16]
 800495a:	f7ff fda9 	bl	80044b0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a0e      	ldr	r2, [pc, #56]	@ (800499c <HAL_COMP_Init+0x32c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_COMP_Init+0x302>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0c      	ldr	r2, [pc, #48]	@ (80049a0 <HAL_COMP_Init+0x330>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d103      	bne.n	800497a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004972:	6938      	ldr	r0, [r7, #16]
 8004974:	f7ff fd64 	bl	8004440 <LL_EXTI_DisableIT_32_63>
 8004978:	e002      	b.n	8004980 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800497a:	6938      	ldr	r0, [r7, #16]
 800497c:	f7ff fd4c 	bl	8004418 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7f5b      	ldrb	r3, [r3, #29]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004990:	7ffb      	ldrb	r3, [r7, #31]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40010214 	.word	0x40010214
 80049a0:	40010218 	.word	0x40010218

080049a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049c0:	4013      	ands	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d6:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	60d3      	str	r3, [r2, #12]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f0:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <__NVIC_GetPriorityGrouping+0x18>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 0307 	and.w	r3, r3, #7
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db0b      	blt.n	8004a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	f003 021f 	and.w	r2, r3, #31
 8004a20:	4907      	ldr	r1, [pc, #28]	@ (8004a40 <__NVIC_EnableIRQ+0x38>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e100 	.word	0xe000e100

08004a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db0a      	blt.n	8004a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	490c      	ldr	r1, [pc, #48]	@ (8004a90 <__NVIC_SetPriority+0x4c>)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	0112      	lsls	r2, r2, #4
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	440b      	add	r3, r1
 8004a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a6c:	e00a      	b.n	8004a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4908      	ldr	r1, [pc, #32]	@ (8004a94 <__NVIC_SetPriority+0x50>)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	440b      	add	r3, r1
 8004a82:	761a      	strb	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000e100 	.word	0xe000e100
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	@ 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	bf28      	it	cs
 8004ab6:	2304      	movcs	r3, #4
 8004ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d902      	bls.n	8004ac8 <NVIC_EncodePriority+0x30>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3b03      	subs	r3, #3
 8004ac6:	e000      	b.n	8004aca <NVIC_EncodePriority+0x32>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	401a      	ands	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	4313      	orrs	r3, r2
         );
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b10:	d301      	bcc.n	8004b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00f      	b.n	8004b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b16:	4a0a      	ldr	r2, [pc, #40]	@ (8004b40 <SysTick_Config+0x40>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1e:	210f      	movs	r1, #15
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f7ff ff8e 	bl	8004a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <SysTick_Config+0x40>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2e:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <SysTick_Config+0x40>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	e000e010 	.word	0xe000e010

08004b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff29 	bl	80049a4 <__NVIC_SetPriorityGrouping>
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b086      	sub	sp, #24
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b68:	f7ff ff40 	bl	80049ec <__NVIC_GetPriorityGrouping>
 8004b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f7ff ff90 	bl	8004a98 <NVIC_EncodePriority>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff5f 	bl	8004a44 <__NVIC_SetPriority>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff33 	bl	8004a08 <__NVIC_EnableIRQ>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff ffa4 	bl	8004b00 <SysTick_Config>
 8004bb8:	4603      	mov	r3, r0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e014      	b.n	8004bfe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	791b      	ldrb	r3, [r3, #4]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fd fa27 	bl	8002038 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0b2      	b.n	8004d86 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	795b      	ldrb	r3, [r3, #5]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_DAC_Start_DMA+0x24>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0ac      	b.n	8004d86 <HAL_DAC_Start_DMA+0x17e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2202      	movs	r2, #2
 8004c36:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d129      	bne.n	8004c92 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4a53      	ldr	r2, [pc, #332]	@ (8004d90 <HAL_DAC_Start_DMA+0x188>)
 8004c44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4a52      	ldr	r2, [pc, #328]	@ (8004d94 <HAL_DAC_Start_DMA+0x18c>)
 8004c4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4a51      	ldr	r2, [pc, #324]	@ (8004d98 <HAL_DAC_Start_DMA+0x190>)
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c64:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_DAC_Start_DMA+0x6c>
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d005      	beq.n	8004c7e <HAL_DAC_Start_DMA+0x76>
 8004c72:	e009      	b.n	8004c88 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	61bb      	str	r3, [r7, #24]
        break;
 8004c7c:	e033      	b.n	8004ce6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	61bb      	str	r3, [r7, #24]
        break;
 8004c86:	e02e      	b.n	8004ce6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3310      	adds	r3, #16
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e029      	b.n	8004ce6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a41      	ldr	r2, [pc, #260]	@ (8004d9c <HAL_DAC_Start_DMA+0x194>)
 8004c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4a40      	ldr	r2, [pc, #256]	@ (8004da0 <HAL_DAC_Start_DMA+0x198>)
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8004da4 <HAL_DAC_Start_DMA+0x19c>)
 8004ca8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004cb8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_DAC_Start_DMA+0xc0>
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d005      	beq.n	8004cd2 <HAL_DAC_Start_DMA+0xca>
 8004cc6:	e009      	b.n	8004cdc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	61bb      	str	r3, [r7, #24]
        break;
 8004cd0:	e009      	b.n	8004ce6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3318      	adds	r3, #24
 8004cd8:	61bb      	str	r3, [r7, #24]
        break;
 8004cda:	e004      	b.n	8004ce6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	331c      	adds	r3, #28
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d111      	bne.n	8004d10 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6898      	ldr	r0, [r3, #8]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	f000 fbc7 	bl	8005498 <HAL_DMA_Start_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e010      	b.n	8004d32 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004d1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68d8      	ldr	r0, [r3, #12]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	f000 fbb5 	bl	8005498 <HAL_DMA_Start_IT>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d11c      	bne.n	8004d78 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d56:	4b14      	ldr	r3, [pc, #80]	@ (8004da8 <HAL_DAC_Start_DMA+0x1a0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	4a13      	ldr	r2, [pc, #76]	@ (8004dac <HAL_DAC_Start_DMA+0x1a4>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	3301      	adds	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d68:	e002      	b.n	8004d70 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f9      	bne.n	8004d6a <HAL_DAC_Start_DMA+0x162>
 8004d76:	e005      	b.n	8004d84 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	08005221 	.word	0x08005221
 8004d94:	08005243 	.word	0x08005243
 8004d98:	0800525f 	.word	0x0800525f
 8004d9c:	080052dd 	.word	0x080052dd
 8004da0:	080052ff 	.word	0x080052ff
 8004da4:	0800531b 	.word	0x0800531b
 8004da8:	20000000 	.word	0x20000000
 8004dac:	053e2d63 	.word	0x053e2d63

08004db0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d018      	beq.n	8004e0e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2204      	movs	r2, #4
 8004de0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004df6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e06:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f845 	bl	8004e98 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01d      	beq.n	8004e54 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f043 0202 	orr.w	r2, r3, #2
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa3a 	bl	80052c8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	@ 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_DAC_ConfigChannel+0x1c>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e1a1      	b.n	8005210 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	795b      	ldrb	r3, [r3, #5]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_DAC_ConfigChannel+0x32>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e198      	b.n	8005210 <HAL_DAC_ConfigChannel+0x364>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d17a      	bne.n	8004fe8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ef2:	f7fd fd39 	bl	8002968 <HAL_GetTick>
 8004ef6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d13d      	bne.n	8004f7a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004efe:	e018      	b.n	8004f32 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f00:	f7fd fd32 	bl	8002968 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d911      	bls.n	8004f32 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f043 0208 	orr.w	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e16e      	b.n	8005210 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1df      	bne.n	8004f00 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f4a:	e020      	b.n	8004f8e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f4c:	f7fd fd0c 	bl	8002968 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d90f      	bls.n	8004f7a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	da0a      	bge.n	8004f7a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f043 0208 	orr.w	r2, r3, #8
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2203      	movs	r2, #3
 8004f74:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e14a      	b.n	8005210 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dbe3      	blt.n	8004f4c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	ea02 0103 	and.w	r1, r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	21ff      	movs	r1, #255	@ 0xff
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	ea02 0103 	and.w	r1, r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11d      	bne.n	800502c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	221f      	movs	r2, #31
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	4013      	ands	r3, r2
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005020:	4313      	orrs	r3, r2
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2207      	movs	r2, #7
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	4013      	ands	r3, r2
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005050:	2300      	movs	r3, #0
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	e00f      	b.n	8005076 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d102      	bne.n	8005064 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800505e:	2301      	movs	r3, #1
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	e008      	b.n	8005076 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800506c:	2301      	movs	r3, #1
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	e001      	b.n	8005076 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	4013      	ands	r3, r2
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	791b      	ldrb	r3, [r3, #4]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_DAC_ConfigChannel+0x1fe>
 80050a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050a8:	e000      	b.n	80050ac <HAL_DAC_ConfigChannel+0x200>
 80050aa:	2300      	movs	r3, #0
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	4013      	ands	r3, r2
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	795b      	ldrb	r3, [r3, #5]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d102      	bne.n	80050d6 <HAL_DAC_ConfigChannel+0x22a>
 80050d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050d4:	e000      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x22c>
 80050d6:	2300      	movs	r3, #0
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d114      	bne.n	8005118 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80050ee:	f004 f93d 	bl	800936c <HAL_RCC_GetHCLKFreq>
 80050f2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4a48      	ldr	r2, [pc, #288]	@ (8005218 <HAL_DAC_ConfigChannel+0x36c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d904      	bls.n	8005106 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
 8005104:	e00f      	b.n	8005126 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4a44      	ldr	r2, [pc, #272]	@ (800521c <HAL_DAC_ConfigChannel+0x370>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d90a      	bls.n	8005124 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
 8005116:	e006      	b.n	8005126 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511e:	4313      	orrs	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
 8005122:	e000      	b.n	8005126 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005124:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005134:	4313      	orrs	r3, r2
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43da      	mvns	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	400a      	ands	r2, r1
 800515c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005178:	4013      	ands	r3, r2
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	4313      	orrs	r3, r2
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	22c0      	movs	r2, #192	@ 0xc0
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	400a      	ands	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	ea02 0103 	and.w	r1, r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	409a      	lsls	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800520e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3728      	adds	r7, #40	@ 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	09896800 	.word	0x09896800
 800521c:	04c4b400 	.word	0x04c4b400

08005220 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fe14 	bl	8004e5c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	711a      	strb	r2, [r3, #4]
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fe0d 	bl	8004e70 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f043 0204 	orr.w	r2, r3, #4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fe03 	bl	8004e84 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	711a      	strb	r2, [r3, #4]
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ffce 	bl	800528c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	711a      	strb	r2, [r3, #4]
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff ffc7 	bl	80052a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f043 0204 	orr.w	r2, r3, #4
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ffbd 	bl	80052b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	711a      	strb	r2, [r3, #4]
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e08d      	b.n	8005476 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	4b47      	ldr	r3, [pc, #284]	@ (8005480 <HAL_DMA_Init+0x138>)
 8005362:	429a      	cmp	r2, r3
 8005364:	d80f      	bhi.n	8005386 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	4b45      	ldr	r3, [pc, #276]	@ (8005484 <HAL_DMA_Init+0x13c>)
 800536e:	4413      	add	r3, r2
 8005370:	4a45      	ldr	r2, [pc, #276]	@ (8005488 <HAL_DMA_Init+0x140>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	009a      	lsls	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a42      	ldr	r2, [pc, #264]	@ (800548c <HAL_DMA_Init+0x144>)
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40
 8005384:	e00e      	b.n	80053a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	4b40      	ldr	r3, [pc, #256]	@ (8005490 <HAL_DMA_Init+0x148>)
 800538e:	4413      	add	r3, r2
 8005390:	4a3d      	ldr	r2, [pc, #244]	@ (8005488 <HAL_DMA_Init+0x140>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	009a      	lsls	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005494 <HAL_DMA_Init+0x14c>)
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa76 	bl	80058e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005404:	d102      	bne.n	800540c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005420:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_DMA_Init+0x104>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b04      	cmp	r3, #4
 8005430:	d80c      	bhi.n	800544c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa96 	bl	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e008      	b.n	800545e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40020407 	.word	0x40020407
 8005484:	bffdfff8 	.word	0xbffdfff8
 8005488:	cccccccd 	.word	0xcccccccd
 800548c:	40020000 	.word	0x40020000
 8005490:	bffdfbf8 	.word	0xbffdfbf8
 8005494:	40020400 	.word	0x40020400

08005498 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_DMA_Start_IT+0x20>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e066      	b.n	8005586 <HAL_DMA_Start_IT+0xee>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d155      	bne.n	8005578 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f9bb 	bl	800586c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 020e 	orr.w	r2, r2, #14
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e00f      	b.n	8005530 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0204 	bic.w	r2, r2, #4
 800551e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 020a 	orr.w	r2, r2, #10
 800552e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800554c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005564:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e005      	b.n	8005584 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005580:	2302      	movs	r3, #2
 8005582:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d005      	beq.n	80055b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e037      	b.n	8005622 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 020e 	bic.w	r2, r2, #14
 80055c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f003 021f 	and.w	r2, r3, #31
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00c      	beq.n	8005622 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005612:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005616:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005620:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d00d      	beq.n	8005674 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2204      	movs	r2, #4
 800565c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	e047      	b.n	8005704 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 020e 	bic.w	r2, r2, #14
 8005682:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	2101      	movs	r1, #1
 80056b2:	fa01 f202 	lsl.w	r2, r1, r2
 80056b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
    }
  }
  return status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2204      	movs	r2, #4
 8005730:	409a      	lsls	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d026      	beq.n	8005788 <HAL_DMA_IRQHandler+0x7a>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d021      	beq.n	8005788 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0204 	bic.w	r2, r2, #4
 8005760:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f003 021f 	and.w	r2, r3, #31
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2104      	movs	r1, #4
 8005770:	fa01 f202 	lsl.w	r2, r1, r2
 8005774:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	2b00      	cmp	r3, #0
 800577c:	d071      	beq.n	8005862 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005786:	e06c      	b.n	8005862 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2202      	movs	r2, #2
 8005792:	409a      	lsls	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02e      	beq.n	80057fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d029      	beq.n	80057fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 020a 	bic.w	r2, r2, #10
 80057c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d0:	f003 021f 	and.w	r2, r3, #31
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	2102      	movs	r1, #2
 80057da:	fa01 f202 	lsl.w	r2, r1, r2
 80057de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d038      	beq.n	8005862 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057f8:	e033      	b.n	8005862 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2208      	movs	r2, #8
 8005804:	409a      	lsls	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d02a      	beq.n	8005864 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d025      	beq.n	8005864 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 020e 	bic.w	r2, r2, #14
 8005826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005834:	2101      	movs	r1, #1
 8005836:	fa01 f202 	lsl.w	r2, r1, r2
 800583a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005862:	bf00      	nop
 8005864:	bf00      	nop
}
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005882:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f003 021f 	and.w	r2, r3, #31
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2101      	movs	r1, #1
 80058a4:	fa01 f202 	lsl.w	r2, r1, r2
 80058a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d108      	bne.n	80058cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ca:	e007      	b.n	80058dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d802      	bhi.n	8005902 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058fc:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e001      	b.n	8005906 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005904:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	3b08      	subs	r3, #8
 8005912:	4a12      	ldr	r2, [pc, #72]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	089b      	lsrs	r3, r3, #2
 8005922:	009a      	lsls	r2, r3, #2
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a0b      	ldr	r2, [pc, #44]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005932:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2201      	movs	r2, #1
 800593c:	409a      	lsls	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40020407 	.word	0x40020407
 8005954:	40020800 	.word	0x40020800
 8005958:	40020820 	.word	0x40020820
 800595c:	cccccccd 	.word	0xcccccccd
 8005960:	40020880 	.word	0x40020880

08005964 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	461a      	mov	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a08      	ldr	r2, [pc, #32]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005986:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	1000823f 	.word	0x1000823f
 80059a8:	40020940 	.word	0x40020940

080059ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059ba:	e15a      	b.n	8005c72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	2101      	movs	r1, #1
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 814c 	beq.w	8005c6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d005      	beq.n	80059ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d130      	bne.n	8005a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	2203      	movs	r2, #3
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4013      	ands	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a22:	2201      	movs	r2, #1
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 0201 	and.w	r2, r3, #1
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d017      	beq.n	8005a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	2203      	movs	r2, #3
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d123      	bne.n	8005ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	08da      	lsrs	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	220f      	movs	r2, #15
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	08da      	lsrs	r2, r3, #3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3208      	adds	r2, #8
 8005ad8:	6939      	ldr	r1, [r7, #16]
 8005ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2203      	movs	r2, #3
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 0203 	and.w	r2, r3, #3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80a6 	beq.w	8005c6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b20:	4b5b      	ldr	r3, [pc, #364]	@ (8005c90 <HAL_GPIO_Init+0x2e4>)
 8005b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b24:	4a5a      	ldr	r2, [pc, #360]	@ (8005c90 <HAL_GPIO_Init+0x2e4>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b2c:	4b58      	ldr	r3, [pc, #352]	@ (8005c90 <HAL_GPIO_Init+0x2e4>)
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b38:	4a56      	ldr	r2, [pc, #344]	@ (8005c94 <HAL_GPIO_Init+0x2e8>)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	3302      	adds	r3, #2
 8005b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	220f      	movs	r2, #15
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b62:	d01f      	beq.n	8005ba4 <HAL_GPIO_Init+0x1f8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a4c      	ldr	r2, [pc, #304]	@ (8005c98 <HAL_GPIO_Init+0x2ec>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d019      	beq.n	8005ba0 <HAL_GPIO_Init+0x1f4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005c9c <HAL_GPIO_Init+0x2f0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_GPIO_Init+0x1f0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca0 <HAL_GPIO_Init+0x2f4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00d      	beq.n	8005b98 <HAL_GPIO_Init+0x1ec>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a49      	ldr	r2, [pc, #292]	@ (8005ca4 <HAL_GPIO_Init+0x2f8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <HAL_GPIO_Init+0x1e8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a48      	ldr	r2, [pc, #288]	@ (8005ca8 <HAL_GPIO_Init+0x2fc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d101      	bne.n	8005b90 <HAL_GPIO_Init+0x1e4>
 8005b8c:	2305      	movs	r3, #5
 8005b8e:	e00a      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005b90:	2306      	movs	r3, #6
 8005b92:	e008      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005b94:	2304      	movs	r3, #4
 8005b96:	e006      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e004      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e002      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_GPIO_Init+0x1fa>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	f002 0203 	and.w	r2, r2, #3
 8005bac:	0092      	lsls	r2, r2, #2
 8005bae:	4093      	lsls	r3, r2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bb6:	4937      	ldr	r1, [pc, #220]	@ (8005c94 <HAL_GPIO_Init+0x2e8>)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	089b      	lsrs	r3, r3, #2
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bc4:	4b39      	ldr	r3, [pc, #228]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005be8:	4a30      	ldr	r2, [pc, #192]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bee:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c12:	4a26      	ldr	r2, [pc, #152]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c18:	4b24      	ldr	r3, [pc, #144]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c42:	4b1a      	ldr	r3, [pc, #104]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c66:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <HAL_GPIO_Init+0x300>)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f47f ae9d 	bne.w	80059bc <HAL_GPIO_Init+0x10>
  }
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40010000 	.word	0x40010000
 8005c98:	48000400 	.word	0x48000400
 8005c9c:	48000800 	.word	0x48000800
 8005ca0:	48000c00 	.word	0x48000c00
 8005ca4:	48001000 	.word	0x48001000
 8005ca8:	48001400 	.word	0x48001400
 8005cac:	40010400 	.word	0x40010400

08005cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
 8005ccc:	e001      	b.n	8005cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
 8005cec:	4613      	mov	r3, r2
 8005cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf0:	787b      	ldrb	r3, [r7, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cfc:	e002      	b.n	8005d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d1a:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d26:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f806 	bl	8005d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40010400 	.word	0x40010400

08005d40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0be      	b.n	8005ee8 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02e      	beq.n	8005e14 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef0 <HAL_HRTIM_Init+0x198>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef4 <HAL_HRTIM_Init+0x19c>)
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef4 <HAL_HRTIM_Init+0x19c>)
 8005dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dca:	6613      	str	r3, [r2, #96]	@ 0x60
 8005dcc:	4b49      	ldr	r3, [pc, #292]	@ (8005ef4 <HAL_HRTIM_Init+0x19c>)
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005de6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005dfc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fc f9e7 	bl	80021e8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d012      	beq.n	8005e4c <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e34:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75fb      	strb	r3, [r7, #23]
 8005e60:	e03e      	b.n	8005ee0 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005e62:	7dfa      	ldrb	r2, [r7, #23]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3318      	adds	r3, #24
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005e76:	7dfa      	ldrb	r2, [r7, #23]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	331c      	adds	r3, #28
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005e8a:	7dfa      	ldrb	r2, [r7, #23]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3320      	adds	r3, #32
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005e9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	3324      	adds	r3, #36	@ 0x24
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005eb2:	7dfa      	ldrb	r2, [r7, #23]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005ec6:	7dfa      	ldrb	r2, [r7, #23]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3330      	adds	r3, #48	@ 0x30
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	3301      	adds	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	2b06      	cmp	r3, #6
 8005ee4:	d9bd      	bls.n	8005e62 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40016800 	.word	0x40016800
 8005ef4:	40021000 	.word	0x40021000

08005ef8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e045      	b.n	8005f9c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d114      	bne.n	8005f52 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0202 	bic.w	r2, r2, #2
 8005f38:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8005f50:	e01f      	b.n	8005f92 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0202 	orr.w	r2, r2, #2
 8005f62:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f6e:	f023 010c 	bic.w	r1, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8005fb2:	f7fc fcd9 	bl	8002968 <HAL_GetTick>
 8005fb6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fb8:	e014      	b.n	8005fe4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d010      	beq.n	8005fe4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7fc fcd1 	bl	8002968 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2207      	movs	r2, #7
 8005fdc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e011      	b.n	8006008 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d1e1      	bne.n	8005fba <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d101      	bne.n	800602c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
 800602a:	e015      	b.n	8006058 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b06      	cmp	r3, #6
 8006038:	d104      	bne.n	8006044 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa19 	bl	8006474 <HRTIM_MasterBase_Config>
 8006042:	e004      	b.n	800604e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa42 	bl	80064d2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d101      	bne.n	800607c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
 800607a:	e07a      	b.n	8006172 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8006086:	2302      	movs	r3, #2
 8006088:	e073      	b.n	8006172 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b06      	cmp	r3, #6
 800609e:	d104      	bne.n	80060aa <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa55 	bl	8006552 <HRTIM_MasterWaveform_Config>
 80060a8:	e004      	b.n	80060b4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 faec 	bl	800668c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4403      	add	r3, r0
 80060c6:	3320      	adds	r3, #32
 80060c8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6859      	ldr	r1, [r3, #4]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4403      	add	r3, r0
 80060dc:	3324      	adds	r3, #36	@ 0x24
 80060de:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4613      	mov	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4403      	add	r3, r0
 80060f2:	3328      	adds	r3, #40	@ 0x28
 80060f4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68d9      	ldr	r1, [r3, #12]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4403      	add	r3, r0
 8006108:	332c      	adds	r3, #44	@ 0x2c
 800610a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6919      	ldr	r1, [r3, #16]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4403      	add	r3, r0
 800611e:	3330      	adds	r3, #48	@ 0x30
 8006120:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fd7f 	bl	8006c28 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b06      	cmp	r3, #6
 800612e:	d017      	beq.n	8006160 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	3301      	adds	r3, #1
 8006140:	01db      	lsls	r3, r3, #7
 8006142:	4413      	add	r3, r2
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614e:	025b      	lsls	r3, r3, #9
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	6809      	ldr	r1, [r1, #0]
 8006154:	431a      	orrs	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3301      	adds	r3, #1
 800615a:	01db      	lsls	r3, r3, #7
 800615c:	440b      	add	r3, r1
 800615e:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d101      	bne.n	8006196 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
 8006194:	e020      	b.n	80061d8 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e019      	b.n	80061d8 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fbed 	bl	8006998 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fd31 	bl	8006c28 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d101      	bne.n	80061fe <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01d      	b.n	800623a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8006208:	2302      	movs	r3, #2
 800620a:	e016      	b.n	800623a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fc18 	bl	8006a58 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2bff      	cmp	r3, #255	@ 0xff
 8006250:	d103      	bne.n	800625a <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd56 	bl	8006d04 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006258:	e00a      	b.n	8006270 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d103      	bne.n	8006268 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fddf 	bl	8006e24 <HRTIM_Master_ISR>
}
 8006266:	e003      	b.n	8006270 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fe9f 	bl	8006fae <HRTIM_Timer_ISR>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0318 	bic.w	r3, r3, #24
 800649e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	6852      	ldr	r2, [r2, #4]
 80064c4:	619a      	str	r2, [r3, #24]
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b087      	sub	sp, #28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	3301      	adds	r3, #1
 80064e6:	01db      	lsls	r3, r3, #7
 80064e8:	4413      	add	r3, r2
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0318 	bic.w	r3, r3, #24
 8006506:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3301      	adds	r3, #1
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	4413      	add	r3, r2
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	440b      	add	r3, r1
 8006530:	3394      	adds	r3, #148	@ 0x94
 8006532:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6819      	ldr	r1, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	440b      	add	r3, r1
 8006542:	3398      	adds	r3, #152	@ 0x98
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800656c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006586:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b20      	cmp	r3, #32
 800658e:	d003      	beq.n	8006598 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d108      	bne.n	80065aa <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800659e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f043 0320 	orr.w	r3, r3, #32
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e021      	b.n	80065ee <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d108      	bne.n	80065c4 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b8:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	e014      	b.n	80065ee <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d108      	bne.n	80065de <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e007      	b.n	80065ee <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065ec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065f4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006606:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006618:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800662a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800663c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006650:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006662:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	4313      	orrs	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800668c:	b480      	push	{r7}
 800668e:	b08b      	sub	sp, #44	@ 0x2c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3301      	adds	r3, #1
 80066a0:	01db      	lsls	r3, r3, #7
 80066a2:	4413      	add	r3, r2
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	6811      	ldr	r1, [r2, #0]
 80066aa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3301      	adds	r3, #1
 80066b2:	01db      	lsls	r3, r3, #7
 80066b4:	440b      	add	r3, r1
 80066b6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3301      	adds	r3, #1
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	4413      	add	r3, r2
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	01db      	lsls	r3, r3, #7
 80066d0:	4413      	add	r3, r2
 80066d2:	33e8      	adds	r3, #232	@ 0xe8
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	01db      	lsls	r3, r3, #7
 80066e0:	4413      	add	r3, r2
 80066e2:	33e4      	adds	r3, #228	@ 0xe4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80066f0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	f023 0320 	bic.w	r3, r3, #32
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	4313      	orrs	r3, r2
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	2b20      	cmp	r3, #32
 800670a:	d003      	beq.n	8006714 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d108      	bne.n	8006726 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
 8006724:	e021      	b.n	800676a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d108      	bne.n	8006740 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
 800673e:	e014      	b.n	800676a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d108      	bne.n	800675a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
 8006758:	e007      	b.n	800676a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	f023 0320 	bic.w	r3, r3, #32
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006778:	4313      	orrs	r3, r2
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678a:	4313      	orrs	r3, r2
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679c:	4313      	orrs	r3, r2
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ae:	4313      	orrs	r3, r2
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c0:	4313      	orrs	r3, r2
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d4:	d103      	bne.n	80067de <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ec:	4313      	orrs	r3, r2
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fe:	4313      	orrs	r3, r2
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8006808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	4313      	orrs	r3, r2
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800681e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006834:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006846:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	4313      	orrs	r3, r2
 8006850:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006856:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800685a:	d004      	beq.n	8006866 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006860:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006864:	d103      	bne.n	800686e <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d108      	bne.n	8006880 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8006874:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	4313      	orrs	r3, r2
 800687e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006886:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	4313      	orrs	r3, r2
 8006890:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d850      	bhi.n	8006940 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <HRTIM_TimingUnitWaveform_Config+0x218>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068bd 	.word	0x080068bd
 80068a8:	080068d3 	.word	0x080068d3
 80068ac:	080068e9 	.word	0x080068e9
 80068b0:	080068ff 	.word	0x080068ff
 80068b4:	08006915 	.word	0x08006915
 80068b8:	0800692b 	.word	0x0800692b
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068c2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61fb      	str	r3, [r7, #28]
      break;
 80068d0:	e037      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]
      break;
 80068e6:	e02c      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80068ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61fb      	str	r3, [r7, #28]
      break;
 80068fc:	e021      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006904:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	4313      	orrs	r3, r2
 8006910:	61fb      	str	r3, [r7, #28]
      break;
 8006912:	e016      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800691a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006920:	015b      	lsls	r3, r3, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	4313      	orrs	r3, r2
 8006926:	61fb      	str	r3, [r7, #28]
      break;
 8006928:	e00b      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006930:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	019b      	lsls	r3, r3, #6
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	4313      	orrs	r3, r2
 800693c:	61fb      	str	r3, [r7, #28]
      break;
 800693e:	e000      	b.n	8006942 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8006940:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3301      	adds	r3, #1
 800694a:	01db      	lsls	r3, r3, #7
 800694c:	4413      	add	r3, r2
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	01db      	lsls	r3, r3, #7
 800695a:	4413      	add	r3, r2
 800695c:	33e8      	adds	r3, #232	@ 0xe8
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	01db      	lsls	r3, r3, #7
 800696a:	4413      	add	r3, r2
 800696c:	33e4      	adds	r3, #228	@ 0xe4
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	01db      	lsls	r3, r3, #7
 800697a:	4413      	add	r3, r2
 800697c:	33d4      	adds	r3, #212	@ 0xd4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800698c:	bf00      	nop
 800698e:	372c      	adds	r7, #44	@ 0x2c
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	01db      	lsls	r3, r3, #7
 80069ac:	4413      	add	r3, r2
 80069ae:	33ec      	adds	r3, #236	@ 0xec
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069ce:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e0:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069f2:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d11a      	bne.n	8006a3c <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 0304 	bic.w	r3, r3, #4
 8006a0c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0302 	bic.w	r3, r3, #2
 8006a1e:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	01db      	lsls	r3, r3, #7
 8006a44:	4413      	add	r3, r2
 8006a46:	33ec      	adds	r3, #236	@ 0xec
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	601a      	str	r2, [r3, #0]

}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	@ 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	01db      	lsls	r3, r3, #7
 8006a72:	4413      	add	r3, r2
 8006a74:	33e4      	adds	r3, #228	@ 0xe4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4413      	add	r3, r2
 8006a84:	33b8      	adds	r3, #184	@ 0xb8
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a90:	d05d      	beq.n	8006b4e <HRTIM_OutputConfig+0xf6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a98:	d86e      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa0:	d042      	beq.n	8006b28 <HRTIM_OutputConfig+0xd0>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa8:	d866      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d04d      	beq.n	8006b4e <HRTIM_OutputConfig+0xf6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab8:	d85e      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac0:	d032      	beq.n	8006b28 <HRTIM_OutputConfig+0xd0>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d856      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b80      	cmp	r3, #128	@ 0x80
 8006ace:	d03e      	beq.n	8006b4e <HRTIM_OutputConfig+0xf6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b80      	cmp	r3, #128	@ 0x80
 8006ad4:	d850      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b40      	cmp	r3, #64	@ 0x40
 8006ada:	d025      	beq.n	8006b28 <HRTIM_OutputConfig+0xd0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d84a      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d01f      	beq.n	8006b28 <HRTIM_OutputConfig+0xd0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d044      	beq.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d841      	bhi.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d33e      	bcc.n	8006b78 <HRTIM_OutputConfig+0x120>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b02      	subs	r3, #2
 8006afe:	2201      	movs	r2, #1
 8006b00:	409a      	lsls	r2, r3
 8006b02:	4b48      	ldr	r3, [pc, #288]	@ (8006c24 <HRTIM_OutputConfig+0x1cc>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf14      	ite	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	2300      	moveq	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d11c      	bne.n	8006b4e <HRTIM_OutputConfig+0xf6>
 8006b14:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf14      	ite	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	2300      	moveq	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d027      	beq.n	8006b78 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6819      	ldr	r1, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	440b      	add	r3, r1
 8006b36:	33bc      	adds	r3, #188	@ 0xbc
 8006b38:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6819      	ldr	r1, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	01db      	lsls	r3, r3, #7
 8006b46:	440b      	add	r3, r1
 8006b48:	33c0      	adds	r3, #192	@ 0xc0
 8006b4a:	601a      	str	r2, [r3, #0]
      break;
 8006b4c:	e015      	b.n	8006b7a <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	440b      	add	r3, r1
 8006b5c:	33c4      	adds	r3, #196	@ 0xc4
 8006b5e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	01db      	lsls	r3, r3, #7
 8006b6c:	440b      	add	r3, r1
 8006b6e:	33c8      	adds	r3, #200	@ 0xc8
 8006b70:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006b72:	2310      	movs	r3, #16
 8006b74:	61bb      	str	r3, [r7, #24]
      break;
 8006b76:	e000      	b.n	8006b7a <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8006b78:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006b7a:	22fe      	movs	r2, #254	@ 0xfe
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006b82:	43db      	mvns	r3, r3
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	4013      	ands	r3, r2
 8006b88:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	69fa      	ldr	r2, [r7, #28]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d111      	bne.n	8006c06 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10c      	bne.n	8006c06 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d107      	bne.n	8006c06 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	01db      	lsls	r3, r3, #7
 8006c0e:	4413      	add	r3, r2
 8006c10:	33e4      	adds	r3, #228	@ 0xe4
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3724      	adds	r7, #36	@ 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40000041 	.word	0x40000041

08006c28 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b06      	cmp	r3, #6
 8006c36:	d85e      	bhi.n	8006cf6 <HRTIM_ForceRegistersUpdate+0xce>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HRTIM_ForceRegistersUpdate+0x18>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c73 	.word	0x08006c73
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	08006c9f 	.word	0x08006c9f
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006ccb 	.word	0x08006ccb
 8006c54:	08006ce1 	.word	0x08006ce1
 8006c58:	08006c5d 	.word	0x08006c5d
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c70:	e042      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0202 	orr.w	r2, r2, #2
 8006c82:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c86:	e037      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0204 	orr.w	r2, r2, #4
 8006c98:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c9c:	e02c      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0208 	orr.w	r2, r2, #8
 8006cae:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cb2:	e021      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0210 	orr.w	r2, r2, #16
 8006cc4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cc8:	e016      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0220 	orr.w	r2, r2, #32
 8006cda:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cde:	e00b      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cf0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cf4:	e000      	b.n	8006cf8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8006cf6:	bf00      	nop
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fa9a 	bl	8006278 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d007      	beq.n	8006d68 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fa92 	bl	800628c <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00c      	beq.n	8006d8c <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2204      	movs	r2, #4
 8006d82:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fa8a 	bl	80062a0 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fa82 	bl	80062b4 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00c      	beq.n	8006dd4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2210      	movs	r2, #16
 8006dca:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fa7a 	bl	80062c8 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00c      	beq.n	8006df8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2240      	movs	r2, #64	@ 0x40
 8006dee:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fa72 	bl	80062dc <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00c      	beq.n	8006e1c <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fa6a 	bl	80062f0 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006e3e:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d015      	beq.n	8006e86 <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006e6c:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fa3f 	bl	8006304 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00d      	beq.n	8006eac <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006ea2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fa36 	bl	8006318 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006ec8:	2106      	movs	r1, #6
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fa4e 	bl	800636c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006eec:	2106      	movs	r1, #6
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fa47 	bl	8006382 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f10:	2106      	movs	r1, #6
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fa40 	bl	8006398 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2208      	movs	r2, #8
 8006f32:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f34:	2106      	movs	r1, #6
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fa39 	bl	80063ae <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2210      	movs	r2, #16
 8006f56:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f58:	2106      	movs	r1, #6
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff f9fb 	bl	8006356 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff f9d5 	bl	800632c <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2240      	movs	r2, #64	@ 0x40
 8006f9c:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f9e:	2106      	movs	r1, #6
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff f9cd 	bl	8006340 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	01db      	lsls	r3, r3, #7
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	01db      	lsls	r3, r3, #7
 8006fd2:	4413      	add	r3, r2
 8006fd4:	338c      	adds	r3, #140	@ 0x8c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	01db      	lsls	r3, r3, #7
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3388      	adds	r3, #136	@ 0x88
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f9b3 	bl	800636c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	01db      	lsls	r3, r3, #7
 8007022:	4413      	add	r3, r2
 8007024:	3388      	adds	r3, #136	@ 0x88
 8007026:	2202      	movs	r2, #2
 8007028:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff f9a8 	bl	8006382 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	01db      	lsls	r3, r3, #7
 800704e:	4413      	add	r3, r2
 8007050:	3388      	adds	r3, #136	@ 0x88
 8007052:	2204      	movs	r2, #4
 8007054:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff f99d 	bl	8006398 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	01db      	lsls	r3, r3, #7
 800707a:	4413      	add	r3, r2
 800707c:	3388      	adds	r3, #136	@ 0x88
 800707e:	2208      	movs	r2, #8
 8007080:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff f992 	bl	80063ae <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	01db      	lsls	r3, r3, #7
 80070a6:	4413      	add	r3, r2
 80070a8:	3388      	adds	r3, #136	@ 0x88
 80070aa:	2210      	movs	r2, #16
 80070ac:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff f950 	bl	8006356 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d010      	beq.n	80070e2 <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	01db      	lsls	r3, r3, #7
 80070d2:	4413      	add	r3, r2
 80070d4:	3388      	adds	r3, #136	@ 0x88
 80070d6:	2240      	movs	r2, #64	@ 0x40
 80070d8:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff f92f 	bl	8006340 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d010      	beq.n	800710e <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	01db      	lsls	r3, r3, #7
 80070fe:	4413      	add	r3, r2
 8007100:	3388      	adds	r3, #136	@ 0x88
 8007102:	2280      	movs	r2, #128	@ 0x80
 8007104:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f95b 	bl	80063c4 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d011      	beq.n	800713c <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00c      	beq.n	800713c <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	01db      	lsls	r3, r3, #7
 800712a:	4413      	add	r3, r2
 800712c:	3388      	adds	r3, #136	@ 0x88
 800712e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007132:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f94f 	bl	80063da <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007142:	2b00      	cmp	r3, #0
 8007144:	d011      	beq.n	800716a <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	01db      	lsls	r3, r3, #7
 8007158:	4413      	add	r3, r2
 800715a:	3388      	adds	r3, #136	@ 0x88
 800715c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007160:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff f959 	bl	800641c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007170:	2b00      	cmp	r3, #0
 8007172:	d011      	beq.n	8007198 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00c      	beq.n	8007198 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	01db      	lsls	r3, r3, #7
 8007186:	4413      	add	r3, r2
 8007188:	3388      	adds	r3, #136	@ 0x88
 800718a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800718e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f94d 	bl	8006432 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00c      	beq.n	80071c6 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	01db      	lsls	r3, r3, #7
 80071b4:	4413      	add	r3, r2
 80071b6:	3388      	adds	r3, #136	@ 0x88
 80071b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071bc:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff f941 	bl	8006448 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	01db      	lsls	r3, r3, #7
 80071e2:	4413      	add	r3, r2
 80071e4:	3388      	adds	r3, #136	@ 0x88
 80071e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071ea:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff f935 	bl	800645e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	4413      	add	r3, r2
 8007212:	3388      	adds	r3, #136	@ 0x88
 8007214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007218:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff f8f2 	bl	8006406 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d011      	beq.n	8007250 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	01db      	lsls	r3, r3, #7
 800723e:	4413      	add	r3, r2
 8007240:	3388      	adds	r3, #136	@ 0x88
 8007242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007246:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f8d0 	bl	80063f0 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e0c0      	b.n	80073ec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb f9d0 	bl	8002624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2203      	movs	r2, #3
 8007288:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f005 fb2c 	bl	800c8ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	e03e      	b.n	800731a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	440b      	add	r3, r1
 80072aa:	3311      	adds	r3, #17
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072b0:	7bfa      	ldrb	r2, [r7, #15]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	440b      	add	r3, r1
 80072be:	3310      	adds	r3, #16
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072c4:	7bfa      	ldrb	r2, [r7, #15]
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	440b      	add	r3, r1
 80072d2:	3313      	adds	r3, #19
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072d8:	7bfa      	ldrb	r2, [r7, #15]
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	440b      	add	r3, r1
 80072e6:	3320      	adds	r3, #32
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	440b      	add	r3, r1
 80072fa:	3324      	adds	r3, #36	@ 0x24
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	440b      	add	r3, r1
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	3301      	adds	r3, #1
 8007318:	73fb      	strb	r3, [r7, #15]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	791b      	ldrb	r3, [r3, #4]
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	429a      	cmp	r2, r3
 8007322:	d3bb      	bcc.n	800729c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	e044      	b.n	80073b4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	440b      	add	r3, r1
 8007338:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	440b      	add	r3, r1
 800734e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007356:	7bfa      	ldrb	r2, [r7, #15]
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800736c:	7bfa      	ldrb	r2, [r7, #15]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	440b      	add	r3, r1
 800737a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007382:	7bfa      	ldrb	r2, [r7, #15]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	440b      	add	r3, r1
 8007390:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007398:	7bfa      	ldrb	r2, [r7, #15]
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	3301      	adds	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	7bfa      	ldrb	r2, [r7, #15]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d3b5      	bcc.n	800732a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80073ca:	f005 faab 	bl	800c924 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7a9b      	ldrb	r3, [r3, #10]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d102      	bne.n	80073ea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fa26 	bl	8008836 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f006 f870 	bl	800d4e6 <USB_ReadInterrupts>
 8007406:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f983 	bl	800771e <PCD_EP_ISR_Handler>

    return;
 8007418:	e110      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007420:	2b00      	cmp	r3, #0
 8007422:	d013      	beq.n	800744c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007436:	b292      	uxth	r2, r2
 8007438:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f92c 	bl	800769a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007442:	2100      	movs	r1, #0
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f946 	bl	80076d6 <HAL_PCD_SetAddress>

    return;
 800744a:	e0f7      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00c      	beq.n	8007470 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007468:	b292      	uxth	r2, r2
 800746a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800746e:	e0e5      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00c      	beq.n	8007494 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007482:	b29a      	uxth	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800748c:	b292      	uxth	r2, r2
 800748e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007492:	e0d3      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d034      	beq.n	8007508 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0204 	bic.w	r2, r2, #4
 80074b0:	b292      	uxth	r2, r2
 80074b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0208 	bic.w	r2, r2, #8
 80074c8:	b292      	uxth	r2, r2
 80074ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d107      	bne.n	80074e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 f9d1 	bl	800888a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8ea 	bl	80076c2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007500:	b292      	uxth	r2, r2
 8007502:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007506:	e099      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800750e:	2b00      	cmp	r3, #0
 8007510:	d027      	beq.n	8007562 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0208 	orr.w	r2, r2, #8
 8007524:	b292      	uxth	r2, r2
 8007526:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800753c:	b292      	uxth	r2, r2
 800753e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0204 	orr.w	r2, r2, #4
 8007554:	b292      	uxth	r2, r2
 8007556:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8a7 	bl	80076ae <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007560:	e06c      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007568:	2b00      	cmp	r3, #0
 800756a:	d040      	beq.n	80075ee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800757e:	b292      	uxth	r2, r2
 8007580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d12b      	bne.n	80075e6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0204 	orr.w	r2, r2, #4
 80075a0:	b292      	uxth	r2, r2
 80075a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0208 	orr.w	r2, r2, #8
 80075b8:	b292      	uxth	r2, r2
 80075ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	089b      	lsrs	r3, r3, #2
 80075d2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075dc:	2101      	movs	r1, #1
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f953 	bl	800888a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80075e4:	e02a      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f861 	bl	80076ae <HAL_PCD_SuspendCallback>
    return;
 80075ec:	e026      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00f      	beq.n	8007618 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800760a:	b292      	uxth	r2, r2
 800760c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f838 	bl	8007686 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007616:	e011      	b.n	800763c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800762a:	b29a      	uxth	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007634:	b292      	uxth	r2, r2
 8007636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800763a:	bf00      	nop
  }
}
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_PCD_SetAddress+0x1a>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e012      	b.n	8007716 <HAL_PCD_SetAddress+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f005 fed9 	bl	800d4be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b092      	sub	sp, #72	@ 0x48
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007726:	e333      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007730:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007732:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007734:	b2db      	uxtb	r3, r3
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800773e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 8108 	bne.w	8007958 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007748:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	d14c      	bne.n	80077ec <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	813b      	strh	r3, [r7, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	893b      	ldrh	r3, [r7, #8]
 800776a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3310      	adds	r3, #16
 800777a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007784:	b29b      	uxth	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4413      	add	r3, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	4413      	add	r3, r2
 8007796:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80077a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80077a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	441a      	add	r2, r3
 80077ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80077b2:	2100      	movs	r1, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ff50 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7b1b      	ldrb	r3, [r3, #12]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 82e5 	beq.w	8007d90 <PCD_EP_ISR_Handler+0x672>
 80077c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 82e0 	bne.w	8007d90 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	731a      	strb	r2, [r3, #12]
 80077ea:	e2d1      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077f2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80077fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80077fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007802:	2b00      	cmp	r3, #0
 8007804:	d032      	beq.n	800786c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	4413      	add	r3, r2
 8007820:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800782a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800782c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800783c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007840:	b29b      	uxth	r3, r3
 8007842:	f005 fea3 	bl	800d58c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29a      	uxth	r2, r3
 800784e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007852:	4013      	ands	r3, r2
 8007854:	817b      	strh	r3, [r7, #10]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	897a      	ldrh	r2, [r7, #10]
 800785c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007860:	b292      	uxth	r2, r2
 8007862:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff ff04 	bl	8007672 <HAL_PCD_SetupStageCallback>
 800786a:	e291      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800786c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007870:	2b00      	cmp	r3, #0
 8007872:	f280 828d 	bge.w	8007d90 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29a      	uxth	r2, r3
 800787e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007882:	4013      	ands	r3, r2
 8007884:	81fb      	strh	r3, [r7, #14]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	89fa      	ldrh	r2, [r7, #14]
 800788c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007890:	b292      	uxth	r2, r2
 8007892:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4413      	add	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80078bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d019      	beq.n	80078f8 <PCD_EP_ISR_Handler+0x1da>
 80078c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d015      	beq.n	80078f8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d2:	6959      	ldr	r1, [r3, #20]
 80078d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80078d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f005 fe55 	bl	800d58c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	441a      	add	r2, r3
 80078ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fea5 	bl	8007642 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007900:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 8242 	bne.w	8007d90 <PCD_EP_ISR_Handler+0x672>
 800790c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800790e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007912:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007916:	f000 823b 	beq.w	8007d90 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	81bb      	strh	r3, [r7, #12]
 800792c:	89bb      	ldrh	r3, [r7, #12]
 800792e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007932:	81bb      	strh	r3, [r7, #12]
 8007934:	89bb      	ldrh	r3, [r7, #12]
 8007936:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800793a:	81bb      	strh	r3, [r7, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	89bb      	ldrh	r3, [r7, #12]
 8007942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007952:	b29b      	uxth	r3, r3
 8007954:	8013      	strh	r3, [r2, #0]
 8007956:	e21b      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800796a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800796e:	2b00      	cmp	r3, #0
 8007970:	f280 80f1 	bge.w	8007b56 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29a      	uxth	r2, r3
 8007986:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800798a:	4013      	ands	r3, r2
 800798c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800799e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079a2:	b292      	uxth	r2, r2
 80079a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80079a6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80079bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079be:	7b1b      	ldrb	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d123      	bne.n	8007a0c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	4413      	add	r3, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80079ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 808b 	beq.w	8007b0c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fc:	6959      	ldr	r1, [r3, #20]
 80079fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a00:	88da      	ldrh	r2, [r3, #6]
 8007a02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a06:	f005 fdc1 	bl	800d58c <USB_ReadPMA>
 8007a0a:	e07f      	b.n	8007b0c <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a0e:	78db      	ldrb	r3, [r3, #3]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d109      	bne.n	8007a28 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007a14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a16:	461a      	mov	r2, r3
 8007a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9c6 	bl	8007dac <HAL_PCD_EP_DB_Receive>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007a26:	e071      	b.n	8007b0c <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d022      	beq.n	8007ac8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007aaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02c      	beq.n	8007b0c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab8:	6959      	ldr	r1, [r3, #20]
 8007aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007abc:	891a      	ldrh	r2, [r3, #8]
 8007abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ac2:	f005 fd63 	bl	800d58c <USB_ReadPMA>
 8007ac6:	e021      	b.n	8007b0c <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4413      	add	r3, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007af0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afe:	6959      	ldr	r1, [r3, #20]
 8007b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b02:	895a      	ldrh	r2, [r3, #10]
 8007b04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b08:	f005 fd40 	bl	800d58c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b0e:	69da      	ldr	r2, [r3, #28]
 8007b10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b14:	441a      	add	r2, r3
 8007b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b22:	441a      	add	r2, r3
 8007b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <PCD_EP_ISR_Handler+0x41e>
 8007b30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d206      	bcs.n	8007b4a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fd7d 	bl	8007642 <HAL_PCD_DataOutStageCallback>
 8007b48:	e005      	b.n	8007b56 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b50:	4618      	mov	r0, r3
 8007b52:	f004 ff05 	bl	800c960 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007b56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8117 	beq.w	8007d90 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007b62:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	3310      	adds	r3, #16
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb0:	78db      	ldrb	r3, [r3, #3]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	f040 80a1 	bne.w	8007cfa <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bba:	2200      	movs	r2, #0
 8007bbc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bc0:	7b1b      	ldrb	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 8092 	beq.w	8007cec <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d046      	beq.n	8007c60 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d126      	bne.n	8007c28 <PCD_EP_ISR_Handler+0x50a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	4413      	add	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	00da      	lsls	r2, r3, #3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e061      	b.n	8007cec <PCD_EP_ISR_Handler+0x5ce>
 8007c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d15d      	bne.n	8007cec <PCD_EP_ISR_Handler+0x5ce>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	61fb      	str	r3, [r7, #28]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	00da      	lsls	r2, r3, #3
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	e045      	b.n	8007cec <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d126      	bne.n	8007cbc <PCD_EP_ISR_Handler+0x59e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	4413      	add	r3, r2
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	00da      	lsls	r2, r3, #3
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8e:	4413      	add	r3, r2
 8007c90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c94:	623b      	str	r3, [r7, #32]
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e017      	b.n	8007cec <PCD_EP_ISR_Handler+0x5ce>
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d113      	bne.n	8007cec <PCD_EP_ISR_Handler+0x5ce>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd2:	4413      	add	r3, r2
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	00da      	lsls	r2, r3, #3
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	4413      	add	r3, r2
 8007ce0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	2200      	movs	r2, #0
 8007cea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff fcb1 	bl	800765a <HAL_PCD_DataInStageCallback>
 8007cf8:	e04a      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007cfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d13f      	bne.n	8007d84 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4413      	add	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d28:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d906      	bls.n	8007d42 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3e:	619a      	str	r2, [r3, #24]
 8007d40:	e002      	b.n	8007d48 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d44:	2200      	movs	r2, #0
 8007d46:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fc7f 	bl	800765a <HAL_PCD_DataInStageCallback>
 8007d5c:	e018      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d60:	695a      	ldr	r2, [r3, #20]
 8007d62:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d64:	441a      	add	r2, r3
 8007d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6c:	69da      	ldr	r2, [r3, #28]
 8007d6e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d70:	441a      	add	r2, r3
 8007d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f004 fdef 	bl	800c960 <USB_EPStartXfer>
 8007d82:	e005      	b.n	8007d90 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007d84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d86:	461a      	mov	r2, r3
 8007d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f917 	bl	8007fbe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	b21b      	sxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f6ff acc3 	blt.w	8007728 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3748      	adds	r7, #72	@ 0x48
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d07c      	beq.n	8007ebe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	8b7b      	ldrh	r3, [r7, #26]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d306      	bcc.n	8007e02 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	8b7b      	ldrh	r3, [r7, #26]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	619a      	str	r2, [r3, #24]
 8007e00:	e002      	b.n	8007e08 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d123      	bne.n	8007e58 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2a:	833b      	strh	r3, [r7, #24]
 8007e2c:	8b3b      	ldrh	r3, [r7, #24]
 8007e2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e32:	833b      	strh	r3, [r7, #24]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	441a      	add	r2, r3
 8007e42:	8b3b      	ldrh	r3, [r7, #24]
 8007e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01f      	beq.n	8007ea2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7c:	82fb      	strh	r3, [r7, #22]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8afb      	ldrh	r3, [r7, #22]
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ea2:	8b7b      	ldrh	r3, [r7, #26]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8085 	beq.w	8007fb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6959      	ldr	r1, [r3, #20]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	891a      	ldrh	r2, [r3, #8]
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	f005 fb68 	bl	800d58c <USB_ReadPMA>
 8007ebc:	e07a      	b.n	8007fb4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ee2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	8b7b      	ldrh	r3, [r7, #26]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d306      	bcc.n	8007efc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	8b7b      	ldrh	r3, [r7, #26]
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	619a      	str	r2, [r3, #24]
 8007efa:	e002      	b.n	8007f02 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d123      	bne.n	8007f52 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f24:	83fb      	strh	r3, [r7, #30]
 8007f26:	8bfb      	ldrh	r3, [r7, #30]
 8007f28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f2c:	83fb      	strh	r3, [r7, #30]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	8bfb      	ldrh	r3, [r7, #30]
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11f      	bne.n	8007f9c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f76:	83bb      	strh	r3, [r7, #28]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	8bbb      	ldrh	r3, [r7, #28]
 8007f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f9c:	8b7b      	ldrh	r3, [r7, #26]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6959      	ldr	r1, [r3, #20]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	895a      	ldrh	r2, [r3, #10]
 8007fae:	8b7b      	ldrh	r3, [r7, #26]
 8007fb0:	f005 faec 	bl	800d58c <USB_ReadPMA>
    }
  }

  return count;
 8007fb4:	8b7b      	ldrh	r3, [r7, #26]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b0a6      	sub	sp, #152	@ 0x98
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 81f7 	beq.w	80083c6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	6812      	ldr	r2, [r2, #0]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	699a      	ldr	r2, [r3, #24]
 8008004:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008008:	429a      	cmp	r2, r3
 800800a:	d907      	bls.n	800801c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	619a      	str	r2, [r3, #24]
 800801a:	e002      	b.n	8008022 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 80e1 	bne.w	80081ee <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d126      	bne.n	8008082 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	633b      	str	r3, [r7, #48]	@ 0x30
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008042:	b29b      	uxth	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	4413      	add	r3, r2
 800804a:	633b      	str	r3, [r7, #48]	@ 0x30
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	00da      	lsls	r2, r3, #3
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	4413      	add	r3, r2
 8008056:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800805a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008066:	b29a      	uxth	r2, r3
 8008068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807a:	b29a      	uxth	r2, r3
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e01a      	b.n	80080b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d116      	bne.n	80080b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008098:	b29b      	uxth	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	4413      	add	r3, r2
 80080a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	00da      	lsls	r2, r3, #3
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	4413      	add	r3, r2
 80080ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b4:	2200      	movs	r2, #0
 80080b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d126      	bne.n	8008114 <HAL_PCD_EP_DB_Transmit+0x156>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	623b      	str	r3, [r7, #32]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	623b      	str	r3, [r7, #32]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	00da      	lsls	r2, r3, #3
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	4413      	add	r3, r2
 80080e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810c:	b29a      	uxth	r2, r3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e017      	b.n	8008144 <HAL_PCD_EP_DB_Transmit+0x186>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d113      	bne.n	8008144 <HAL_PCD_EP_DB_Transmit+0x186>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008124:	b29b      	uxth	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	4413      	add	r3, r2
 800812c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	00da      	lsls	r2, r3, #3
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	4413      	add	r3, r2
 8008138:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	2200      	movs	r2, #0
 8008142:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d123      	bne.n	8008194 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008166:	837b      	strh	r3, [r7, #26]
 8008168:	8b7b      	ldrh	r3, [r7, #26]
 800816a:	f083 0320 	eor.w	r3, r3, #32
 800816e:	837b      	strh	r3, [r7, #26]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	8b7b      	ldrh	r3, [r7, #26]
 8008180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800818c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008190:	b29b      	uxth	r3, r3
 8008192:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fa5d 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01f      	beq.n	80081ea <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c4:	833b      	strh	r3, [r7, #24]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	8b3b      	ldrh	r3, [r7, #24]
 80081d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e31f      	b.n	800882e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081ee:	88fb      	ldrh	r3, [r7, #6]
 80081f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d021      	beq.n	800823c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800820e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008212:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800822c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008238:	b29b      	uxth	r3, r3
 800823a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008242:	2b01      	cmp	r3, #1
 8008244:	f040 82ca 	bne.w	80087dc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	695a      	ldr	r2, [r3, #20]
 800824c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008250:	441a      	add	r2, r3
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800825e:	441a      	add	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	429a      	cmp	r2, r3
 800826e:	d309      	bcc.n	8008284 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6a1a      	ldr	r2, [r3, #32]
 800827a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	621a      	str	r2, [r3, #32]
 8008282:	e015      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800828c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008290:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800829a:	e009      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d15f      	bne.n	8008378 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082cc:	4413      	add	r3, r2
 80082ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	00da      	lsls	r2, r3, #3
 80082d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d8:	4413      	add	r3, r2
 80082da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <HAL_PCD_EP_DB_Transmit+0x34e>
 80082f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008304:	b29a      	uxth	r2, r3
 8008306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e051      	b.n	80083b0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800830c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800830e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008310:	d816      	bhi.n	8008340 <HAL_PCD_EP_DB_Transmit+0x382>
 8008312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	653b      	str	r3, [r7, #80]	@ 0x50
 8008318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_PCD_EP_DB_Transmit+0x36a>
 8008322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008324:	3301      	adds	r3, #1
 8008326:	653b      	str	r3, [r7, #80]	@ 0x50
 8008328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29a      	uxth	r2, r3
 800832e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008330:	b29b      	uxth	r3, r3
 8008332:	029b      	lsls	r3, r3, #10
 8008334:	b29b      	uxth	r3, r3
 8008336:	4313      	orrs	r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	e037      	b.n	80083b0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	653b      	str	r3, [r7, #80]	@ 0x50
 8008346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <HAL_PCD_EP_DB_Transmit+0x398>
 8008350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008352:	3b01      	subs	r3, #1
 8008354:	653b      	str	r3, [r7, #80]	@ 0x50
 8008356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29a      	uxth	r2, r3
 800835c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800835e:	b29b      	uxth	r3, r3
 8008360:	029b      	lsls	r3, r3, #10
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29b      	uxth	r3, r3
 8008368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008370:	b29a      	uxth	r2, r3
 8008372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e01b      	b.n	80083b0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d117      	bne.n	80083b0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008394:	4413      	add	r3, r2
 8008396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	00da      	lsls	r2, r3, #3
 800839e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6959      	ldr	r1, [r3, #20]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	891a      	ldrh	r2, [r3, #8]
 80083bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f005 f8a1 	bl	800d506 <USB_WritePMA>
 80083c4:	e20a      	b.n	80087dc <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4413      	add	r3, r2
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	4413      	add	r3, r2
 80083e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d307      	bcc.n	800840a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	619a      	str	r2, [r3, #24]
 8008408:	e002      	b.n	8008410 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2200      	movs	r2, #0
 800840e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 80f6 	bne.w	8008606 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d126      	bne.n	8008470 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	677b      	str	r3, [r7, #116]	@ 0x74
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008430:	b29b      	uxth	r3, r3
 8008432:	461a      	mov	r2, r3
 8008434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008436:	4413      	add	r3, r2
 8008438:	677b      	str	r3, [r7, #116]	@ 0x74
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	00da      	lsls	r2, r3, #3
 8008440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008442:	4413      	add	r3, r2
 8008444:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008448:	673b      	str	r3, [r7, #112]	@ 0x70
 800844a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008454:	b29a      	uxth	r2, r3
 8008456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008468:	b29a      	uxth	r2, r3
 800846a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	e01a      	b.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d116      	bne.n	80084a6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800848c:	4413      	add	r3, r2
 800848e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	00da      	lsls	r2, r3, #3
 8008496:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008498:	4413      	add	r3, r2
 800849a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800849e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084a2:	2200      	movs	r2, #0
 80084a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d12f      	bne.n	8008516 <HAL_PCD_EP_DB_Transmit+0x558>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ce:	4413      	add	r3, r2
 80084d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084de:	4413      	add	r3, r2
 80084e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800850c:	b29a      	uxth	r2, r3
 800850e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008512:	801a      	strh	r2, [r3, #0]
 8008514:	e01c      	b.n	8008550 <HAL_PCD_EP_DB_Transmit+0x592>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d118      	bne.n	8008550 <HAL_PCD_EP_DB_Transmit+0x592>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008526:	b29b      	uxth	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800852e:	4413      	add	r3, r2
 8008530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	00da      	lsls	r2, r3, #3
 800853a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800853e:	4413      	add	r3, r2
 8008540:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800854c:	2200      	movs	r2, #0
 800854e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d127      	bne.n	80085a8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008572:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008576:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800857a:	f083 0320 	eor.w	r3, r3, #32
 800857e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800859c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff f853 	bl	800765a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d121      	bne.n	8008602 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	441a      	add	r2, r3
 80085ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	e113      	b.n	800882e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d121      	bne.n	8008654 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	441a      	add	r2, r3
 800863c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800864c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800865a:	2b01      	cmp	r3, #1
 800865c:	f040 80be 	bne.w	80087dc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008668:	441a      	add	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	69da      	ldr	r2, [r3, #28]
 8008672:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008676:	441a      	add	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d309      	bcc.n	800869c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008694:	1ad2      	subs	r2, r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	621a      	str	r2, [r3, #32]
 800869a:	e015      	b.n	80086c8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d107      	bne.n	80086b4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80086a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80086b2:	e009      	b.n	80086c8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d15f      	bne.n	8008796 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ea:	4413      	add	r3, r2
 80086ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	00da      	lsls	r2, r3, #3
 80086f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086f6:	4413      	add	r3, r2
 80086f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80086fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008708:	b29a      	uxth	r2, r3
 800870a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <HAL_PCD_EP_DB_Transmit+0x76c>
 8008714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008722:	b29a      	uxth	r2, r3
 8008724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e04e      	b.n	80087c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800872a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800872c:	2b3e      	cmp	r3, #62	@ 0x3e
 800872e:	d816      	bhi.n	800875e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008732:	085b      	lsrs	r3, r3, #1
 8008734:	663b      	str	r3, [r7, #96]	@ 0x60
 8008736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_PCD_EP_DB_Transmit+0x788>
 8008740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008742:	3301      	adds	r3, #1
 8008744:	663b      	str	r3, [r7, #96]	@ 0x60
 8008746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29a      	uxth	r2, r3
 800874c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800874e:	b29b      	uxth	r3, r3
 8008750:	029b      	lsls	r3, r3, #10
 8008752:	b29b      	uxth	r3, r3
 8008754:	4313      	orrs	r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e034      	b.n	80087c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800875e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	663b      	str	r3, [r7, #96]	@ 0x60
 8008764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800876e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008770:	3b01      	subs	r3, #1
 8008772:	663b      	str	r3, [r7, #96]	@ 0x60
 8008774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29a      	uxth	r2, r3
 800877a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800877c:	b29b      	uxth	r3, r3
 800877e:	029b      	lsls	r3, r3, #10
 8008780:	b29b      	uxth	r3, r3
 8008782:	4313      	orrs	r3, r2
 8008784:	b29b      	uxth	r3, r3
 8008786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878e:	b29a      	uxth	r2, r3
 8008790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	e018      	b.n	80087c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d114      	bne.n	80087c8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087ac:	4413      	add	r3, r2
 80087ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	00da      	lsls	r2, r3, #3
 80087b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087b8:	4413      	add	r3, r2
 80087ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6959      	ldr	r1, [r3, #20]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	895a      	ldrh	r2, [r3, #10]
 80087d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f004 fe95 	bl	800d506 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f6:	82fb      	strh	r3, [r7, #22]
 80087f8:	8afb      	ldrh	r3, [r7, #22]
 80087fa:	f083 0310 	eor.w	r3, r3, #16
 80087fe:	82fb      	strh	r3, [r7, #22]
 8008800:	8afb      	ldrh	r3, [r7, #22]
 8008802:	f083 0320 	eor.w	r3, r3, #32
 8008806:	82fb      	strh	r3, [r7, #22]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	441a      	add	r2, r3
 8008816:	8afb      	ldrh	r3, [r7, #22]
 8008818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800881c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008828:	b29b      	uxth	r3, r3
 800882a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3798      	adds	r7, #152	@ 0x98
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800885a:	b29b      	uxth	r3, r3
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800886e:	b29b      	uxth	r3, r3
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
	...

080088a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d141      	bne.n	8008936 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088b2:	4b4b      	ldr	r3, [pc, #300]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088be:	d131      	bne.n	8008924 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088c0:	4b47      	ldr	r3, [pc, #284]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c6:	4a46      	ldr	r2, [pc, #280]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088d0:	4b43      	ldr	r3, [pc, #268]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088d8:	4a41      	ldr	r2, [pc, #260]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80088e0:	4b40      	ldr	r3, [pc, #256]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2232      	movs	r2, #50	@ 0x32
 80088e6:	fb02 f303 	mul.w	r3, r2, r3
 80088ea:	4a3f      	ldr	r2, [pc, #252]	@ (80089e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80088ec:	fba2 2303 	umull	r2, r3, r2, r3
 80088f0:	0c9b      	lsrs	r3, r3, #18
 80088f2:	3301      	adds	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088f6:	e002      	b.n	80088fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088fe:	4b38      	ldr	r3, [pc, #224]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800890a:	d102      	bne.n	8008912 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f2      	bne.n	80088f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008912:	4b33      	ldr	r3, [pc, #204]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800891a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800891e:	d158      	bne.n	80089d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e057      	b.n	80089d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008924:	4b2e      	ldr	r3, [pc, #184]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892a:	4a2d      	ldr	r2, [pc, #180]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800892c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008934:	e04d      	b.n	80089d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800893c:	d141      	bne.n	80089c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800893e:	4b28      	ldr	r3, [pc, #160]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894a:	d131      	bne.n	80089b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800894c:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800894e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008952:	4a23      	ldr	r2, [pc, #140]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008958:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800895c:	4b20      	ldr	r3, [pc, #128]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008964:	4a1e      	ldr	r2, [pc, #120]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800896a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800896c:	4b1d      	ldr	r3, [pc, #116]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2232      	movs	r2, #50	@ 0x32
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	4a1c      	ldr	r2, [pc, #112]	@ (80089e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	0c9b      	lsrs	r3, r3, #18
 800897e:	3301      	adds	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008982:	e002      	b.n	800898a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3b01      	subs	r3, #1
 8008988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800898a:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008996:	d102      	bne.n	800899e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f2      	bne.n	8008984 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800899e:	4b10      	ldr	r3, [pc, #64]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089aa:	d112      	bne.n	80089d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e011      	b.n	80089d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089b0:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b6:	4a0a      	ldr	r2, [pc, #40]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80089c0:	e007      	b.n	80089d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80089c2:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089ca:	4a05      	ldr	r2, [pc, #20]	@ (80089e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	40007000 	.word	0x40007000
 80089e4:	20000000 	.word	0x20000000
 80089e8:	431bde83 	.word	0x431bde83

080089ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80089f0:	4b05      	ldr	r3, [pc, #20]	@ (8008a08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	4a04      	ldr	r2, [pc, #16]	@ (8008a08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089fa:	6093      	str	r3, [r2, #8]
}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40007000 	.word	0x40007000

08008a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e2fe      	b.n	800901c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d075      	beq.n	8008b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a2a:	4b97      	ldr	r3, [pc, #604]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a34:	4b94      	ldr	r3, [pc, #592]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	2b0c      	cmp	r3, #12
 8008a42:	d102      	bne.n	8008a4a <HAL_RCC_OscConfig+0x3e>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d002      	beq.n	8008a50 <HAL_RCC_OscConfig+0x44>
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10b      	bne.n	8008a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a50:	4b8d      	ldr	r3, [pc, #564]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05b      	beq.n	8008b14 <HAL_RCC_OscConfig+0x108>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d157      	bne.n	8008b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e2d9      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a70:	d106      	bne.n	8008a80 <HAL_RCC_OscConfig+0x74>
 8008a72:	4b85      	ldr	r3, [pc, #532]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a84      	ldr	r2, [pc, #528]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e01d      	b.n	8008abc <HAL_RCC_OscConfig+0xb0>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a88:	d10c      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x98>
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	4b7c      	ldr	r3, [pc, #496]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a7b      	ldr	r2, [pc, #492]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	e00b      	b.n	8008abc <HAL_RCC_OscConfig+0xb0>
 8008aa4:	4b78      	ldr	r3, [pc, #480]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a77      	ldr	r2, [pc, #476]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4b75      	ldr	r3, [pc, #468]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a74      	ldr	r2, [pc, #464]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d013      	beq.n	8008aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac4:	f7f9 ff50 	bl	8002968 <HAL_GetTick>
 8008ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008acc:	f7f9 ff4c 	bl	8002968 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b64      	cmp	r3, #100	@ 0x64
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e29e      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ade:	4b6a      	ldr	r3, [pc, #424]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f0      	beq.n	8008acc <HAL_RCC_OscConfig+0xc0>
 8008aea:	e014      	b.n	8008b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aec:	f7f9 ff3c 	bl	8002968 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008af4:	f7f9 ff38 	bl	8002968 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b64      	cmp	r3, #100	@ 0x64
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e28a      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b06:	4b60      	ldr	r3, [pc, #384]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f0      	bne.n	8008af4 <HAL_RCC_OscConfig+0xe8>
 8008b12:	e000      	b.n	8008b16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d075      	beq.n	8008c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b22:	4b59      	ldr	r3, [pc, #356]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f003 030c 	and.w	r3, r3, #12
 8008b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b2c:	4b56      	ldr	r3, [pc, #344]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b0c      	cmp	r3, #12
 8008b3a:	d102      	bne.n	8008b42 <HAL_RCC_OscConfig+0x136>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d002      	beq.n	8008b48 <HAL_RCC_OscConfig+0x13c>
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d11f      	bne.n	8008b88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b48:	4b4f      	ldr	r3, [pc, #316]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_OscConfig+0x154>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e25d      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b60:	4b49      	ldr	r3, [pc, #292]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	061b      	lsls	r3, r3, #24
 8008b6e:	4946      	ldr	r1, [pc, #280]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b74:	4b45      	ldr	r3, [pc, #276]	@ (8008c8c <HAL_RCC_OscConfig+0x280>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7f9 fea9 	bl	80028d0 <HAL_InitTick>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d043      	beq.n	8008c0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e249      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d023      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b90:	4b3d      	ldr	r3, [pc, #244]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a3c      	ldr	r2, [pc, #240]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9c:	f7f9 fee4 	bl	8002968 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba4:	f7f9 fee0 	bl	8002968 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e232      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bb6:	4b34      	ldr	r3, [pc, #208]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f0      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc2:	4b31      	ldr	r3, [pc, #196]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	061b      	lsls	r3, r3, #24
 8008bd0:	492d      	ldr	r1, [pc, #180]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	604b      	str	r3, [r1, #4]
 8008bd6:	e01a      	b.n	8008c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008bde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be4:	f7f9 fec0 	bl	8002968 <HAL_GetTick>
 8008be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bec:	f7f9 febc 	bl	8002968 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e20e      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bfe:	4b22      	ldr	r3, [pc, #136]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x1e0>
 8008c0a:	e000      	b.n	8008c0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d041      	beq.n	8008c9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01c      	beq.n	8008c5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c22:	4b19      	ldr	r3, [pc, #100]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c28:	4a17      	ldr	r2, [pc, #92]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c2a:	f043 0301 	orr.w	r3, r3, #1
 8008c2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c32:	f7f9 fe99 	bl	8002968 <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c3a:	f7f9 fe95 	bl	8002968 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e1e7      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0ef      	beq.n	8008c3a <HAL_RCC_OscConfig+0x22e>
 8008c5a:	e020      	b.n	8008c9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c62:	4a09      	ldr	r2, [pc, #36]	@ (8008c88 <HAL_RCC_OscConfig+0x27c>)
 8008c64:	f023 0301 	bic.w	r3, r3, #1
 8008c68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6c:	f7f9 fe7c 	bl	8002968 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c72:	e00d      	b.n	8008c90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c74:	f7f9 fe78 	bl	8002968 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d906      	bls.n	8008c90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e1ca      	b.n	800901c <HAL_RCC_OscConfig+0x610>
 8008c86:	bf00      	nop
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c90:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1ea      	bne.n	8008c74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80a6 	beq.w	8008df8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cac:	2300      	movs	r3, #0
 8008cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cb0:	4b84      	ldr	r3, [pc, #528]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x2b4>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCC_OscConfig+0x2b6>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cca:	4a7e      	ldr	r2, [pc, #504]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ce2:	4b79      	ldr	r3, [pc, #484]	@ (8008ec8 <HAL_RCC_OscConfig+0x4bc>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d118      	bne.n	8008d20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cee:	4b76      	ldr	r3, [pc, #472]	@ (8008ec8 <HAL_RCC_OscConfig+0x4bc>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a75      	ldr	r2, [pc, #468]	@ (8008ec8 <HAL_RCC_OscConfig+0x4bc>)
 8008cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cfa:	f7f9 fe35 	bl	8002968 <HAL_GetTick>
 8008cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d00:	e008      	b.n	8008d14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d02:	f7f9 fe31 	bl	8002968 <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d901      	bls.n	8008d14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e183      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d14:	4b6c      	ldr	r3, [pc, #432]	@ (8008ec8 <HAL_RCC_OscConfig+0x4bc>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0f0      	beq.n	8008d02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d108      	bne.n	8008d3a <HAL_RCC_OscConfig+0x32e>
 8008d28:	4b66      	ldr	r3, [pc, #408]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2e:	4a65      	ldr	r2, [pc, #404]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d38:	e024      	b.n	8008d84 <HAL_RCC_OscConfig+0x378>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d110      	bne.n	8008d64 <HAL_RCC_OscConfig+0x358>
 8008d42:	4b60      	ldr	r3, [pc, #384]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d48:	4a5e      	ldr	r2, [pc, #376]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d4a:	f043 0304 	orr.w	r3, r3, #4
 8008d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d52:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d58:	4a5a      	ldr	r2, [pc, #360]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d5a:	f043 0301 	orr.w	r3, r3, #1
 8008d5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d62:	e00f      	b.n	8008d84 <HAL_RCC_OscConfig+0x378>
 8008d64:	4b57      	ldr	r3, [pc, #348]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6a:	4a56      	ldr	r2, [pc, #344]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d74:	4b53      	ldr	r3, [pc, #332]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7a:	4a52      	ldr	r2, [pc, #328]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008d7c:	f023 0304 	bic.w	r3, r3, #4
 8008d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d016      	beq.n	8008dba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8c:	f7f9 fdec 	bl	8002968 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d92:	e00a      	b.n	8008daa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d94:	f7f9 fde8 	bl	8002968 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e138      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008daa:	4b46      	ldr	r3, [pc, #280]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0ed      	beq.n	8008d94 <HAL_RCC_OscConfig+0x388>
 8008db8:	e015      	b.n	8008de6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dba:	f7f9 fdd5 	bl	8002968 <HAL_GetTick>
 8008dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dc0:	e00a      	b.n	8008dd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc2:	f7f9 fdd1 	bl	8002968 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e121      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1ed      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d105      	bne.n	8008df8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dec:	4b35      	ldr	r3, [pc, #212]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df0:	4a34      	ldr	r2, [pc, #208]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d03c      	beq.n	8008e7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01c      	beq.n	8008e46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e12:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e14:	f043 0301 	orr.w	r3, r3, #1
 8008e18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e1c:	f7f9 fda4 	bl	8002968 <HAL_GetTick>
 8008e20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e22:	e008      	b.n	8008e36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e24:	f7f9 fda0 	bl	8002968 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e0f2      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e36:	4b23      	ldr	r3, [pc, #140]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0ef      	beq.n	8008e24 <HAL_RCC_OscConfig+0x418>
 8008e44:	e01b      	b.n	8008e7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e46:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e56:	f7f9 fd87 	bl	8002968 <HAL_GetTick>
 8008e5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e5e:	f7f9 fd83 	bl	8002968 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e0d5      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e70:	4b14      	ldr	r3, [pc, #80]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1ef      	bne.n	8008e5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 80c9 	beq.w	800901a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 030c 	and.w	r3, r3, #12
 8008e90:	2b0c      	cmp	r3, #12
 8008e92:	f000 8083 	beq.w	8008f9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d15e      	bne.n	8008f5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a08      	ldr	r2, [pc, #32]	@ (8008ec4 <HAL_RCC_OscConfig+0x4b8>)
 8008ea4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eaa:	f7f9 fd5d 	bl	8002968 <HAL_GetTick>
 8008eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eb0:	e00c      	b.n	8008ecc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb2:	f7f9 fd59 	bl	8002968 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d905      	bls.n	8008ecc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e0ab      	b.n	800901c <HAL_RCC_OscConfig+0x610>
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ecc:	4b55      	ldr	r3, [pc, #340]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1ec      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ed8:	4b52      	ldr	r3, [pc, #328]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	4b52      	ldr	r3, [pc, #328]	@ (8009028 <HAL_RCC_OscConfig+0x61c>)
 8008ede:	4013      	ands	r3, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6a11      	ldr	r1, [r2, #32]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ee8:	3a01      	subs	r2, #1
 8008eea:	0112      	lsls	r2, r2, #4
 8008eec:	4311      	orrs	r1, r2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ef2:	0212      	lsls	r2, r2, #8
 8008ef4:	4311      	orrs	r1, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008efa:	0852      	lsrs	r2, r2, #1
 8008efc:	3a01      	subs	r2, #1
 8008efe:	0552      	lsls	r2, r2, #21
 8008f00:	4311      	orrs	r1, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f06:	0852      	lsrs	r2, r2, #1
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	0652      	lsls	r2, r2, #25
 8008f0c:	4311      	orrs	r1, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f12:	06d2      	lsls	r2, r2, #27
 8008f14:	430a      	orrs	r2, r1
 8008f16:	4943      	ldr	r1, [pc, #268]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f1c:	4b41      	ldr	r3, [pc, #260]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a40      	ldr	r2, [pc, #256]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f28:	4b3e      	ldr	r3, [pc, #248]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f34:	f7f9 fd18 	bl	8002968 <HAL_GetTick>
 8008f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f3c:	f7f9 fd14 	bl	8002968 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e066      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f4e:	4b35      	ldr	r3, [pc, #212]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0f0      	beq.n	8008f3c <HAL_RCC_OscConfig+0x530>
 8008f5a:	e05e      	b.n	800901a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f5c:	4b31      	ldr	r3, [pc, #196]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a30      	ldr	r2, [pc, #192]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f68:	f7f9 fcfe 	bl	8002968 <HAL_GetTick>
 8008f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f6e:	e008      	b.n	8008f82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f70:	f7f9 fcfa 	bl	8002968 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e04c      	b.n	800901c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f82:	4b28      	ldr	r3, [pc, #160]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1f0      	bne.n	8008f70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008f8e:	4b25      	ldr	r3, [pc, #148]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	4924      	ldr	r1, [pc, #144]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008f94:	4b25      	ldr	r3, [pc, #148]	@ (800902c <HAL_RCC_OscConfig+0x620>)
 8008f96:	4013      	ands	r3, r2
 8008f98:	60cb      	str	r3, [r1, #12]
 8008f9a:	e03e      	b.n	800901a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e039      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8009024 <HAL_RCC_OscConfig+0x618>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f003 0203 	and.w	r2, r3, #3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d12c      	bne.n	8009016 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d123      	bne.n	8009016 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d11b      	bne.n	8009016 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d113      	bne.n	8009016 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d109      	bne.n	8009016 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	3b01      	subs	r3, #1
 8009010:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d001      	beq.n	800901a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e000      	b.n	800901c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	40021000 	.word	0x40021000
 8009028:	019f800c 	.word	0x019f800c
 800902c:	feeefffc 	.word	0xfeeefffc

08009030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e11e      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009048:	4b91      	ldr	r3, [pc, #580]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d910      	bls.n	8009078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009056:	4b8e      	ldr	r3, [pc, #568]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f023 020f 	bic.w	r2, r3, #15
 800905e:	498c      	ldr	r1, [pc, #560]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	4313      	orrs	r3, r2
 8009064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009066:	4b8a      	ldr	r3, [pc, #552]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d001      	beq.n	8009078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e106      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d073      	beq.n	800916c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2b03      	cmp	r3, #3
 800908a:	d129      	bne.n	80090e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800908c:	4b81      	ldr	r3, [pc, #516]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0f4      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800909c:	f000 f99e 	bl	80093dc <RCC_GetSysClockFreqFromPLLSource>
 80090a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4a7c      	ldr	r2, [pc, #496]	@ (8009298 <HAL_RCC_ClockConfig+0x268>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d93f      	bls.n	800912a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090aa:	4b7a      	ldr	r3, [pc, #488]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d033      	beq.n	800912a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12f      	bne.n	800912a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090ca:	4b72      	ldr	r3, [pc, #456]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090d2:	4a70      	ldr	r2, [pc, #448]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80090da:	2380      	movs	r3, #128	@ 0x80
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e024      	b.n	800912a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090e8:	4b6a      	ldr	r3, [pc, #424]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0c6      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090f8:	4b66      	ldr	r3, [pc, #408]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0be      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009108:	f000 f8ce 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 800910c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	4a61      	ldr	r2, [pc, #388]	@ (8009298 <HAL_RCC_ClockConfig+0x268>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d909      	bls.n	800912a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009116:	4b5f      	ldr	r3, [pc, #380]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800911e:	4a5d      	ldr	r2, [pc, #372]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009124:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009126:	2380      	movs	r3, #128	@ 0x80
 8009128:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800912a:	4b5a      	ldr	r3, [pc, #360]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f023 0203 	bic.w	r2, r3, #3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4957      	ldr	r1, [pc, #348]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009138:	4313      	orrs	r3, r2
 800913a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800913c:	f7f9 fc14 	bl	8002968 <HAL_GetTick>
 8009140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009142:	e00a      	b.n	800915a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009144:	f7f9 fc10 	bl	8002968 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009152:	4293      	cmp	r3, r2
 8009154:	d901      	bls.n	800915a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e095      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915a:	4b4e      	ldr	r3, [pc, #312]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 020c 	and.w	r2, r3, #12
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	429a      	cmp	r2, r3
 800916a:	d1eb      	bne.n	8009144 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d023      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009184:	4b43      	ldr	r3, [pc, #268]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	4a42      	ldr	r2, [pc, #264]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800918a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800918e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800919c:	4b3d      	ldr	r3, [pc, #244]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091a4:	4a3b      	ldr	r2, [pc, #236]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80091a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ac:	4b39      	ldr	r3, [pc, #228]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	4936      	ldr	r1, [pc, #216]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	608b      	str	r3, [r1, #8]
 80091be:	e008      	b.n	80091d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b80      	cmp	r3, #128	@ 0x80
 80091c4:	d105      	bne.n	80091d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80091c6:	4b33      	ldr	r3, [pc, #204]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4a32      	ldr	r2, [pc, #200]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 80091cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 030f 	and.w	r3, r3, #15
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d21d      	bcs.n	800921c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f023 020f 	bic.w	r2, r3, #15
 80091e8:	4929      	ldr	r1, [pc, #164]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80091f0:	f7f9 fbba 	bl	8002968 <HAL_GetTick>
 80091f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f6:	e00a      	b.n	800920e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f8:	f7f9 fbb6 	bl	8002968 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009206:	4293      	cmp	r3, r2
 8009208:	d901      	bls.n	800920e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e03b      	b.n	8009286 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800920e:	4b20      	ldr	r3, [pc, #128]	@ (8009290 <HAL_RCC_ClockConfig+0x260>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d1ed      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d008      	beq.n	800923a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009228:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	4917      	ldr	r1, [pc, #92]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009236:	4313      	orrs	r3, r2
 8009238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009246:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	490f      	ldr	r1, [pc, #60]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009256:	4313      	orrs	r3, r2
 8009258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800925a:	f000 f825 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 800925e:	4602      	mov	r2, r0
 8009260:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <HAL_RCC_ClockConfig+0x264>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	490c      	ldr	r1, [pc, #48]	@ (800929c <HAL_RCC_ClockConfig+0x26c>)
 800926c:	5ccb      	ldrb	r3, [r1, r3]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	fa22 f303 	lsr.w	r3, r2, r3
 8009276:	4a0a      	ldr	r2, [pc, #40]	@ (80092a0 <HAL_RCC_ClockConfig+0x270>)
 8009278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800927a:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <HAL_RCC_ClockConfig+0x274>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7f9 fb26 	bl	80028d0 <HAL_InitTick>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40022000 	.word	0x40022000
 8009294:	40021000 	.word	0x40021000
 8009298:	04c4b400 	.word	0x04c4b400
 800929c:	0800e6e8 	.word	0x0800e6e8
 80092a0:	20000000 	.word	0x20000000
 80092a4:	20000004 	.word	0x20000004

080092a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 030c 	and.w	r3, r3, #12
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d102      	bne.n	80092c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80092ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xbc>)
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	e047      	b.n	8009350 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80092c0:	4b27      	ldr	r3, [pc, #156]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 030c 	and.w	r3, r3, #12
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d102      	bne.n	80092d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092cc:	4b26      	ldr	r3, [pc, #152]	@ (8009368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	e03e      	b.n	8009350 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80092d2:	4b23      	ldr	r3, [pc, #140]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 030c 	and.w	r3, r3, #12
 80092da:	2b0c      	cmp	r3, #12
 80092dc:	d136      	bne.n	800934c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092de:	4b20      	ldr	r3, [pc, #128]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	091b      	lsrs	r3, r3, #4
 80092ee:	f003 030f 	and.w	r3, r3, #15
 80092f2:	3301      	adds	r3, #1
 80092f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d10c      	bne.n	8009316 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	4a16      	ldr	r2, [pc, #88]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009306:	68d2      	ldr	r2, [r2, #12]
 8009308:	0a12      	lsrs	r2, r2, #8
 800930a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800930e:	fb02 f303 	mul.w	r3, r2, r3
 8009312:	617b      	str	r3, [r7, #20]
      break;
 8009314:	e00c      	b.n	8009330 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009316:	4a13      	ldr	r2, [pc, #76]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	fbb2 f3f3 	udiv	r3, r2, r3
 800931e:	4a10      	ldr	r2, [pc, #64]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009320:	68d2      	ldr	r2, [r2, #12]
 8009322:	0a12      	lsrs	r2, r2, #8
 8009324:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	617b      	str	r3, [r7, #20]
      break;
 800932e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009330:	4b0b      	ldr	r3, [pc, #44]	@ (8009360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	0e5b      	lsrs	r3, r3, #25
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	3301      	adds	r3, #1
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	fbb2 f3f3 	udiv	r3, r2, r3
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	e001      	b.n	8009350 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009350:	693b      	ldr	r3, [r7, #16]
}
 8009352:	4618      	mov	r0, r3
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40021000 	.word	0x40021000
 8009364:	00f42400 	.word	0x00f42400
 8009368:	007a1200 	.word	0x007a1200

0800936c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009370:	4b03      	ldr	r3, [pc, #12]	@ (8009380 <HAL_RCC_GetHCLKFreq+0x14>)
 8009372:	681b      	ldr	r3, [r3, #0]
}
 8009374:	4618      	mov	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20000000 	.word	0x20000000

08009384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009388:	f7ff fff0 	bl	800936c <HAL_RCC_GetHCLKFreq>
 800938c:	4602      	mov	r2, r0
 800938e:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	0a1b      	lsrs	r3, r3, #8
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	4904      	ldr	r1, [pc, #16]	@ (80093ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800939a:	5ccb      	ldrb	r3, [r1, r3]
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40021000 	.word	0x40021000
 80093ac:	0800e6f8 	.word	0x0800e6f8

080093b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80093b4:	f7ff ffda 	bl	800936c <HAL_RCC_GetHCLKFreq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b06      	ldr	r3, [pc, #24]	@ (80093d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	0adb      	lsrs	r3, r3, #11
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	4904      	ldr	r1, [pc, #16]	@ (80093d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093c6:	5ccb      	ldrb	r3, [r1, r3]
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	40021000 	.word	0x40021000
 80093d8:	0800e6f8 	.word	0x0800e6f8

080093dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80093e2:	4b1e      	ldr	r3, [pc, #120]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093ec:	4b1b      	ldr	r3, [pc, #108]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	091b      	lsrs	r3, r3, #4
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d10c      	bne.n	800941a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009400:	4a17      	ldr	r2, [pc, #92]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	fbb2 f3f3 	udiv	r3, r2, r3
 8009408:	4a14      	ldr	r2, [pc, #80]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800940a:	68d2      	ldr	r2, [r2, #12]
 800940c:	0a12      	lsrs	r2, r2, #8
 800940e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	617b      	str	r3, [r7, #20]
    break;
 8009418:	e00c      	b.n	8009434 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800941a:	4a12      	ldr	r2, [pc, #72]	@ (8009464 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	4a0e      	ldr	r2, [pc, #56]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009424:	68d2      	ldr	r2, [r2, #12]
 8009426:	0a12      	lsrs	r2, r2, #8
 8009428:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
    break;
 8009432:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009434:	4b09      	ldr	r3, [pc, #36]	@ (800945c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	0e5b      	lsrs	r3, r3, #25
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	3301      	adds	r3, #1
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	fbb2 f3f3 	udiv	r3, r2, r3
 800944c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800944e:	687b      	ldr	r3, [r7, #4]
}
 8009450:	4618      	mov	r0, r3
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	40021000 	.word	0x40021000
 8009460:	007a1200 	.word	0x007a1200
 8009464:	00f42400 	.word	0x00f42400

08009468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009470:	2300      	movs	r3, #0
 8009472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009474:	2300      	movs	r3, #0
 8009476:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8098 	beq.w	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009486:	2300      	movs	r3, #0
 8009488:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800948a:	4b43      	ldr	r3, [pc, #268]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10d      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009496:	4b40      	ldr	r3, [pc, #256]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949a:	4a3f      	ldr	r2, [pc, #252]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800949c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094aa:	60bb      	str	r3, [r7, #8]
 80094ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ae:	2301      	movs	r3, #1
 80094b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094b2:	4b3a      	ldr	r3, [pc, #232]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a39      	ldr	r2, [pc, #228]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094be:	f7f9 fa53 	bl	8002968 <HAL_GetTick>
 80094c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094c4:	e009      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c6:	f7f9 fa4f 	bl	8002968 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d902      	bls.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	74fb      	strb	r3, [r7, #19]
        break;
 80094d8:	e005      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094da:	4b30      	ldr	r3, [pc, #192]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0ef      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80094e6:	7cfb      	ldrb	r3, [r7, #19]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d159      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80094ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d01e      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	429a      	cmp	r2, r3
 8009506:	d019      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009508:	4b23      	ldr	r3, [pc, #140]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800950a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800950e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009514:	4b20      	ldr	r3, [pc, #128]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951a:	4a1f      	ldr	r2, [pc, #124]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800951c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009524:	4b1c      	ldr	r3, [pc, #112]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952a:	4a1b      	ldr	r2, [pc, #108]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800952c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009534:	4a18      	ldr	r2, [pc, #96]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d016      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009546:	f7f9 fa0f 	bl	8002968 <HAL_GetTick>
 800954a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800954c:	e00b      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800954e:	f7f9 fa0b 	bl	8002968 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800955c:	4293      	cmp	r3, r2
 800955e:	d902      	bls.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	74fb      	strb	r3, [r7, #19]
            break;
 8009564:	e006      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009566:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ec      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009574:	7cfb      	ldrb	r3, [r7, #19]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800957a:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800957c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009588:	4903      	ldr	r1, [pc, #12]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800958a:	4313      	orrs	r3, r2
 800958c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009590:	e008      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009592:	7cfb      	ldrb	r3, [r7, #19]
 8009594:	74bb      	strb	r3, [r7, #18]
 8009596:	e005      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009598:	40021000 	.word	0x40021000
 800959c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a0:	7cfb      	ldrb	r3, [r7, #19]
 80095a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095a4:	7c7b      	ldrb	r3, [r7, #17]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d105      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095aa:	4ba7      	ldr	r3, [pc, #668]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ae:	4aa6      	ldr	r2, [pc, #664]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095c2:	4ba1      	ldr	r3, [pc, #644]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c8:	f023 0203 	bic.w	r2, r3, #3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	499d      	ldr	r1, [pc, #628]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095e4:	4b98      	ldr	r3, [pc, #608]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ea:	f023 020c 	bic.w	r2, r3, #12
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	4995      	ldr	r1, [pc, #596]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009606:	4b90      	ldr	r3, [pc, #576]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	498c      	ldr	r1, [pc, #560]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	4313      	orrs	r3, r2
 8009618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0308 	and.w	r3, r3, #8
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00a      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009628:	4b87      	ldr	r3, [pc, #540]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	4984      	ldr	r1, [pc, #528]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0310 	and.w	r3, r3, #16
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800964a:	4b7f      	ldr	r3, [pc, #508]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	497b      	ldr	r1, [pc, #492]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965a:	4313      	orrs	r3, r2
 800965c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800966c:	4b76      	ldr	r3, [pc, #472]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	4973      	ldr	r1, [pc, #460]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800968e:	4b6e      	ldr	r3, [pc, #440]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009694:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	496a      	ldr	r1, [pc, #424]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096b0:	4b65      	ldr	r3, [pc, #404]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	4962      	ldr	r1, [pc, #392]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096d2:	4b5d      	ldr	r3, [pc, #372]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e0:	4959      	ldr	r1, [pc, #356]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096f4:	4b54      	ldr	r3, [pc, #336]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096fa:	f023 0203 	bic.w	r2, r3, #3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	4951      	ldr	r1, [pc, #324]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009704:	4313      	orrs	r3, r2
 8009706:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009716:	4b4c      	ldr	r3, [pc, #304]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800971c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	4948      	ldr	r1, [pc, #288]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009726:	4313      	orrs	r3, r2
 8009728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009734:	2b00      	cmp	r3, #0
 8009736:	d015      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009738:	4b43      	ldr	r3, [pc, #268]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009746:	4940      	ldr	r1, [pc, #256]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009756:	d105      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009758:	4b3b      	ldr	r3, [pc, #236]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a3a      	ldr	r2, [pc, #232]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009762:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800976c:	2b00      	cmp	r3, #0
 800976e:	d015      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009770:	4b35      	ldr	r3, [pc, #212]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009776:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800977e:	4932      	ldr	r1, [pc, #200]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978e:	d105      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009790:	4b2d      	ldr	r3, [pc, #180]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	4a2c      	ldr	r2, [pc, #176]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800979a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d015      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097a8:	4b27      	ldr	r3, [pc, #156]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b6:	4924      	ldr	r1, [pc, #144]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097c6:	d105      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d015      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097e0:	4b19      	ldr	r3, [pc, #100]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ee:	4916      	ldr	r1, [pc, #88]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097fe:	d105      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009800:	4b11      	ldr	r3, [pc, #68]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	4a10      	ldr	r2, [pc, #64]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800980a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d019      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009818:	4b0b      	ldr	r3, [pc, #44]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800981e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009826:	4908      	ldr	r1, [pc, #32]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009828:	4313      	orrs	r3, r2
 800982a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009836:	d109      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009838:	4b03      	ldr	r3, [pc, #12]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	4a02      	ldr	r2, [pc, #8]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009842:	60d3      	str	r3, [r2, #12]
 8009844:	e002      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009846:	bf00      	nop
 8009848:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d015      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009858:	4b29      	ldr	r3, [pc, #164]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800985a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009866:	4926      	ldr	r1, [pc, #152]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009868:	4313      	orrs	r3, r2
 800986a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009876:	d105      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009878:	4b21      	ldr	r3, [pc, #132]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	4a20      	ldr	r2, [pc, #128]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800987e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009882:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d015      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009890:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009896:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800989e:	4918      	ldr	r1, [pc, #96]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ae:	d105      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098b0:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	4a12      	ldr	r2, [pc, #72]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d015      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80098c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d6:	490a      	ldr	r1, [pc, #40]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098e6:	d105      	bne.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098e8:	4b05      	ldr	r3, [pc, #20]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	4a04      	ldr	r2, [pc, #16]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80098f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	40021000 	.word	0x40021000

08009904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e049      	b.n	80099aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7f8 fd30 	bl	8002390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f000 fd1e 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d001      	beq.n	80099cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e04c      	b.n	8009a66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a26      	ldr	r2, [pc, #152]	@ (8009a74 <HAL_TIM_Base_Start+0xc0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d022      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099e6:	d01d      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a22      	ldr	r2, [pc, #136]	@ (8009a78 <HAL_TIM_Base_Start+0xc4>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d018      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a21      	ldr	r2, [pc, #132]	@ (8009a7c <HAL_TIM_Base_Start+0xc8>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d013      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1f      	ldr	r2, [pc, #124]	@ (8009a80 <HAL_TIM_Base_Start+0xcc>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00e      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009a84 <HAL_TIM_Base_Start+0xd0>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1c      	ldr	r2, [pc, #112]	@ (8009a88 <HAL_TIM_Base_Start+0xd4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <HAL_TIM_Base_Start+0x70>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a8c <HAL_TIM_Base_Start+0xd8>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d115      	bne.n	8009a50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	4b19      	ldr	r3, [pc, #100]	@ (8009a90 <HAL_TIM_Base_Start+0xdc>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b06      	cmp	r3, #6
 8009a34:	d015      	beq.n	8009a62 <HAL_TIM_Base_Start+0xae>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a3c:	d011      	beq.n	8009a62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0201 	orr.w	r2, r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4e:	e008      	b.n	8009a62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	e000      	b.n	8009a64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	40000c00 	.word	0x40000c00
 8009a84:	40013400 	.word	0x40013400
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40015000 	.word	0x40015000
 8009a90:	00010007 	.word	0x00010007

08009a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d001      	beq.n	8009aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e054      	b.n	8009b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a26      	ldr	r2, [pc, #152]	@ (8009b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d022      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad6:	d01d      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a22      	ldr	r2, [pc, #136]	@ (8009b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d018      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a21      	ldr	r2, [pc, #132]	@ (8009b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d013      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00e      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1e      	ldr	r2, [pc, #120]	@ (8009b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d009      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1c      	ldr	r2, [pc, #112]	@ (8009b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d004      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x80>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d115      	bne.n	8009b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	4b19      	ldr	r3, [pc, #100]	@ (8009b80 <HAL_TIM_Base_Start_IT+0xec>)
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b06      	cmp	r3, #6
 8009b24:	d015      	beq.n	8009b52 <HAL_TIM_Base_Start_IT+0xbe>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b2c:	d011      	beq.n	8009b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3e:	e008      	b.n	8009b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e000      	b.n	8009b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40012c00 	.word	0x40012c00
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40000c00 	.word	0x40000c00
 8009b74:	40013400 	.word	0x40013400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40015000 	.word	0x40015000
 8009b80:	00010007 	.word	0x00010007

08009b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e049      	b.n	8009c2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f8 fbd0 	bl	8002350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f000 fbde 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <HAL_TIM_PWM_Start+0x24>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	bf14      	ite	ne
 8009c50:	2301      	movne	r3, #1
 8009c52:	2300      	moveq	r3, #0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	e03c      	b.n	8009cd2 <HAL_TIM_PWM_Start+0x9e>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d109      	bne.n	8009c72 <HAL_TIM_PWM_Start+0x3e>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	bf14      	ite	ne
 8009c6a:	2301      	movne	r3, #1
 8009c6c:	2300      	moveq	r3, #0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	e02f      	b.n	8009cd2 <HAL_TIM_PWM_Start+0x9e>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d109      	bne.n	8009c8c <HAL_TIM_PWM_Start+0x58>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	bf14      	ite	ne
 8009c84:	2301      	movne	r3, #1
 8009c86:	2300      	moveq	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	e022      	b.n	8009cd2 <HAL_TIM_PWM_Start+0x9e>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b0c      	cmp	r3, #12
 8009c90:	d109      	bne.n	8009ca6 <HAL_TIM_PWM_Start+0x72>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	bf14      	ite	ne
 8009c9e:	2301      	movne	r3, #1
 8009ca0:	2300      	moveq	r3, #0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	e015      	b.n	8009cd2 <HAL_TIM_PWM_Start+0x9e>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d109      	bne.n	8009cc0 <HAL_TIM_PWM_Start+0x8c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	bf14      	ite	ne
 8009cb8:	2301      	movne	r3, #1
 8009cba:	2300      	moveq	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	e008      	b.n	8009cd2 <HAL_TIM_PWM_Start+0x9e>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e0a6      	b.n	8009e28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <HAL_TIM_PWM_Start+0xb6>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ce8:	e023      	b.n	8009d32 <HAL_TIM_PWM_Start+0xfe>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d104      	bne.n	8009cfa <HAL_TIM_PWM_Start+0xc6>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cf8:	e01b      	b.n	8009d32 <HAL_TIM_PWM_Start+0xfe>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d104      	bne.n	8009d0a <HAL_TIM_PWM_Start+0xd6>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d08:	e013      	b.n	8009d32 <HAL_TIM_PWM_Start+0xfe>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b0c      	cmp	r3, #12
 8009d0e:	d104      	bne.n	8009d1a <HAL_TIM_PWM_Start+0xe6>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d18:	e00b      	b.n	8009d32 <HAL_TIM_PWM_Start+0xfe>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b10      	cmp	r3, #16
 8009d1e:	d104      	bne.n	8009d2a <HAL_TIM_PWM_Start+0xf6>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d28:	e003      	b.n	8009d32 <HAL_TIM_PWM_Start+0xfe>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2201      	movs	r2, #1
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 ff00 	bl	800ab40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a3a      	ldr	r2, [pc, #232]	@ (8009e30 <HAL_TIM_PWM_Start+0x1fc>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d018      	beq.n	8009d7c <HAL_TIM_PWM_Start+0x148>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a39      	ldr	r2, [pc, #228]	@ (8009e34 <HAL_TIM_PWM_Start+0x200>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <HAL_TIM_PWM_Start+0x148>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a37      	ldr	r2, [pc, #220]	@ (8009e38 <HAL_TIM_PWM_Start+0x204>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00e      	beq.n	8009d7c <HAL_TIM_PWM_Start+0x148>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a36      	ldr	r2, [pc, #216]	@ (8009e3c <HAL_TIM_PWM_Start+0x208>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_TIM_PWM_Start+0x148>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a34      	ldr	r2, [pc, #208]	@ (8009e40 <HAL_TIM_PWM_Start+0x20c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <HAL_TIM_PWM_Start+0x148>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a33      	ldr	r2, [pc, #204]	@ (8009e44 <HAL_TIM_PWM_Start+0x210>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIM_PWM_Start+0x14c>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <HAL_TIM_PWM_Start+0x14e>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a25      	ldr	r2, [pc, #148]	@ (8009e30 <HAL_TIM_PWM_Start+0x1fc>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d022      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da8:	d01d      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a26      	ldr	r2, [pc, #152]	@ (8009e48 <HAL_TIM_PWM_Start+0x214>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d018      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a24      	ldr	r2, [pc, #144]	@ (8009e4c <HAL_TIM_PWM_Start+0x218>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d013      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a23      	ldr	r2, [pc, #140]	@ (8009e50 <HAL_TIM_PWM_Start+0x21c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d00e      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a19      	ldr	r2, [pc, #100]	@ (8009e34 <HAL_TIM_PWM_Start+0x200>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d009      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a18      	ldr	r2, [pc, #96]	@ (8009e38 <HAL_TIM_PWM_Start+0x204>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d004      	beq.n	8009de6 <HAL_TIM_PWM_Start+0x1b2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a18      	ldr	r2, [pc, #96]	@ (8009e44 <HAL_TIM_PWM_Start+0x210>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d115      	bne.n	8009e12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	4b19      	ldr	r3, [pc, #100]	@ (8009e54 <HAL_TIM_PWM_Start+0x220>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d015      	beq.n	8009e24 <HAL_TIM_PWM_Start+0x1f0>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dfe:	d011      	beq.n	8009e24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f042 0201 	orr.w	r2, r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e10:	e008      	b.n	8009e24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	e000      	b.n	8009e26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	40012c00 	.word	0x40012c00
 8009e34:	40013400 	.word	0x40013400
 8009e38:	40014000 	.word	0x40014000
 8009e3c:	40014400 	.word	0x40014400
 8009e40:	40014800 	.word	0x40014800
 8009e44:	40015000 	.word	0x40015000
 8009e48:	40000400 	.word	0x40000400
 8009e4c:	40000800 	.word	0x40000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	00010007 	.word	0x00010007

08009e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d020      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01b      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0202 	mvn.w	r2, #2
 8009e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f003 0303 	and.w	r3, r3, #3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa50 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009ea8:	e005      	b.n	8009eb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa42 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fa53 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d020      	beq.n	8009f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01b      	beq.n	8009f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f06f 0204 	mvn.w	r2, #4
 8009ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa2a 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009ef4:	e005      	b.n	8009f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa1c 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fa2d 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d020      	beq.n	8009f54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01b      	beq.n	8009f54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f06f 0208 	mvn.w	r2, #8
 8009f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2204      	movs	r2, #4
 8009f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa04 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009f40:	e005      	b.n	8009f4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f9f6 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fa07 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f003 0310 	and.w	r3, r3, #16
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d020      	beq.n	8009fa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f003 0310 	and.w	r3, r3, #16
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01b      	beq.n	8009fa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f06f 0210 	mvn.w	r2, #16
 8009f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2208      	movs	r2, #8
 8009f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9de 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009f8c:	e005      	b.n	8009f9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f9d0 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f9e1 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00c      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0201 	mvn.w	r2, #1
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f9ae 	bl	800a320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d104      	bne.n	8009fd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00c      	beq.n	8009ff2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 ff01 	bl	800adf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fef9 	bl	800ae08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00c      	beq.n	800a03a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f99b 	bl	800a370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d007      	beq.n	800a05e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f06f 0220 	mvn.w	r2, #32
 800a056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fec1 	bl	800ade0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00c      	beq.n	800a082 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d007      	beq.n	800a082 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fecd 	bl	800ae1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00c      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fec5 	bl	800ae30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00c      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d007      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 febd 	bl	800ae44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00c      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a0e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 feb5 	bl	800ae58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a112:	2302      	movs	r3, #2
 800a114:	e0ff      	b.n	800a316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b14      	cmp	r3, #20
 800a122:	f200 80f0 	bhi.w	800a306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a126:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a181 	.word	0x0800a181
 800a130:	0800a307 	.word	0x0800a307
 800a134:	0800a307 	.word	0x0800a307
 800a138:	0800a307 	.word	0x0800a307
 800a13c:	0800a1c1 	.word	0x0800a1c1
 800a140:	0800a307 	.word	0x0800a307
 800a144:	0800a307 	.word	0x0800a307
 800a148:	0800a307 	.word	0x0800a307
 800a14c:	0800a203 	.word	0x0800a203
 800a150:	0800a307 	.word	0x0800a307
 800a154:	0800a307 	.word	0x0800a307
 800a158:	0800a307 	.word	0x0800a307
 800a15c:	0800a243 	.word	0x0800a243
 800a160:	0800a307 	.word	0x0800a307
 800a164:	0800a307 	.word	0x0800a307
 800a168:	0800a307 	.word	0x0800a307
 800a16c:	0800a285 	.word	0x0800a285
 800a170:	0800a307 	.word	0x0800a307
 800a174:	0800a307 	.word	0x0800a307
 800a178:	0800a307 	.word	0x0800a307
 800a17c:	0800a2c5 	.word	0x0800a2c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f9b0 	bl	800a4ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0208 	orr.w	r2, r2, #8
 800a19a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699a      	ldr	r2, [r3, #24]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0204 	bic.w	r2, r2, #4
 800a1aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6999      	ldr	r1, [r3, #24]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	619a      	str	r2, [r3, #24]
      break;
 800a1be:	e0a5      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fa2a 	bl	800a620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	699a      	ldr	r2, [r3, #24]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699a      	ldr	r2, [r3, #24]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6999      	ldr	r1, [r3, #24]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	021a      	lsls	r2, r3, #8
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	619a      	str	r2, [r3, #24]
      break;
 800a200:	e084      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fa9d 	bl	800a748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0208 	orr.w	r2, r2, #8
 800a21c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69da      	ldr	r2, [r3, #28]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0204 	bic.w	r2, r2, #4
 800a22c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69d9      	ldr	r1, [r3, #28]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	61da      	str	r2, [r3, #28]
      break;
 800a240:	e064      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fb0f 	bl	800a86c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a25c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a26c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69d9      	ldr	r1, [r3, #28]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	021a      	lsls	r2, r3, #8
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	61da      	str	r2, [r3, #28]
      break;
 800a282:	e043      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fb82 	bl	800a994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0208 	orr.w	r2, r2, #8
 800a29e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 0204 	bic.w	r2, r2, #4
 800a2ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2c2:	e023      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68b9      	ldr	r1, [r7, #8]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 fbcc 	bl	800aa68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	021a      	lsls	r2, r3, #8
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a304:	e002      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	75fb      	strb	r3, [r7, #23]
      break;
 800a30a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a314:	7dfb      	ldrb	r3, [r7, #23]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop

0800a320 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a4c      	ldr	r2, [pc, #304]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d017      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a2:	d013      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a49      	ldr	r2, [pc, #292]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00f      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a48      	ldr	r2, [pc, #288]	@ (800a4d0 <TIM_Base_SetConfig+0x14c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00b      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a47      	ldr	r2, [pc, #284]	@ (800a4d4 <TIM_Base_SetConfig+0x150>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d007      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a46      	ldr	r2, [pc, #280]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a45      	ldr	r2, [pc, #276]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a39      	ldr	r2, [pc, #228]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d023      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ec:	d01f      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a36      	ldr	r2, [pc, #216]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d01b      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a35      	ldr	r2, [pc, #212]	@ (800a4d0 <TIM_Base_SetConfig+0x14c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d017      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a34      	ldr	r2, [pc, #208]	@ (800a4d4 <TIM_Base_SetConfig+0x150>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d013      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a33      	ldr	r2, [pc, #204]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00f      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a33      	ldr	r2, [pc, #204]	@ (800a4e0 <TIM_Base_SetConfig+0x15c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00b      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a32      	ldr	r2, [pc, #200]	@ (800a4e4 <TIM_Base_SetConfig+0x160>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d007      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a31      	ldr	r2, [pc, #196]	@ (800a4e8 <TIM_Base_SetConfig+0x164>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d003      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2c      	ldr	r2, [pc, #176]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d108      	bne.n	800a440 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a18      	ldr	r2, [pc, #96]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d013      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d00f      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e0 <TIM_Base_SetConfig+0x15c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00b      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a19      	ldr	r2, [pc, #100]	@ (800a4e4 <TIM_Base_SetConfig+0x160>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d007      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a18      	ldr	r2, [pc, #96]	@ (800a4e8 <TIM_Base_SetConfig+0x164>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d003      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a13      	ldr	r2, [pc, #76]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d103      	bne.n	800a49c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d105      	bne.n	800a4ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	611a      	str	r2, [r3, #16]
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40012c00 	.word	0x40012c00
 800a4cc:	40000400 	.word	0x40000400
 800a4d0:	40000800 	.word	0x40000800
 800a4d4:	40000c00 	.word	0x40000c00
 800a4d8:	40013400 	.word	0x40013400
 800a4dc:	40015000 	.word	0x40015000
 800a4e0:	40014000 	.word	0x40014000
 800a4e4:	40014400 	.word	0x40014400
 800a4e8:	40014800 	.word	0x40014800

0800a4ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f023 0201 	bic.w	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a51a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f023 0302 	bic.w	r3, r3, #2
 800a538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a30      	ldr	r2, [pc, #192]	@ (800a608 <TIM_OC1_SetConfig+0x11c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d013      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a2f      	ldr	r2, [pc, #188]	@ (800a60c <TIM_OC1_SetConfig+0x120>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d00f      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2e      	ldr	r2, [pc, #184]	@ (800a610 <TIM_OC1_SetConfig+0x124>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00b      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a2d      	ldr	r2, [pc, #180]	@ (800a614 <TIM_OC1_SetConfig+0x128>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d007      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a2c      	ldr	r2, [pc, #176]	@ (800a618 <TIM_OC1_SetConfig+0x12c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d003      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a2b      	ldr	r2, [pc, #172]	@ (800a61c <TIM_OC1_SetConfig+0x130>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d10c      	bne.n	800a58e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f023 0308 	bic.w	r3, r3, #8
 800a57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f023 0304 	bic.w	r3, r3, #4
 800a58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1d      	ldr	r2, [pc, #116]	@ (800a608 <TIM_OC1_SetConfig+0x11c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d013      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1c      	ldr	r2, [pc, #112]	@ (800a60c <TIM_OC1_SetConfig+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a610 <TIM_OC1_SetConfig+0x124>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a614 <TIM_OC1_SetConfig+0x128>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a19      	ldr	r2, [pc, #100]	@ (800a618 <TIM_OC1_SetConfig+0x12c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a18      	ldr	r2, [pc, #96]	@ (800a61c <TIM_OC1_SetConfig+0x130>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d111      	bne.n	800a5e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	621a      	str	r2, [r3, #32]
}
 800a5fc:	bf00      	nop
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	40012c00 	.word	0x40012c00
 800a60c:	40013400 	.word	0x40013400
 800a610:	40014000 	.word	0x40014000
 800a614:	40014400 	.word	0x40014400
 800a618:	40014800 	.word	0x40014800
 800a61c:	40015000 	.word	0x40015000

0800a620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	f023 0210 	bic.w	r2, r3, #16
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a64e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0320 	bic.w	r3, r3, #32
 800a66e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	@ (800a730 <TIM_OC2_SetConfig+0x110>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d007      	beq.n	800a694 <TIM_OC2_SetConfig+0x74>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a2b      	ldr	r2, [pc, #172]	@ (800a734 <TIM_OC2_SetConfig+0x114>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d003      	beq.n	800a694 <TIM_OC2_SetConfig+0x74>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a2a      	ldr	r2, [pc, #168]	@ (800a738 <TIM_OC2_SetConfig+0x118>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d10d      	bne.n	800a6b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a730 <TIM_OC2_SetConfig+0x110>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d013      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a734 <TIM_OC2_SetConfig+0x114>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00f      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <TIM_OC2_SetConfig+0x11c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00b      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a740 <TIM_OC2_SetConfig+0x120>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d007      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a744 <TIM_OC2_SetConfig+0x124>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a17      	ldr	r2, [pc, #92]	@ (800a738 <TIM_OC2_SetConfig+0x118>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d113      	bne.n	800a708 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	4313      	orrs	r3, r2
 800a706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40012c00 	.word	0x40012c00
 800a734:	40013400 	.word	0x40013400
 800a738:	40015000 	.word	0x40015000
 800a73c:	40014000 	.word	0x40014000
 800a740:	40014400 	.word	0x40014400
 800a744:	40014800 	.word	0x40014800

0800a748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0303 	bic.w	r3, r3, #3
 800a782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	021b      	lsls	r3, r3, #8
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2b      	ldr	r2, [pc, #172]	@ (800a854 <TIM_OC3_SetConfig+0x10c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d007      	beq.n	800a7ba <TIM_OC3_SetConfig+0x72>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a858 <TIM_OC3_SetConfig+0x110>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d003      	beq.n	800a7ba <TIM_OC3_SetConfig+0x72>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a29      	ldr	r2, [pc, #164]	@ (800a85c <TIM_OC3_SetConfig+0x114>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d10d      	bne.n	800a7d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800a854 <TIM_OC3_SetConfig+0x10c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d013      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a858 <TIM_OC3_SetConfig+0x110>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00f      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a860 <TIM_OC3_SetConfig+0x118>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00b      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a864 <TIM_OC3_SetConfig+0x11c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d007      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a868 <TIM_OC3_SetConfig+0x120>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d003      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a16      	ldr	r2, [pc, #88]	@ (800a85c <TIM_OC3_SetConfig+0x114>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d113      	bne.n	800a82e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a80c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	4313      	orrs	r3, r2
 800a820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	621a      	str	r2, [r3, #32]
}
 800a848:	bf00      	nop
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	40012c00 	.word	0x40012c00
 800a858:	40013400 	.word	0x40013400
 800a85c:	40015000 	.word	0x40015000
 800a860:	40014000 	.word	0x40014000
 800a864:	40014400 	.word	0x40014400
 800a868:	40014800 	.word	0x40014800

0800a86c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a89a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	031b      	lsls	r3, r3, #12
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	@ (800a97c <TIM_OC4_SetConfig+0x110>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d007      	beq.n	800a8e0 <TIM_OC4_SetConfig+0x74>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800a980 <TIM_OC4_SetConfig+0x114>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d003      	beq.n	800a8e0 <TIM_OC4_SetConfig+0x74>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a2a      	ldr	r2, [pc, #168]	@ (800a984 <TIM_OC4_SetConfig+0x118>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10d      	bne.n	800a8fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	031b      	lsls	r3, r3, #12
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <TIM_OC4_SetConfig+0x110>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d013      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a1e      	ldr	r2, [pc, #120]	@ (800a980 <TIM_OC4_SetConfig+0x114>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00f      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	@ (800a988 <TIM_OC4_SetConfig+0x11c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00b      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a1d      	ldr	r2, [pc, #116]	@ (800a98c <TIM_OC4_SetConfig+0x120>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d007      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a1c      	ldr	r2, [pc, #112]	@ (800a990 <TIM_OC4_SetConfig+0x124>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d003      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a17      	ldr	r2, [pc, #92]	@ (800a984 <TIM_OC4_SetConfig+0x118>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d113      	bne.n	800a954 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a93a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	019b      	lsls	r3, r3, #6
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	019b      	lsls	r3, r3, #6
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	621a      	str	r2, [r3, #32]
}
 800a96e:	bf00      	nop
 800a970:	371c      	adds	r7, #28
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40012c00 	.word	0x40012c00
 800a980:	40013400 	.word	0x40013400
 800a984:	40015000 	.word	0x40015000
 800a988:	40014000 	.word	0x40014000
 800a98c:	40014400 	.word	0x40014400
 800a990:	40014800 	.word	0x40014800

0800a994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a19      	ldr	r2, [pc, #100]	@ (800aa50 <TIM_OC5_SetConfig+0xbc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <TIM_OC5_SetConfig+0xc0>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00f      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a17      	ldr	r2, [pc, #92]	@ (800aa58 <TIM_OC5_SetConfig+0xc4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00b      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a16      	ldr	r2, [pc, #88]	@ (800aa5c <TIM_OC5_SetConfig+0xc8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d007      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a15      	ldr	r2, [pc, #84]	@ (800aa60 <TIM_OC5_SetConfig+0xcc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d003      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a14      	ldr	r2, [pc, #80]	@ (800aa64 <TIM_OC5_SetConfig+0xd0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d109      	bne.n	800aa2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	621a      	str	r2, [r3, #32]
}
 800aa44:	bf00      	nop
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	40012c00 	.word	0x40012c00
 800aa54:	40013400 	.word	0x40013400
 800aa58:	40014000 	.word	0x40014000
 800aa5c:	40014400 	.word	0x40014400
 800aa60:	40014800 	.word	0x40014800
 800aa64:	40015000 	.word	0x40015000

0800aa68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a1a      	ldr	r2, [pc, #104]	@ (800ab28 <TIM_OC6_SetConfig+0xc0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d013      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a19      	ldr	r2, [pc, #100]	@ (800ab2c <TIM_OC6_SetConfig+0xc4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00f      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a18      	ldr	r2, [pc, #96]	@ (800ab30 <TIM_OC6_SetConfig+0xc8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00b      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a17      	ldr	r2, [pc, #92]	@ (800ab34 <TIM_OC6_SetConfig+0xcc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d007      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a16      	ldr	r2, [pc, #88]	@ (800ab38 <TIM_OC6_SetConfig+0xd0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a15      	ldr	r2, [pc, #84]	@ (800ab3c <TIM_OC6_SetConfig+0xd4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d109      	bne.n	800ab00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	029b      	lsls	r3, r3, #10
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	621a      	str	r2, [r3, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	371c      	adds	r7, #28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40012c00 	.word	0x40012c00
 800ab2c:	40013400 	.word	0x40013400
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40014400 	.word	0x40014400
 800ab38:	40014800 	.word	0x40014800
 800ab3c:	40015000 	.word	0x40015000

0800ab40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 031f 	and.w	r3, r3, #31
 800ab52:	2201      	movs	r2, #1
 800ab54:	fa02 f303 	lsl.w	r3, r2, r3
 800ab58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a1a      	ldr	r2, [r3, #32]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	43db      	mvns	r3, r3
 800ab62:	401a      	ands	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a1a      	ldr	r2, [r3, #32]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f003 031f 	and.w	r3, r3, #31
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	fa01 f303 	lsl.w	r3, r1, r3
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	621a      	str	r2, [r3, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba0:	2302      	movs	r3, #2
 800aba2:	e074      	b.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a34      	ldr	r2, [pc, #208]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d009      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a33      	ldr	r2, [pc, #204]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d004      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a31      	ldr	r2, [pc, #196]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d108      	bne.n	800abf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abe8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800abfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a21      	ldr	r2, [pc, #132]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d022      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac24:	d01d      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1f      	ldr	r2, [pc, #124]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d018      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a1d      	ldr	r2, [pc, #116]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d013      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	@ (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00e      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a15      	ldr	r2, [pc, #84]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d009      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d004      	beq.n	800ac62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a11      	ldr	r2, [pc, #68]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d10c      	bne.n	800ac7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40012c00 	.word	0x40012c00
 800aca0:	40013400 	.word	0x40013400
 800aca4:	40015000 	.word	0x40015000
 800aca8:	40000400 	.word	0x40000400
 800acac:	40000800 	.word	0x40000800
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	40014000 	.word	0x40014000

0800acb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e078      	b.n	800adc6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	041b      	lsls	r3, r3, #16
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a1c      	ldr	r2, [pc, #112]	@ (800add4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d009      	beq.n	800ad7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1b      	ldr	r2, [pc, #108]	@ (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d004      	beq.n	800ad7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a19      	ldr	r2, [pc, #100]	@ (800addc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d11c      	bne.n	800adb4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad84:	051b      	lsls	r3, r3, #20
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	6a1b      	ldr	r3, [r3, #32]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	40012c00 	.word	0x40012c00
 800add8:	40013400 	.word	0x40013400
 800addc:	40015000 	.word	0x40015000

0800ade0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e042      	b.n	800af04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d106      	bne.n	800ae96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7f7 fb09 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2224      	movs	r2, #36	@ 0x24
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f022 0201 	bic.w	r2, r2, #1
 800aeac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d002      	beq.n	800aebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 ff06 	bl	800bcc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fc07 	bl	800b6d0 <UART_SetConfig>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e01b      	b.n	800af04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aeda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689a      	ldr	r2, [r3, #8]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aeea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0201 	orr.w	r2, r2, #1
 800aefa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 ff85 	bl	800be0c <UART_CheckIdleState>
 800af02:	4603      	mov	r3, r0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	@ 0x28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af20:	2b20      	cmp	r3, #32
 800af22:	d167      	bne.n	800aff4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <HAL_UART_Transmit_DMA+0x24>
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e060      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	88fa      	ldrh	r2, [r7, #6]
 800af3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	88fa      	ldrh	r2, [r7, #6]
 800af46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2221      	movs	r2, #33	@ 0x21
 800af56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d028      	beq.n	800afb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af66:	4a26      	ldr	r2, [pc, #152]	@ (800b000 <HAL_UART_Transmit_DMA+0xf4>)
 800af68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af6e:	4a25      	ldr	r2, [pc, #148]	@ (800b004 <HAL_UART_Transmit_DMA+0xf8>)
 800af70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af76:	4a24      	ldr	r2, [pc, #144]	@ (800b008 <HAL_UART_Transmit_DMA+0xfc>)
 800af78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7e:	2200      	movs	r2, #0
 800af80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af8a:	4619      	mov	r1, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3328      	adds	r3, #40	@ 0x28
 800af92:	461a      	mov	r2, r3
 800af94:	88fb      	ldrh	r3, [r7, #6]
 800af96:	f7fa fa7f 	bl	8005498 <HAL_DMA_Start_IT>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2210      	movs	r2, #16
 800afa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2220      	movs	r2, #32
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e020      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2240      	movs	r2, #64	@ 0x40
 800afba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3308      	adds	r3, #8
 800afc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	613b      	str	r3, [r7, #16]
   return(result);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3308      	adds	r3, #8
 800afda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afdc:	623a      	str	r2, [r7, #32]
 800afde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	69f9      	ldr	r1, [r7, #28]
 800afe2:	6a3a      	ldr	r2, [r7, #32]
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e5      	bne.n	800afbc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e000      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aff4:	2302      	movs	r3, #2
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	@ 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	0800c189 	.word	0x0800c189
 800b004:	0800c223 	.word	0x0800c223
 800b008:	0800c23f 	.word	0x0800c23f

0800b00c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b0ba      	sub	sp, #232	@ 0xe8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b036:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b03a:	4013      	ands	r3, r2
 800b03c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11b      	bne.n	800b080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b04c:	f003 0320 	and.w	r3, r3, #32
 800b050:	2b00      	cmp	r3, #0
 800b052:	d015      	beq.n	800b080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b058:	f003 0320 	and.w	r3, r3, #32
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d009      	beq.n	800b080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 8300 	beq.w	800b676 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
      }
      return;
 800b07e:	e2fa      	b.n	800b676 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8123 	beq.w	800b2d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b08a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b08e:	4b8d      	ldr	r3, [pc, #564]	@ (800b2c4 <HAL_UART_IRQHandler+0x2b8>)
 800b090:	4013      	ands	r3, r2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b09a:	4b8b      	ldr	r3, [pc, #556]	@ (800b2c8 <HAL_UART_IRQHandler+0x2bc>)
 800b09c:	4013      	ands	r3, r2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8116 	beq.w	800b2d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d011      	beq.n	800b0d4 <HAL_UART_IRQHandler+0xc8>
 800b0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ca:	f043 0201 	orr.w	r2, r3, #1
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d011      	beq.n	800b104 <HAL_UART_IRQHandler+0xf8>
 800b0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0fa:	f043 0204 	orr.w	r2, r3, #4
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d011      	beq.n	800b134 <HAL_UART_IRQHandler+0x128>
 800b110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2204      	movs	r2, #4
 800b122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b12a:	f043 0202 	orr.w	r2, r3, #2
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b138:	f003 0308 	and.w	r3, r3, #8
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d017      	beq.n	800b170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b144:	f003 0320 	and.w	r3, r3, #32
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b14c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b150:	4b5c      	ldr	r3, [pc, #368]	@ (800b2c4 <HAL_UART_IRQHandler+0x2b8>)
 800b152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2208      	movs	r2, #8
 800b15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b166:	f043 0208 	orr.w	r2, r3, #8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d012      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x196>
 800b17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00c      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b198:	f043 0220 	orr.w	r2, r3, #32
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 8266 	beq.w	800b67a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b2:	f003 0320 	and.w	r3, r3, #32
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d013      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d105      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f6:	2b40      	cmp	r3, #64	@ 0x40
 800b1f8:	d005      	beq.n	800b206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b1fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b202:	2b00      	cmp	r3, #0
 800b204:	d054      	beq.n	800b2b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 ff58 	bl	800c0bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b216:	2b40      	cmp	r3, #64	@ 0x40
 800b218:	d146      	bne.n	800b2a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b228:	e853 3f00 	ldrex	r3, [r3]
 800b22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3308      	adds	r3, #8
 800b242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b24a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b25e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1d9      	bne.n	800b21a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d017      	beq.n	800b2a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b276:	4a15      	ldr	r2, [pc, #84]	@ (800b2cc <HAL_UART_IRQHandler+0x2c0>)
 800b278:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b280:	4618      	mov	r0, r3
 800b282:	f7fa f9dd 	bl	8005640 <HAL_DMA_Abort_IT>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d019      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b29a:	4610      	mov	r0, r2
 800b29c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b29e:	e00f      	b.n	800b2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f9ff 	bl	800b6a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a6:	e00b      	b.n	800b2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f9fb 	bl	800b6a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ae:	e007      	b.n	800b2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f9f7 	bl	800b6a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b2be:	e1dc      	b.n	800b67a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c0:	bf00      	nop
    return;
 800b2c2:	e1da      	b.n	800b67a <HAL_UART_IRQHandler+0x66e>
 800b2c4:	10000001 	.word	0x10000001
 800b2c8:	04000120 	.word	0x04000120
 800b2cc:	0800c2bf 	.word	0x0800c2bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	f040 8170 	bne.w	800b5ba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2de:	f003 0310 	and.w	r3, r3, #16
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 8169 	beq.w	800b5ba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ec:	f003 0310 	and.w	r3, r3, #16
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 8162 	beq.w	800b5ba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2210      	movs	r2, #16
 800b2fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b308:	2b40      	cmp	r3, #64	@ 0x40
 800b30a:	f040 80d8 	bne.w	800b4be <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b31c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80af 	beq.w	800b484 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b32c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b330:	429a      	cmp	r2, r3
 800b332:	f080 80a7 	bcs.w	800b484 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b33c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 8087 	bne.w	800b462 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b360:	e853 3f00 	ldrex	r3, [r3]
 800b364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b36c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b37e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b382:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b38a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1da      	bne.n	800b354 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3a8:	e853 3f00 	ldrex	r3, [r3]
 800b3ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3308      	adds	r3, #8
 800b3be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3ce:	e841 2300 	strex	r3, r2, [r1]
 800b3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1e1      	bne.n	800b39e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3308      	adds	r3, #8
 800b3e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b3fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b400:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b40c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e3      	bne.n	800b3da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b42e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b430:	f023 0310 	bic.w	r3, r3, #16
 800b434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	461a      	mov	r2, r3
 800b43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b442:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b444:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e4      	bne.n	800b420 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fa f896 	bl	800558e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2202      	movs	r2, #2
 800b466:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b474:	b29b      	uxth	r3, r3
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f91b 	bl	800b6b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b482:	e0fc      	b.n	800b67e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b48a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b48e:	429a      	cmp	r2, r3
 800b490:	f040 80f5 	bne.w	800b67e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0320 	and.w	r3, r3, #32
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	f040 80eb 	bne.w	800b67e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8fe 	bl	800b6b8 <HAL_UARTEx_RxEventCallback>
      return;
 800b4bc:	e0df      	b.n	800b67e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80d1 	beq.w	800b682 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b4e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80cc 	beq.w	800b682 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	e853 3f00 	ldrex	r3, [r3]
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b50e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e4      	bne.n	800b4ea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3308      	adds	r3, #8
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	623b      	str	r3, [r7, #32]
   return(result);
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b536:	f023 0301 	bic.w	r3, r3, #1
 800b53a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3308      	adds	r3, #8
 800b544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b548:	633a      	str	r2, [r7, #48]	@ 0x30
 800b54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e1      	bne.n	800b520 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f023 0310 	bic.w	r3, r3, #16
 800b584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	461a      	mov	r2, r3
 800b58e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	69b9      	ldr	r1, [r7, #24]
 800b598:	69fa      	ldr	r2, [r7, #28]
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e4      	bne.n	800b570 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f880 	bl	800b6b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5b8:	e063      	b.n	800b682 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00e      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x5d8>
 800b5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 feab 	bl	800c338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5e2:	e051      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d014      	beq.n	800b61a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d105      	bne.n	800b608 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d008      	beq.n	800b61a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d03a      	beq.n	800b686 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	4798      	blx	r3
    }
    return;
 800b618:	e035      	b.n	800b686 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <HAL_UART_IRQHandler+0x62e>
 800b626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fe55 	bl	800c2e2 <UART_EndTransmit_IT>
    return;
 800b638:	e026      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d009      	beq.n	800b65a <HAL_UART_IRQHandler+0x64e>
 800b646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b64a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fe84 	bl	800c360 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b658:	e016      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d010      	beq.n	800b688 <HAL_UART_IRQHandler+0x67c>
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da0c      	bge.n	800b688 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fe6c 	bl	800c34c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b674:	e008      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
      return;
 800b676:	bf00      	nop
 800b678:	e006      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
    return;
 800b67a:	bf00      	nop
 800b67c:	e004      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
      return;
 800b67e:	bf00      	nop
 800b680:	e002      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
      return;
 800b682:	bf00      	nop
 800b684:	e000      	b.n	800b688 <HAL_UART_IRQHandler+0x67c>
    return;
 800b686:	bf00      	nop
  }
}
 800b688:	37e8      	adds	r7, #232	@ 0xe8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop

0800b690 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d4:	b08c      	sub	sp, #48	@ 0x30
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4baa      	ldr	r3, [pc, #680]	@ (800b9a8 <UART_SetConfig+0x2d8>)
 800b700:	4013      	ands	r3, r2
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b708:	430b      	orrs	r3, r1
 800b70a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a9f      	ldr	r2, [pc, #636]	@ (800b9ac <UART_SetConfig+0x2dc>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d004      	beq.n	800b73c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b738:	4313      	orrs	r3, r2
 800b73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b746:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	6812      	ldr	r2, [r2, #0]
 800b74e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b750:	430b      	orrs	r3, r1
 800b752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75a:	f023 010f 	bic.w	r1, r3, #15
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a90      	ldr	r2, [pc, #576]	@ (800b9b0 <UART_SetConfig+0x2e0>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d125      	bne.n	800b7c0 <UART_SetConfig+0xf0>
 800b774:	4b8f      	ldr	r3, [pc, #572]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d81a      	bhi.n	800b7b8 <UART_SetConfig+0xe8>
 800b782:	a201      	add	r2, pc, #4	@ (adr r2, 800b788 <UART_SetConfig+0xb8>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b799 	.word	0x0800b799
 800b78c:	0800b7a9 	.word	0x0800b7a9
 800b790:	0800b7a1 	.word	0x0800b7a1
 800b794:	0800b7b1 	.word	0x0800b7b1
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79e:	e116      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a6:	e112      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ae:	e10e      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b7b0:	2308      	movs	r3, #8
 800b7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b6:	e10a      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b7b8:	2310      	movs	r3, #16
 800b7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7be:	e106      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a7c      	ldr	r2, [pc, #496]	@ (800b9b8 <UART_SetConfig+0x2e8>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d138      	bne.n	800b83c <UART_SetConfig+0x16c>
 800b7ca:	4b7a      	ldr	r3, [pc, #488]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7d0:	f003 030c 	and.w	r3, r3, #12
 800b7d4:	2b0c      	cmp	r3, #12
 800b7d6:	d82d      	bhi.n	800b834 <UART_SetConfig+0x164>
 800b7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e0 <UART_SetConfig+0x110>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b815 	.word	0x0800b815
 800b7e4:	0800b835 	.word	0x0800b835
 800b7e8:	0800b835 	.word	0x0800b835
 800b7ec:	0800b835 	.word	0x0800b835
 800b7f0:	0800b825 	.word	0x0800b825
 800b7f4:	0800b835 	.word	0x0800b835
 800b7f8:	0800b835 	.word	0x0800b835
 800b7fc:	0800b835 	.word	0x0800b835
 800b800:	0800b81d 	.word	0x0800b81d
 800b804:	0800b835 	.word	0x0800b835
 800b808:	0800b835 	.word	0x0800b835
 800b80c:	0800b835 	.word	0x0800b835
 800b810:	0800b82d 	.word	0x0800b82d
 800b814:	2300      	movs	r3, #0
 800b816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81a:	e0d8      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b81c:	2302      	movs	r3, #2
 800b81e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b822:	e0d4      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b824:	2304      	movs	r3, #4
 800b826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b82a:	e0d0      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b82c:	2308      	movs	r3, #8
 800b82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b832:	e0cc      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b834:	2310      	movs	r3, #16
 800b836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83a:	e0c8      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a5e      	ldr	r2, [pc, #376]	@ (800b9bc <UART_SetConfig+0x2ec>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d125      	bne.n	800b892 <UART_SetConfig+0x1c2>
 800b846:	4b5b      	ldr	r3, [pc, #364]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b84c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b850:	2b30      	cmp	r3, #48	@ 0x30
 800b852:	d016      	beq.n	800b882 <UART_SetConfig+0x1b2>
 800b854:	2b30      	cmp	r3, #48	@ 0x30
 800b856:	d818      	bhi.n	800b88a <UART_SetConfig+0x1ba>
 800b858:	2b20      	cmp	r3, #32
 800b85a:	d00a      	beq.n	800b872 <UART_SetConfig+0x1a2>
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	d814      	bhi.n	800b88a <UART_SetConfig+0x1ba>
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <UART_SetConfig+0x19a>
 800b864:	2b10      	cmp	r3, #16
 800b866:	d008      	beq.n	800b87a <UART_SetConfig+0x1aa>
 800b868:	e00f      	b.n	800b88a <UART_SetConfig+0x1ba>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b870:	e0ad      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b872:	2302      	movs	r3, #2
 800b874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b878:	e0a9      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b87a:	2304      	movs	r3, #4
 800b87c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b880:	e0a5      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b882:	2308      	movs	r3, #8
 800b884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b888:	e0a1      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b88a:	2310      	movs	r3, #16
 800b88c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b890:	e09d      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a4a      	ldr	r2, [pc, #296]	@ (800b9c0 <UART_SetConfig+0x2f0>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d125      	bne.n	800b8e8 <UART_SetConfig+0x218>
 800b89c:	4b45      	ldr	r3, [pc, #276]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b8a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8a8:	d016      	beq.n	800b8d8 <UART_SetConfig+0x208>
 800b8aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8ac:	d818      	bhi.n	800b8e0 <UART_SetConfig+0x210>
 800b8ae:	2b80      	cmp	r3, #128	@ 0x80
 800b8b0:	d00a      	beq.n	800b8c8 <UART_SetConfig+0x1f8>
 800b8b2:	2b80      	cmp	r3, #128	@ 0x80
 800b8b4:	d814      	bhi.n	800b8e0 <UART_SetConfig+0x210>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <UART_SetConfig+0x1f0>
 800b8ba:	2b40      	cmp	r3, #64	@ 0x40
 800b8bc:	d008      	beq.n	800b8d0 <UART_SetConfig+0x200>
 800b8be:	e00f      	b.n	800b8e0 <UART_SetConfig+0x210>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c6:	e082      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ce:	e07e      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b8d0:	2304      	movs	r3, #4
 800b8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8d6:	e07a      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b8d8:	2308      	movs	r3, #8
 800b8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8de:	e076      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b8e0:	2310      	movs	r3, #16
 800b8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e6:	e072      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a35      	ldr	r2, [pc, #212]	@ (800b9c4 <UART_SetConfig+0x2f4>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d12a      	bne.n	800b948 <UART_SetConfig+0x278>
 800b8f2:	4b30      	ldr	r3, [pc, #192]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b900:	d01a      	beq.n	800b938 <UART_SetConfig+0x268>
 800b902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b906:	d81b      	bhi.n	800b940 <UART_SetConfig+0x270>
 800b908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b90c:	d00c      	beq.n	800b928 <UART_SetConfig+0x258>
 800b90e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b912:	d815      	bhi.n	800b940 <UART_SetConfig+0x270>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <UART_SetConfig+0x250>
 800b918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b91c:	d008      	beq.n	800b930 <UART_SetConfig+0x260>
 800b91e:	e00f      	b.n	800b940 <UART_SetConfig+0x270>
 800b920:	2300      	movs	r3, #0
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b926:	e052      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b928:	2302      	movs	r3, #2
 800b92a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92e:	e04e      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b930:	2304      	movs	r3, #4
 800b932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b936:	e04a      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b938:	2308      	movs	r3, #8
 800b93a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b93e:	e046      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b940:	2310      	movs	r3, #16
 800b942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b946:	e042      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a17      	ldr	r2, [pc, #92]	@ (800b9ac <UART_SetConfig+0x2dc>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d13a      	bne.n	800b9c8 <UART_SetConfig+0x2f8>
 800b952:	4b18      	ldr	r3, [pc, #96]	@ (800b9b4 <UART_SetConfig+0x2e4>)
 800b954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b95c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b960:	d01a      	beq.n	800b998 <UART_SetConfig+0x2c8>
 800b962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b966:	d81b      	bhi.n	800b9a0 <UART_SetConfig+0x2d0>
 800b968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b96c:	d00c      	beq.n	800b988 <UART_SetConfig+0x2b8>
 800b96e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b972:	d815      	bhi.n	800b9a0 <UART_SetConfig+0x2d0>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <UART_SetConfig+0x2b0>
 800b978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b97c:	d008      	beq.n	800b990 <UART_SetConfig+0x2c0>
 800b97e:	e00f      	b.n	800b9a0 <UART_SetConfig+0x2d0>
 800b980:	2300      	movs	r3, #0
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b986:	e022      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b988:	2302      	movs	r3, #2
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98e:	e01e      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b990:	2304      	movs	r3, #4
 800b992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b996:	e01a      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b998:	2308      	movs	r3, #8
 800b99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99e:	e016      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b9a0:	2310      	movs	r3, #16
 800b9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a6:	e012      	b.n	800b9ce <UART_SetConfig+0x2fe>
 800b9a8:	cfff69f3 	.word	0xcfff69f3
 800b9ac:	40008000 	.word	0x40008000
 800b9b0:	40013800 	.word	0x40013800
 800b9b4:	40021000 	.word	0x40021000
 800b9b8:	40004400 	.word	0x40004400
 800b9bc:	40004800 	.word	0x40004800
 800b9c0:	40004c00 	.word	0x40004c00
 800b9c4:	40005000 	.word	0x40005000
 800b9c8:	2310      	movs	r3, #16
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4aae      	ldr	r2, [pc, #696]	@ (800bc8c <UART_SetConfig+0x5bc>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	f040 8097 	bne.w	800bb08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9de:	2b08      	cmp	r3, #8
 800b9e0:	d823      	bhi.n	800ba2a <UART_SetConfig+0x35a>
 800b9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e8 <UART_SetConfig+0x318>)
 800b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e8:	0800ba0d 	.word	0x0800ba0d
 800b9ec:	0800ba2b 	.word	0x0800ba2b
 800b9f0:	0800ba15 	.word	0x0800ba15
 800b9f4:	0800ba2b 	.word	0x0800ba2b
 800b9f8:	0800ba1b 	.word	0x0800ba1b
 800b9fc:	0800ba2b 	.word	0x0800ba2b
 800ba00:	0800ba2b 	.word	0x0800ba2b
 800ba04:	0800ba2b 	.word	0x0800ba2b
 800ba08:	0800ba23 	.word	0x0800ba23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba0c:	f7fd fcba 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800ba10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba12:	e010      	b.n	800ba36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba14:	4b9e      	ldr	r3, [pc, #632]	@ (800bc90 <UART_SetConfig+0x5c0>)
 800ba16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba18:	e00d      	b.n	800ba36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba1a:	f7fd fc45 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 800ba1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba20:	e009      	b.n	800ba36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba28:	e005      	b.n	800ba36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 8130 	beq.w	800bc9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba42:	4a94      	ldr	r2, [pc, #592]	@ (800bc94 <UART_SetConfig+0x5c4>)
 800ba44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d305      	bcc.n	800ba6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d903      	bls.n	800ba76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba74:	e113      	b.n	800bc9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	2200      	movs	r2, #0
 800ba7a:	60bb      	str	r3, [r7, #8]
 800ba7c:	60fa      	str	r2, [r7, #12]
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba82:	4a84      	ldr	r2, [pc, #528]	@ (800bc94 <UART_SetConfig+0x5c4>)
 800ba84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	603b      	str	r3, [r7, #0]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba98:	f7f5 f864 	bl	8000b64 <__aeabi_uldivmod>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4610      	mov	r0, r2
 800baa2:	4619      	mov	r1, r3
 800baa4:	f04f 0200 	mov.w	r2, #0
 800baa8:	f04f 0300 	mov.w	r3, #0
 800baac:	020b      	lsls	r3, r1, #8
 800baae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bab2:	0202      	lsls	r2, r0, #8
 800bab4:	6979      	ldr	r1, [r7, #20]
 800bab6:	6849      	ldr	r1, [r1, #4]
 800bab8:	0849      	lsrs	r1, r1, #1
 800baba:	2000      	movs	r0, #0
 800babc:	460c      	mov	r4, r1
 800babe:	4605      	mov	r5, r0
 800bac0:	eb12 0804 	adds.w	r8, r2, r4
 800bac4:	eb43 0905 	adc.w	r9, r3, r5
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	469a      	mov	sl, r3
 800bad0:	4693      	mov	fp, r2
 800bad2:	4652      	mov	r2, sl
 800bad4:	465b      	mov	r3, fp
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f5 f843 	bl	8000b64 <__aeabi_uldivmod>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4613      	mov	r3, r2
 800bae4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baec:	d308      	bcc.n	800bb00 <UART_SetConfig+0x430>
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baf4:	d204      	bcs.n	800bb00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6a3a      	ldr	r2, [r7, #32]
 800bafc:	60da      	str	r2, [r3, #12]
 800bafe:	e0ce      	b.n	800bc9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb06:	e0ca      	b.n	800bc9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb10:	d166      	bne.n	800bbe0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bb12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb16:	2b08      	cmp	r3, #8
 800bb18:	d827      	bhi.n	800bb6a <UART_SetConfig+0x49a>
 800bb1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb20 <UART_SetConfig+0x450>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb45 	.word	0x0800bb45
 800bb24:	0800bb4d 	.word	0x0800bb4d
 800bb28:	0800bb55 	.word	0x0800bb55
 800bb2c:	0800bb6b 	.word	0x0800bb6b
 800bb30:	0800bb5b 	.word	0x0800bb5b
 800bb34:	0800bb6b 	.word	0x0800bb6b
 800bb38:	0800bb6b 	.word	0x0800bb6b
 800bb3c:	0800bb6b 	.word	0x0800bb6b
 800bb40:	0800bb63 	.word	0x0800bb63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb44:	f7fd fc1e 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800bb48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb4a:	e014      	b.n	800bb76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb4c:	f7fd fc30 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 800bb50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb52:	e010      	b.n	800bb76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb54:	4b4e      	ldr	r3, [pc, #312]	@ (800bc90 <UART_SetConfig+0x5c0>)
 800bb56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb58:	e00d      	b.n	800bb76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb5a:	f7fd fba5 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 800bb5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb60:	e009      	b.n	800bb76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb68:	e005      	b.n	800bb76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 8090 	beq.w	800bc9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb82:	4a44      	ldr	r2, [pc, #272]	@ (800bc94 <UART_SetConfig+0x5c4>)
 800bb84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb90:	005a      	lsls	r2, r3, #1
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	085b      	lsrs	r3, r3, #1
 800bb98:	441a      	add	r2, r3
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b0f      	cmp	r3, #15
 800bba8:	d916      	bls.n	800bbd8 <UART_SetConfig+0x508>
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbb0:	d212      	bcs.n	800bbd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	f023 030f 	bic.w	r3, r3, #15
 800bbba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	085b      	lsrs	r3, r3, #1
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	f003 0307 	and.w	r3, r3, #7
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	8bfb      	ldrh	r3, [r7, #30]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	8bfa      	ldrh	r2, [r7, #30]
 800bbd4:	60da      	str	r2, [r3, #12]
 800bbd6:	e062      	b.n	800bc9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbde:	e05e      	b.n	800bc9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbe4:	2b08      	cmp	r3, #8
 800bbe6:	d828      	bhi.n	800bc3a <UART_SetConfig+0x56a>
 800bbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf0 <UART_SetConfig+0x520>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc15 	.word	0x0800bc15
 800bbf4:	0800bc1d 	.word	0x0800bc1d
 800bbf8:	0800bc25 	.word	0x0800bc25
 800bbfc:	0800bc3b 	.word	0x0800bc3b
 800bc00:	0800bc2b 	.word	0x0800bc2b
 800bc04:	0800bc3b 	.word	0x0800bc3b
 800bc08:	0800bc3b 	.word	0x0800bc3b
 800bc0c:	0800bc3b 	.word	0x0800bc3b
 800bc10:	0800bc33 	.word	0x0800bc33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc14:	f7fd fbb6 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800bc18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc1a:	e014      	b.n	800bc46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc1c:	f7fd fbc8 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 800bc20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc22:	e010      	b.n	800bc46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc24:	4b1a      	ldr	r3, [pc, #104]	@ (800bc90 <UART_SetConfig+0x5c0>)
 800bc26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc28:	e00d      	b.n	800bc46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc2a:	f7fd fb3d 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 800bc2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc30:	e009      	b.n	800bc46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc38:	e005      	b.n	800bc46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc44:	bf00      	nop
    }

    if (pclk != 0U)
 800bc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d028      	beq.n	800bc9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc50:	4a10      	ldr	r2, [pc, #64]	@ (800bc94 <UART_SetConfig+0x5c4>)
 800bc52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	441a      	add	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	2b0f      	cmp	r3, #15
 800bc74:	d910      	bls.n	800bc98 <UART_SetConfig+0x5c8>
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc7c:	d20c      	bcs.n	800bc98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60da      	str	r2, [r3, #12]
 800bc88:	e009      	b.n	800bc9e <UART_SetConfig+0x5ce>
 800bc8a:	bf00      	nop
 800bc8c:	40008000 	.word	0x40008000
 800bc90:	00f42400 	.word	0x00f42400
 800bc94:	0800e700 	.word	0x0800e700
      }
      else
      {
        ret = HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3730      	adds	r7, #48	@ 0x30
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bcc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd4:	f003 0308 	and.w	r3, r3, #8
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00a      	beq.n	800bd58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5c:	f003 0310 	and.w	r3, r3, #16
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00a      	beq.n	800bd7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01a      	beq.n	800bdde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdc6:	d10a      	bne.n	800bdde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	430a      	orrs	r2, r1
 800bddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	605a      	str	r2, [r3, #4]
  }
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b098      	sub	sp, #96	@ 0x60
 800be10:	af02      	add	r7, sp, #8
 800be12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be1c:	f7f6 fda4 	bl	8002968 <HAL_GetTick>
 800be20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0308 	and.w	r3, r3, #8
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d12f      	bne.n	800be90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be38:	2200      	movs	r2, #0
 800be3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f88e 	bl	800bf60 <UART_WaitOnFlagUntilTimeout>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d022      	beq.n	800be90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	461a      	mov	r2, r3
 800be66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be68:	647b      	str	r3, [r7, #68]	@ 0x44
 800be6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be70:	e841 2300 	strex	r3, r2, [r1]
 800be74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1e6      	bne.n	800be4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e063      	b.n	800bf58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 0304 	and.w	r3, r3, #4
 800be9a:	2b04      	cmp	r3, #4
 800be9c:	d149      	bne.n	800bf32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bea6:	2200      	movs	r2, #0
 800bea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f857 	bl	800bf60 <UART_WaitOnFlagUntilTimeout>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d03c      	beq.n	800bf32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	623b      	str	r3, [r7, #32]
   return(result);
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800becc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bed6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bedc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e6      	bne.n	800beb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3308      	adds	r3, #8
 800bef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	60fb      	str	r3, [r7, #12]
   return(result);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3308      	adds	r3, #8
 800bf08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf0a:	61fa      	str	r2, [r7, #28]
 800bf0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	69b9      	ldr	r1, [r7, #24]
 800bf10:	69fa      	ldr	r2, [r7, #28]
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	617b      	str	r3, [r7, #20]
   return(result);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e5      	bne.n	800beea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e012      	b.n	800bf58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2220      	movs	r2, #32
 800bf36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3758      	adds	r7, #88	@ 0x58
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf70:	e04f      	b.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf78:	d04b      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf7a:	f7f6 fcf5 	bl	8002968 <HAL_GetTick>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d302      	bcc.n	800bf90 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e04e      	b.n	800c032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f003 0304 	and.w	r3, r3, #4
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d037      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b80      	cmp	r3, #128	@ 0x80
 800bfa6:	d034      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b40      	cmp	r3, #64	@ 0x40
 800bfac:	d031      	beq.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	f003 0308 	and.w	r3, r3, #8
 800bfb8:	2b08      	cmp	r3, #8
 800bfba:	d110      	bne.n	800bfde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f000 f879 	bl	800c0bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2208      	movs	r2, #8
 800bfce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e029      	b.n	800c032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69db      	ldr	r3, [r3, #28]
 800bfe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfec:	d111      	bne.n	800c012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 f85f 	bl	800c0bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e00f      	b.n	800c032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69da      	ldr	r2, [r3, #28]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	4013      	ands	r3, r2
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	429a      	cmp	r2, r3
 800c020:	bf0c      	ite	eq
 800c022:	2301      	moveq	r3, #1
 800c024:	2300      	movne	r3, #0
 800c026:	b2db      	uxtb	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d0a0      	beq.n	800bf72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b08f      	sub	sp, #60	@ 0x3c
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c056:	637b      	str	r3, [r7, #52]	@ 0x34
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	461a      	mov	r2, r3
 800c05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c062:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c068:	e841 2300 	strex	r3, r2, [r1]
 800c06c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e6      	bne.n	800c042 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	e853 3f00 	ldrex	r3, [r3]
 800c082:	60bb      	str	r3, [r7, #8]
   return(result);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c08a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3308      	adds	r3, #8
 800c092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c094:	61ba      	str	r2, [r7, #24]
 800c096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c098:	6979      	ldr	r1, [r7, #20]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	e841 2300 	strex	r3, r2, [r1]
 800c0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1e5      	bne.n	800c074 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c0b0:	bf00      	nop
 800c0b2:	373c      	adds	r7, #60	@ 0x3c
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b095      	sub	sp, #84	@ 0x54
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0cc:	e853 3f00 	ldrex	r3, [r3]
 800c0d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ea:	e841 2300 	strex	r3, r2, [r1]
 800c0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1e6      	bne.n	800c0c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	e853 3f00 	ldrex	r3, [r3]
 800c104:	61fb      	str	r3, [r7, #28]
   return(result);
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c10c:	f023 0301 	bic.w	r3, r3, #1
 800c110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c11a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c11c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e3      	bne.n	800c0f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c132:	2b01      	cmp	r3, #1
 800c134:	d118      	bne.n	800c168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60bb      	str	r3, [r7, #8]
   return(result);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c17c:	bf00      	nop
 800c17e:	3754      	adds	r7, #84	@ 0x54
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b090      	sub	sp, #64	@ 0x40
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c194:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0320 	and.w	r3, r3, #32
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d137      	bne.n	800c214 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	623b      	str	r3, [r7, #32]
   return(result);
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e5      	bne.n	800c1ac <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	e853 3f00 	ldrex	r3, [r3]
 800c1ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fe:	61fb      	str	r3, [r7, #28]
 800c200:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	69b9      	ldr	r1, [r7, #24]
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	617b      	str	r3, [r7, #20]
   return(result);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e6      	bne.n	800c1e0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c212:	e002      	b.n	800c21a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c214:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c216:	f7f5 fdcf 	bl	8001db8 <HAL_UART_TxCpltCallback>
}
 800c21a:	bf00      	nop
 800c21c:	3740      	adds	r7, #64	@ 0x40
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff fa2d 	bl	800b690 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c236:	bf00      	nop
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c252:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c266:	2b80      	cmp	r3, #128	@ 0x80
 800c268:	d109      	bne.n	800c27e <UART_DMAError+0x40>
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b21      	cmp	r3, #33	@ 0x21
 800c26e:	d106      	bne.n	800c27e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2200      	movs	r2, #0
 800c274:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c278:	6978      	ldr	r0, [r7, #20]
 800c27a:	f7ff fede 	bl	800c03a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c288:	2b40      	cmp	r3, #64	@ 0x40
 800c28a:	d109      	bne.n	800c2a0 <UART_DMAError+0x62>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b22      	cmp	r3, #34	@ 0x22
 800c290:	d106      	bne.n	800c2a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2200      	movs	r2, #0
 800c296:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c29a:	6978      	ldr	r0, [r7, #20]
 800c29c:	f7ff ff0e 	bl	800c0bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a6:	f043 0210 	orr.w	r2, r3, #16
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2b0:	6978      	ldr	r0, [r7, #20]
 800c2b2:	f7ff f9f7 	bl	800b6a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2b6:	bf00      	nop
 800c2b8:	3718      	adds	r7, #24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff f9e5 	bl	800b6a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2da:	bf00      	nop
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b088      	sub	sp, #32
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6979      	ldr	r1, [r7, #20]
 800c30e:	69ba      	ldr	r2, [r7, #24]
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	613b      	str	r3, [r7, #16]
   return(result);
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e6      	bne.n	800c2ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7f5 fd44 	bl	8001db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c330:	bf00      	nop
 800c332:	3720      	adds	r7, #32
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c382:	2b01      	cmp	r3, #1
 800c384:	d101      	bne.n	800c38a <HAL_UARTEx_DisableFifoMode+0x16>
 800c386:	2302      	movs	r3, #2
 800c388:	e027      	b.n	800c3da <HAL_UARTEx_DisableFifoMode+0x66>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2224      	movs	r2, #36	@ 0x24
 800c396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f022 0201 	bic.w	r2, r2, #1
 800c3b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d101      	bne.n	800c3fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e02d      	b.n	800c45a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2224      	movs	r2, #36	@ 0x24
 800c40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0201 	bic.w	r2, r2, #1
 800c424:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	430a      	orrs	r2, r1
 800c438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f850 	bl	800c4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c472:	2b01      	cmp	r3, #1
 800c474:	d101      	bne.n	800c47a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c476:	2302      	movs	r3, #2
 800c478:	e02d      	b.n	800c4d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2224      	movs	r2, #36	@ 0x24
 800c486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0201 	bic.w	r2, r2, #1
 800c4a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f812 	bl	800c4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c500:	e031      	b.n	800c566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c502:	2308      	movs	r3, #8
 800c504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c506:	2308      	movs	r3, #8
 800c508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	0e5b      	lsrs	r3, r3, #25
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0307 	and.w	r3, r3, #7
 800c518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	0f5b      	lsrs	r3, r3, #29
 800c522:	b2db      	uxtb	r3, r3
 800c524:	f003 0307 	and.w	r3, r3, #7
 800c528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	7b3a      	ldrb	r2, [r7, #12]
 800c52e:	4911      	ldr	r1, [pc, #68]	@ (800c574 <UARTEx_SetNbDataToProcess+0x94>)
 800c530:	5c8a      	ldrb	r2, [r1, r2]
 800c532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c536:	7b3a      	ldrb	r2, [r7, #12]
 800c538:	490f      	ldr	r1, [pc, #60]	@ (800c578 <UARTEx_SetNbDataToProcess+0x98>)
 800c53a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c540:	b29a      	uxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	7b7a      	ldrb	r2, [r7, #13]
 800c54c:	4909      	ldr	r1, [pc, #36]	@ (800c574 <UARTEx_SetNbDataToProcess+0x94>)
 800c54e:	5c8a      	ldrb	r2, [r1, r2]
 800c550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c554:	7b7a      	ldrb	r2, [r7, #13]
 800c556:	4908      	ldr	r1, [pc, #32]	@ (800c578 <UARTEx_SetNbDataToProcess+0x98>)
 800c558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c566:	bf00      	nop
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	0800e718 	.word	0x0800e718
 800c578:	0800e720 	.word	0x0800e720

0800c57c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b08b      	sub	sp, #44	@ 0x2c
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	fa93 f3a3 	rbit	r3, r3
 800c596:	613b      	str	r3, [r7, #16]
  return result;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	e003      	b.n	800c5ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	fab3 f383 	clz	r3, r3
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	2103      	movs	r1, #3
 800c5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b6:	43db      	mvns	r3, r3
 800c5b8:	401a      	ands	r2, r3
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	fa93 f3a3 	rbit	r3, r3
 800c5c4:	61fb      	str	r3, [r7, #28]
  return result;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	e003      	b.n	800c5dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d6:	fab3 f383 	clz	r3, r3
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	601a      	str	r2, [r3, #0]
}
 800c5ea:	bf00      	nop
 800c5ec:	372c      	adds	r7, #44	@ 0x2c
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	43db      	mvns	r3, r3
 800c60a:	401a      	ands	r2, r3
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	fb01 f303 	mul.w	r3, r1, r3
 800c614:	431a      	orrs	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	605a      	str	r2, [r3, #4]
}
 800c61a:	bf00      	nop
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c626:	b480      	push	{r7}
 800c628:	b08b      	sub	sp, #44	@ 0x2c
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	fa93 f3a3 	rbit	r3, r3
 800c640:	613b      	str	r3, [r7, #16]
  return result;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800c64c:	2320      	movs	r3, #32
 800c64e:	e003      	b.n	800c658 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	fab3 f383 	clz	r3, r3
 800c656:	b2db      	uxtb	r3, r3
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	2103      	movs	r1, #3
 800c65c:	fa01 f303 	lsl.w	r3, r1, r3
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	fa93 f3a3 	rbit	r3, r3
 800c66e:	61fb      	str	r3, [r7, #28]
  return result;
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800c67a:	2320      	movs	r3, #32
 800c67c:	e003      	b.n	800c686 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	fab3 f383 	clz	r3, r3
 800c684:	b2db      	uxtb	r3, r3
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	fa01 f303 	lsl.w	r3, r1, r3
 800c68e:	431a      	orrs	r2, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800c694:	bf00      	nop
 800c696:	372c      	adds	r7, #44	@ 0x2c
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b08b      	sub	sp, #44	@ 0x2c
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68da      	ldr	r2, [r3, #12]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	fa93 f3a3 	rbit	r3, r3
 800c6ba:	613b      	str	r3, [r7, #16]
  return result;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800c6c6:	2320      	movs	r3, #32
 800c6c8:	e003      	b.n	800c6d2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	fab3 f383 	clz	r3, r3
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	2103      	movs	r1, #3
 800c6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6da:	43db      	mvns	r3, r3
 800c6dc:	401a      	ands	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	fa93 f3a3 	rbit	r3, r3
 800c6e8:	61fb      	str	r3, [r7, #28]
  return result;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800c6f4:	2320      	movs	r3, #32
 800c6f6:	e003      	b.n	800c700 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	fab3 f383 	clz	r3, r3
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	005b      	lsls	r3, r3, #1
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	fa01 f303 	lsl.w	r3, r1, r3
 800c708:	431a      	orrs	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	60da      	str	r2, [r3, #12]
}
 800c70e:	bf00      	nop
 800c710:	372c      	adds	r7, #44	@ 0x2c
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b08b      	sub	sp, #44	@ 0x2c
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6a1a      	ldr	r2, [r3, #32]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	fa93 f3a3 	rbit	r3, r3
 800c734:	613b      	str	r3, [r7, #16]
  return result;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800c740:	2320      	movs	r3, #32
 800c742:	e003      	b.n	800c74c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	fab3 f383 	clz	r3, r3
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	210f      	movs	r1, #15
 800c750:	fa01 f303 	lsl.w	r3, r1, r3
 800c754:	43db      	mvns	r3, r3
 800c756:	401a      	ands	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c75c:	6a3b      	ldr	r3, [r7, #32]
 800c75e:	fa93 f3a3 	rbit	r3, r3
 800c762:	61fb      	str	r3, [r7, #28]
  return result;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800c76e:	2320      	movs	r3, #32
 800c770:	e003      	b.n	800c77a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800c772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c774:	fab3 f383 	clz	r3, r3
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	6879      	ldr	r1, [r7, #4]
 800c77e:	fa01 f303 	lsl.w	r3, r1, r3
 800c782:	431a      	orrs	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800c788:	bf00      	nop
 800c78a:	372c      	adds	r7, #44	@ 0x2c
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c794:	b480      	push	{r7}
 800c796:	b08b      	sub	sp, #44	@ 0x2c
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	fa93 f3a3 	rbit	r3, r3
 800c7b0:	613b      	str	r3, [r7, #16]
  return result;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800c7bc:	2320      	movs	r3, #32
 800c7be:	e003      	b.n	800c7c8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	fab3 f383 	clz	r3, r3
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	210f      	movs	r1, #15
 800c7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d0:	43db      	mvns	r3, r3
 800c7d2:	401a      	ands	r2, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	0a1b      	lsrs	r3, r3, #8
 800c7d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	fa93 f3a3 	rbit	r3, r3
 800c7e0:	61fb      	str	r3, [r7, #28]
  return result;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800c7ec:	2320      	movs	r3, #32
 800c7ee:	e003      	b.n	800c7f8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	fab3 f383 	clz	r3, r3
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c800:	431a      	orrs	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800c806:	bf00      	nop
 800c808:	372c      	adds	r7, #44	@ 0x2c
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b088      	sub	sp, #32
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	fa93 f3a3 	rbit	r3, r3
 800c828:	60fb      	str	r3, [r7, #12]
  return result;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <LL_GPIO_Init+0x26>
    return 32U;
 800c834:	2320      	movs	r3, #32
 800c836:	e003      	b.n	800c840 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	fab3 f383 	clz	r3, r3
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c842:	e048      	b.n	800c8d6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	2101      	movs	r1, #1
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	fa01 f303 	lsl.w	r3, r1, r3
 800c850:	4013      	ands	r3, r2
 800c852:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d03a      	beq.n	800c8d0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d003      	beq.n	800c86a <LL_GPIO_Init+0x58>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d10e      	bne.n	800c888 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	461a      	mov	r2, r3
 800c870:	69b9      	ldr	r1, [r7, #24]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff fed7 	bl	800c626 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	461a      	mov	r2, r3
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff feb7 	bl	800c5f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	461a      	mov	r2, r3
 800c88e:	69b9      	ldr	r1, [r7, #24]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff ff05 	bl	800c6a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d111      	bne.n	800c8c2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2bff      	cmp	r3, #255	@ 0xff
 800c8a2:	d807      	bhi.n	800c8b4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	69b9      	ldr	r1, [r7, #24]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff ff34 	bl	800c71a <LL_GPIO_SetAFPin_0_7>
 800c8b2:	e006      	b.n	800c8c2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	69b9      	ldr	r1, [r7, #24]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ff69 	bl	800c794 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	69b9      	ldr	r1, [r7, #24]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff fe56 	bl	800c57c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1af      	bne.n	800c844 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c8f6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c8fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c902:	b29a      	uxth	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	b29b      	uxth	r3, r3
 800c908:	43db      	mvns	r3, r3
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	4013      	ands	r3, r2
 800c90e:	b29a      	uxth	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	1d3b      	adds	r3, r7, #4
 800c92e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2201      	movs	r2, #1
 800c936:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b0ac      	sub	sp, #176	@ 0xb0
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	785b      	ldrb	r3, [r3, #1]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	f040 84ca 	bne.w	800d308 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	699a      	ldr	r2, [r3, #24]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d904      	bls.n	800c98a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c988:	e003      	b.n	800c992 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	7b1b      	ldrb	r3, [r3, #12]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d122      	bne.n	800c9e0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	6959      	ldr	r1, [r3, #20]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	88da      	ldrh	r2, [r3, #6]
 800c9a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fdac 	bl	800d506 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	4413      	add	r3, r2
 800c9c0:	613b      	str	r3, [r7, #16]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	00da      	lsls	r2, r3, #3
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	f000 bc6f 	b.w	800d2be <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	78db      	ldrb	r3, [r3, #3]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	f040 831e 	bne.w	800d026 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	6a1a      	ldr	r2, [r3, #32]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	f240 82cf 	bls.w	800cf96 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca0e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	441a      	add	r2, r3
 800ca1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca28:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	6a1a      	ldr	r2, [r3, #32]
 800ca38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca3c:	1ad2      	subs	r2, r2, r3
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 814f 	beq.w	800ccf8 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	785b      	ldrb	r3, [r3, #1]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d16b      	bne.n	800cb3e <USB_EPStartXfer+0x1de>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca76:	4413      	add	r3, r2
 800ca78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	00da      	lsls	r2, r3, #3
 800ca80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca82:	4413      	add	r3, r2
 800ca84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	801a      	strh	r2, [r3, #0]
 800ca9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <USB_EPStartXfer+0x158>
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	801a      	strh	r2, [r3, #0]
 800cab6:	e05b      	b.n	800cb70 <USB_EPStartXfer+0x210>
 800cab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cabc:	2b3e      	cmp	r3, #62	@ 0x3e
 800cabe:	d81c      	bhi.n	800cafa <USB_EPStartXfer+0x19a>
 800cac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac4:	085b      	lsrs	r3, r3, #1
 800cac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800caca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d004      	beq.n	800cae0 <USB_EPStartXfer+0x180>
 800cad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cada:	3301      	adds	r3, #1
 800cadc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800caea:	b29b      	uxth	r3, r3
 800caec:	029b      	lsls	r3, r3, #10
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4313      	orrs	r3, r2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	801a      	strh	r2, [r3, #0]
 800caf8:	e03a      	b.n	800cb70 <USB_EPStartXfer+0x210>
 800cafa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cafe:	095b      	lsrs	r3, r3, #5
 800cb00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb08:	f003 031f 	and.w	r3, r3, #31
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d104      	bne.n	800cb1a <USB_EPStartXfer+0x1ba>
 800cb10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb14:	3b01      	subs	r3, #1
 800cb16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	029b      	lsls	r3, r3, #10
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	e018      	b.n	800cb70 <USB_EPStartXfer+0x210>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	785b      	ldrb	r3, [r3, #1]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d114      	bne.n	800cb70 <USB_EPStartXfer+0x210>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	4413      	add	r3, r2
 800cb54:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	00da      	lsls	r2, r3, #3
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	4413      	add	r3, r2
 800cb60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	895b      	ldrh	r3, [r3, #10]
 800cb74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	6959      	ldr	r1, [r3, #20]
 800cb7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fcbd 	bl	800d506 <USB_WritePMA>
            ep->xfer_buff += len;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	695a      	ldr	r2, [r3, #20]
 800cb90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb94:	441a      	add	r2, r3
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d907      	bls.n	800cbb6 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	6a1a      	ldr	r2, [r3, #32]
 800cbaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	621a      	str	r2, [r3, #32]
 800cbb4:	e006      	b.n	800cbc4 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d16b      	bne.n	800cca4 <USB_EPStartXfer+0x344>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	61bb      	str	r3, [r7, #24]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	461a      	mov	r2, r3
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	4413      	add	r3, r2
 800cbde:	61bb      	str	r3, [r7, #24]
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	00da      	lsls	r2, r3, #3
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	4413      	add	r3, r2
 800cbea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbee:	617b      	str	r3, [r7, #20]
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	881b      	ldrh	r3, [r3, #0]
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	801a      	strh	r2, [r3, #0]
 800cc00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <USB_EPStartXfer+0x2be>
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	881b      	ldrh	r3, [r3, #0]
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	801a      	strh	r2, [r3, #0]
 800cc1c:	e05d      	b.n	800ccda <USB_EPStartXfer+0x37a>
 800cc1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc22:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc24:	d81c      	bhi.n	800cc60 <USB_EPStartXfer+0x300>
 800cc26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc2a:	085b      	lsrs	r3, r3, #1
 800cc2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d004      	beq.n	800cc46 <USB_EPStartXfer+0x2e6>
 800cc3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc40:	3301      	adds	r3, #1
 800cc42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	029b      	lsls	r3, r3, #10
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	4313      	orrs	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	801a      	strh	r2, [r3, #0]
 800cc5e:	e03c      	b.n	800ccda <USB_EPStartXfer+0x37a>
 800cc60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc64:	095b      	lsrs	r3, r3, #5
 800cc66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc6e:	f003 031f 	and.w	r3, r3, #31
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d104      	bne.n	800cc80 <USB_EPStartXfer+0x320>
 800cc76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	029b      	lsls	r3, r3, #10
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	4313      	orrs	r3, r2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	801a      	strh	r2, [r3, #0]
 800cca2:	e01a      	b.n	800ccda <USB_EPStartXfer+0x37a>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	785b      	ldrb	r3, [r3, #1]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d116      	bne.n	800ccda <USB_EPStartXfer+0x37a>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	623b      	str	r3, [r7, #32]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	623b      	str	r3, [r7, #32]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	00da      	lsls	r2, r3, #3
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccce:	61fb      	str	r3, [r7, #28]
 800ccd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	891b      	ldrh	r3, [r3, #8]
 800ccde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	6959      	ldr	r1, [r3, #20]
 800cce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fc08 	bl	800d506 <USB_WritePMA>
 800ccf6:	e2e2      	b.n	800d2be <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	785b      	ldrb	r3, [r3, #1]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d16b      	bne.n	800cdd8 <USB_EPStartXfer+0x478>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd10:	4413      	add	r3, r2
 800cd12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	00da      	lsls	r2, r3, #3
 800cd1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd22:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd32:	801a      	strh	r2, [r3, #0]
 800cd34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <USB_EPStartXfer+0x3f2>
 800cd3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd4e:	801a      	strh	r2, [r3, #0]
 800cd50:	e05d      	b.n	800ce0e <USB_EPStartXfer+0x4ae>
 800cd52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd56:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd58:	d81c      	bhi.n	800cd94 <USB_EPStartXfer+0x434>
 800cd5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd5e:	085b      	lsrs	r3, r3, #1
 800cd60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <USB_EPStartXfer+0x41a>
 800cd70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd74:	3301      	adds	r3, #1
 800cd76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	029b      	lsls	r3, r3, #10
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd90:	801a      	strh	r2, [r3, #0]
 800cd92:	e03c      	b.n	800ce0e <USB_EPStartXfer+0x4ae>
 800cd94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd98:	095b      	lsrs	r3, r3, #5
 800cd9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cda2:	f003 031f 	and.w	r3, r3, #31
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d104      	bne.n	800cdb4 <USB_EPStartXfer+0x454>
 800cdaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	029b      	lsls	r3, r3, #10
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdd4:	801a      	strh	r2, [r3, #0]
 800cdd6:	e01a      	b.n	800ce0e <USB_EPStartXfer+0x4ae>
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d116      	bne.n	800ce0e <USB_EPStartXfer+0x4ae>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	461a      	mov	r2, r3
 800cdee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf0:	4413      	add	r3, r2
 800cdf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	00da      	lsls	r2, r3, #3
 800cdfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	891b      	ldrh	r3, [r3, #8]
 800ce12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	6959      	ldr	r1, [r3, #20]
 800ce1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fb6e 	bl	800d506 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	695a      	ldr	r2, [r3, #20]
 800ce2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce32:	441a      	add	r2, r3
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	6a1a      	ldr	r2, [r3, #32]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d907      	bls.n	800ce54 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	6a1a      	ldr	r2, [r3, #32]
 800ce48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce4c:	1ad2      	subs	r2, r2, r3
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	621a      	str	r2, [r3, #32]
 800ce52:	e006      	b.n	800ce62 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d16b      	bne.n	800cf46 <USB_EPStartXfer+0x5e6>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7e:	4413      	add	r3, r2
 800ce80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	00da      	lsls	r2, r3, #3
 800ce88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea0:	801a      	strh	r2, [r3, #0]
 800cea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10a      	bne.n	800cec0 <USB_EPStartXfer+0x560>
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cebc:	801a      	strh	r2, [r3, #0]
 800cebe:	e05b      	b.n	800cf78 <USB_EPStartXfer+0x618>
 800cec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec4:	2b3e      	cmp	r3, #62	@ 0x3e
 800cec6:	d81c      	bhi.n	800cf02 <USB_EPStartXfer+0x5a2>
 800cec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cecc:	085b      	lsrs	r3, r3, #1
 800cece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ced2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <USB_EPStartXfer+0x588>
 800cede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cee2:	3301      	adds	r3, #1
 800cee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	029b      	lsls	r3, r3, #10
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4313      	orrs	r3, r2
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefe:	801a      	strh	r2, [r3, #0]
 800cf00:	e03a      	b.n	800cf78 <USB_EPStartXfer+0x618>
 800cf02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf06:	095b      	lsrs	r3, r3, #5
 800cf08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf10:	f003 031f 	and.w	r3, r3, #31
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d104      	bne.n	800cf22 <USB_EPStartXfer+0x5c2>
 800cf18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	029b      	lsls	r3, r3, #10
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf42:	801a      	strh	r2, [r3, #0]
 800cf44:	e018      	b.n	800cf78 <USB_EPStartXfer+0x618>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	785b      	ldrb	r3, [r3, #1]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d114      	bne.n	800cf78 <USB_EPStartXfer+0x618>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	461a      	mov	r2, r3
 800cf58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf5a:	4413      	add	r3, r2
 800cf5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	00da      	lsls	r2, r3, #3
 800cf64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf66:	4413      	add	r3, r2
 800cf68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	895b      	ldrh	r3, [r3, #10]
 800cf7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	6959      	ldr	r1, [r3, #20]
 800cf84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fab9 	bl	800d506 <USB_WritePMA>
 800cf94:	e193      	b.n	800d2be <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cfb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfb4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	441a      	add	r2, r3
 800cfc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cfc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfea:	4413      	add	r3, r2
 800cfec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	00da      	lsls	r2, r3, #3
 800cff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff6:	4413      	add	r3, r2
 800cff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d002:	b29a      	uxth	r2, r3
 800d004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d006:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	891b      	ldrh	r3, [r3, #8]
 800d00c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	6959      	ldr	r1, [r3, #20]
 800d014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fa71 	bl	800d506 <USB_WritePMA>
 800d024:	e14b      	b.n	800d2be <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	6a1a      	ldr	r2, [r3, #32]
 800d02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d02e:	1ad2      	subs	r2, r2, r3
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	b29b      	uxth	r3, r3
 800d042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 809a 	beq.w	800d180 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	673b      	str	r3, [r7, #112]	@ 0x70
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d16b      	bne.n	800d130 <USB_EPStartXfer+0x7d0>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d062:	b29b      	uxth	r3, r3
 800d064:	461a      	mov	r2, r3
 800d066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d068:	4413      	add	r3, r2
 800d06a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	00da      	lsls	r2, r3, #3
 800d072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d074:	4413      	add	r3, r2
 800d076:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d07a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d07c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	b29b      	uxth	r3, r3
 800d082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d086:	b29a      	uxth	r2, r3
 800d088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d08a:	801a      	strh	r2, [r3, #0]
 800d08c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10a      	bne.n	800d0aa <USB_EPStartXfer+0x74a>
 800d094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0a6:	801a      	strh	r2, [r3, #0]
 800d0a8:	e05b      	b.n	800d162 <USB_EPStartXfer+0x802>
 800d0aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0b0:	d81c      	bhi.n	800d0ec <USB_EPStartXfer+0x78c>
 800d0b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0b6:	085b      	lsrs	r3, r3, #1
 800d0b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d004      	beq.n	800d0d2 <USB_EPStartXfer+0x772>
 800d0c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	029b      	lsls	r3, r3, #10
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0e8:	801a      	strh	r2, [r3, #0]
 800d0ea:	e03a      	b.n	800d162 <USB_EPStartXfer+0x802>
 800d0ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0f0:	095b      	lsrs	r3, r3, #5
 800d0f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0fa:	f003 031f 	and.w	r3, r3, #31
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d104      	bne.n	800d10c <USB_EPStartXfer+0x7ac>
 800d102:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d106:	3b01      	subs	r3, #1
 800d108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d10c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b29a      	uxth	r2, r3
 800d112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d116:	b29b      	uxth	r3, r3
 800d118:	029b      	lsls	r3, r3, #10
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	4313      	orrs	r3, r2
 800d11e:	b29b      	uxth	r3, r3
 800d120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d128:	b29a      	uxth	r2, r3
 800d12a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d12c:	801a      	strh	r2, [r3, #0]
 800d12e:	e018      	b.n	800d162 <USB_EPStartXfer+0x802>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	785b      	ldrb	r3, [r3, #1]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d114      	bne.n	800d162 <USB_EPStartXfer+0x802>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d13e:	b29b      	uxth	r3, r3
 800d140:	461a      	mov	r2, r3
 800d142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d144:	4413      	add	r3, r2
 800d146:	673b      	str	r3, [r7, #112]	@ 0x70
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	00da      	lsls	r2, r3, #3
 800d14e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d150:	4413      	add	r3, r2
 800d152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d156:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	895b      	ldrh	r3, [r3, #10]
 800d166:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	6959      	ldr	r1, [r3, #20]
 800d16e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d172:	b29b      	uxth	r3, r3
 800d174:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f9c4 	bl	800d506 <USB_WritePMA>
 800d17e:	e09e      	b.n	800d2be <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d16b      	bne.n	800d260 <USB_EPStartXfer+0x900>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d192:	b29b      	uxth	r3, r3
 800d194:	461a      	mov	r2, r3
 800d196:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d198:	4413      	add	r3, r2
 800d19a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	00da      	lsls	r2, r3, #3
 800d1a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ae:	881b      	ldrh	r3, [r3, #0]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ba:	801a      	strh	r2, [r3, #0]
 800d1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d10a      	bne.n	800d1da <USB_EPStartXfer+0x87a>
 800d1c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1d6:	801a      	strh	r2, [r3, #0]
 800d1d8:	e063      	b.n	800d2a2 <USB_EPStartXfer+0x942>
 800d1da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1de:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1e0:	d81c      	bhi.n	800d21c <USB_EPStartXfer+0x8bc>
 800d1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d004      	beq.n	800d202 <USB_EPStartXfer+0x8a2>
 800d1f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	b29a      	uxth	r2, r3
 800d208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	029b      	lsls	r3, r3, #10
 800d210:	b29b      	uxth	r3, r3
 800d212:	4313      	orrs	r3, r2
 800d214:	b29a      	uxth	r2, r3
 800d216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d218:	801a      	strh	r2, [r3, #0]
 800d21a:	e042      	b.n	800d2a2 <USB_EPStartXfer+0x942>
 800d21c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d220:	095b      	lsrs	r3, r3, #5
 800d222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d22a:	f003 031f 	and.w	r3, r3, #31
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d104      	bne.n	800d23c <USB_EPStartXfer+0x8dc>
 800d232:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d236:	3b01      	subs	r3, #1
 800d238:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d23c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29a      	uxth	r2, r3
 800d242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d246:	b29b      	uxth	r3, r3
 800d248:	029b      	lsls	r3, r3, #10
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4313      	orrs	r3, r2
 800d24e:	b29b      	uxth	r3, r3
 800d250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d258:	b29a      	uxth	r2, r3
 800d25a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d25c:	801a      	strh	r2, [r3, #0]
 800d25e:	e020      	b.n	800d2a2 <USB_EPStartXfer+0x942>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	785b      	ldrb	r3, [r3, #1]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d11c      	bne.n	800d2a2 <USB_EPStartXfer+0x942>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d274:	b29b      	uxth	r3, r3
 800d276:	461a      	mov	r2, r3
 800d278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d27c:	4413      	add	r3, r2
 800d27e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	00da      	lsls	r2, r3, #3
 800d288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d28c:	4413      	add	r3, r2
 800d28e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d2a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	891b      	ldrh	r3, [r3, #8]
 800d2a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	6959      	ldr	r1, [r3, #20]
 800d2ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f924 	bl	800d506 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2d4:	817b      	strh	r3, [r7, #10]
 800d2d6:	897b      	ldrh	r3, [r7, #10]
 800d2d8:	f083 0310 	eor.w	r3, r3, #16
 800d2dc:	817b      	strh	r3, [r7, #10]
 800d2de:	897b      	ldrh	r3, [r7, #10]
 800d2e0:	f083 0320 	eor.w	r3, r3, #32
 800d2e4:	817b      	strh	r3, [r7, #10]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	441a      	add	r2, r3
 800d2f0:	897b      	ldrh	r3, [r7, #10]
 800d2f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d302:	b29b      	uxth	r3, r3
 800d304:	8013      	strh	r3, [r2, #0]
 800d306:	e0d5      	b.n	800d4b4 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	7b1b      	ldrb	r3, [r3, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d156      	bne.n	800d3be <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d122      	bne.n	800d35e <USB_EPStartXfer+0x9fe>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	78db      	ldrb	r3, [r3, #3]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d11e      	bne.n	800d35e <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d336:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	441a      	add	r2, r3
 800d344:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d34c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d350:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d358:	b29b      	uxth	r3, r3
 800d35a:	8013      	strh	r3, [r2, #0]
 800d35c:	e01d      	b.n	800d39a <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d374:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	441a      	add	r2, r3
 800d382:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d38a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d38e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d396:	b29b      	uxth	r3, r3
 800d398:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d907      	bls.n	800d3b6 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	699a      	ldr	r2, [r3, #24]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	619a      	str	r2, [r3, #24]
 800d3b4:	e054      	b.n	800d460 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	619a      	str	r2, [r3, #24]
 800d3bc:	e050      	b.n	800d460 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	78db      	ldrb	r3, [r3, #3]
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d142      	bne.n	800d44c <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	69db      	ldr	r3, [r3, #28]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d048      	beq.n	800d460 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4413      	add	r3, r2
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3de:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d005      	beq.n	800d3f6 <USB_EPStartXfer+0xa96>
 800d3ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d3f6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d12e      	bne.n	800d460 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d402:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d128      	bne.n	800d460 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d424:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	441a      	add	r2, r3
 800d432:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d43a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d442:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d446:	b29b      	uxth	r3, r3
 800d448:	8013      	strh	r3, [r2, #0]
 800d44a:	e009      	b.n	800d460 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	78db      	ldrb	r3, [r3, #3]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d103      	bne.n	800d45c <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2200      	movs	r2, #0
 800d458:	619a      	str	r2, [r3, #24]
 800d45a:	e001      	b.n	800d460 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e02a      	b.n	800d4b6 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4413      	add	r3, r2
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d476:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d47a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d47e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d482:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d486:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d48a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d48e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	441a      	add	r2, r3
 800d49c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d4a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	37b0      	adds	r7, #176	@ 0xb0
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d4ca:	78fb      	ldrb	r3, [r7, #3]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d103      	bne.n	800d4d8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2280      	movs	r2, #128	@ 0x80
 800d4d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d506:	b480      	push	{r7}
 800d508:	b08b      	sub	sp, #44	@ 0x2c
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60f8      	str	r0, [r7, #12]
 800d50e:	60b9      	str	r1, [r7, #8]
 800d510:	4611      	mov	r1, r2
 800d512:	461a      	mov	r2, r3
 800d514:	460b      	mov	r3, r1
 800d516:	80fb      	strh	r3, [r7, #6]
 800d518:	4613      	mov	r3, r2
 800d51a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d51c:	88bb      	ldrh	r3, [r7, #4]
 800d51e:	3301      	adds	r3, #1
 800d520:	085b      	lsrs	r3, r3, #1
 800d522:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d52c:	88fa      	ldrh	r2, [r7, #6]
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	4413      	add	r3, r2
 800d532:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d536:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d53c:	e01c      	b.n	800d578 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	3301      	adds	r3, #1
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	b21a      	sxth	r2, r3
 800d550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d554:	4313      	orrs	r3, r2
 800d556:	b21b      	sxth	r3, r3
 800d558:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	8a7a      	ldrh	r2, [r7, #18]
 800d55e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	3302      	adds	r3, #2
 800d564:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	3301      	adds	r3, #1
 800d56a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	3301      	adds	r3, #1
 800d570:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	3b01      	subs	r3, #1
 800d576:	627b      	str	r3, [r7, #36]	@ 0x24
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1df      	bne.n	800d53e <USB_WritePMA+0x38>
  }
}
 800d57e:	bf00      	nop
 800d580:	bf00      	nop
 800d582:	372c      	adds	r7, #44	@ 0x2c
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b08b      	sub	sp, #44	@ 0x2c
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4611      	mov	r1, r2
 800d598:	461a      	mov	r2, r3
 800d59a:	460b      	mov	r3, r1
 800d59c:	80fb      	strh	r3, [r7, #6]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d5a2:	88bb      	ldrh	r3, [r7, #4]
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d5b2:	88fa      	ldrh	r2, [r7, #6]
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d5bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5c2:	e018      	b.n	800d5f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	3302      	adds	r3, #2
 800d5d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	0a1b      	lsrs	r3, r3, #8
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e3      	bne.n	800d5c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d5fc:	88bb      	ldrh	r3, [r7, #4]
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	b29b      	uxth	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	b2da      	uxtb	r2, r3
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	701a      	strb	r2, [r3, #0]
  }
}
 800d618:	bf00      	nop
 800d61a:	372c      	adds	r7, #44	@ 0x2c
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <memset>:
 800d624:	4402      	add	r2, r0
 800d626:	4603      	mov	r3, r0
 800d628:	4293      	cmp	r3, r2
 800d62a:	d100      	bne.n	800d62e <memset+0xa>
 800d62c:	4770      	bx	lr
 800d62e:	f803 1b01 	strb.w	r1, [r3], #1
 800d632:	e7f9      	b.n	800d628 <memset+0x4>

0800d634 <__libc_init_array>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	4d0d      	ldr	r5, [pc, #52]	@ (800d66c <__libc_init_array+0x38>)
 800d638:	4c0d      	ldr	r4, [pc, #52]	@ (800d670 <__libc_init_array+0x3c>)
 800d63a:	1b64      	subs	r4, r4, r5
 800d63c:	10a4      	asrs	r4, r4, #2
 800d63e:	2600      	movs	r6, #0
 800d640:	42a6      	cmp	r6, r4
 800d642:	d109      	bne.n	800d658 <__libc_init_array+0x24>
 800d644:	4d0b      	ldr	r5, [pc, #44]	@ (800d674 <__libc_init_array+0x40>)
 800d646:	4c0c      	ldr	r4, [pc, #48]	@ (800d678 <__libc_init_array+0x44>)
 800d648:	f001 f83e 	bl	800e6c8 <_init>
 800d64c:	1b64      	subs	r4, r4, r5
 800d64e:	10a4      	asrs	r4, r4, #2
 800d650:	2600      	movs	r6, #0
 800d652:	42a6      	cmp	r6, r4
 800d654:	d105      	bne.n	800d662 <__libc_init_array+0x2e>
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	f855 3b04 	ldr.w	r3, [r5], #4
 800d65c:	4798      	blx	r3
 800d65e:	3601      	adds	r6, #1
 800d660:	e7ee      	b.n	800d640 <__libc_init_array+0xc>
 800d662:	f855 3b04 	ldr.w	r3, [r5], #4
 800d666:	4798      	blx	r3
 800d668:	3601      	adds	r6, #1
 800d66a:	e7f2      	b.n	800d652 <__libc_init_array+0x1e>
 800d66c:	0800e908 	.word	0x0800e908
 800d670:	0800e908 	.word	0x0800e908
 800d674:	0800e908 	.word	0x0800e908
 800d678:	0800e90c 	.word	0x0800e90c
 800d67c:	00000000 	.word	0x00000000

0800d680 <sin>:
 800d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d682:	ec53 2b10 	vmov	r2, r3, d0
 800d686:	4826      	ldr	r0, [pc, #152]	@ (800d720 <sin+0xa0>)
 800d688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d68c:	4281      	cmp	r1, r0
 800d68e:	d807      	bhi.n	800d6a0 <sin+0x20>
 800d690:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d718 <sin+0x98>
 800d694:	2000      	movs	r0, #0
 800d696:	b005      	add	sp, #20
 800d698:	f85d eb04 	ldr.w	lr, [sp], #4
 800d69c:	f000 b90c 	b.w	800d8b8 <__kernel_sin>
 800d6a0:	4820      	ldr	r0, [pc, #128]	@ (800d724 <sin+0xa4>)
 800d6a2:	4281      	cmp	r1, r0
 800d6a4:	d908      	bls.n	800d6b8 <sin+0x38>
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7f2 fdc1 	bl	8000230 <__aeabi_dsub>
 800d6ae:	ec41 0b10 	vmov	d0, r0, r1
 800d6b2:	b005      	add	sp, #20
 800d6b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6b8:	4668      	mov	r0, sp
 800d6ba:	f000 f9b9 	bl	800da30 <__ieee754_rem_pio2>
 800d6be:	f000 0003 	and.w	r0, r0, #3
 800d6c2:	2801      	cmp	r0, #1
 800d6c4:	d00c      	beq.n	800d6e0 <sin+0x60>
 800d6c6:	2802      	cmp	r0, #2
 800d6c8:	d011      	beq.n	800d6ee <sin+0x6e>
 800d6ca:	b9e8      	cbnz	r0, 800d708 <sin+0x88>
 800d6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d0:	ed9d 0b00 	vldr	d0, [sp]
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f000 f8ef 	bl	800d8b8 <__kernel_sin>
 800d6da:	ec51 0b10 	vmov	r0, r1, d0
 800d6de:	e7e6      	b.n	800d6ae <sin+0x2e>
 800d6e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e4:	ed9d 0b00 	vldr	d0, [sp]
 800d6e8:	f000 f81e 	bl	800d728 <__kernel_cos>
 800d6ec:	e7f5      	b.n	800d6da <sin+0x5a>
 800d6ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6f2:	ed9d 0b00 	vldr	d0, [sp]
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	f000 f8de 	bl	800d8b8 <__kernel_sin>
 800d6fc:	ec53 2b10 	vmov	r2, r3, d0
 800d700:	4610      	mov	r0, r2
 800d702:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d706:	e7d2      	b.n	800d6ae <sin+0x2e>
 800d708:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d70c:	ed9d 0b00 	vldr	d0, [sp]
 800d710:	f000 f80a 	bl	800d728 <__kernel_cos>
 800d714:	e7f2      	b.n	800d6fc <sin+0x7c>
 800d716:	bf00      	nop
	...
 800d720:	3fe921fb 	.word	0x3fe921fb
 800d724:	7fefffff 	.word	0x7fefffff

0800d728 <__kernel_cos>:
 800d728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	ec57 6b10 	vmov	r6, r7, d0
 800d730:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d734:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d738:	ed8d 1b00 	vstr	d1, [sp]
 800d73c:	d206      	bcs.n	800d74c <__kernel_cos+0x24>
 800d73e:	4630      	mov	r0, r6
 800d740:	4639      	mov	r1, r7
 800d742:	f7f3 f9c7 	bl	8000ad4 <__aeabi_d2iz>
 800d746:	2800      	cmp	r0, #0
 800d748:	f000 8088 	beq.w	800d85c <__kernel_cos+0x134>
 800d74c:	4632      	mov	r2, r6
 800d74e:	463b      	mov	r3, r7
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 ff24 	bl	80005a0 <__aeabi_dmul>
 800d758:	4b51      	ldr	r3, [pc, #324]	@ (800d8a0 <__kernel_cos+0x178>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	4604      	mov	r4, r0
 800d75e:	460d      	mov	r5, r1
 800d760:	f7f2 ff1e 	bl	80005a0 <__aeabi_dmul>
 800d764:	a340      	add	r3, pc, #256	@ (adr r3, 800d868 <__kernel_cos+0x140>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	4682      	mov	sl, r0
 800d76c:	468b      	mov	fp, r1
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f2 ff15 	bl	80005a0 <__aeabi_dmul>
 800d776:	a33e      	add	r3, pc, #248	@ (adr r3, 800d870 <__kernel_cos+0x148>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 fd5a 	bl	8000234 <__adddf3>
 800d780:	4622      	mov	r2, r4
 800d782:	462b      	mov	r3, r5
 800d784:	f7f2 ff0c 	bl	80005a0 <__aeabi_dmul>
 800d788:	a33b      	add	r3, pc, #236	@ (adr r3, 800d878 <__kernel_cos+0x150>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	f7f2 fd4f 	bl	8000230 <__aeabi_dsub>
 800d792:	4622      	mov	r2, r4
 800d794:	462b      	mov	r3, r5
 800d796:	f7f2 ff03 	bl	80005a0 <__aeabi_dmul>
 800d79a:	a339      	add	r3, pc, #228	@ (adr r3, 800d880 <__kernel_cos+0x158>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd48 	bl	8000234 <__adddf3>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f7f2 fefa 	bl	80005a0 <__aeabi_dmul>
 800d7ac:	a336      	add	r3, pc, #216	@ (adr r3, 800d888 <__kernel_cos+0x160>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd3d 	bl	8000230 <__aeabi_dsub>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	f7f2 fef1 	bl	80005a0 <__aeabi_dmul>
 800d7be:	a334      	add	r3, pc, #208	@ (adr r3, 800d890 <__kernel_cos+0x168>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f7f2 fd36 	bl	8000234 <__adddf3>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f7f2 fee8 	bl	80005a0 <__aeabi_dmul>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	462b      	mov	r3, r5
 800d7d4:	f7f2 fee4 	bl	80005a0 <__aeabi_dmul>
 800d7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7dc:	4604      	mov	r4, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	f7f2 fedc 	bl	80005a0 <__aeabi_dmul>
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7f2 fd1e 	bl	8000230 <__aeabi_dsub>
 800d7f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d8a4 <__kernel_cos+0x17c>)
 800d7f6:	4598      	cmp	r8, r3
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	d810      	bhi.n	800d820 <__kernel_cos+0xf8>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fd13 	bl	8000230 <__aeabi_dsub>
 800d80a:	460b      	mov	r3, r1
 800d80c:	4926      	ldr	r1, [pc, #152]	@ (800d8a8 <__kernel_cos+0x180>)
 800d80e:	4602      	mov	r2, r0
 800d810:	2000      	movs	r0, #0
 800d812:	f7f2 fd0d 	bl	8000230 <__aeabi_dsub>
 800d816:	ec41 0b10 	vmov	d0, r0, r1
 800d81a:	b003      	add	sp, #12
 800d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d820:	4b22      	ldr	r3, [pc, #136]	@ (800d8ac <__kernel_cos+0x184>)
 800d822:	4921      	ldr	r1, [pc, #132]	@ (800d8a8 <__kernel_cos+0x180>)
 800d824:	4598      	cmp	r8, r3
 800d826:	bf8c      	ite	hi
 800d828:	4d21      	ldrhi	r5, [pc, #132]	@ (800d8b0 <__kernel_cos+0x188>)
 800d82a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d82e:	2400      	movs	r4, #0
 800d830:	4622      	mov	r2, r4
 800d832:	462b      	mov	r3, r5
 800d834:	2000      	movs	r0, #0
 800d836:	f7f2 fcfb 	bl	8000230 <__aeabi_dsub>
 800d83a:	4622      	mov	r2, r4
 800d83c:	4680      	mov	r8, r0
 800d83e:	4689      	mov	r9, r1
 800d840:	462b      	mov	r3, r5
 800d842:	4650      	mov	r0, sl
 800d844:	4659      	mov	r1, fp
 800d846:	f7f2 fcf3 	bl	8000230 <__aeabi_dsub>
 800d84a:	4632      	mov	r2, r6
 800d84c:	463b      	mov	r3, r7
 800d84e:	f7f2 fcef 	bl	8000230 <__aeabi_dsub>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	e7da      	b.n	800d812 <__kernel_cos+0xea>
 800d85c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d898 <__kernel_cos+0x170>
 800d860:	e7db      	b.n	800d81a <__kernel_cos+0xf2>
 800d862:	bf00      	nop
 800d864:	f3af 8000 	nop.w
 800d868:	be8838d4 	.word	0xbe8838d4
 800d86c:	bda8fae9 	.word	0xbda8fae9
 800d870:	bdb4b1c4 	.word	0xbdb4b1c4
 800d874:	3e21ee9e 	.word	0x3e21ee9e
 800d878:	809c52ad 	.word	0x809c52ad
 800d87c:	3e927e4f 	.word	0x3e927e4f
 800d880:	19cb1590 	.word	0x19cb1590
 800d884:	3efa01a0 	.word	0x3efa01a0
 800d888:	16c15177 	.word	0x16c15177
 800d88c:	3f56c16c 	.word	0x3f56c16c
 800d890:	5555554c 	.word	0x5555554c
 800d894:	3fa55555 	.word	0x3fa55555
 800d898:	00000000 	.word	0x00000000
 800d89c:	3ff00000 	.word	0x3ff00000
 800d8a0:	3fe00000 	.word	0x3fe00000
 800d8a4:	3fd33332 	.word	0x3fd33332
 800d8a8:	3ff00000 	.word	0x3ff00000
 800d8ac:	3fe90000 	.word	0x3fe90000
 800d8b0:	3fd20000 	.word	0x3fd20000
 800d8b4:	00000000 	.word	0x00000000

0800d8b8 <__kernel_sin>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	ec55 4b10 	vmov	r4, r5, d0
 800d8c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d8ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d8ce:	4680      	mov	r8, r0
 800d8d0:	d205      	bcs.n	800d8de <__kernel_sin+0x26>
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f3 f8fd 	bl	8000ad4 <__aeabi_d2iz>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d052      	beq.n	800d984 <__kernel_sin+0xcc>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	f7f2 fe5b 	bl	80005a0 <__aeabi_dmul>
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	468b      	mov	fp, r1
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f2 fe53 	bl	80005a0 <__aeabi_dmul>
 800d8fa:	a342      	add	r3, pc, #264	@ (adr r3, 800da04 <__kernel_sin+0x14c>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	e9cd 0100 	strd	r0, r1, [sp]
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	f7f2 fe4a 	bl	80005a0 <__aeabi_dmul>
 800d90c:	a33f      	add	r3, pc, #252	@ (adr r3, 800da0c <__kernel_sin+0x154>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fc8d 	bl	8000230 <__aeabi_dsub>
 800d916:	4652      	mov	r2, sl
 800d918:	465b      	mov	r3, fp
 800d91a:	f7f2 fe41 	bl	80005a0 <__aeabi_dmul>
 800d91e:	a33d      	add	r3, pc, #244	@ (adr r3, 800da14 <__kernel_sin+0x15c>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fc86 	bl	8000234 <__adddf3>
 800d928:	4652      	mov	r2, sl
 800d92a:	465b      	mov	r3, fp
 800d92c:	f7f2 fe38 	bl	80005a0 <__aeabi_dmul>
 800d930:	a33a      	add	r3, pc, #232	@ (adr r3, 800da1c <__kernel_sin+0x164>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fc7b 	bl	8000230 <__aeabi_dsub>
 800d93a:	4652      	mov	r2, sl
 800d93c:	465b      	mov	r3, fp
 800d93e:	f7f2 fe2f 	bl	80005a0 <__aeabi_dmul>
 800d942:	a338      	add	r3, pc, #224	@ (adr r3, 800da24 <__kernel_sin+0x16c>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fc74 	bl	8000234 <__adddf3>
 800d94c:	4606      	mov	r6, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	d11b      	bne.n	800d98e <__kernel_sin+0xd6>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4650      	mov	r0, sl
 800d95c:	4659      	mov	r1, fp
 800d95e:	f7f2 fe1f 	bl	80005a0 <__aeabi_dmul>
 800d962:	a325      	add	r3, pc, #148	@ (adr r3, 800d9f8 <__kernel_sin+0x140>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	f7f2 fc62 	bl	8000230 <__aeabi_dsub>
 800d96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d970:	f7f2 fe16 	bl	80005a0 <__aeabi_dmul>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4620      	mov	r0, r4
 800d97a:	4629      	mov	r1, r5
 800d97c:	f7f2 fc5a 	bl	8000234 <__adddf3>
 800d980:	4604      	mov	r4, r0
 800d982:	460d      	mov	r5, r1
 800d984:	ec45 4b10 	vmov	d0, r4, r5
 800d988:	b005      	add	sp, #20
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d992:	4b1b      	ldr	r3, [pc, #108]	@ (800da00 <__kernel_sin+0x148>)
 800d994:	2200      	movs	r2, #0
 800d996:	f7f2 fe03 	bl	80005a0 <__aeabi_dmul>
 800d99a:	4632      	mov	r2, r6
 800d99c:	4680      	mov	r8, r0
 800d99e:	4689      	mov	r9, r1
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9a6:	f7f2 fdfb 	bl	80005a0 <__aeabi_dmul>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	f7f2 fc3d 	bl	8000230 <__aeabi_dsub>
 800d9b6:	4652      	mov	r2, sl
 800d9b8:	465b      	mov	r3, fp
 800d9ba:	f7f2 fdf1 	bl	80005a0 <__aeabi_dmul>
 800d9be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c2:	f7f2 fc35 	bl	8000230 <__aeabi_dsub>
 800d9c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d9f8 <__kernel_sin+0x140>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9d4:	f7f2 fde4 	bl	80005a0 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f2 fc28 	bl	8000234 <__adddf3>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7f2 fc20 	bl	8000230 <__aeabi_dsub>
 800d9f0:	e7c6      	b.n	800d980 <__kernel_sin+0xc8>
 800d9f2:	bf00      	nop
 800d9f4:	f3af 8000 	nop.w
 800d9f8:	55555549 	.word	0x55555549
 800d9fc:	3fc55555 	.word	0x3fc55555
 800da00:	3fe00000 	.word	0x3fe00000
 800da04:	5acfd57c 	.word	0x5acfd57c
 800da08:	3de5d93a 	.word	0x3de5d93a
 800da0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800da10:	3e5ae5e6 	.word	0x3e5ae5e6
 800da14:	57b1fe7d 	.word	0x57b1fe7d
 800da18:	3ec71de3 	.word	0x3ec71de3
 800da1c:	19c161d5 	.word	0x19c161d5
 800da20:	3f2a01a0 	.word	0x3f2a01a0
 800da24:	1110f8a6 	.word	0x1110f8a6
 800da28:	3f811111 	.word	0x3f811111
 800da2c:	00000000 	.word	0x00000000

0800da30 <__ieee754_rem_pio2>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ec57 6b10 	vmov	r6, r7, d0
 800da38:	4bc5      	ldr	r3, [pc, #788]	@ (800dd50 <__ieee754_rem_pio2+0x320>)
 800da3a:	b08d      	sub	sp, #52	@ 0x34
 800da3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800da40:	4598      	cmp	r8, r3
 800da42:	4604      	mov	r4, r0
 800da44:	9704      	str	r7, [sp, #16]
 800da46:	d807      	bhi.n	800da58 <__ieee754_rem_pio2+0x28>
 800da48:	2200      	movs	r2, #0
 800da4a:	2300      	movs	r3, #0
 800da4c:	ed80 0b00 	vstr	d0, [r0]
 800da50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da54:	2500      	movs	r5, #0
 800da56:	e028      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800da58:	4bbe      	ldr	r3, [pc, #760]	@ (800dd54 <__ieee754_rem_pio2+0x324>)
 800da5a:	4598      	cmp	r8, r3
 800da5c:	d878      	bhi.n	800db50 <__ieee754_rem_pio2+0x120>
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	4dbd      	ldr	r5, [pc, #756]	@ (800dd58 <__ieee754_rem_pio2+0x328>)
 800da62:	2b00      	cmp	r3, #0
 800da64:	4630      	mov	r0, r6
 800da66:	a3ac      	add	r3, pc, #688	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2e8>)
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	4639      	mov	r1, r7
 800da6e:	dd38      	ble.n	800dae2 <__ieee754_rem_pio2+0xb2>
 800da70:	f7f2 fbde 	bl	8000230 <__aeabi_dsub>
 800da74:	45a8      	cmp	r8, r5
 800da76:	4606      	mov	r6, r0
 800da78:	460f      	mov	r7, r1
 800da7a:	d01a      	beq.n	800dab2 <__ieee754_rem_pio2+0x82>
 800da7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f7f2 fbd5 	bl	8000230 <__aeabi_dsub>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	4680      	mov	r8, r0
 800da8c:	4689      	mov	r9, r1
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fbcd 	bl	8000230 <__aeabi_dsub>
 800da96:	a3a2      	add	r3, pc, #648	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fbc8 	bl	8000230 <__aeabi_dsub>
 800daa0:	e9c4 8900 	strd	r8, r9, [r4]
 800daa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800daa8:	2501      	movs	r5, #1
 800daaa:	4628      	mov	r0, r5
 800daac:	b00d      	add	sp, #52	@ 0x34
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	a39d      	add	r3, pc, #628	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fbba 	bl	8000230 <__aeabi_dsub>
 800dabc:	a39c      	add	r3, pc, #624	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	f7f2 fbb3 	bl	8000230 <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4680      	mov	r8, r0
 800dad0:	4689      	mov	r9, r1
 800dad2:	4630      	mov	r0, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f7f2 fbab 	bl	8000230 <__aeabi_dsub>
 800dada:	a395      	add	r3, pc, #596	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	e7dc      	b.n	800da9c <__ieee754_rem_pio2+0x6c>
 800dae2:	f7f2 fba7 	bl	8000234 <__adddf3>
 800dae6:	45a8      	cmp	r8, r5
 800dae8:	4606      	mov	r6, r0
 800daea:	460f      	mov	r7, r1
 800daec:	d018      	beq.n	800db20 <__ieee754_rem_pio2+0xf0>
 800daee:	a38c      	add	r3, pc, #560	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	f7f2 fb9e 	bl	8000234 <__adddf3>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 fb94 	bl	8000230 <__aeabi_dsub>
 800db08:	a385      	add	r3, pc, #532	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fb91 	bl	8000234 <__adddf3>
 800db12:	f04f 35ff 	mov.w	r5, #4294967295
 800db16:	e9c4 8900 	strd	r8, r9, [r4]
 800db1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db1e:	e7c4      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800db20:	a381      	add	r3, pc, #516	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fb85 	bl	8000234 <__adddf3>
 800db2a:	a381      	add	r3, pc, #516	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	4606      	mov	r6, r0
 800db32:	460f      	mov	r7, r1
 800db34:	f7f2 fb7e 	bl	8000234 <__adddf3>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4680      	mov	r8, r0
 800db3e:	4689      	mov	r9, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fb74 	bl	8000230 <__aeabi_dsub>
 800db48:	a379      	add	r3, pc, #484	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	e7de      	b.n	800db0e <__ieee754_rem_pio2+0xde>
 800db50:	4b82      	ldr	r3, [pc, #520]	@ (800dd5c <__ieee754_rem_pio2+0x32c>)
 800db52:	4598      	cmp	r8, r3
 800db54:	f200 80d1 	bhi.w	800dcfa <__ieee754_rem_pio2+0x2ca>
 800db58:	f000 f966 	bl	800de28 <fabs>
 800db5c:	ec57 6b10 	vmov	r6, r7, d0
 800db60:	a375      	add	r3, pc, #468	@ (adr r3, 800dd38 <__ieee754_rem_pio2+0x308>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	4630      	mov	r0, r6
 800db68:	4639      	mov	r1, r7
 800db6a:	f7f2 fd19 	bl	80005a0 <__aeabi_dmul>
 800db6e:	4b7c      	ldr	r3, [pc, #496]	@ (800dd60 <__ieee754_rem_pio2+0x330>)
 800db70:	2200      	movs	r2, #0
 800db72:	f7f2 fb5f 	bl	8000234 <__adddf3>
 800db76:	f7f2 ffad 	bl	8000ad4 <__aeabi_d2iz>
 800db7a:	4605      	mov	r5, r0
 800db7c:	f7f2 fca6 	bl	80004cc <__aeabi_i2d>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db88:	a363      	add	r3, pc, #396	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2e8>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	f7f2 fd07 	bl	80005a0 <__aeabi_dmul>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4630      	mov	r0, r6
 800db98:	4639      	mov	r1, r7
 800db9a:	f7f2 fb49 	bl	8000230 <__aeabi_dsub>
 800db9e:	a360      	add	r3, pc, #384	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbac:	f7f2 fcf8 	bl	80005a0 <__aeabi_dmul>
 800dbb0:	2d1f      	cmp	r5, #31
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	dc0c      	bgt.n	800dbd2 <__ieee754_rem_pio2+0x1a2>
 800dbb8:	4b6a      	ldr	r3, [pc, #424]	@ (800dd64 <__ieee754_rem_pio2+0x334>)
 800dbba:	1e6a      	subs	r2, r5, #1
 800dbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc0:	4543      	cmp	r3, r8
 800dbc2:	d006      	beq.n	800dbd2 <__ieee754_rem_pio2+0x1a2>
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	463b      	mov	r3, r7
 800dbc8:	4650      	mov	r0, sl
 800dbca:	4659      	mov	r1, fp
 800dbcc:	f7f2 fb30 	bl	8000230 <__aeabi_dsub>
 800dbd0:	e00e      	b.n	800dbf0 <__ieee754_rem_pio2+0x1c0>
 800dbd2:	463b      	mov	r3, r7
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	4659      	mov	r1, fp
 800dbda:	f7f2 fb29 	bl	8000230 <__aeabi_dsub>
 800dbde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dbe8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	dc02      	bgt.n	800dbf6 <__ieee754_rem_pio2+0x1c6>
 800dbf0:	e9c4 0100 	strd	r0, r1, [r4]
 800dbf4:	e039      	b.n	800dc6a <__ieee754_rem_pio2+0x23a>
 800dbf6:	a34c      	add	r3, pc, #304	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc00:	f7f2 fcce 	bl	80005a0 <__aeabi_dmul>
 800dc04:	4606      	mov	r6, r0
 800dc06:	460f      	mov	r7, r1
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	4659      	mov	r1, fp
 800dc10:	f7f2 fb0e 	bl	8000230 <__aeabi_dsub>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4680      	mov	r8, r0
 800dc1a:	4689      	mov	r9, r1
 800dc1c:	4650      	mov	r0, sl
 800dc1e:	4659      	mov	r1, fp
 800dc20:	f7f2 fb06 	bl	8000230 <__aeabi_dsub>
 800dc24:	4632      	mov	r2, r6
 800dc26:	463b      	mov	r3, r7
 800dc28:	f7f2 fb02 	bl	8000230 <__aeabi_dsub>
 800dc2c:	a340      	add	r3, pc, #256	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc3a:	f7f2 fcb1 	bl	80005a0 <__aeabi_dmul>
 800dc3e:	4632      	mov	r2, r6
 800dc40:	463b      	mov	r3, r7
 800dc42:	f7f2 faf5 	bl	8000230 <__aeabi_dsub>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460f      	mov	r7, r1
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f2 faed 	bl	8000230 <__aeabi_dsub>
 800dc56:	9a05      	ldr	r2, [sp, #20]
 800dc58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	2b31      	cmp	r3, #49	@ 0x31
 800dc60:	dc20      	bgt.n	800dca4 <__ieee754_rem_pio2+0x274>
 800dc62:	e9c4 0100 	strd	r0, r1, [r4]
 800dc66:	46c2      	mov	sl, r8
 800dc68:	46cb      	mov	fp, r9
 800dc6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dc6e:	4650      	mov	r0, sl
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	4659      	mov	r1, fp
 800dc76:	f7f2 fadb 	bl	8000230 <__aeabi_dsub>
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	f7f2 fad7 	bl	8000230 <__aeabi_dsub>
 800dc82:	9b04      	ldr	r3, [sp, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc8a:	f6bf af0e 	bge.w	800daaa <__ieee754_rem_pio2+0x7a>
 800dc8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dc92:	6063      	str	r3, [r4, #4]
 800dc94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc98:	f8c4 8000 	str.w	r8, [r4]
 800dc9c:	60a0      	str	r0, [r4, #8]
 800dc9e:	60e3      	str	r3, [r4, #12]
 800dca0:	426d      	negs	r5, r5
 800dca2:	e702      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800dca4:	a326      	add	r3, pc, #152	@ (adr r3, 800dd40 <__ieee754_rem_pio2+0x310>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcae:	f7f2 fc77 	bl	80005a0 <__aeabi_dmul>
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 fab7 	bl	8000230 <__aeabi_dsub>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4682      	mov	sl, r0
 800dcc8:	468b      	mov	fp, r1
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f2 faaf 	bl	8000230 <__aeabi_dsub>
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	f7f2 faab 	bl	8000230 <__aeabi_dsub>
 800dcda:	a31b      	add	r3, pc, #108	@ (adr r3, 800dd48 <__ieee754_rem_pio2+0x318>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	4606      	mov	r6, r0
 800dce2:	460f      	mov	r7, r1
 800dce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce8:	f7f2 fc5a 	bl	80005a0 <__aeabi_dmul>
 800dcec:	4632      	mov	r2, r6
 800dcee:	463b      	mov	r3, r7
 800dcf0:	f7f2 fa9e 	bl	8000230 <__aeabi_dsub>
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460f      	mov	r7, r1
 800dcf8:	e764      	b.n	800dbc4 <__ieee754_rem_pio2+0x194>
 800dcfa:	4b1b      	ldr	r3, [pc, #108]	@ (800dd68 <__ieee754_rem_pio2+0x338>)
 800dcfc:	4598      	cmp	r8, r3
 800dcfe:	d935      	bls.n	800dd6c <__ieee754_rem_pio2+0x33c>
 800dd00:	4632      	mov	r2, r6
 800dd02:	463b      	mov	r3, r7
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	f7f2 fa92 	bl	8000230 <__aeabi_dsub>
 800dd0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd10:	e9c4 0100 	strd	r0, r1, [r4]
 800dd14:	e69e      	b.n	800da54 <__ieee754_rem_pio2+0x24>
 800dd16:	bf00      	nop
 800dd18:	54400000 	.word	0x54400000
 800dd1c:	3ff921fb 	.word	0x3ff921fb
 800dd20:	1a626331 	.word	0x1a626331
 800dd24:	3dd0b461 	.word	0x3dd0b461
 800dd28:	1a600000 	.word	0x1a600000
 800dd2c:	3dd0b461 	.word	0x3dd0b461
 800dd30:	2e037073 	.word	0x2e037073
 800dd34:	3ba3198a 	.word	0x3ba3198a
 800dd38:	6dc9c883 	.word	0x6dc9c883
 800dd3c:	3fe45f30 	.word	0x3fe45f30
 800dd40:	2e000000 	.word	0x2e000000
 800dd44:	3ba3198a 	.word	0x3ba3198a
 800dd48:	252049c1 	.word	0x252049c1
 800dd4c:	397b839a 	.word	0x397b839a
 800dd50:	3fe921fb 	.word	0x3fe921fb
 800dd54:	4002d97b 	.word	0x4002d97b
 800dd58:	3ff921fb 	.word	0x3ff921fb
 800dd5c:	413921fb 	.word	0x413921fb
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	0800e728 	.word	0x0800e728
 800dd68:	7fefffff 	.word	0x7fefffff
 800dd6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dd70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800dd74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dd78:	4630      	mov	r0, r6
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	f7f2 feaa 	bl	8000ad4 <__aeabi_d2iz>
 800dd80:	f7f2 fba4 	bl	80004cc <__aeabi_i2d>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd90:	f7f2 fa4e 	bl	8000230 <__aeabi_dsub>
 800dd94:	4b22      	ldr	r3, [pc, #136]	@ (800de20 <__ieee754_rem_pio2+0x3f0>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	f7f2 fc02 	bl	80005a0 <__aeabi_dmul>
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	4606      	mov	r6, r0
 800dda0:	f7f2 fe98 	bl	8000ad4 <__aeabi_d2iz>
 800dda4:	f7f2 fb92 	bl	80004cc <__aeabi_i2d>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddb4:	f7f2 fa3c 	bl	8000230 <__aeabi_dsub>
 800ddb8:	4b19      	ldr	r3, [pc, #100]	@ (800de20 <__ieee754_rem_pio2+0x3f0>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f7f2 fbf0 	bl	80005a0 <__aeabi_dmul>
 800ddc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ddc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ddc8:	f04f 0803 	mov.w	r8, #3
 800ddcc:	2600      	movs	r6, #0
 800ddce:	2700      	movs	r7, #0
 800ddd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	46c2      	mov	sl, r8
 800ddda:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddde:	f7f2 fe47 	bl	8000a70 <__aeabi_dcmpeq>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d1f4      	bne.n	800ddd0 <__ieee754_rem_pio2+0x3a0>
 800dde6:	4b0f      	ldr	r3, [pc, #60]	@ (800de24 <__ieee754_rem_pio2+0x3f4>)
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	2302      	movs	r3, #2
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4653      	mov	r3, sl
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	a806      	add	r0, sp, #24
 800ddf6:	f000 f81f 	bl	800de38 <__kernel_rem_pio2>
 800ddfa:	9b04      	ldr	r3, [sp, #16]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	4605      	mov	r5, r0
 800de00:	f6bf ae53 	bge.w	800daaa <__ieee754_rem_pio2+0x7a>
 800de04:	e9d4 2100 	ldrd	r2, r1, [r4]
 800de08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de0c:	e9c4 2300 	strd	r2, r3, [r4]
 800de10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800de14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800de1c:	e740      	b.n	800dca0 <__ieee754_rem_pio2+0x270>
 800de1e:	bf00      	nop
 800de20:	41700000 	.word	0x41700000
 800de24:	0800e7a8 	.word	0x0800e7a8

0800de28 <fabs>:
 800de28:	ec51 0b10 	vmov	r0, r1, d0
 800de2c:	4602      	mov	r2, r0
 800de2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de32:	ec43 2b10 	vmov	d0, r2, r3
 800de36:	4770      	bx	lr

0800de38 <__kernel_rem_pio2>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b02 	vpush	{d8}
 800de40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800de44:	f112 0f14 	cmn.w	r2, #20
 800de48:	9306      	str	r3, [sp, #24]
 800de4a:	9104      	str	r1, [sp, #16]
 800de4c:	4bc2      	ldr	r3, [pc, #776]	@ (800e158 <__kernel_rem_pio2+0x320>)
 800de4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800de50:	9008      	str	r0, [sp, #32]
 800de52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	9b06      	ldr	r3, [sp, #24]
 800de5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800de5e:	bfa8      	it	ge
 800de60:	1ed4      	subge	r4, r2, #3
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	bfb2      	itee	lt
 800de66:	2400      	movlt	r4, #0
 800de68:	2318      	movge	r3, #24
 800de6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800de6e:	f06f 0317 	mvn.w	r3, #23
 800de72:	fb04 3303 	mla	r3, r4, r3, r3
 800de76:	eb03 0b02 	add.w	fp, r3, r2
 800de7a:	9b00      	ldr	r3, [sp, #0]
 800de7c:	9a05      	ldr	r2, [sp, #20]
 800de7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800e148 <__kernel_rem_pio2+0x310>
 800de82:	eb03 0802 	add.w	r8, r3, r2
 800de86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800de88:	1aa7      	subs	r7, r4, r2
 800de8a:	ae20      	add	r6, sp, #128	@ 0x80
 800de8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de90:	2500      	movs	r5, #0
 800de92:	4545      	cmp	r5, r8
 800de94:	dd12      	ble.n	800debc <__kernel_rem_pio2+0x84>
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	aa20      	add	r2, sp, #128	@ 0x80
 800de9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800de9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800dea2:	2700      	movs	r7, #0
 800dea4:	9b00      	ldr	r3, [sp, #0]
 800dea6:	429f      	cmp	r7, r3
 800dea8:	dc2e      	bgt.n	800df08 <__kernel_rem_pio2+0xd0>
 800deaa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800e148 <__kernel_rem_pio2+0x310>
 800deae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800deb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800deb6:	46a8      	mov	r8, r5
 800deb8:	2600      	movs	r6, #0
 800deba:	e01b      	b.n	800def4 <__kernel_rem_pio2+0xbc>
 800debc:	42ef      	cmn	r7, r5
 800debe:	d407      	bmi.n	800ded0 <__kernel_rem_pio2+0x98>
 800dec0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dec4:	f7f2 fb02 	bl	80004cc <__aeabi_i2d>
 800dec8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800decc:	3501      	adds	r5, #1
 800dece:	e7e0      	b.n	800de92 <__kernel_rem_pio2+0x5a>
 800ded0:	ec51 0b18 	vmov	r0, r1, d8
 800ded4:	e7f8      	b.n	800dec8 <__kernel_rem_pio2+0x90>
 800ded6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800deda:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dede:	f7f2 fb5f 	bl	80005a0 <__aeabi_dmul>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deea:	f7f2 f9a3 	bl	8000234 <__adddf3>
 800deee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def2:	3601      	adds	r6, #1
 800def4:	9b05      	ldr	r3, [sp, #20]
 800def6:	429e      	cmp	r6, r3
 800def8:	dded      	ble.n	800ded6 <__kernel_rem_pio2+0x9e>
 800defa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800defe:	3701      	adds	r7, #1
 800df00:	ecaa 7b02 	vstmia	sl!, {d7}
 800df04:	3508      	adds	r5, #8
 800df06:	e7cd      	b.n	800dea4 <__kernel_rem_pio2+0x6c>
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	f8dd 8000 	ldr.w	r8, [sp]
 800df0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800df10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df14:	930a      	str	r3, [sp, #40]	@ 0x28
 800df16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800df18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800df22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df24:	ab98      	add	r3, sp, #608	@ 0x260
 800df26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800df2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df32:	ac0c      	add	r4, sp, #48	@ 0x30
 800df34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800df36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800df3a:	46a1      	mov	r9, r4
 800df3c:	46c2      	mov	sl, r8
 800df3e:	f1ba 0f00 	cmp.w	sl, #0
 800df42:	dc77      	bgt.n	800e034 <__kernel_rem_pio2+0x1fc>
 800df44:	4658      	mov	r0, fp
 800df46:	ed9d 0b02 	vldr	d0, [sp, #8]
 800df4a:	f000 fac5 	bl	800e4d8 <scalbn>
 800df4e:	ec57 6b10 	vmov	r6, r7, d0
 800df52:	2200      	movs	r2, #0
 800df54:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fb20 	bl	80005a0 <__aeabi_dmul>
 800df60:	ec41 0b10 	vmov	d0, r0, r1
 800df64:	f000 fb34 	bl	800e5d0 <floor>
 800df68:	4b7c      	ldr	r3, [pc, #496]	@ (800e15c <__kernel_rem_pio2+0x324>)
 800df6a:	ec51 0b10 	vmov	r0, r1, d0
 800df6e:	2200      	movs	r2, #0
 800df70:	f7f2 fb16 	bl	80005a0 <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4630      	mov	r0, r6
 800df7a:	4639      	mov	r1, r7
 800df7c:	f7f2 f958 	bl	8000230 <__aeabi_dsub>
 800df80:	460f      	mov	r7, r1
 800df82:	4606      	mov	r6, r0
 800df84:	f7f2 fda6 	bl	8000ad4 <__aeabi_d2iz>
 800df88:	9002      	str	r0, [sp, #8]
 800df8a:	f7f2 fa9f 	bl	80004cc <__aeabi_i2d>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 f94b 	bl	8000230 <__aeabi_dsub>
 800df9a:	f1bb 0f00 	cmp.w	fp, #0
 800df9e:	4606      	mov	r6, r0
 800dfa0:	460f      	mov	r7, r1
 800dfa2:	dd6c      	ble.n	800e07e <__kernel_rem_pio2+0x246>
 800dfa4:	f108 31ff 	add.w	r1, r8, #4294967295
 800dfa8:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfaa:	9d02      	ldr	r5, [sp, #8]
 800dfac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfb0:	f1cb 0018 	rsb	r0, fp, #24
 800dfb4:	fa43 f200 	asr.w	r2, r3, r0
 800dfb8:	4415      	add	r5, r2
 800dfba:	4082      	lsls	r2, r0
 800dfbc:	1a9b      	subs	r3, r3, r2
 800dfbe:	aa0c      	add	r2, sp, #48	@ 0x30
 800dfc0:	9502      	str	r5, [sp, #8]
 800dfc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dfc6:	f1cb 0217 	rsb	r2, fp, #23
 800dfca:	fa43 f902 	asr.w	r9, r3, r2
 800dfce:	f1b9 0f00 	cmp.w	r9, #0
 800dfd2:	dd64      	ble.n	800e09e <__kernel_rem_pio2+0x266>
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	4615      	mov	r5, r2
 800dfde:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dfe2:	4590      	cmp	r8, r2
 800dfe4:	f300 80a1 	bgt.w	800e12a <__kernel_rem_pio2+0x2f2>
 800dfe8:	f1bb 0f00 	cmp.w	fp, #0
 800dfec:	dd07      	ble.n	800dffe <__kernel_rem_pio2+0x1c6>
 800dfee:	f1bb 0f01 	cmp.w	fp, #1
 800dff2:	f000 80c1 	beq.w	800e178 <__kernel_rem_pio2+0x340>
 800dff6:	f1bb 0f02 	cmp.w	fp, #2
 800dffa:	f000 80c8 	beq.w	800e18e <__kernel_rem_pio2+0x356>
 800dffe:	f1b9 0f02 	cmp.w	r9, #2
 800e002:	d14c      	bne.n	800e09e <__kernel_rem_pio2+0x266>
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	4955      	ldr	r1, [pc, #340]	@ (800e160 <__kernel_rem_pio2+0x328>)
 800e00a:	2000      	movs	r0, #0
 800e00c:	f7f2 f910 	bl	8000230 <__aeabi_dsub>
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	2d00      	cmp	r5, #0
 800e016:	d042      	beq.n	800e09e <__kernel_rem_pio2+0x266>
 800e018:	4658      	mov	r0, fp
 800e01a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800e150 <__kernel_rem_pio2+0x318>
 800e01e:	f000 fa5b 	bl	800e4d8 <scalbn>
 800e022:	4630      	mov	r0, r6
 800e024:	4639      	mov	r1, r7
 800e026:	ec53 2b10 	vmov	r2, r3, d0
 800e02a:	f7f2 f901 	bl	8000230 <__aeabi_dsub>
 800e02e:	4606      	mov	r6, r0
 800e030:	460f      	mov	r7, r1
 800e032:	e034      	b.n	800e09e <__kernel_rem_pio2+0x266>
 800e034:	4b4b      	ldr	r3, [pc, #300]	@ (800e164 <__kernel_rem_pio2+0x32c>)
 800e036:	2200      	movs	r2, #0
 800e038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e03c:	f7f2 fab0 	bl	80005a0 <__aeabi_dmul>
 800e040:	f7f2 fd48 	bl	8000ad4 <__aeabi_d2iz>
 800e044:	f7f2 fa42 	bl	80004cc <__aeabi_i2d>
 800e048:	4b47      	ldr	r3, [pc, #284]	@ (800e168 <__kernel_rem_pio2+0x330>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	4606      	mov	r6, r0
 800e04e:	460f      	mov	r7, r1
 800e050:	f7f2 faa6 	bl	80005a0 <__aeabi_dmul>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e05c:	f7f2 f8e8 	bl	8000230 <__aeabi_dsub>
 800e060:	f7f2 fd38 	bl	8000ad4 <__aeabi_d2iz>
 800e064:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e068:	f849 0b04 	str.w	r0, [r9], #4
 800e06c:	4639      	mov	r1, r7
 800e06e:	4630      	mov	r0, r6
 800e070:	f7f2 f8e0 	bl	8000234 <__adddf3>
 800e074:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e07c:	e75f      	b.n	800df3e <__kernel_rem_pio2+0x106>
 800e07e:	d107      	bne.n	800e090 <__kernel_rem_pio2+0x258>
 800e080:	f108 33ff 	add.w	r3, r8, #4294967295
 800e084:	aa0c      	add	r2, sp, #48	@ 0x30
 800e086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e08a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e08e:	e79e      	b.n	800dfce <__kernel_rem_pio2+0x196>
 800e090:	4b36      	ldr	r3, [pc, #216]	@ (800e16c <__kernel_rem_pio2+0x334>)
 800e092:	2200      	movs	r2, #0
 800e094:	f7f2 fd0a 	bl	8000aac <__aeabi_dcmpge>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d143      	bne.n	800e124 <__kernel_rem_pio2+0x2ec>
 800e09c:	4681      	mov	r9, r0
 800e09e:	2200      	movs	r2, #0
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fce3 	bl	8000a70 <__aeabi_dcmpeq>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	f000 80c1 	beq.w	800e232 <__kernel_rem_pio2+0x3fa>
 800e0b0:	f108 33ff 	add.w	r3, r8, #4294967295
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	9900      	ldr	r1, [sp, #0]
 800e0b8:	428b      	cmp	r3, r1
 800e0ba:	da70      	bge.n	800e19e <__kernel_rem_pio2+0x366>
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	f000 808b 	beq.w	800e1d8 <__kernel_rem_pio2+0x3a0>
 800e0c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0c6:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0c8:	f1ab 0b18 	sub.w	fp, fp, #24
 800e0cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0f6      	beq.n	800e0c2 <__kernel_rem_pio2+0x28a>
 800e0d4:	4658      	mov	r0, fp
 800e0d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800e150 <__kernel_rem_pio2+0x318>
 800e0da:	f000 f9fd 	bl	800e4d8 <scalbn>
 800e0de:	f108 0301 	add.w	r3, r8, #1
 800e0e2:	00da      	lsls	r2, r3, #3
 800e0e4:	9205      	str	r2, [sp, #20]
 800e0e6:	ec55 4b10 	vmov	r4, r5, d0
 800e0ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e0ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800e164 <__kernel_rem_pio2+0x32c>
 800e0f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e0f4:	4646      	mov	r6, r8
 800e0f6:	f04f 0a00 	mov.w	sl, #0
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	f280 80d1 	bge.w	800e2a2 <__kernel_rem_pio2+0x46a>
 800e100:	4644      	mov	r4, r8
 800e102:	2c00      	cmp	r4, #0
 800e104:	f2c0 80ff 	blt.w	800e306 <__kernel_rem_pio2+0x4ce>
 800e108:	4b19      	ldr	r3, [pc, #100]	@ (800e170 <__kernel_rem_pio2+0x338>)
 800e10a:	461f      	mov	r7, r3
 800e10c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e10e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e112:	9306      	str	r3, [sp, #24]
 800e114:	f04f 0a00 	mov.w	sl, #0
 800e118:	f04f 0b00 	mov.w	fp, #0
 800e11c:	2600      	movs	r6, #0
 800e11e:	eba8 0504 	sub.w	r5, r8, r4
 800e122:	e0e4      	b.n	800e2ee <__kernel_rem_pio2+0x4b6>
 800e124:	f04f 0902 	mov.w	r9, #2
 800e128:	e754      	b.n	800dfd4 <__kernel_rem_pio2+0x19c>
 800e12a:	f854 3b04 	ldr.w	r3, [r4], #4
 800e12e:	bb0d      	cbnz	r5, 800e174 <__kernel_rem_pio2+0x33c>
 800e130:	b123      	cbz	r3, 800e13c <__kernel_rem_pio2+0x304>
 800e132:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e136:	f844 3c04 	str.w	r3, [r4, #-4]
 800e13a:	2301      	movs	r3, #1
 800e13c:	3201      	adds	r2, #1
 800e13e:	461d      	mov	r5, r3
 800e140:	e74f      	b.n	800dfe2 <__kernel_rem_pio2+0x1aa>
 800e142:	bf00      	nop
 800e144:	f3af 8000 	nop.w
	...
 800e154:	3ff00000 	.word	0x3ff00000
 800e158:	0800e8f0 	.word	0x0800e8f0
 800e15c:	40200000 	.word	0x40200000
 800e160:	3ff00000 	.word	0x3ff00000
 800e164:	3e700000 	.word	0x3e700000
 800e168:	41700000 	.word	0x41700000
 800e16c:	3fe00000 	.word	0x3fe00000
 800e170:	0800e8b0 	.word	0x0800e8b0
 800e174:	1acb      	subs	r3, r1, r3
 800e176:	e7de      	b.n	800e136 <__kernel_rem_pio2+0x2fe>
 800e178:	f108 32ff 	add.w	r2, r8, #4294967295
 800e17c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e182:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e186:	a90c      	add	r1, sp, #48	@ 0x30
 800e188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e18c:	e737      	b.n	800dffe <__kernel_rem_pio2+0x1c6>
 800e18e:	f108 32ff 	add.w	r2, r8, #4294967295
 800e192:	ab0c      	add	r3, sp, #48	@ 0x30
 800e194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e198:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e19c:	e7f3      	b.n	800e186 <__kernel_rem_pio2+0x34e>
 800e19e:	a90c      	add	r1, sp, #48	@ 0x30
 800e1a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	e785      	b.n	800e0b6 <__kernel_rem_pio2+0x27e>
 800e1aa:	3401      	adds	r4, #1
 800e1ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d0fa      	beq.n	800e1aa <__kernel_rem_pio2+0x372>
 800e1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e1ba:	eb0d 0503 	add.w	r5, sp, r3
 800e1be:	9b06      	ldr	r3, [sp, #24]
 800e1c0:	aa20      	add	r2, sp, #128	@ 0x80
 800e1c2:	4443      	add	r3, r8
 800e1c4:	f108 0701 	add.w	r7, r8, #1
 800e1c8:	3d98      	subs	r5, #152	@ 0x98
 800e1ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e1ce:	4444      	add	r4, r8
 800e1d0:	42bc      	cmp	r4, r7
 800e1d2:	da04      	bge.n	800e1de <__kernel_rem_pio2+0x3a6>
 800e1d4:	46a0      	mov	r8, r4
 800e1d6:	e6a2      	b.n	800df1e <__kernel_rem_pio2+0xe6>
 800e1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1da:	2401      	movs	r4, #1
 800e1dc:	e7e6      	b.n	800e1ac <__kernel_rem_pio2+0x374>
 800e1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e1e4:	f7f2 f972 	bl	80004cc <__aeabi_i2d>
 800e1e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800e4a8 <__kernel_rem_pio2+0x670>
 800e1ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e1f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1f8:	46b2      	mov	sl, r6
 800e1fa:	f04f 0800 	mov.w	r8, #0
 800e1fe:	9b05      	ldr	r3, [sp, #20]
 800e200:	4598      	cmp	r8, r3
 800e202:	dd05      	ble.n	800e210 <__kernel_rem_pio2+0x3d8>
 800e204:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e208:	3701      	adds	r7, #1
 800e20a:	eca5 7b02 	vstmia	r5!, {d7}
 800e20e:	e7df      	b.n	800e1d0 <__kernel_rem_pio2+0x398>
 800e210:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e214:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e218:	f7f2 f9c2 	bl	80005a0 <__aeabi_dmul>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e224:	f7f2 f806 	bl	8000234 <__adddf3>
 800e228:	f108 0801 	add.w	r8, r8, #1
 800e22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e230:	e7e5      	b.n	800e1fe <__kernel_rem_pio2+0x3c6>
 800e232:	f1cb 0000 	rsb	r0, fp, #0
 800e236:	ec47 6b10 	vmov	d0, r6, r7
 800e23a:	f000 f94d 	bl	800e4d8 <scalbn>
 800e23e:	ec55 4b10 	vmov	r4, r5, d0
 800e242:	4b9b      	ldr	r3, [pc, #620]	@ (800e4b0 <__kernel_rem_pio2+0x678>)
 800e244:	2200      	movs	r2, #0
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 fc2f 	bl	8000aac <__aeabi_dcmpge>
 800e24e:	b300      	cbz	r0, 800e292 <__kernel_rem_pio2+0x45a>
 800e250:	4b98      	ldr	r3, [pc, #608]	@ (800e4b4 <__kernel_rem_pio2+0x67c>)
 800e252:	2200      	movs	r2, #0
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 f9a2 	bl	80005a0 <__aeabi_dmul>
 800e25c:	f7f2 fc3a 	bl	8000ad4 <__aeabi_d2iz>
 800e260:	4606      	mov	r6, r0
 800e262:	f7f2 f933 	bl	80004cc <__aeabi_i2d>
 800e266:	4b92      	ldr	r3, [pc, #584]	@ (800e4b0 <__kernel_rem_pio2+0x678>)
 800e268:	2200      	movs	r2, #0
 800e26a:	f7f2 f999 	bl	80005a0 <__aeabi_dmul>
 800e26e:	460b      	mov	r3, r1
 800e270:	4602      	mov	r2, r0
 800e272:	4629      	mov	r1, r5
 800e274:	4620      	mov	r0, r4
 800e276:	f7f1 ffdb 	bl	8000230 <__aeabi_dsub>
 800e27a:	f7f2 fc2b 	bl	8000ad4 <__aeabi_d2iz>
 800e27e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e280:	f10b 0b18 	add.w	fp, fp, #24
 800e284:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e290:	e720      	b.n	800e0d4 <__kernel_rem_pio2+0x29c>
 800e292:	4620      	mov	r0, r4
 800e294:	4629      	mov	r1, r5
 800e296:	f7f2 fc1d 	bl	8000ad4 <__aeabi_d2iz>
 800e29a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e29c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e2a0:	e718      	b.n	800e0d4 <__kernel_rem_pio2+0x29c>
 800e2a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e2a8:	f7f2 f910 	bl	80004cc <__aeabi_i2d>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	f7f2 f976 	bl	80005a0 <__aeabi_dmul>
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e2ba:	465b      	mov	r3, fp
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f2 f96e 	bl	80005a0 <__aeabi_dmul>
 800e2c4:	3e01      	subs	r6, #1
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	e716      	b.n	800e0fa <__kernel_rem_pio2+0x2c2>
 800e2cc:	9906      	ldr	r1, [sp, #24]
 800e2ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e2d2:	9106      	str	r1, [sp, #24]
 800e2d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e2d8:	f7f2 f962 	bl	80005a0 <__aeabi_dmul>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	4659      	mov	r1, fp
 800e2e4:	f7f1 ffa6 	bl	8000234 <__adddf3>
 800e2e8:	3601      	adds	r6, #1
 800e2ea:	4682      	mov	sl, r0
 800e2ec:	468b      	mov	fp, r1
 800e2ee:	9b00      	ldr	r3, [sp, #0]
 800e2f0:	429e      	cmp	r6, r3
 800e2f2:	dc01      	bgt.n	800e2f8 <__kernel_rem_pio2+0x4c0>
 800e2f4:	42ae      	cmp	r6, r5
 800e2f6:	dde9      	ble.n	800e2cc <__kernel_rem_pio2+0x494>
 800e2f8:	ab48      	add	r3, sp, #288	@ 0x120
 800e2fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e2fe:	e9c5 ab00 	strd	sl, fp, [r5]
 800e302:	3c01      	subs	r4, #1
 800e304:	e6fd      	b.n	800e102 <__kernel_rem_pio2+0x2ca>
 800e306:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e308:	2b02      	cmp	r3, #2
 800e30a:	dc0b      	bgt.n	800e324 <__kernel_rem_pio2+0x4ec>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dc35      	bgt.n	800e37c <__kernel_rem_pio2+0x544>
 800e310:	d059      	beq.n	800e3c6 <__kernel_rem_pio2+0x58e>
 800e312:	9b02      	ldr	r3, [sp, #8]
 800e314:	f003 0007 	and.w	r0, r3, #7
 800e318:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e31c:	ecbd 8b02 	vpop	{d8}
 800e320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e324:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e326:	2b03      	cmp	r3, #3
 800e328:	d1f3      	bne.n	800e312 <__kernel_rem_pio2+0x4da>
 800e32a:	9b05      	ldr	r3, [sp, #20]
 800e32c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e330:	eb0d 0403 	add.w	r4, sp, r3
 800e334:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e338:	4625      	mov	r5, r4
 800e33a:	46c2      	mov	sl, r8
 800e33c:	f1ba 0f00 	cmp.w	sl, #0
 800e340:	dc69      	bgt.n	800e416 <__kernel_rem_pio2+0x5de>
 800e342:	4645      	mov	r5, r8
 800e344:	2d01      	cmp	r5, #1
 800e346:	f300 8087 	bgt.w	800e458 <__kernel_rem_pio2+0x620>
 800e34a:	9c05      	ldr	r4, [sp, #20]
 800e34c:	ab48      	add	r3, sp, #288	@ 0x120
 800e34e:	441c      	add	r4, r3
 800e350:	2000      	movs	r0, #0
 800e352:	2100      	movs	r1, #0
 800e354:	f1b8 0f01 	cmp.w	r8, #1
 800e358:	f300 809c 	bgt.w	800e494 <__kernel_rem_pio2+0x65c>
 800e35c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800e360:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800e364:	f1b9 0f00 	cmp.w	r9, #0
 800e368:	f040 80a6 	bne.w	800e4b8 <__kernel_rem_pio2+0x680>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	e9c3 5600 	strd	r5, r6, [r3]
 800e372:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e376:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e37a:	e7ca      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e37c:	9d05      	ldr	r5, [sp, #20]
 800e37e:	ab48      	add	r3, sp, #288	@ 0x120
 800e380:	441d      	add	r5, r3
 800e382:	4644      	mov	r4, r8
 800e384:	2000      	movs	r0, #0
 800e386:	2100      	movs	r1, #0
 800e388:	2c00      	cmp	r4, #0
 800e38a:	da35      	bge.n	800e3f8 <__kernel_rem_pio2+0x5c0>
 800e38c:	f1b9 0f00 	cmp.w	r9, #0
 800e390:	d038      	beq.n	800e404 <__kernel_rem_pio2+0x5cc>
 800e392:	4602      	mov	r2, r0
 800e394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e398:	9c04      	ldr	r4, [sp, #16]
 800e39a:	e9c4 2300 	strd	r2, r3, [r4]
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e3a6:	f7f1 ff43 	bl	8000230 <__aeabi_dsub>
 800e3aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800e3ac:	2401      	movs	r4, #1
 800e3ae:	45a0      	cmp	r8, r4
 800e3b0:	da2b      	bge.n	800e40a <__kernel_rem_pio2+0x5d2>
 800e3b2:	f1b9 0f00 	cmp.w	r9, #0
 800e3b6:	d002      	beq.n	800e3be <__kernel_rem_pio2+0x586>
 800e3b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3bc:	4619      	mov	r1, r3
 800e3be:	9b04      	ldr	r3, [sp, #16]
 800e3c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3c4:	e7a5      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e3c6:	9c05      	ldr	r4, [sp, #20]
 800e3c8:	ab48      	add	r3, sp, #288	@ 0x120
 800e3ca:	441c      	add	r4, r3
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	f1b8 0f00 	cmp.w	r8, #0
 800e3d4:	da09      	bge.n	800e3ea <__kernel_rem_pio2+0x5b2>
 800e3d6:	f1b9 0f00 	cmp.w	r9, #0
 800e3da:	d002      	beq.n	800e3e2 <__kernel_rem_pio2+0x5aa>
 800e3dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	9b04      	ldr	r3, [sp, #16]
 800e3e4:	e9c3 0100 	strd	r0, r1, [r3]
 800e3e8:	e793      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3ee:	f7f1 ff21 	bl	8000234 <__adddf3>
 800e3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3f6:	e7eb      	b.n	800e3d0 <__kernel_rem_pio2+0x598>
 800e3f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e3fc:	f7f1 ff1a 	bl	8000234 <__adddf3>
 800e400:	3c01      	subs	r4, #1
 800e402:	e7c1      	b.n	800e388 <__kernel_rem_pio2+0x550>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	e7c6      	b.n	800e398 <__kernel_rem_pio2+0x560>
 800e40a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e40e:	f7f1 ff11 	bl	8000234 <__adddf3>
 800e412:	3401      	adds	r4, #1
 800e414:	e7cb      	b.n	800e3ae <__kernel_rem_pio2+0x576>
 800e416:	ed35 7b02 	vldmdb	r5!, {d7}
 800e41a:	ed8d 7b00 	vstr	d7, [sp]
 800e41e:	ed95 7b02 	vldr	d7, [r5, #8]
 800e422:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e426:	ec53 2b17 	vmov	r2, r3, d7
 800e42a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e42e:	f7f1 ff01 	bl	8000234 <__adddf3>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e43e:	f7f1 fef7 	bl	8000230 <__aeabi_dsub>
 800e442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e446:	f7f1 fef5 	bl	8000234 <__adddf3>
 800e44a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e44e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e452:	e9c5 6700 	strd	r6, r7, [r5]
 800e456:	e771      	b.n	800e33c <__kernel_rem_pio2+0x504>
 800e458:	ed34 7b02 	vldmdb	r4!, {d7}
 800e45c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e460:	ec51 0b17 	vmov	r0, r1, d7
 800e464:	4652      	mov	r2, sl
 800e466:	465b      	mov	r3, fp
 800e468:	ed8d 7b00 	vstr	d7, [sp]
 800e46c:	f7f1 fee2 	bl	8000234 <__adddf3>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4606      	mov	r6, r0
 800e476:	460f      	mov	r7, r1
 800e478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e47c:	f7f1 fed8 	bl	8000230 <__aeabi_dsub>
 800e480:	4652      	mov	r2, sl
 800e482:	465b      	mov	r3, fp
 800e484:	f7f1 fed6 	bl	8000234 <__adddf3>
 800e488:	3d01      	subs	r5, #1
 800e48a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e48e:	e9c4 6700 	strd	r6, r7, [r4]
 800e492:	e757      	b.n	800e344 <__kernel_rem_pio2+0x50c>
 800e494:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e498:	f7f1 fecc 	bl	8000234 <__adddf3>
 800e49c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4a0:	e758      	b.n	800e354 <__kernel_rem_pio2+0x51c>
 800e4a2:	bf00      	nop
 800e4a4:	f3af 8000 	nop.w
	...
 800e4b0:	41700000 	.word	0x41700000
 800e4b4:	3e700000 	.word	0x3e700000
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	9a04      	ldr	r2, [sp, #16]
 800e4bc:	601d      	str	r5, [r3, #0]
 800e4be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800e4c2:	605c      	str	r4, [r3, #4]
 800e4c4:	609f      	str	r7, [r3, #8]
 800e4c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800e4ca:	60d3      	str	r3, [r2, #12]
 800e4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4d0:	6110      	str	r0, [r2, #16]
 800e4d2:	6153      	str	r3, [r2, #20]
 800e4d4:	e71d      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e4d6:	bf00      	nop

0800e4d8 <scalbn>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	ec55 4b10 	vmov	r4, r5, d0
 800e4de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	b991      	cbnz	r1, 800e50e <scalbn+0x36>
 800e4e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e4ec:	4323      	orrs	r3, r4
 800e4ee:	d03b      	beq.n	800e568 <scalbn+0x90>
 800e4f0:	4b33      	ldr	r3, [pc, #204]	@ (800e5c0 <scalbn+0xe8>)
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 f852 	bl	80005a0 <__aeabi_dmul>
 800e4fc:	4b31      	ldr	r3, [pc, #196]	@ (800e5c4 <scalbn+0xec>)
 800e4fe:	429e      	cmp	r6, r3
 800e500:	4604      	mov	r4, r0
 800e502:	460d      	mov	r5, r1
 800e504:	da0f      	bge.n	800e526 <scalbn+0x4e>
 800e506:	a326      	add	r3, pc, #152	@ (adr r3, 800e5a0 <scalbn+0xc8>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	e01e      	b.n	800e54c <scalbn+0x74>
 800e50e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e512:	4291      	cmp	r1, r2
 800e514:	d10b      	bne.n	800e52e <scalbn+0x56>
 800e516:	4622      	mov	r2, r4
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f1 fe8a 	bl	8000234 <__adddf3>
 800e520:	4604      	mov	r4, r0
 800e522:	460d      	mov	r5, r1
 800e524:	e020      	b.n	800e568 <scalbn+0x90>
 800e526:	460b      	mov	r3, r1
 800e528:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e52c:	3936      	subs	r1, #54	@ 0x36
 800e52e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e532:	4296      	cmp	r6, r2
 800e534:	dd0d      	ble.n	800e552 <scalbn+0x7a>
 800e536:	2d00      	cmp	r5, #0
 800e538:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5a8 <scalbn+0xd0>)
 800e53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e53e:	da02      	bge.n	800e546 <scalbn+0x6e>
 800e540:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5b0 <scalbn+0xd8>)
 800e542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e546:	a318      	add	r3, pc, #96	@ (adr r3, 800e5a8 <scalbn+0xd0>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f2 f828 	bl	80005a0 <__aeabi_dmul>
 800e550:	e7e6      	b.n	800e520 <scalbn+0x48>
 800e552:	1872      	adds	r2, r6, r1
 800e554:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e558:	428a      	cmp	r2, r1
 800e55a:	dcec      	bgt.n	800e536 <scalbn+0x5e>
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	dd06      	ble.n	800e56e <scalbn+0x96>
 800e560:	f36f 531e 	bfc	r3, #20, #11
 800e564:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e568:	ec45 4b10 	vmov	d0, r4, r5
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
 800e56e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e572:	da08      	bge.n	800e586 <scalbn+0xae>
 800e574:	2d00      	cmp	r5, #0
 800e576:	a10a      	add	r1, pc, #40	@ (adr r1, 800e5a0 <scalbn+0xc8>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	dac3      	bge.n	800e506 <scalbn+0x2e>
 800e57e:	a10e      	add	r1, pc, #56	@ (adr r1, 800e5b8 <scalbn+0xe0>)
 800e580:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e584:	e7bf      	b.n	800e506 <scalbn+0x2e>
 800e586:	3236      	adds	r2, #54	@ 0x36
 800e588:	f36f 531e 	bfc	r3, #20, #11
 800e58c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e590:	4620      	mov	r0, r4
 800e592:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <scalbn+0xf0>)
 800e594:	4629      	mov	r1, r5
 800e596:	2200      	movs	r2, #0
 800e598:	e7d8      	b.n	800e54c <scalbn+0x74>
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w
 800e5a0:	c2f8f359 	.word	0xc2f8f359
 800e5a4:	01a56e1f 	.word	0x01a56e1f
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	7e37e43c 	.word	0x7e37e43c
 800e5b0:	8800759c 	.word	0x8800759c
 800e5b4:	fe37e43c 	.word	0xfe37e43c
 800e5b8:	c2f8f359 	.word	0xc2f8f359
 800e5bc:	81a56e1f 	.word	0x81a56e1f
 800e5c0:	43500000 	.word	0x43500000
 800e5c4:	ffff3cb0 	.word	0xffff3cb0
 800e5c8:	3c900000 	.word	0x3c900000
 800e5cc:	00000000 	.word	0x00000000

0800e5d0 <floor>:
 800e5d0:	ec51 0b10 	vmov	r0, r1, d0
 800e5d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e5e0:	2e13      	cmp	r6, #19
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	dc34      	bgt.n	800e654 <floor+0x84>
 800e5ea:	2e00      	cmp	r6, #0
 800e5ec:	da17      	bge.n	800e61e <floor+0x4e>
 800e5ee:	a332      	add	r3, pc, #200	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	f7f1 fe1e 	bl	8000234 <__adddf3>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	f7f2 fa60 	bl	8000ac0 <__aeabi_dcmpgt>
 800e600:	b150      	cbz	r0, 800e618 <floor+0x48>
 800e602:	2c00      	cmp	r4, #0
 800e604:	da55      	bge.n	800e6b2 <floor+0xe2>
 800e606:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e60a:	432c      	orrs	r4, r5
 800e60c:	2500      	movs	r5, #0
 800e60e:	42ac      	cmp	r4, r5
 800e610:	4c2b      	ldr	r4, [pc, #172]	@ (800e6c0 <floor+0xf0>)
 800e612:	bf08      	it	eq
 800e614:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e618:	4621      	mov	r1, r4
 800e61a:	4628      	mov	r0, r5
 800e61c:	e023      	b.n	800e666 <floor+0x96>
 800e61e:	4f29      	ldr	r7, [pc, #164]	@ (800e6c4 <floor+0xf4>)
 800e620:	4137      	asrs	r7, r6
 800e622:	ea01 0307 	and.w	r3, r1, r7
 800e626:	4303      	orrs	r3, r0
 800e628:	d01d      	beq.n	800e666 <floor+0x96>
 800e62a:	a323      	add	r3, pc, #140	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	f7f1 fe00 	bl	8000234 <__adddf3>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	f7f2 fa42 	bl	8000ac0 <__aeabi_dcmpgt>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0eb      	beq.n	800e618 <floor+0x48>
 800e640:	2c00      	cmp	r4, #0
 800e642:	bfbe      	ittt	lt
 800e644:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e648:	4133      	asrlt	r3, r6
 800e64a:	18e4      	addlt	r4, r4, r3
 800e64c:	ea24 0407 	bic.w	r4, r4, r7
 800e650:	2500      	movs	r5, #0
 800e652:	e7e1      	b.n	800e618 <floor+0x48>
 800e654:	2e33      	cmp	r6, #51	@ 0x33
 800e656:	dd0a      	ble.n	800e66e <floor+0x9e>
 800e658:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e65c:	d103      	bne.n	800e666 <floor+0x96>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	f7f1 fde7 	bl	8000234 <__adddf3>
 800e666:	ec41 0b10 	vmov	d0, r0, r1
 800e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e672:	f04f 37ff 	mov.w	r7, #4294967295
 800e676:	40df      	lsrs	r7, r3
 800e678:	4207      	tst	r7, r0
 800e67a:	d0f4      	beq.n	800e666 <floor+0x96>
 800e67c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f7f1 fdd7 	bl	8000234 <__adddf3>
 800e686:	2200      	movs	r2, #0
 800e688:	2300      	movs	r3, #0
 800e68a:	f7f2 fa19 	bl	8000ac0 <__aeabi_dcmpgt>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0c2      	beq.n	800e618 <floor+0x48>
 800e692:	2c00      	cmp	r4, #0
 800e694:	da0a      	bge.n	800e6ac <floor+0xdc>
 800e696:	2e14      	cmp	r6, #20
 800e698:	d101      	bne.n	800e69e <floor+0xce>
 800e69a:	3401      	adds	r4, #1
 800e69c:	e006      	b.n	800e6ac <floor+0xdc>
 800e69e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	40b3      	lsls	r3, r6
 800e6a6:	441d      	add	r5, r3
 800e6a8:	4545      	cmp	r5, r8
 800e6aa:	d3f6      	bcc.n	800e69a <floor+0xca>
 800e6ac:	ea25 0507 	bic.w	r5, r5, r7
 800e6b0:	e7b2      	b.n	800e618 <floor+0x48>
 800e6b2:	2500      	movs	r5, #0
 800e6b4:	462c      	mov	r4, r5
 800e6b6:	e7af      	b.n	800e618 <floor+0x48>
 800e6b8:	8800759c 	.word	0x8800759c
 800e6bc:	7e37e43c 	.word	0x7e37e43c
 800e6c0:	bff00000 	.word	0xbff00000
 800e6c4:	000fffff 	.word	0x000fffff

0800e6c8 <_init>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	bf00      	nop
 800e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ce:	bc08      	pop	{r3}
 800e6d0:	469e      	mov	lr, r3
 800e6d2:	4770      	bx	lr

0800e6d4 <_fini>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	bf00      	nop
 800e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6da:	bc08      	pop	{r3}
 800e6dc:	469e      	mov	lr, r3
 800e6de:	4770      	bx	lr
