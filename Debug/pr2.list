
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800abd4  0800abd4  0000bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac14  0800ac14  0000c00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac14  0800ac14  0000bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac1c  0800ac1c  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac1c  0800ac1c  0000bc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac20  0800ac20  0000bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800ac24  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  0800ac30  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  0800ac30  0000c620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f88  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003915  00000000  00000000  0002efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001762  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd4b  00000000  00000000  00035e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020fb5  00000000  00000000  00063b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001485c8  00000000  00000000  00084b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd0fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008484  00000000  00000000  001cd140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001d55c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800abbc 	.word	0x0800abbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800abbc 	.word	0x0800abbc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800054e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000550:	4907      	ldr	r1, [pc, #28]	@ (8000570 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4013      	ands	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000

08000574 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800057e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000580:	4907      	ldr	r1, [pc, #28]	@ (80005a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 fa67 	bl	8001a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f898 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fd9a 	bl	80010e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b4:	f000 f8e2 	bl	800077c <MX_ADC1_Init>
  MX_COMP2_Init();
 80005b8:	f000 f958 	bl	800086c <MX_COMP2_Init>
  MX_COMP3_Init();
 80005bc:	f000 f97c 	bl	80008b8 <MX_COMP3_Init>
  MX_COMP4_Init();
 80005c0:	f000 f9a0 	bl	8000904 <MX_COMP4_Init>
  MX_COMP6_Init();
 80005c4:	f000 f9c4 	bl	8000950 <MX_COMP6_Init>
  MX_DAC1_Init();
 80005c8:	f000 f9e8 	bl	800099c <MX_DAC1_Init>
  MX_DAC2_Init();
 80005cc:	f000 fa20 	bl	8000a10 <MX_DAC2_Init>
  MX_DAC3_Init();
 80005d0:	f000 fa58 	bl	8000a84 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 80005d4:	f000 fa9a 	bl	8000b0c <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 80005d8:	f000 fce4 	bl	8000fa4 <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 fd10 	bl	8001000 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005e0:	f000 fd5a 	bl	8001098 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80005e4:	f000 fc4a 	bl	8000e7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005e8:	2108      	movs	r1, #8
 80005ea:	4838      	ldr	r0, [pc, #224]	@ (80006cc <main+0x128>)
 80005ec:	f007 fca4 	bl	8007f38 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(pwm_value == 0) step = 1;
 80005f0:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <main+0x12c>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <main+0x5a>
 80005f8:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <main+0x130>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
    if(pwm_value == 50) step = -1;
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <main+0x12c>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	2b32      	cmp	r3, #50	@ 0x32
 8000604:	d102      	bne.n	800060c <main+0x68>
 8000606:	4b33      	ldr	r3, [pc, #204]	@ (80006d4 <main+0x130>)
 8000608:	22ff      	movs	r2, #255	@ 0xff
 800060a:	701a      	strb	r2, [r3, #0]
	pwm_value += step;
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <main+0x130>)
 800060e:	f993 3000 	ldrsb.w	r3, [r3]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <main+0x12c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	4413      	add	r3, r2
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <main+0x12c>)
 800061e:	801a      	strh	r2, [r3, #0]
	setPWM(pwm_value);
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <main+0x12c>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe35 	bl	8001294 <setPWM>
	// HAL_Delay(5);


	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 800062a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062e:	482a      	ldr	r0, [pc, #168]	@ (80006d8 <main+0x134>)
 8000630:	f003 fe00 	bl	8004234 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d105      	bne.n	8000646 <main+0xa2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  //  LD5 (PB5)
 800063a:	2201      	movs	r2, #1
 800063c:	2120      	movs	r1, #32
 800063e:	4826      	ldr	r0, [pc, #152]	@ (80006d8 <main+0x134>)
 8000640:	f003 fe10 	bl	8004264 <HAL_GPIO_WritePin>
 8000644:	e004      	b.n	8000650 <main+0xac>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // выкл
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	4823      	ldr	r0, [pc, #140]	@ (80006d8 <main+0x134>)
 800064c:	f003 fe0a 	bl	8004264 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) // DOWN (PC5)
 8000650:	2120      	movs	r1, #32
 8000652:	4822      	ldr	r0, [pc, #136]	@ (80006dc <main+0x138>)
 8000654:	f003 fdee 	bl	8004234 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d107      	bne.n	800066e <main+0xca>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);  // LD2 (PA15)
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f003 fdfc 	bl	8004264 <HAL_GPIO_WritePin>
 800066c:	e006      	b.n	800067c <main+0xd8>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000678:	f003 fdf4 	bl	8004264 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) // LEFT (PC4)
 800067c:	2110      	movs	r1, #16
 800067e:	4817      	ldr	r0, [pc, #92]	@ (80006dc <main+0x138>)
 8000680:	f003 fdd8 	bl	8004234 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d105      	bne.n	8000696 <main+0xf2>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  //  LD3 (PB1)
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <main+0x134>)
 8000690:	f003 fde8 	bl	8004264 <HAL_GPIO_WritePin>
 8000694:	e004      	b.n	80006a0 <main+0xfc>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <main+0x134>)
 800069c:	f003 fde2 	bl	8004264 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) // RIGHT (PB2)
 80006a0:	2104      	movs	r1, #4
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <main+0x134>)
 80006a4:	f003 fdc6 	bl	8004234 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d105      	bne.n	80006ba <main+0x116>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //LD4 (PB7)
 80006ae:	2201      	movs	r2, #1
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <main+0x134>)
 80006b4:	f003 fdd6 	bl	8004264 <HAL_GPIO_WritePin>
 80006b8:	e004      	b.n	80006c4 <main+0x120>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2180      	movs	r1, #128	@ 0x80
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <main+0x134>)
 80006c0:	f003 fdd0 	bl	8004264 <HAL_GPIO_WritePin>
	}

	    HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f001 fa49 	bl	8001b5c <HAL_Delay>
	if(pwm_value == 0) step = 1;
 80006ca:	e791      	b.n	80005f0 <main+0x4c>
 80006cc:	2000025c 	.word	0x2000025c
 80006d0:	20000618 	.word	0x20000618
 80006d4:	2000061a 	.word	0x2000061a
 80006d8:	48000400 	.word	0x48000400
 80006dc:	48000800 	.word	0x48000800

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2238      	movs	r2, #56	@ 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00a fa38 	bl	800ab64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000702:	2000      	movs	r0, #0
 8000704:	f006 fb90 	bl	8006e28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000708:	2322      	movs	r3, #34	@ 0x22
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000726:	2355      	movs	r3, #85	@ 0x55
 8000728:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800072a:	2308      	movs	r3, #8
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800072e:	2308      	movs	r3, #8
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f006 fc28 	bl	8006f90 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000746:	f000 fdc3 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f006 ff26 	bl	80075b4 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800076e:	f000 fdaf 	bl	80012d0 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	@ 0x30
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2220      	movs	r2, #32
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00a f9e5 	bl	800ab64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079a:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <MX_ADC1_Init+0xe8>)
 800079c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a2:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007bc:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_ADC1_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000804:	4817      	ldr	r0, [pc, #92]	@ (8000864 <MX_ADC1_Init+0xe8>)
 8000806:	f001 fbe3 	bl	8001fd0 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000810:	f000 fd5e 	bl	80012d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	@ (8000864 <MX_ADC1_Init+0xe8>)
 8000820:	f002 fca8 	bl	8003174 <HAL_ADCEx_MultiModeConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800082a:	f000 fd51 	bl	80012d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_ADC1_Init+0xec>)
 8000830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2306      	movs	r3, #6
 8000834:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083a:	237f      	movs	r3, #127	@ 0x7f
 800083c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_ADC1_Init+0xe8>)
 800084c:	f001 fffa 	bl	8002844 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000856:	f000 fd3b 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	@ 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000028 	.word	0x20000028
 8000868:	21800100 	.word	0x21800100

0800086c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_COMP2_Init+0x44>)
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <MX_COMP2_Init+0x48>)
 8000874:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_COMP2_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_COMP2_Init+0x44>)
 800087e:	2240      	movs	r2, #64	@ 0x40
 8000880:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_COMP2_Init+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_COMP2_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_COMP2_Init+0x44>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_COMP2_Init+0x44>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_COMP2_Init+0x44>)
 800089c:	f002 fec2 	bl	8003624 <HAL_COMP_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80008a6:	f000 fd13 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000094 	.word	0x20000094
 80008b4:	40010204 	.word	0x40010204

080008b8 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008be:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <MX_COMP3_Init+0x48>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008ca:	2240      	movs	r2, #64	@ 0x40
 80008cc:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_COMP3_Init+0x44>)
 80008e8:	f002 fe9c 	bl	8003624 <HAL_COMP_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 80008f2:	f000 fced 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000b8 	.word	0x200000b8
 8000900:	40010208 	.word	0x40010208

08000904 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_COMP4_Init+0x44>)
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <MX_COMP4_Init+0x48>)
 800090c:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_COMP4_Init+0x44>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_COMP4_Init+0x44>)
 8000916:	2250      	movs	r2, #80	@ 0x50
 8000918:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_COMP4_Init+0x44>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_COMP4_Init+0x44>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_COMP4_Init+0x44>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_COMP4_Init+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_COMP4_Init+0x44>)
 8000934:	f002 fe76 	bl	8003624 <HAL_COMP_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 800093e:	f000 fcc7 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000dc 	.word	0x200000dc
 800094c:	4001020c 	.word	0x4001020c

08000950 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_COMP6_Init+0x44>)
 8000956:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <MX_COMP6_Init+0x48>)
 8000958:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_COMP6_Init+0x44>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_COMP6_Init+0x44>)
 8000962:	2250      	movs	r2, #80	@ 0x50
 8000964:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_COMP6_Init+0x44>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_COMP6_Init+0x44>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_COMP6_Init+0x44>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_COMP6_Init+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_COMP6_Init+0x44>)
 8000980:	f002 fe50 	bl	8003624 <HAL_COMP_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 800098a:	f000 fca1 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000100 	.word	0x20000100
 8000998:	40010214 	.word	0x40010214

0800099c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2230      	movs	r2, #48	@ 0x30
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a f8db 	bl	800ab64 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_DAC1_Init+0x6c>)
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <MX_DAC1_Init+0x70>)
 80009b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009b4:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <MX_DAC1_Init+0x6c>)
 80009b6:	f003 f8de 	bl	8003b76 <HAL_DAC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009c0:	f000 fc86 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009c4:	2302      	movs	r3, #2
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_DAC1_Init+0x6c>)
 80009f0:	f003 f8e4 	bl	8003bbc <HAL_DAC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80009fa:	f000 fc69 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000124 	.word	0x20000124
 8000a0c:	50000800 	.word	0x50000800

08000a10 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2230      	movs	r2, #48	@ 0x30
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00a f8a1 	bl	800ab64 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_DAC2_Init+0x6c>)
 8000a24:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <MX_DAC2_Init+0x70>)
 8000a26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000a28:	4814      	ldr	r0, [pc, #80]	@ (8000a7c <MX_DAC2_Init+0x6c>)
 8000a2a:	f003 f8a4 	bl	8003b76 <HAL_DAC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000a34:	f000 fc4c 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_DAC2_Init+0x6c>)
 8000a64:	f003 f8aa 	bl	8003bbc <HAL_DAC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000a6e:	f000 fc2f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	@ 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000138 	.word	0x20000138
 8000a80:	50000c00 	.word	0x50000c00

08000a84 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2230      	movs	r2, #48	@ 0x30
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00a f867 	bl	800ab64 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_DAC3_Init+0x80>)
 8000a98:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <MX_DAC3_Init+0x84>)
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000a9c:	4819      	ldr	r0, [pc, #100]	@ (8000b04 <MX_DAC3_Init+0x80>)
 8000a9e:	f003 f86a 	bl	8003b76 <HAL_DAC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000aa8:	f000 fc12 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000aac:	2302      	movs	r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_DAC3_Init+0x80>)
 8000ad8:	f003 f870 	bl	8003bbc <HAL_DAC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000ae2:	f000 fbf5 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2210      	movs	r2, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_DAC3_Init+0x80>)
 8000aee:	f003 f865 	bl	8003bbc <HAL_DAC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000af8:	f000 fbea 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000014c 	.word	0x2000014c
 8000b08:	50001000 	.word	0x50001000

08000b0c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000b12:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000b20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	2260      	movs	r2, #96	@ 0x60
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00a f811 	bl	800ab64 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00a f80b 	bl	800ab64 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000b4e:	4bc3      	ldr	r3, [pc, #780]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b50:	4ac3      	ldr	r2, [pc, #780]	@ (8000e60 <MX_HRTIM1_Init+0x354>)
 8000b52:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000b54:	4bc1      	ldr	r3, [pc, #772]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000b5a:	4bc0      	ldr	r3, [pc, #768]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000b60:	48be      	ldr	r0, [pc, #760]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b62:	f003 fbbb 	bl	80042dc <HAL_HRTIM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000b6c:	f000 fbb0 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000b70:	210c      	movs	r1, #12
 8000b72:	48ba      	ldr	r0, [pc, #744]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b74:	f003 fc82 	bl	800447c <HAL_HRTIM_DLLCalibrationStart>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000b7e:	f000 fba7 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000b82:	210a      	movs	r1, #10
 8000b84:	48b5      	ldr	r0, [pc, #724]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000b86:	f003 fcd1 	bl	800452c <HAL_HRTIM_PollForDLLCalibration>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000b90:	f000 fb9e 	bl	80012d0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000b94:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000bae:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	48a9      	ldr	r0, [pc, #676]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000bb8:	f003 fcec 	bl	8004594 <HAL_HRTIM_TimeBaseConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000bc2:	f000 fb85 	bl	80012d0 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8000bd2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	48a0      	ldr	r0, [pc, #640]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000bdc:	f003 fd8f 	bl	80046fe <HAL_HRTIM_WaveformTimerControl>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000be6:	f000 fb73 	bl	80012d0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000c22:	2300      	movs	r3, #0
 8000c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4882      	ldr	r0, [pc, #520]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000c52:	f003 fcc7 	bl	80045e4 <HAL_HRTIM_WaveformTimerConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000c5c:	f000 fb38 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	461a      	mov	r2, r3
 8000c66:	2102      	movs	r1, #2
 8000c68:	487c      	ldr	r0, [pc, #496]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000c6a:	f003 fcbb 	bl	80045e4 <HAL_HRTIM_WaveformTimerConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_HRTIM1_Init+0x16c>
  {
    Error_Handler();
 8000c74:	f000 fb2c 	bl	80012d0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	461a      	mov	r2, r3
 8000c82:	2103      	movs	r1, #3
 8000c84:	4875      	ldr	r0, [pc, #468]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000c86:	f003 fcad 	bl	80045e4 <HAL_HRTIM_WaveformTimerConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_HRTIM1_Init+0x188>
  {
    Error_Handler();
 8000c90:	f000 fb1e 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	486f      	ldr	r0, [pc, #444]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000c9e:	f003 fca1 	bl	80045e4 <HAL_HRTIM_WaveformTimerConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_HRTIM1_Init+0x1a0>
  {
    Error_Handler();
 8000ca8:	f000 fb12 	bl	80012d0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000cac:	2300      	movs	r3, #0
 8000cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	4868      	ldr	r0, [pc, #416]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000cba:	f003 fc93 	bl	80045e4 <HAL_HRTIM_WaveformTimerConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 8000cc4:	f000 fb04 	bl	80012d0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2201      	movs	r2, #1
 8000cec:	2100      	movs	r1, #0
 8000cee:	485b      	ldr	r0, [pc, #364]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000cf0:	f003 fd38 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_HRTIM1_Init+0x1f2>
  {
    Error_Handler();
 8000cfa:	f000 fae9 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2210      	movs	r2, #16
 8000d02:	2102      	movs	r1, #2
 8000d04:	4855      	ldr	r0, [pc, #340]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d06:	f003 fd2d 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8000d10:	f000 fade 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2240      	movs	r2, #64	@ 0x40
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4850      	ldr	r0, [pc, #320]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d1c:	f003 fd22 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_HRTIM1_Init+0x21e>
  {
    Error_Handler();
 8000d26:	f000 fad3 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d30:	2104      	movs	r1, #4
 8000d32:	484a      	ldr	r0, [pc, #296]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d34:	f003 fd16 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_HRTIM1_Init+0x236>
  {
    Error_Handler();
 8000d3e:	f000 fac7 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d48:	2105      	movs	r1, #5
 8000d4a:	4844      	ldr	r0, [pc, #272]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d4c:	f003 fd0a 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8000d56:	f000 fabb 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000d5a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2102      	movs	r1, #2
 8000d62:	483e      	ldr	r0, [pc, #248]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d64:	f003 fc16 	bl	8004594 <HAL_HRTIM_TimeBaseConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 8000d6e:	f000 faaf 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8000d72:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d76:	461a      	mov	r2, r3
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4838      	ldr	r0, [pc, #224]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d7c:	f003 fcbf 	bl	80046fe <HAL_HRTIM_WaveformTimerControl>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_HRTIM1_Init+0x27e>
  {
    Error_Handler();
 8000d86:	f000 faa3 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4832      	ldr	r0, [pc, #200]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000d92:	f003 fce7 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8000d9c:	f000 fa98 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	2103      	movs	r1, #3
 8000da6:	482d      	ldr	r0, [pc, #180]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000da8:	f003 fcdc 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_HRTIM1_Init+0x2aa>
  {
    Error_Handler();
 8000db2:	f000 fa8d 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	4827      	ldr	r0, [pc, #156]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000dc0:	f003 fcd0 	bl	8004764 <HAL_HRTIM_WaveformOutputConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_HRTIM1_Init+0x2c2>
  {
    Error_Handler();
 8000dca:	f000 fa81 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000dce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000dd8:	f003 fbdc 	bl	8004594 <HAL_HRTIM_TimeBaseConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8000de2:	f000 fa75 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8000de6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000dea:	461a      	mov	r2, r3
 8000dec:	2103      	movs	r1, #3
 8000dee:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000df0:	f003 fc85 	bl	80046fe <HAL_HRTIM_WaveformTimerControl>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_HRTIM1_Init+0x2f2>
  {
    Error_Handler();
 8000dfa:	f000 fa69 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000dfe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e02:	461a      	mov	r2, r3
 8000e04:	2104      	movs	r1, #4
 8000e06:	4815      	ldr	r0, [pc, #84]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000e08:	f003 fbc4 	bl	8004594 <HAL_HRTIM_TimeBaseConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_HRTIM1_Init+0x30a>
  {
    Error_Handler();
 8000e12:	f000 fa5d 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000e16:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	480f      	ldr	r0, [pc, #60]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000e20:	f003 fc6d 	bl	80046fe <HAL_HRTIM_WaveformTimerControl>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_HRTIM1_Init+0x322>
  {
    Error_Handler();
 8000e2a:	f000 fa51 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8000e2e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e32:	461a      	mov	r2, r3
 8000e34:	2105      	movs	r1, #5
 8000e36:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000e38:	f003 fbac 	bl	8004594 <HAL_HRTIM_TimeBaseConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_HRTIM1_Init+0x33a>
  {
    Error_Handler();
 8000e42:	f000 fa45 	bl	80012d0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8000e46:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <MX_HRTIM1_Init+0x350>)
 8000e50:	f003 fc55 	bl	80046fe <HAL_HRTIM_WaveformTimerControl>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <MX_HRTIM1_Init+0x35c>
 8000e5a:	e003      	b.n	8000e64 <MX_HRTIM1_Init+0x358>
 8000e5c:	20000160 	.word	0x20000160
 8000e60:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8000e64:	f000 fa34 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000e68:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <MX_HRTIM1_Init+0x36c>)
 8000e6a:	f000 fbdd 	bl	8001628 <HAL_HRTIM_MspPostInit>

}
 8000e6e:	bf00      	nop
 8000e70:	37b0      	adds	r7, #176	@ 0xb0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000160 	.word	0x20000160

08000e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b098      	sub	sp, #96	@ 0x60
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2234      	movs	r2, #52	@ 0x34
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f009 fe5b 	bl	800ab64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa0 <MX_TIM1_Init+0x124>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000eb6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000eba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000ec2:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000ec4:	2264      	movs	r2, #100	@ 0x64
 8000ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ece:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eda:	4830      	ldr	r0, [pc, #192]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000edc:	f006 ffd4 	bl	8007e88 <HAL_TIM_PWM_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f9f3 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efa:	4619      	mov	r1, r3
 8000efc:	4827      	ldr	r0, [pc, #156]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000efe:	f007 fe45 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 f9e2 	bl	80012d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	@ 0x60
 8000f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000f32:	f007 f913 	bl	800815c <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f3c:	f000 f9c8 	bl	80012d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000f7e:	f007 fe9b 	bl	8008cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f88:	f000 f9a2 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM1_Init+0x120>)
 8000f8e:	f000 fbf1 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3760      	adds	r7, #96	@ 0x60
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000025c 	.word	0x2000025c
 8000fa0:	40012c00 	.word	0x40012c00

08000fa4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000fba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fbe:	f7ff fad9 	bl	8000574 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff fabe 	bl	8000544 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <MX_UCPD1_Init+0x58>)
 8000fda:	f008 feba 	bl	8009d52 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000fde:	2340      	movs	r3, #64	@ 0x40
 8000fe0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <MX_UCPD1_Init+0x58>)
 8000ff0:	f008 feaf 	bl	8009d52 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	48000400 	.word	0x48000400

08001000 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001006:	4a23      	ldr	r2, [pc, #140]	@ (8001094 <MX_USART3_UART_Init+0x94>)
 8001008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001048:	4811      	ldr	r0, [pc, #68]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800104a:	f007 fec9 	bl	8008de0 <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001054:	f000 f93c 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	480d      	ldr	r0, [pc, #52]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800105c:	f008 fc64 	bl	8009928 <HAL_UARTEx_SetTxFifoThreshold>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001066:	f000 f933 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4808      	ldr	r0, [pc, #32]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800106e:	f008 fc99 	bl	80099a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001078:	f000 f92a 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <MX_USART3_UART_Init+0x90>)
 800107e:	f008 fc1a 	bl	80098b6 <HAL_UARTEx_DisableFifoMode>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001088:	f000 f922 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002a8 	.word	0x200002a8
 8001094:	40004800 	.word	0x40004800

08001098 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <MX_USB_PCD_Init+0x4c>)
 80010a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010bc:	2200      	movs	r2, #0
 80010be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_USB_PCD_Init+0x48>)
 80010ce:	f004 fb85 	bl	80057dc <HAL_PCD_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80010d8:	f000 f8fa 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000033c 	.word	0x2000033c
 80010e4:	40005c00 	.word	0x40005c00

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b61      	ldr	r3, [pc, #388]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a60      	ldr	r2, [pc, #384]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b5e      	ldr	r3, [pc, #376]	@ (8001284 <MX_GPIO_Init+0x19c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b5b      	ldr	r3, [pc, #364]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a5a      	ldr	r2, [pc, #360]	@ (8001284 <MX_GPIO_Init+0x19c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b58      	ldr	r3, [pc, #352]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b55      	ldr	r3, [pc, #340]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a54      	ldr	r2, [pc, #336]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b52      	ldr	r3, [pc, #328]	@ (8001284 <MX_GPIO_Init+0x19c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a4e      	ldr	r2, [pc, #312]	@ (8001284 <MX_GPIO_Init+0x19c>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b4c      	ldr	r3, [pc, #304]	@ (8001284 <MX_GPIO_Init+0x19c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f24d 0108 	movw	r1, #53256	@ 0xd008
 8001164:	4848      	ldr	r0, [pc, #288]	@ (8001288 <MX_GPIO_Init+0x1a0>)
 8001166:	f003 f87d 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	21a2      	movs	r1, #162	@ 0xa2
 800116e:	4847      	ldr	r0, [pc, #284]	@ (800128c <MX_GPIO_Init+0x1a4>)
 8001170:	f003 f878 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f003 f871 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2104      	movs	r1, #4
 8001186:	4842      	ldr	r0, [pc, #264]	@ (8001290 <MX_GPIO_Init+0x1a8>)
 8001188:	f003 f86c 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOYSTICK_SEL_Pin JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_SEL_Pin|JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 800118c:	f242 0330 	movw	r3, #8240	@ 0x2030
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4839      	ldr	r0, [pc, #228]	@ (8001288 <MX_GPIO_Init+0x1a0>)
 80011a4:	f002 fec4 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin USBPD_1A_PROTECT_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin;
 80011a8:	f24d 0308 	movw	r3, #53256	@ 0xd008
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4831      	ldr	r0, [pc, #196]	@ (8001288 <MX_GPIO_Init+0x1a0>)
 80011c2:	f002 feb5 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 80011c6:	23a2      	movs	r3, #162	@ 0xa2
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	482b      	ldr	r0, [pc, #172]	@ (800128c <MX_GPIO_Init+0x1a4>)
 80011de:	f002 fea7 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 80011e2:	f240 4304 	movw	r3, #1028	@ 0x404
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4824      	ldr	r0, [pc, #144]	@ (800128c <MX_GPIO_Init+0x1a4>)
 80011fa:	f002 fe99 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121a:	f002 fe89 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4816      	ldr	r0, [pc, #88]	@ (8001290 <MX_GPIO_Init+0x1a8>)
 8001236:	f002 fe7b 	bl	8003f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2008      	movs	r0, #8
 8001240:	f002 fc65 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001244:	2008      	movs	r0, #8
 8001246:	f002 fc7c 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200a      	movs	r0, #10
 8001250:	f002 fc5d 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001254:	200a      	movs	r0, #10
 8001256:	f002 fc74 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2017      	movs	r0, #23
 8001260:	f002 fc55 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001264:	2017      	movs	r0, #23
 8001266:	f002 fc6c 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2028      	movs	r0, #40	@ 0x28
 8001270:	f002 fc4d 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001274:	2028      	movs	r0, #40	@ 0x28
 8001276:	f002 fc64 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	48000800 	.word	0x48000800
 800128c:	48000400 	.word	0x48000400
 8001290:	48000c00 	.word	0x48000c00

08001294 <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(uint16_t value)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3); // таймер №1, канал №3
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2208      	movs	r2, #8
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <setPWM+0x38>)
 80012b8:	f006 ff50 	bl	800815c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012bc:	2108      	movs	r1, #8
 80012be:	4803      	ldr	r0, [pc, #12]	@ (80012cc <setPWM+0x38>)
 80012c0:	f006 fe3a 	bl	8007f38 <HAL_TIM_PWM_Start>
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000025c 	.word	0x2000025c

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_MspInit+0x44>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_MspInit+0x44>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_MspInit+0x44>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_MspInit+0x44>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	6593      	str	r3, [r2, #88]	@ 0x58
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001312:	f005 fe2d 	bl	8006f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0a0      	sub	sp, #128	@ 0x80
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2254      	movs	r2, #84	@ 0x54
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f009 fc0d 	bl	800ab64 <memset>
  if(hadc->Instance==ADC1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001352:	d154      	bne.n	80013fe <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800135a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800135e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f006 fb41 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001370:	f7ff ffae 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 800137a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_ADC_MspInit+0xe4>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 80013bc:	2304      	movs	r3, #4
 80013be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013cc:	4619      	mov	r1, r3
 80013ce:	480f      	ldr	r0, [pc, #60]	@ (800140c <HAL_ADC_MspInit+0xe8>)
 80013d0:	f002 fdae 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCKBOOST_VIN_Pin|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 80013d4:	230e      	movs	r3, #14
 80013d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ea:	f002 fda1 	bl	8003f30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2012      	movs	r0, #18
 80013f4:	f002 fb8b 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013f8:	2012      	movs	r0, #18
 80013fa:	f002 fba2 	bl	8003b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3780      	adds	r7, #128	@ 0x80
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800

08001410 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	@ 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a3d      	ldr	r2, [pc, #244]	@ (8001524 <HAL_COMP_MspInit+0x114>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d119      	bne.n	8001466 <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a3c      	ldr	r2, [pc, #240]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001460:	f002 fd66 	bl	8003f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001464:	e05a      	b.n	800151c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a30      	ldr	r2, [pc, #192]	@ (800152c <HAL_COMP_MspInit+0x11c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d119      	bne.n	80014a4 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a2c      	ldr	r2, [pc, #176]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149e:	f002 fd47 	bl	8003f30 <HAL_GPIO_Init>
}
 80014a2:	e03b      	b.n	800151c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_COMP_MspInit+0x120>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d118      	bne.n	80014e0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4816      	ldr	r0, [pc, #88]	@ (8001534 <HAL_COMP_MspInit+0x124>)
 80014da:	f002 fd29 	bl	8003f30 <HAL_GPIO_Init>
}
 80014de:	e01d      	b.n	800151c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_COMP_MspInit+0x128>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d118      	bne.n	800151c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_COMP_MspInit+0x118>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8001502:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <HAL_COMP_MspInit+0x124>)
 8001518:	f002 fd0a 	bl	8003f30 <HAL_GPIO_Init>
}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	@ 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40010204 	.word	0x40010204
 8001528:	40021000 	.word	0x40021000
 800152c:	40010208 	.word	0x40010208
 8001530:	4001020c 	.word	0x4001020c
 8001534:	48000400 	.word	0x48000400
 8001538:	40010214 	.word	0x40010214

0800153c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <HAL_DAC_MspInit+0x80>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10c      	bne.n	8001568 <HAL_DAC_MspInit+0x2c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001566:	e022      	b.n	80015ae <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <HAL_DAC_MspInit+0x88>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10c      	bne.n	800158c <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
}
 800158a:	e010      	b.n	80015ae <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_DAC_MspInit+0x8c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10b      	bne.n	80015ae <HAL_DAC_MspInit+0x72>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_DAC_MspInit+0x84>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	50000800 	.word	0x50000800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	50000c00 	.word	0x50000c00
 80015c8:	50001000 	.word	0x50001000

080015cc <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a11      	ldr	r2, [pc, #68]	@ (8001620 <HAL_HRTIM_MspInit+0x54>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d11b      	bne.n	8001616 <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_HRTIM_MspInit+0x58>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_HRTIM_MspInit+0x58>)
 80015e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_HRTIM_MspInit+0x58>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2043      	movs	r0, #67	@ 0x43
 80015fc:	f002 fa87 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001600:	2043      	movs	r0, #67	@ 0x43
 8001602:	f002 fa9e 	bl	8003b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	204a      	movs	r0, #74	@ 0x4a
 800160c:	f002 fa7f 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8001610:	204a      	movs	r0, #74	@ 0x4a
 8001612:	f002 fa96 	bl	8003b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40016800 	.word	0x40016800
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a37      	ldr	r2, [pc, #220]	@ (8001724 <HAL_HRTIM_MspPostInit+0xfc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d167      	bne.n	800171a <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a36      	ldr	r2, [pc, #216]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a2a      	ldr	r2, [pc, #168]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_HRTIM_MspPostInit+0x100>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_N1_DRIVE_Pin|BUCKBOOST_N2_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 8001692:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80016a4:	230d      	movs	r3, #13
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	481f      	ldr	r0, [pc, #124]	@ (800172c <HAL_HRTIM_MspPostInit+0x104>)
 80016b0:	f002 fc3e 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80016b4:	23c0      	movs	r3, #192	@ 0xc0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80016c4:	230d      	movs	r3, #13
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4818      	ldr	r0, [pc, #96]	@ (8001730 <HAL_HRTIM_MspPostInit+0x108>)
 80016d0:	f002 fc2e 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 80016d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 80016e6:	2303      	movs	r3, #3
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_HRTIM_MspPostInit+0x108>)
 80016f2:	f002 fc1d 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 80016f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001708:	230d      	movs	r3, #13
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f002 fc0b 	bl	8003f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40016800 	.word	0x40016800
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000800 	.word	0x48000800

08001734 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_PWM_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 800174c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001750:	6613      	str	r3, [r2, #96]	@ 0x60
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_TIM_PWM_MspInit+0x3c>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <HAL_TIM_MspPostInit+0x68>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a11      	ldr	r2, [pc, #68]	@ (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017c0:	2306      	movs	r3, #6
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ce:	f002 fbaf 	bl	8003f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40012c00 	.word	0x40012c00
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	@ 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2254      	movs	r2, #84	@ 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f009 f9ad 	bl	800ab64 <memset>
  if(huart->Instance==USART3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_UART_MspInit+0xa8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d136      	bne.n	8001882 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001814:	2304      	movs	r3, #4
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f006 f8e3 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff fd50 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_UART_MspInit+0xac>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_UART_MspInit+0xac>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183a:	6593      	str	r3, [r2, #88]	@ 0x58
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_UART_MspInit+0xac>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_UART_MspInit+0xac>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184c:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_UART_MspInit+0xac>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_UART_MspInit+0xac>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8001860:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001864:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800186e:	2301      	movs	r3, #1
 8001870:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001872:	2307      	movs	r3, #7
 8001874:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_UART_MspInit+0xb0>)
 800187e:	f002 fb57 	bl	8003f30 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	3778      	adds	r7, #120	@ 0x78
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40004800 	.word	0x40004800
 8001890:	40021000 	.word	0x40021000
 8001894:	48000800 	.word	0x48000800

08001898 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b098      	sub	sp, #96	@ 0x60
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2254      	movs	r2, #84	@ 0x54
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f009 f95b 	bl	800ab64 <memset>
  if(hpcd->Instance==USB)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <HAL_PCD_MspInit+0x70>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d122      	bne.n	80018fe <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80018be:	2300      	movs	r3, #0
 80018c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 f890 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80018d2:	f7ff fcfd 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_PCD_MspInit+0x74>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	4a0c      	ldr	r2, [pc, #48]	@ (800190c <HAL_PCD_MspInit+0x74>)
 80018dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_PCD_MspInit+0x74>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2013      	movs	r0, #19
 80018f4:	f002 f90b 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80018f8:	2013      	movs	r0, #19
 80018fa:	f002 f922 	bl	8003b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 80018fe:	bf00      	nop
 8001900:	3760      	adds	r7, #96	@ 0x60
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40005c00 	.word	0x40005c00
 800190c:	40021000 	.word	0x40021000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001966:	f000 f8db 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}

0800196e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 8001972:	2004      	movs	r0, #4
 8001974:	f002 fc8e 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 8001980:	2010      	movs	r0, #16
 8001982:	f002 fc87 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <ADC1_2_IRQHandler+0x10>)
 8001992:	f000 fcd9 	bl	8002348 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000028 	.word	0x20000028

080019a0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <USB_HP_IRQHandler+0x10>)
 80019a6:	f003 ffe7 	bl	8005978 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000033c 	.word	0x2000033c

080019b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 80019b8:	2020      	movs	r0, #32
 80019ba:	f002 fc6b 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 80019c6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019ca:	f002 fc63 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_SEL_Pin);
 80019ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019d2:	f002 fc5f 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 80019e0:	2106      	movs	r1, #6
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <HRTIM1_Master_IRQHandler+0x10>)
 80019e4:	f002 feef 	bl	80047c6 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000160 	.word	0x20000160

080019f0 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 80019f4:	2105      	movs	r1, #5
 80019f6:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <HRTIM1_TIMF_IRQHandler+0x10>)
 80019f8:	f002 fee5 	bl	80047c6 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000160 	.word	0x20000160

08001a04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a28:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff ffea 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopForever+0xe>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopForever+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f009 f88d 	bl	800ab74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a5a:	f7fe fda3 	bl	80005a4 <main>

08001a5e <LoopForever>:

LoopForever:
    b LoopForever
 8001a5e:	e7fe      	b.n	8001a5e <LoopForever>
  ldr   r0, =_estack
 8001a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a6c:	0800ac24 	.word	0x0800ac24
  ldr r2, =_sbss
 8001a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a74:	20000620 	.word	0x20000620

08001a78 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC3_IRQHandler>

08001a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f002 f837 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 f80e 	bl	8001aac <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	e001      	b.n	8001aa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a9c:	f7ff fc1e 	bl	80012dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]

}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_InitTick+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d022      	beq.n	8001b06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_InitTick+0x6c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_InitTick+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f842 	bl	8003b5e <HAL_SYSTICK_Config>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10f      	bne.n	8001b00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	d809      	bhi.n	8001afa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	f04f 30ff 	mov.w	r0, #4294967295
 8001aee:	f002 f80e 	bl	8003b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_InitTick+0x70>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e007      	b.n	8001b0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e004      	b.n	8001b0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a03      	ldr	r2, [pc, #12]	@ (8001b3c <HAL_IncTick+0x1c>)
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	2000061c 	.word	0x2000061c
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000061c 	.word	0x2000061c

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d004      	beq.n	8001b80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_Delay+0x40>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b80:	bf00      	nop
 8001b82:	f7ff ffdf 	bl	8001b44 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d8f7      	bhi.n	8001b82 <HAL_Delay+0x26>
  {
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	@ 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <LL_ADC_SetOffset+0x44>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	03fff000 	.word	0x03fff000

08001c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3360      	adds	r3, #96	@ 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3360      	adds	r3, #96	@ 0x60
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3360      	adds	r3, #96	@ 0x60
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	615a      	str	r2, [r3, #20]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3330      	adds	r3, #48	@ 0x30
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	211f      	movs	r1, #31
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 011f 	and.w	r1, r3, #31
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3314      	adds	r3, #20
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0e5b      	lsrs	r3, r3, #25
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0d1b      	lsrs	r3, r3, #20
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2107      	movs	r1, #7
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0d1b      	lsrs	r3, r3, #20
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0318 	and.w	r3, r3, #24
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e64:	40d9      	lsrs	r1, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	400b      	ands	r3, r1
 8001e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	0007ffff 	.word	0x0007ffff

08001e88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1a9      	b.n	800233e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff f993 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff67 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff4d 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff82 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff66 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b9c      	ldr	r3, [pc, #624]	@ (80022b4 <HAL_ADC_Init+0x2e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a9c      	ldr	r2, [pc, #624]	@ (80022b8 <HAL_ADC_Init+0x2e8>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff64 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff75 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002098:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8142 	bne.w	800232c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 813e 	bne.w	800232c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff49 	bl	8001f5c <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d141      	bne.n	8002154 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Init+0x114>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10f      	bne.n	8002104 <HAL_ADC_Init+0x134>
 80020e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e8:	f7ff ff38 	bl	8001f5c <LL_ADC_IsEnabled>
 80020ec:	4604      	mov	r4, r0
 80020ee:	4873      	ldr	r0, [pc, #460]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020f0:	f7ff ff34 	bl	8001f5c <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_ADC_Init+0x15a>
 8002104:	486e      	ldr	r0, [pc, #440]	@ (80022c0 <HAL_ADC_Init+0x2f0>)
 8002106:	f7ff ff29 	bl	8001f5c <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	486d      	ldr	r0, [pc, #436]	@ (80022c4 <HAL_ADC_Init+0x2f4>)
 800210e:	f7ff ff25 	bl	8001f5c <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	431c      	orrs	r4, r3
 8002116:	486c      	ldr	r0, [pc, #432]	@ (80022c8 <HAL_ADC_Init+0x2f8>)
 8002118:	f7ff ff20 	bl	8001f5c <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002136:	d004      	beq.n	8002142 <HAL_ADC_Init+0x172>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x176>
 8002142:	4a62      	ldr	r2, [pc, #392]	@ (80022cc <HAL_ADC_Init+0x2fc>)
 8002144:	e000      	b.n	8002148 <HAL_ADC_Init+0x178>
 8002146:	4a62      	ldr	r2, [pc, #392]	@ (80022d0 <HAL_ADC_Init+0x300>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fd26 	bl	8001ba0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7f5b      	ldrb	r3, [r3, #29]
 8002158:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800215e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002164:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800216a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002172:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	045b      	lsls	r3, r3, #17
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_ADC_Init+0x304>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	430b      	orrs	r3, r1
 80021be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fee4 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80021e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d17f      	bne.n	80022e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d17c      	bne.n	80022e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220a:	f023 0302 	bic.w	r3, r3, #2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800222e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002238:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6911      	ldr	r1, [r2, #16]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800224e:	e013      	b.n	8002278 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800225e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227e:	2b01      	cmp	r3, #1
 8002280:	d12a      	bne.n	80022d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e019      	b.n	80022e8 <HAL_ADC_Init+0x318>
 80022b4:	20000000 	.word	0x20000000
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000400 	.word	0x50000400
 80022c4:	50000500 	.word	0x50000500
 80022c8:	50000600 	.word	0x50000600
 80022cc:	50000300 	.word	0x50000300
 80022d0:	50000700 	.word	0x50000700
 80022d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10c      	bne.n	800230a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f023 010f 	bic.w	r1, r3, #15
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020f 	bic.w	r2, r2, #15
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800232a:	e007      	b.n	800233c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	f043 0210 	orr.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800233c:	7ffb      	ldrb	r3, [r7, #31]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop

08002348 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236c:	d004      	beq.n	8002378 <HAL_ADC_IRQHandler+0x30>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a8e      	ldr	r2, [pc, #568]	@ (80025ac <HAL_ADC_IRQHandler+0x264>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_ADC_IRQHandler+0x34>
 8002378:	4b8d      	ldr	r3, [pc, #564]	@ (80025b0 <HAL_ADC_IRQHandler+0x268>)
 800237a:	e000      	b.n	800237e <HAL_ADC_IRQHandler+0x36>
 800237c:	4b8d      	ldr	r3, [pc, #564]	@ (80025b4 <HAL_ADC_IRQHandler+0x26c>)
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fd82 	bl	8001e88 <LL_ADC_GetMultimode>
 8002384:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x78>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d012      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fed4 	bl	8003160 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x8c>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8094 	beq.w	8002508 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 808e 	beq.w	8002508 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fc9b 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d072      	beq.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a64      	ldr	r2, [pc, #400]	@ (80025ac <HAL_ADC_IRQHandler+0x264>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_ADC_IRQHandler+0xea>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_ADC_IRQHandler+0x270>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d002      	beq.n	800242e <HAL_ADC_IRQHandler+0xe6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e003      	b.n	8002436 <HAL_ADC_IRQHandler+0xee>
 800242e:	4b63      	ldr	r3, [pc, #396]	@ (80025bc <HAL_ADC_IRQHandler+0x274>)
 8002430:	e001      	b.n	8002436 <HAL_ADC_IRQHandler+0xee>
 8002432:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4293      	cmp	r3, r2
 800243c:	d008      	beq.n	8002450 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d002      	beq.n	8002450 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b09      	cmp	r3, #9
 800244e:	d104      	bne.n	800245a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	e014      	b.n	8002484 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a53      	ldr	r2, [pc, #332]	@ (80025ac <HAL_ADC_IRQHandler+0x264>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_ADC_IRQHandler+0x130>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a53      	ldr	r2, [pc, #332]	@ (80025b8 <HAL_ADC_IRQHandler+0x270>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d002      	beq.n	8002474 <HAL_ADC_IRQHandler+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e003      	b.n	800247c <HAL_ADC_IRQHandler+0x134>
 8002474:	4b51      	ldr	r3, [pc, #324]	@ (80025bc <HAL_ADC_IRQHandler+0x274>)
 8002476:	e001      	b.n	800247c <HAL_ADC_IRQHandler+0x134>
 8002478:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800247c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d135      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d12e      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fd6e 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020c 	bic.w	r2, r2, #12
 80024ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024e0:	e00b      	b.n	80024fa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f984 	bl	8002808 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	220c      	movs	r2, #12
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_ADC_IRQHandler+0x1d4>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80b3 	beq.w	800268e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80ad 	beq.w	800268e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fc36 	bl	8001dc2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002556:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fbf1 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002562:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_ADC_IRQHandler+0x264>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_ADC_IRQHandler+0x23a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_ADC_IRQHandler+0x270>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d002      	beq.n	800257e <HAL_ADC_IRQHandler+0x236>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e003      	b.n	8002586 <HAL_ADC_IRQHandler+0x23e>
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_ADC_IRQHandler+0x274>)
 8002580:	e001      	b.n	8002586 <HAL_ADC_IRQHandler+0x23e>
 8002582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4293      	cmp	r3, r2
 800258c:	d008      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d002      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b07      	cmp	r3, #7
 800259e:	d10f      	bne.n	80025c0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	e01f      	b.n	80025ea <HAL_ADC_IRQHandler+0x2a2>
 80025aa:	bf00      	nop
 80025ac:	50000100 	.word	0x50000100
 80025b0:	50000300 	.word	0x50000300
 80025b4:	50000700 	.word	0x50000700
 80025b8:	50000500 	.word	0x50000500
 80025bc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a8b      	ldr	r2, [pc, #556]	@ (80027f4 <HAL_ADC_IRQHandler+0x4ac>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_ADC_IRQHandler+0x296>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8a      	ldr	r2, [pc, #552]	@ (80027f8 <HAL_ADC_IRQHandler+0x4b0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d002      	beq.n	80025da <HAL_ADC_IRQHandler+0x292>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e003      	b.n	80025e2 <HAL_ADC_IRQHandler+0x29a>
 80025da:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_ADC_IRQHandler+0x4b4>)
 80025dc:	e001      	b.n	80025e2 <HAL_ADC_IRQHandler+0x29a>
 80025de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d047      	beq.n	8002680 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_ADC_IRQHandler+0x2c2>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03f      	beq.n	8002680 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d13a      	bne.n	8002680 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002614:	2b40      	cmp	r3, #64	@ 0x40
 8002616:	d133      	bne.n	8002680 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12e      	bne.n	8002680 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fcbe 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11a      	bne.n	8002668 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002640:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d112      	bne.n	8002680 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002666:	e00b      	b.n	8002680 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fd45 	bl	8003110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2260      	movs	r2, #96	@ 0x60
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <HAL_ADC_IRQHandler+0x374>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8b4 	bl	800281c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_ADC_IRQHandler+0x3a4>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fd2b 	bl	8003138 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d012      	beq.n	800271c <HAL_ADC_IRQHandler+0x3d4>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fd1d 	bl	800314c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d043      	beq.n	80027ae <HAL_ADC_IRQHandler+0x466>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03e      	beq.n	80027ae <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002738:	2301      	movs	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
 800273c:	e021      	b.n	8002782 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800274c:	d004      	beq.n	8002758 <HAL_ADC_IRQHandler+0x410>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a28      	ldr	r2, [pc, #160]	@ (80027f4 <HAL_ADC_IRQHandler+0x4ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_IRQHandler+0x414>
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_ADC_IRQHandler+0x4b8>)
 800275a:	e000      	b.n	800275e <HAL_ADC_IRQHandler+0x416>
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_ADC_IRQHandler+0x4bc>)
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fba0 	bl	8001ea4 <LL_ADC_GetMultiDMATransfer>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
 800276e:	e008      	b.n	8002782 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800277e:	2301      	movs	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10e      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f845 	bl	8002830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2210      	movs	r2, #16
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d018      	beq.n	80027ea <HAL_ADC_IRQHandler+0x4a2>
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d013      	beq.n	80027ea <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	f043 0208 	orr.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fc9d 	bl	8003124 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	@ 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	50000100 	.word	0x50000100
 80027f8:	50000500 	.word	0x50000500
 80027fc:	50000400 	.word	0x50000400
 8002800:	50000300 	.word	0x50000300
 8002804:	50000700 	.word	0x50000700

08002808 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0b6      	sub	sp, #216	@ 0xd8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800285e:	2b01      	cmp	r3, #1
 8002860:	d102      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x24>
 8002862:	2302      	movs	r3, #2
 8002864:	f000 bc13 	b.w	800308e <HAL_ADC_ConfigChannel+0x84a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fb84 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 83f3 	bne.w	8003068 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff fa6b 	bl	8001d6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fb72 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800289e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb7e 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80028ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 81d9 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 81d4 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028cc:	d10f      	bne.n	80028ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	4619      	mov	r1, r3
 80028da:	f7ff fa85 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fa19 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>
 80028ec:	e00e      	b.n	800290c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7ff fa74 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fa09 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d022      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800293e:	f7ff f963 	bl	8001c08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	461a      	mov	r2, r3
 8002950:	f7ff f9af 	bl	8001cb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_ADC_ConfigChannel+0x126>
 8002964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002968:	e000      	b.n	800296c <HAL_ADC_ConfigChannel+0x128>
 800296a:	2300      	movs	r3, #0
 800296c:	461a      	mov	r2, r3
 800296e:	f7ff f9bb 	bl	8001ce8 <LL_ADC_SetOffsetSaturation>
 8002972:	e17b      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f968 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x15c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f95d 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	e01e      	b.n	80029de <HAL_ADC_ConfigChannel+0x19a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f952 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e004      	b.n	80029dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80029d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x1b2>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	e018      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1e4>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f921 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f905 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x222>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f8fa 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	e01e      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x260>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f8ef 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e004      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x278>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	e018      	b.n	8002aee <HAL_ADC_ConfigChannel+0x2aa>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e004      	b.n	8002aee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d106      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8be 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f8a2 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x2e8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f897 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	e01e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x326>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f88c 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e004      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x33e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	e016      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x36c>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e004      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d106      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2102      	movs	r1, #2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f85d 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f841 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x3aa>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2103      	movs	r1, #3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f836 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	e017      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x3da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f82b 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x3f2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	e011      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x416>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d106      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2103      	movs	r1, #3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f808 	bl	8001c7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f973 	bl	8001f5c <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 813d 	bne.w	8002ef8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f7ff f8d8 	bl	8001e40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4aa2      	ldr	r2, [pc, #648]	@ (8002f20 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f040 812e 	bne.w	8002ef8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x480>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e019      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x4b4>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	bf94      	ite	ls
 8002cf2:	2301      	movls	r3, #1
 8002cf4:	2300      	movhi	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d079      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x4d4>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d16:	e015      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x500>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x520>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	3301      	adds	r3, #1
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	e017      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x550>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	ea42 0103 	orr.w	r1, r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x576>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	e018      	b.n	8002dec <HAL_ADC_ConfigChannel+0x5a8>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e003      	b.n	8002dde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dec:	430b      	orrs	r3, r1
 8002dee:	e07e      	b.n	8002eee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x5c8>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	069b      	lsls	r3, r3, #26
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0a:	e015      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5f4>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e003      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x614>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	e017      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x644>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	61fb      	str	r3, [r7, #28]
  return result;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x670>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b1e      	subs	r3, #30
 8002eac:	051b      	lsls	r3, r3, #20
 8002eae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	e01b      	b.n	8002eec <HAL_ADC_ConfigChannel+0x6a8>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	613b      	str	r3, [r7, #16]
  return result;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e003      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 021f 	and.w	r2, r3, #31
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	051b      	lsls	r3, r3, #20
 8002ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fe ff78 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_ADC_ConfigChannel+0x6e0>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80be 	beq.w	8003082 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x6d6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10a      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x6ec>
 8002f1a:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <HAL_ADC_ConfigChannel+0x6e8>)
 8002f1c:	e009      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x6ee>
 8002f1e:	bf00      	nop
 8002f20:	407f0000 	.word	0x407f0000
 8002f24:	80080000 	.word	0x80080000
 8002f28:	50000100 	.word	0x50000100
 8002f2c:	50000300 	.word	0x50000300
 8002f30:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <HAL_ADC_ConfigChannel+0x854>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fe5a 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8002f38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a56      	ldr	r2, [pc, #344]	@ (800309c <HAL_ADC_ConfigChannel+0x858>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x70c>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a55      	ldr	r2, [pc, #340]	@ (80030a0 <HAL_ADC_ConfigChannel+0x85c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d13a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d134      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f64:	d005      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x72e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80030a4 <HAL_ADC_ConfigChannel+0x860>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f040 8085 	bne.w	800307c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x742>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a49      	ldr	r2, [pc, #292]	@ (80030a8 <HAL_ADC_ConfigChannel+0x864>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x746>
 8002f86:	4a49      	ldr	r2, [pc, #292]	@ (80030ac <HAL_ADC_ConfigChannel+0x868>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x748>
 8002f8a:	4a43      	ldr	r2, [pc, #268]	@ (8003098 <HAL_ADC_ConfigChannel+0x854>)
 8002f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f7fe fe15 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9c:	4b44      	ldr	r3, [pc, #272]	@ (80030b0 <HAL_ADC_ConfigChannel+0x86c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	4a44      	ldr	r2, [pc, #272]	@ (80030b4 <HAL_ADC_ConfigChannel+0x870>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb6:	e002      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc4:	e05a      	b.n	800307c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3b      	ldr	r2, [pc, #236]	@ (80030b8 <HAL_ADC_ConfigChannel+0x874>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d125      	bne.n	800301c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11f      	bne.n	800301c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a31      	ldr	r2, [pc, #196]	@ (80030a8 <HAL_ADC_ConfigChannel+0x864>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d104      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x7ac>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a34      	ldr	r2, [pc, #208]	@ (80030bc <HAL_ADC_ConfigChannel+0x878>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d047      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff8:	d004      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x7c0>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80030a8 <HAL_ADC_ConfigChannel+0x864>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x7c4>
 8003004:	4a29      	ldr	r2, [pc, #164]	@ (80030ac <HAL_ADC_ConfigChannel+0x868>)
 8003006:	e000      	b.n	800300a <HAL_ADC_ConfigChannel+0x7c6>
 8003008:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_ADC_ConfigChannel+0x854>)
 800300a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7fe fdd6 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301a:	e031      	b.n	8003080 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <HAL_ADC_ConfigChannel+0x87c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12d      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d127      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <HAL_ADC_ConfigChannel+0x864>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003044:	d004      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x80c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <HAL_ADC_ConfigChannel+0x864>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x810>
 8003050:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <HAL_ADC_ConfigChannel+0x868>)
 8003052:	e000      	b.n	8003056 <HAL_ADC_ConfigChannel+0x812>
 8003054:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <HAL_ADC_ConfigChannel+0x854>)
 8003056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800305a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f7fe fdb0 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
 8003066:	e00c      	b.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800307a:	e002      	b.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800307c:	bf00      	nop
 800307e:	e000      	b.n	8003082 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800308a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800308e:	4618      	mov	r0, r3
 8003090:	37d8      	adds	r7, #216	@ 0xd8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	50000700 	.word	0x50000700
 800309c:	c3210000 	.word	0xc3210000
 80030a0:	90c00010 	.word	0x90c00010
 80030a4:	50000600 	.word	0x50000600
 80030a8:	50000100 	.word	0x50000100
 80030ac:	50000300 	.word	0x50000300
 80030b0:	20000000 	.word	0x20000000
 80030b4:	053e2d63 	.word	0x053e2d63
 80030b8:	c7520000 	.word	0xc7520000
 80030bc:	50000500 	.word	0x50000500
 80030c0:	cb840000 	.word	0xcb840000

080030c4 <LL_ADC_IsEnabled>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <LL_ADC_IsEnabled+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <LL_ADC_IsEnabled+0x1a>
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_ADC_REG_IsConversionOngoing>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d101      	bne.n	8003102 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b0a1      	sub	sp, #132	@ 0x84
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0e7      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800319a:	2300      	movs	r3, #0
 800319c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800319e:	2300      	movs	r3, #0
 80031a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031aa:	d102      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e009      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e001      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0be      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff7f 	bl	80030ea <LL_ADC_REG_IsConversionOngoing>
 80031ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff79 	bl	80030ea <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80a0 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 809c 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a55      	ldr	r2, [pc, #340]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800321c:	4b56      	ldr	r3, [pc, #344]	@ (8003378 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800321e:	e000      	b.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003220:	4b56      	ldr	r3, [pc, #344]	@ (800337c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003222:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04b      	beq.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800322c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800323e:	035b      	lsls	r3, r3, #13
 8003240:	430b      	orrs	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003246:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a45      	ldr	r2, [pc, #276]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800325c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003260:	f7ff ff30 	bl	80030c4 <LL_ADC_IsEnabled>
 8003264:	4604      	mov	r4, r0
 8003266:	4841      	ldr	r0, [pc, #260]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003268:	f7ff ff2c 	bl	80030c4 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	4323      	orrs	r3, r4
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800327c:	483c      	ldr	r0, [pc, #240]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800327e:	f7ff ff21 	bl	80030c4 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	483b      	ldr	r0, [pc, #236]	@ (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003286:	f7ff ff1d 	bl	80030c4 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	431c      	orrs	r4, r3
 800328e:	483c      	ldr	r0, [pc, #240]	@ (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003290:	f7ff ff18 	bl	80030c4 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d056      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6892      	ldr	r2, [r2, #8]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c2:	e047      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d8:	d004      	beq.n	80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a23      	ldr	r2, [pc, #140]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10f      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80032e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032e8:	f7ff feec 	bl	80030c4 <LL_ADC_IsEnabled>
 80032ec:	4604      	mov	r4, r0
 80032ee:	481f      	ldr	r0, [pc, #124]	@ (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f0:	f7ff fee8 	bl	80030c4 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4323      	orrs	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003304:	481a      	ldr	r0, [pc, #104]	@ (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003306:	f7ff fedd 	bl	80030c4 <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	4819      	ldr	r0, [pc, #100]	@ (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800330e:	f7ff fed9 	bl	80030c4 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	431c      	orrs	r4, r3
 8003316:	481a      	ldr	r0, [pc, #104]	@ (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003318:	f7ff fed4 	bl	80030c4 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800332e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800333c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800333e:	e009      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003352:	e000      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800335e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003362:	4618      	mov	r0, r3
 8003364:	3784      	adds	r7, #132	@ 0x84
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	50000100 	.word	0x50000100
 8003370:	50000400 	.word	0x50000400
 8003374:	50000500 	.word	0x50000500
 8003378:	50000300 	.word	0x50000300
 800337c:	50000700 	.word	0x50000700
 8003380:	50000600 	.word	0x50000600

08003384 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40010400 	.word	0x40010400

080033a8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	620b      	str	r3, [r1, #32]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40010400 	.word	0x40010400

080033cc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033de:	4013      	ands	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010400 	.word	0x40010400

080033f4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <LL_EXTI_DisableIT_32_63+0x24>)
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	43db      	mvns	r3, r3
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <LL_EXTI_DisableIT_32_63+0x24>)
 8003406:	4013      	ands	r3, r2
 8003408:	620b      	str	r3, [r1, #32]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010400 	.word	0x40010400

0800341c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4904      	ldr	r1, [pc, #16]	@ (800343c <LL_EXTI_EnableEvent_0_31+0x20>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]

}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40010400 	.word	0x40010400

08003440 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <LL_EXTI_EnableEvent_32_63+0x20>)
 800344a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800344c:	4904      	ldr	r1, [pc, #16]	@ (8003460 <LL_EXTI_EnableEvent_32_63+0x20>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <LL_EXTI_DisableEvent_0_31+0x24>)
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	43db      	mvns	r3, r3
 8003474:	4904      	ldr	r1, [pc, #16]	@ (8003488 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003476:	4013      	ands	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010400 	.word	0x40010400

0800348c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	43db      	mvns	r3, r3
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4904      	ldr	r1, [pc, #16]	@ (80034d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]

}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010400 	.word	0x40010400

080034d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80034e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e4:	4904      	ldr	r1, [pc, #16]	@ (80034f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40010400 	.word	0x40010400

080034fc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	43db      	mvns	r3, r3
 800350c:	4904      	ldr	r1, [pc, #16]	@ (8003520 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800350e:	4013      	ands	r3, r2
 8003510:	608b      	str	r3, [r1, #8]

}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010400 	.word	0x40010400

08003524 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800352e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	43db      	mvns	r3, r3
 8003534:	4904      	ldr	r1, [pc, #16]	@ (8003548 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003536:	4013      	ands	r3, r2
 8003538:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40010400 	.word	0x40010400

08003570 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800357a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357c:	4904      	ldr	r1, [pc, #16]	@ (8003590 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40010400 	.word	0x40010400

08003594 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4904      	ldr	r1, [pc, #16]	@ (80035b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60cb      	str	r3, [r1, #12]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010400 	.word	0x40010400

080035bc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4904      	ldr	r1, [pc, #16]	@ (80035e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010400 	.word	0x40010400

080035e4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6153      	str	r3, [r2, #20]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010400 	.word	0x40010400

08003604 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800360c:	4a04      	ldr	r2, [pc, #16]	@ (8003620 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e181      	b.n	8003944 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800364e:	d102      	bne.n	8003656 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e176      	b.n	8003944 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7f5b      	ldrb	r3, [r3, #29]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d108      	bne.n	8003672 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd fecf 	bl	8001410 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800367c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b90      	ldr	r3, [pc, #576]	@ (80038e4 <HAL_COMP_Init+0x2c0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_COMP_Init+0xc8>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c4:	4b88      	ldr	r3, [pc, #544]	@ (80038e8 <HAL_COMP_Init+0x2c4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	4a88      	ldr	r2, [pc, #544]	@ (80038ec <HAL_COMP_Init+0x2c8>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80036de:	e002      	b.n	80036e6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f9      	bne.n	80036e0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7f      	ldr	r2, [pc, #508]	@ (80038f0 <HAL_COMP_Init+0x2cc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d028      	beq.n	8003748 <HAL_COMP_Init+0x124>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7e      	ldr	r2, [pc, #504]	@ (80038f4 <HAL_COMP_Init+0x2d0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d020      	beq.n	8003742 <HAL_COMP_Init+0x11e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7c      	ldr	r2, [pc, #496]	@ (80038f8 <HAL_COMP_Init+0x2d4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_COMP_Init+0x118>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7b      	ldr	r2, [pc, #492]	@ (80038fc <HAL_COMP_Init+0x2d8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d010      	beq.n	8003736 <HAL_COMP_Init+0x112>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a79      	ldr	r2, [pc, #484]	@ (8003900 <HAL_COMP_Init+0x2dc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d008      	beq.n	8003730 <HAL_COMP_Init+0x10c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a78      	ldr	r2, [pc, #480]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_COMP_Init+0x108>
 8003728:	2301      	movs	r3, #1
 800372a:	e00f      	b.n	800374c <HAL_COMP_Init+0x128>
 800372c:	2302      	movs	r3, #2
 800372e:	e00d      	b.n	800374c <HAL_COMP_Init+0x128>
 8003730:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003734:	e00a      	b.n	800374c <HAL_COMP_Init+0x128>
 8003736:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800373a:	e007      	b.n	800374c <HAL_COMP_Init+0x128>
 800373c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003740:	e004      	b.n	800374c <HAL_COMP_Init+0x128>
 8003742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003746:	e001      	b.n	800374c <HAL_COMP_Init+0x128>
 8003748:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800374c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80b6 	beq.w	80038c8 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_COMP_Init+0x158>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a64      	ldr	r2, [pc, #400]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800377c:	6938      	ldr	r0, [r7, #16]
 800377e:	f7ff feab 	bl	80034d8 <LL_EXTI_EnableRisingTrig_32_63>
 8003782:	e014      	b.n	80037ae <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003784:	6938      	ldr	r0, [r7, #16]
 8003786:	f7ff fe95 	bl	80034b4 <LL_EXTI_EnableRisingTrig_0_31>
 800378a:	e010      	b.n	80037ae <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5c      	ldr	r2, [pc, #368]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_COMP_Init+0x17c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5b      	ldr	r2, [pc, #364]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80037a0:	6938      	ldr	r0, [r7, #16]
 80037a2:	f7ff febf 	bl	8003524 <LL_EXTI_DisableRisingTrig_32_63>
 80037a6:	e002      	b.n	80037ae <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80037a8:	6938      	ldr	r0, [r7, #16]
 80037aa:	f7ff fea7 	bl	80034fc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a51      	ldr	r2, [pc, #324]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_COMP_Init+0x1aa>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d103      	bne.n	80037d6 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80037ce:	6938      	ldr	r0, [r7, #16]
 80037d0:	f7ff fece 	bl	8003570 <LL_EXTI_EnableFallingTrig_32_63>
 80037d4:	e014      	b.n	8003800 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80037d6:	6938      	ldr	r0, [r7, #16]
 80037d8:	f7ff feb8 	bl	800354c <LL_EXTI_EnableFallingTrig_0_31>
 80037dc:	e010      	b.n	8003800 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a48      	ldr	r2, [pc, #288]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_COMP_Init+0x1ce>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a46      	ldr	r2, [pc, #280]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d103      	bne.n	80037fa <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80037f2:	6938      	ldr	r0, [r7, #16]
 80037f4:	f7ff fee2 	bl	80035bc <LL_EXTI_DisableFallingTrig_32_63>
 80037f8:	e002      	b.n	8003800 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80037fa:	6938      	ldr	r0, [r7, #16]
 80037fc:	f7ff feca 	bl	8003594 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3f      	ldr	r2, [pc, #252]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_COMP_Init+0x1f0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3e      	ldr	r2, [pc, #248]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003814:	6938      	ldr	r0, [r7, #16]
 8003816:	f7ff fef5 	bl	8003604 <LL_EXTI_ClearFlag_32_63>
 800381a:	e002      	b.n	8003822 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800381c:	6938      	ldr	r0, [r7, #16]
 800381e:	f7ff fee1 	bl	80035e4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a34      	ldr	r2, [pc, #208]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_COMP_Init+0x21e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d103      	bne.n	800384a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003842:	6938      	ldr	r0, [r7, #16]
 8003844:	f7ff fdfc 	bl	8003440 <LL_EXTI_EnableEvent_32_63>
 8003848:	e014      	b.n	8003874 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	f7ff fde6 	bl	800341c <LL_EXTI_EnableEvent_0_31>
 8003850:	e010      	b.n	8003874 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_COMP_Init+0x242>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a29      	ldr	r2, [pc, #164]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d103      	bne.n	800386e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f7ff fe10 	bl	800348c <LL_EXTI_DisableEvent_32_63>
 800386c:	e002      	b.n	8003874 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800386e:	6938      	ldr	r0, [r7, #16]
 8003870:	f7ff fdf8 	bl	8003464 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_COMP_Init+0x270>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1e      	ldr	r2, [pc, #120]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003894:	6938      	ldr	r0, [r7, #16]
 8003896:	f7ff fd87 	bl	80033a8 <LL_EXTI_EnableIT_32_63>
 800389a:	e04b      	b.n	8003934 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800389c:	6938      	ldr	r0, [r7, #16]
 800389e:	f7ff fd71 	bl	8003384 <LL_EXTI_EnableIT_0_31>
 80038a2:	e047      	b.n	8003934 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_COMP_Init+0x294>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80038b8:	6938      	ldr	r0, [r7, #16]
 80038ba:	f7ff fd9b 	bl	80033f4 <LL_EXTI_DisableIT_32_63>
 80038be:	e039      	b.n	8003934 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80038c0:	6938      	ldr	r0, [r7, #16]
 80038c2:	f7ff fd83 	bl	80033cc <LL_EXTI_DisableIT_0_31>
 80038c6:	e035      	b.n	8003934 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003904 <HAL_COMP_Init+0x2e0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_COMP_Init+0x2b8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003908 <HAL_COMP_Init+0x2e4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d117      	bne.n	800390c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f7ff fdd5 	bl	800348c <LL_EXTI_DisableEvent_32_63>
 80038e2:	e016      	b.n	8003912 <HAL_COMP_Init+0x2ee>
 80038e4:	ff007e0f 	.word	0xff007e0f
 80038e8:	20000000 	.word	0x20000000
 80038ec:	053e2d63 	.word	0x053e2d63
 80038f0:	40010200 	.word	0x40010200
 80038f4:	40010204 	.word	0x40010204
 80038f8:	40010208 	.word	0x40010208
 80038fc:	4001020c 	.word	0x4001020c
 8003900:	40010210 	.word	0x40010210
 8003904:	40010214 	.word	0x40010214
 8003908:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800390c:	6938      	ldr	r0, [r7, #16]
 800390e:	f7ff fda9 	bl	8003464 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a0e      	ldr	r2, [pc, #56]	@ (8003950 <HAL_COMP_Init+0x32c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_COMP_Init+0x302>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0c      	ldr	r2, [pc, #48]	@ (8003954 <HAL_COMP_Init+0x330>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d103      	bne.n	800392e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003926:	6938      	ldr	r0, [r7, #16]
 8003928:	f7ff fd64 	bl	80033f4 <LL_EXTI_DisableIT_32_63>
 800392c:	e002      	b.n	8003934 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800392e:	6938      	ldr	r0, [r7, #16]
 8003930:	f7ff fd4c 	bl	80033cc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7f5b      	ldrb	r3, [r3, #29]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003944:	7ffb      	ldrb	r3, [r7, #31]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40010214 	.word	0x40010214
 8003954:	40010218 	.word	0x40010218

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	@ (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	@ (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	@ 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1c:	f7ff ff40 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff90 	bl	8003a4c <NVIC_EncodePriority>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff5f 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff33 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffa4 	bl	8003ab4 <SysTick_Config>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e014      	b.n	8003bb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd fccf 	bl	800153c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_DAC_ConfigChannel+0x1c>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e1a1      	b.n	8003f20 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	795b      	ldrb	r3, [r3, #5]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_DAC_ConfigChannel+0x32>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e198      	b.n	8003f20 <HAL_DAC_ConfigChannel+0x364>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d17a      	bne.n	8003cf8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c02:	f7fd ff9f 	bl	8001b44 <HAL_GetTick>
 8003c06:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d13d      	bne.n	8003c8a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c0e:	e018      	b.n	8003c42 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c10:	f7fd ff98 	bl	8001b44 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d911      	bls.n	8003c42 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f043 0208 	orr.w	r2, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e16e      	b.n	8003f20 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1df      	bne.n	8003c10 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c58:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c5a:	e020      	b.n	8003c9e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c5c:	f7fd ff72 	bl	8001b44 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d90f      	bls.n	8003c8a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da0a      	bge.n	8003c8a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f043 0208 	orr.w	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2203      	movs	r2, #3
 8003c84:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e14a      	b.n	8003f20 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dbe3      	blt.n	8003c5c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	ea02 0103 	and.w	r1, r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	21ff      	movs	r1, #255	@ 0xff
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	ea02 0103 	and.w	r1, r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11d      	bne.n	8003d3c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	221f      	movs	r2, #31
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d18:	4013      	ands	r3, r2
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d30:	4313      	orrs	r3, r2
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2207      	movs	r2, #7
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	4013      	ands	r3, r2
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	e00f      	b.n	8003d86 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d102      	bne.n	8003d74 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	e008      	b.n	8003d86 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	e001      	b.n	8003d86 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	4013      	ands	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	791b      	ldrb	r3, [r3, #4]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d102      	bne.n	8003dba <HAL_DAC_ConfigChannel+0x1fe>
 8003db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003db8:	e000      	b.n	8003dbc <HAL_DAC_ConfigChannel+0x200>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	795b      	ldrb	r3, [r3, #5]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_DAC_ConfigChannel+0x22a>
 8003de0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003de4:	e000      	b.n	8003de8 <HAL_DAC_ConfigChannel+0x22c>
 8003de6:	2300      	movs	r3, #0
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d114      	bne.n	8003e28 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003dfe:	f003 fd77 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 8003e02:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4a48      	ldr	r2, [pc, #288]	@ (8003f28 <HAL_DAC_ConfigChannel+0x36c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d904      	bls.n	8003e16 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	e00f      	b.n	8003e36 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4a44      	ldr	r2, [pc, #272]	@ (8003f2c <HAL_DAC_ConfigChannel+0x370>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d90a      	bls.n	8003e34 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	e006      	b.n	8003e36 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e32:	e000      	b.n	8003e36 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003e34:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	4313      	orrs	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	4013      	ands	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eaa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	22c0      	movs	r2, #192	@ 0xc0
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	ea02 0103 	and.w	r1, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	@ 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	09896800 	.word	0x09896800
 8003f2c:	04c4b400 	.word	0x04c4b400

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f3e:	e15a      	b.n	80041f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 814c 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d005      	beq.n	8003f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d130      	bne.n	8003fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0201 	and.w	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d017      	beq.n	800400e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d123      	bne.n	8004062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	6939      	ldr	r1, [r7, #16]
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a6 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b0:	4b58      	ldr	r3, [pc, #352]	@ (8004214 <HAL_GPIO_Init+0x2e4>)
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040bc:	4a56      	ldr	r2, [pc, #344]	@ (8004218 <HAL_GPIO_Init+0x2e8>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040e6:	d01f      	beq.n	8004128 <HAL_GPIO_Init+0x1f8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a4c      	ldr	r2, [pc, #304]	@ (800421c <HAL_GPIO_Init+0x2ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d019      	beq.n	8004124 <HAL_GPIO_Init+0x1f4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004220 <HAL_GPIO_Init+0x2f0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_GPIO_Init+0x1f0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004224 <HAL_GPIO_Init+0x2f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00d      	beq.n	800411c <HAL_GPIO_Init+0x1ec>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a49      	ldr	r2, [pc, #292]	@ (8004228 <HAL_GPIO_Init+0x2f8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <HAL_GPIO_Init+0x1e8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a48      	ldr	r2, [pc, #288]	@ (800422c <HAL_GPIO_Init+0x2fc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_GPIO_Init+0x1e4>
 8004110:	2305      	movs	r3, #5
 8004112:	e00a      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004114:	2306      	movs	r3, #6
 8004116:	e008      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004118:	2304      	movs	r3, #4
 800411a:	e006      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 800411c:	2303      	movs	r3, #3
 800411e:	e004      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004120:	2302      	movs	r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004128:	2300      	movs	r3, #0
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	4093      	lsls	r3, r2
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800413a:	4937      	ldr	r1, [pc, #220]	@ (8004218 <HAL_GPIO_Init+0x2e8>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004148:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800416c:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004172:	4b2f      	ldr	r3, [pc, #188]	@ (8004230 <HAL_GPIO_Init+0x300>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004196:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <HAL_GPIO_Init+0x300>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_GPIO_Init+0x300>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ea:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_GPIO_Init+0x300>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3301      	adds	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f ae9d 	bne.w	8003f40 <HAL_GPIO_Init+0x10>
  }
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800
 8004224:	48000c00 	.word	0x48000c00
 8004228:	48001000 	.word	0x48001000
 800422c:	48001400 	.word	0x48001400
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e001      	b.n	8004256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
 8004270:	4613      	mov	r3, r2
 8004272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004274:	787b      	ldrb	r3, [r7, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004280:	e002      	b.n	8004288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800429e:	4b08      	ldr	r3, [pc, #32]	@ (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042aa:	4a05      	ldr	r2, [pc, #20]	@ (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f806 	bl	80042c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40010400 	.word	0x40010400

080042c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0be      	b.n	800446c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02e      	beq.n	8004398 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a4d      	ldr	r2, [pc, #308]	@ (8004474 <HAL_HRTIM_Init+0x198>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10b      	bne.n	800435c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <HAL_HRTIM_Init+0x19c>)
 8004346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004348:	4a4b      	ldr	r2, [pc, #300]	@ (8004478 <HAL_HRTIM_Init+0x19c>)
 800434a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800434e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004350:	4b49      	ldr	r3, [pc, #292]	@ (8004478 <HAL_HRTIM_Init+0x19c>)
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800436a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004380:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fd f917 	bl	80015cc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
 80043e4:	e03e      	b.n	8004464 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80043e6:	7dfa      	ldrb	r2, [r7, #23]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3318      	adds	r3, #24
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80043fa:	7dfa      	ldrb	r2, [r7, #23]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	331c      	adds	r3, #28
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800440e:	7dfa      	ldrb	r2, [r7, #23]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3320      	adds	r3, #32
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004422:	7dfa      	ldrb	r2, [r7, #23]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3324      	adds	r3, #36	@ 0x24
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004436:	7dfa      	ldrb	r2, [r7, #23]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3328      	adds	r3, #40	@ 0x28
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800444a:	7dfa      	ldrb	r2, [r7, #23]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3330      	adds	r3, #48	@ 0x30
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	3301      	adds	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d9bd      	bls.n	80043e6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40016800 	.word	0x40016800
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e045      	b.n	8004520 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d114      	bne.n	80044d6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0202 	bic.w	r2, r2, #2
 80044bc:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80044d4:	e01f      	b.n	8004516 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0202 	orr.w	r2, r2, #2
 80044e6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80044f2:	f023 010c 	bic.w	r1, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004536:	f7fd fb05 	bl	8001b44 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800453c:	e014      	b.n	8004568 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d010      	beq.n	8004568 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fd fafd 	bl	8001b44 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2207      	movs	r2, #7
 8004560:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e011      	b.n	800458c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8004570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004578:	d1e1      	bne.n	800453e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d101      	bne.n	80045b0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
 80045ae:	e015      	b.n	80045dc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d104      	bne.n	80045c8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fa19 	bl	80049f8 <HRTIM_MasterBase_Config>
 80045c6:	e004      	b.n	80045d2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fa42 	bl	8004a56 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d101      	bne.n	8004600 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
 80045fe:	e07a      	b.n	80046f6 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800460a:	2302      	movs	r3, #2
 800460c:	e073      	b.n	80046f6 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b06      	cmp	r3, #6
 8004622:	d104      	bne.n	800462e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fa55 	bl	8004ad6 <HRTIM_MasterWaveform_Config>
 800462c:	e004      	b.n	8004638 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 faec 	bl	8004c10 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	3320      	adds	r3, #32
 800464c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4403      	add	r3, r0
 8004660:	3324      	adds	r3, #36	@ 0x24
 8004662:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4403      	add	r3, r0
 8004676:	3328      	adds	r3, #40	@ 0x28
 8004678:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68d9      	ldr	r1, [r3, #12]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4403      	add	r3, r0
 800468c:	332c      	adds	r3, #44	@ 0x2c
 800468e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6919      	ldr	r1, [r3, #16]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4403      	add	r3, r0
 80046a2:	3330      	adds	r3, #48	@ 0x30
 80046a4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fd7f 	bl	80051ac <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d017      	beq.n	80046e4 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d113      	bne.n	80046e4 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3301      	adds	r3, #1
 80046c4:	01db      	lsls	r3, r3, #7
 80046c6:	4413      	add	r3, r2
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	025b      	lsls	r3, r3, #9
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	6809      	ldr	r1, [r1, #0]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3301      	adds	r3, #1
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	440b      	add	r3, r1
 80046e2:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d101      	bne.n	800471a <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	e020      	b.n	800475c <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8004724:	2302      	movs	r3, #2
 8004726:	e019      	b.n	800475c <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fbed 	bl	8004f1c <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fd31 	bl	80051ac <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d101      	bne.n	8004782 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	e01d      	b.n	80047be <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800478c:	2302      	movs	r3, #2
 800478e:	e016      	b.n	80047be <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fc18 	bl	8004fdc <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2bff      	cmp	r3, #255	@ 0xff
 80047d4:	d103      	bne.n	80047de <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fd56 	bl	8005288 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80047dc:	e00a      	b.n	80047f4 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d103      	bne.n	80047ec <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fddf 	bl	80053a8 <HRTIM_Master_ISR>
}
 80047ea:	e003      	b.n	80047f4 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fe9f 	bl	8005532 <HRTIM_Timer_ISR>
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0318 	bic.w	r3, r3, #24
 8004a22:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b087      	sub	sp, #28
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	01db      	lsls	r3, r3, #7
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0318 	bic.w	r3, r3, #24
 8004a8a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	01db      	lsls	r3, r3, #7
 8004aa0:	4413      	add	r3, r2
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3394      	adds	r3, #148	@ 0x94
 8004ab6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6819      	ldr	r1, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	01db      	lsls	r3, r3, #7
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3398      	adds	r3, #152	@ 0x98
 8004ac8:	601a      	str	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004af0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f023 0320 	bic.w	r3, r3, #32
 8004af8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b0a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d003      	beq.n	8004b1c <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d108      	bne.n	8004b2e <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b22:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e021      	b.n	8004b72 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d108      	bne.n	8004b48 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b3c:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e014      	b.n	8004b72 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d108      	bne.n	8004b62 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b56:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e007      	b.n	8004b72 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0320 	bic.w	r3, r3, #32
 8004b68:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b8a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004bae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004bc0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004bd4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be6:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b08b      	sub	sp, #44	@ 0x2c
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	3301      	adds	r3, #1
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	4413      	add	r3, r2
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	6811      	ldr	r1, [r2, #0]
 8004c2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3301      	adds	r3, #1
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	440b      	add	r3, r1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3301      	adds	r3, #1
 8004c44:	01db      	lsls	r3, r3, #7
 8004c46:	4413      	add	r3, r2
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	01db      	lsls	r3, r3, #7
 8004c54:	4413      	add	r3, r2
 8004c56:	33e8      	adds	r3, #232	@ 0xe8
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	01db      	lsls	r3, r3, #7
 8004c64:	4413      	add	r3, r2
 8004c66:	33e4      	adds	r3, #228	@ 0xe4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004c74:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	f023 0320 	bic.w	r3, r3, #32
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c84:	4313      	orrs	r3, r2
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d003      	beq.n	8004c98 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d108      	bne.n	8004caa <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	f043 0320 	orr.w	r3, r3, #32
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca8:	e021      	b.n	8004cee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d108      	bne.n	8004cc4 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc2:	e014      	b.n	8004cee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d108      	bne.n	8004cde <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cdc:	e007      	b.n	8004cee <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	f023 0320 	bic.w	r3, r3, #32
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d20:	4313      	orrs	r3, r2
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d32:	4313      	orrs	r3, r2
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d44:	4313      	orrs	r3, r2
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d58:	d103      	bne.n	8004d62 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	4313      	orrs	r3, r2
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d82:	4313      	orrs	r3, r2
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004da2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004db8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dca:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004dde:	d004      	beq.n	8004dea <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de4:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004de8:	d103      	bne.n	8004df2 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d108      	bne.n	8004e04 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004df8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d850      	bhi.n	8004ec4 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e41 	.word	0x08004e41
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e6d 	.word	0x08004e6d
 8004e34:	08004e83 	.word	0x08004e83
 8004e38:	08004e99 	.word	0x08004e99
 8004e3c:	08004eaf 	.word	0x08004eaf
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e46:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
      break;
 8004e54:	e037      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e5c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]
      break;
 8004e6a:	e02c      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004e72:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
      break;
 8004e80:	e021      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004e88:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61fb      	str	r3, [r7, #28]
      break;
 8004e96:	e016      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e9e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	015b      	lsls	r3, r3, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
      break;
 8004eac:	e00b      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	019b      	lsls	r3, r3, #6
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61fb      	str	r3, [r7, #28]
      break;
 8004ec2:	e000      	b.n	8004ec6 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8004ec4:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	01db      	lsls	r3, r3, #7
 8004ed0:	4413      	add	r3, r2
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	4413      	add	r3, r2
 8004ee0:	33e8      	adds	r3, #232	@ 0xe8
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	01db      	lsls	r3, r3, #7
 8004eee:	4413      	add	r3, r2
 8004ef0:	33e4      	adds	r3, #228	@ 0xe4
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	4413      	add	r3, r2
 8004f00:	33d4      	adds	r3, #212	@ 0xd4
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004f10:	bf00      	nop
 8004f12:	372c      	adds	r7, #44	@ 0x2c
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	01db      	lsls	r3, r3, #7
 8004f30:	4413      	add	r3, r2
 8004f32:	33ec      	adds	r3, #236	@ 0xec
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0310 	bic.w	r3, r3, #16
 8004f3e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f52:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f64:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f76:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d11a      	bne.n	8004fc0 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0302 	bic.w	r3, r3, #2
 8004fa2:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	01db      	lsls	r3, r3, #7
 8004fc8:	4413      	add	r3, r2
 8004fca:	33ec      	adds	r3, #236	@ 0xec
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	601a      	str	r2, [r3, #0]

}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	@ 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	4413      	add	r3, r2
 8004ff8:	33e4      	adds	r3, #228	@ 0xe4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	4413      	add	r3, r2
 8005008:	33b8      	adds	r3, #184	@ 0xb8
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005014:	d05d      	beq.n	80050d2 <HRTIM_OutputConfig+0xf6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800501c:	d86e      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005024:	d042      	beq.n	80050ac <HRTIM_OutputConfig+0xd0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502c:	d866      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005034:	d04d      	beq.n	80050d2 <HRTIM_OutputConfig+0xf6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503c:	d85e      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005044:	d032      	beq.n	80050ac <HRTIM_OutputConfig+0xd0>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504c:	d856      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b80      	cmp	r3, #128	@ 0x80
 8005052:	d03e      	beq.n	80050d2 <HRTIM_OutputConfig+0xf6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b80      	cmp	r3, #128	@ 0x80
 8005058:	d850      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d025      	beq.n	80050ac <HRTIM_OutputConfig+0xd0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	d84a      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d01f      	beq.n	80050ac <HRTIM_OutputConfig+0xd0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d044      	beq.n	80050fc <HRTIM_OutputConfig+0x120>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b20      	cmp	r3, #32
 8005076:	d841      	bhi.n	80050fc <HRTIM_OutputConfig+0x120>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d33e      	bcc.n	80050fc <HRTIM_OutputConfig+0x120>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3b02      	subs	r3, #2
 8005082:	2201      	movs	r2, #1
 8005084:	409a      	lsls	r2, r3
 8005086:	4b48      	ldr	r3, [pc, #288]	@ (80051a8 <HRTIM_OutputConfig+0x1cc>)
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11c      	bne.n	80050d2 <HRTIM_OutputConfig+0xf6>
 8005098:	f244 0304 	movw	r3, #16388	@ 0x4004
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d027      	beq.n	80050fc <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	01db      	lsls	r3, r3, #7
 80050b8:	440b      	add	r3, r1
 80050ba:	33bc      	adds	r3, #188	@ 0xbc
 80050bc:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	01db      	lsls	r3, r3, #7
 80050ca:	440b      	add	r3, r1
 80050cc:	33c0      	adds	r3, #192	@ 0xc0
 80050ce:	601a      	str	r2, [r3, #0]
      break;
 80050d0:	e015      	b.n	80050fe <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	01db      	lsls	r3, r3, #7
 80050de:	440b      	add	r3, r1
 80050e0:	33c4      	adds	r3, #196	@ 0xc4
 80050e2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	01db      	lsls	r3, r3, #7
 80050f0:	440b      	add	r3, r1
 80050f2:	33c8      	adds	r3, #200	@ 0xc8
 80050f4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80050f6:	2310      	movs	r3, #16
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	e000      	b.n	80050fe <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 80050fc:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80050fe:	22fe      	movs	r2, #254	@ 0xfe
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005106:	43db      	mvns	r3, r3
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	4013      	ands	r3, r2
 800510c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	4313      	orrs	r3, r2
 800511c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	4313      	orrs	r3, r2
 800514c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	4313      	orrs	r3, r2
 800515c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b08      	cmp	r3, #8
 8005164:	d111      	bne.n	800518a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10c      	bne.n	800518a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	4313      	orrs	r3, r2
 8005188:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	4413      	add	r3, r2
 8005194:	33e4      	adds	r3, #228	@ 0xe4
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	@ 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40000041 	.word	0x40000041

080051ac <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d85e      	bhi.n	800527a <HRTIM_ForceRegistersUpdate+0xce>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HRTIM_ForceRegistersUpdate+0x18>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	0800520d 	.word	0x0800520d
 80051cc:	08005223 	.word	0x08005223
 80051d0:	08005239 	.word	0x08005239
 80051d4:	0800524f 	.word	0x0800524f
 80051d8:	08005265 	.word	0x08005265
 80051dc:	080051e1 	.word	0x080051e1
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051f4:	e042      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0202 	orr.w	r2, r2, #2
 8005206:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800520a:	e037      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0204 	orr.w	r2, r2, #4
 800521c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005220:	e02c      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005236:	e021      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0210 	orr.w	r2, r2, #16
 8005248:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800524c:	e016      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0220 	orr.w	r2, r2, #32
 800525e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005262:	e00b      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005274:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005278:	e000      	b.n	800527c <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 800527a:	bf00      	nop
  }
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80052a2:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2201      	movs	r2, #1
 80052be:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fa9a 	bl	80047fc <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fa92 	bl	8004810 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2204      	movs	r2, #4
 8005306:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fa8a 	bl	8004824 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2208      	movs	r2, #8
 800532a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fa82 	bl	8004838 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2210      	movs	r2, #16
 800534e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fa7a 	bl	800484c <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2240      	movs	r2, #64	@ 0x40
 8005372:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fa72 	bl	8004860 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fa6a 	bl	8004874 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80053c2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d015      	beq.n	800540a <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053f0:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fa3f 	bl	8004888 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005426:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fa36 	bl	800489c <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2201      	movs	r2, #1
 800544a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800544c:	2106      	movs	r1, #6
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fa4e 	bl	80048f0 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2202      	movs	r2, #2
 800546e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005470:	2106      	movs	r1, #6
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fa47 	bl	8004906 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2204      	movs	r2, #4
 8005492:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005494:	2106      	movs	r1, #6
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fa40 	bl	800491c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2208      	movs	r2, #8
 80054b6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80054b8:	2106      	movs	r1, #6
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fa39 	bl	8004932 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80054dc:	2106      	movs	r1, #6
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff f9fb 	bl	80048da <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d006      	beq.n	8005506 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2220      	movs	r2, #32
 80054fe:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f9d5 	bl	80048b0 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00c      	beq.n	800552a <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2240      	movs	r2, #64	@ 0x40
 8005520:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005522:	2106      	movs	r1, #6
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f9cd 	bl	80048c4 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	4413      	add	r3, r2
 8005548:	3304      	adds	r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	01db      	lsls	r3, r3, #7
 8005556:	4413      	add	r3, r2
 8005558:	338c      	adds	r3, #140	@ 0x8c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	01db      	lsls	r3, r3, #7
 800557a:	4413      	add	r3, r2
 800557c:	3388      	adds	r3, #136	@ 0x88
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff f9b3 	bl	80048f0 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	4413      	add	r3, r2
 80055a8:	3388      	adds	r3, #136	@ 0x88
 80055aa:	2202      	movs	r2, #2
 80055ac:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff f9a8 	bl	8004906 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3388      	adds	r3, #136	@ 0x88
 80055d6:	2204      	movs	r2, #4
 80055d8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff f99d 	bl	800491c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	01db      	lsls	r3, r3, #7
 80055fe:	4413      	add	r3, r2
 8005600:	3388      	adds	r3, #136	@ 0x88
 8005602:	2208      	movs	r2, #8
 8005604:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff f992 	bl	8004932 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	01db      	lsls	r3, r3, #7
 800562a:	4413      	add	r3, r2
 800562c:	3388      	adds	r3, #136	@ 0x88
 800562e:	2210      	movs	r2, #16
 8005630:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f950 	bl	80048da <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	4413      	add	r3, r2
 8005658:	3388      	adds	r3, #136	@ 0x88
 800565a:	2240      	movs	r2, #64	@ 0x40
 800565c:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff f92f 	bl	80048c4 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	01db      	lsls	r3, r3, #7
 8005682:	4413      	add	r3, r2
 8005684:	3388      	adds	r3, #136	@ 0x88
 8005686:	2280      	movs	r2, #128	@ 0x80
 8005688:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff f95b 	bl	8004948 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d011      	beq.n	80056c0 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	01db      	lsls	r3, r3, #7
 80056ae:	4413      	add	r3, r2
 80056b0:	3388      	adds	r3, #136	@ 0x88
 80056b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056b6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff f94f 	bl	800495e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d011      	beq.n	80056ee <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4413      	add	r3, r2
 80056de:	3388      	adds	r3, #136	@ 0x88
 80056e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff f959 	bl	80049a0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	01db      	lsls	r3, r3, #7
 800570a:	4413      	add	r3, r2
 800570c:	3388      	adds	r3, #136	@ 0x88
 800570e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005712:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff f94d 	bl	80049b6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005722:	2b00      	cmp	r3, #0
 8005724:	d011      	beq.n	800574a <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	4413      	add	r3, r2
 800573a:	3388      	adds	r3, #136	@ 0x88
 800573c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005740:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff f941 	bl	80049cc <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d011      	beq.n	8005778 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	4413      	add	r3, r2
 8005768:	3388      	adds	r3, #136	@ 0x88
 800576a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800576e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff f935 	bl	80049e2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d011      	beq.n	80057a6 <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	01db      	lsls	r3, r3, #7
 8005794:	4413      	add	r3, r2
 8005796:	3388      	adds	r3, #136	@ 0x88
 8005798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800579c:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff f8f2 	bl	800498a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	01db      	lsls	r3, r3, #7
 80057c2:	4413      	add	r3, r2
 80057c4:	3388      	adds	r3, #136	@ 0x88
 80057c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057ca:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f8d0 	bl	8004974 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0c0      	b.n	8005970 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc f848 	bl	8001898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2203      	movs	r2, #3
 800580c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f004 fb0a 	bl	8009e2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
 800581e:	e03e      	b.n	800589e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	3311      	adds	r3, #17
 8005830:	2201      	movs	r2, #1
 8005832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	440b      	add	r3, r1
 8005842:	3310      	adds	r3, #16
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	440b      	add	r3, r1
 8005856:	3313      	adds	r3, #19
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	3320      	adds	r3, #32
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	3324      	adds	r3, #36	@ 0x24
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	3301      	adds	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	791b      	ldrb	r3, [r3, #4]
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3bb      	bcc.n	8005820 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e044      	b.n	8005938 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058c4:	7bfa      	ldrb	r2, [r7, #15]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058da:	7bfa      	ldrb	r2, [r7, #15]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	440b      	add	r3, r1
 80058fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	440b      	add	r3, r1
 8005914:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800591c:	7bfa      	ldrb	r2, [r7, #15]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	440b      	add	r3, r1
 800592a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	3301      	adds	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	791b      	ldrb	r3, [r3, #4]
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	429a      	cmp	r2, r3
 8005940:	d3b5      	bcc.n	80058ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800594e:	f004 fa89 	bl	8009e64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7a9b      	ldrb	r3, [r3, #10]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d102      	bne.n	800596e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fa26 	bl	8006dba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f005 f84e 	bl	800aa26 <USB_ReadInterrupts>
 800598a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f983 	bl	8005ca2 <PCD_EP_ISR_Handler>

    return;
 800599c:	e110      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d013      	beq.n	80059d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ba:	b292      	uxth	r2, r2
 80059bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f92c 	bl	8005c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80059c6:	2100      	movs	r1, #0
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f946 	bl	8005c5a <HAL_PCD_SetAddress>

    return;
 80059ce:	e0f7      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059ec:	b292      	uxth	r2, r2
 80059ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80059f2:	e0e5      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a10:	b292      	uxth	r2, r2
 8005a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a16:	e0d3      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d034      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0204 	bic.w	r2, r2, #4
 8005a34:	b292      	uxth	r2, r2
 8005a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0208 	bic.w	r2, r2, #8
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a64:	2100      	movs	r1, #0
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 f9d1 	bl	8006e0e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8ea 	bl	8005c46 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a84:	b292      	uxth	r2, r2
 8005a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a8a:	e099      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d027      	beq.n	8005ae6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0204 	orr.w	r2, r2, #4
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8a7 	bl	8005c32 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ae4:	e06c      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d040      	beq.n	8005b72 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b02:	b292      	uxth	r2, r2
 8005b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12b      	bne.n	8005b6a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0204 	orr.w	r2, r2, #4
 8005b24:	b292      	uxth	r2, r2
 8005b26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0208 	orr.w	r2, r2, #8
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b60:	2101      	movs	r1, #1
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 f953 	bl	8006e0e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005b68:	e02a      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f861 	bl	8005c32 <HAL_PCD_SuspendCallback>
    return;
 8005b70:	e026      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00f      	beq.n	8005b9c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005b8e:	b292      	uxth	r2, r2
 8005b90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f838 	bl	8005c0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b9a:	e011      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bbe:	bf00      	nop
  }
}
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_PCD_SetAddress+0x1a>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e012      	b.n	8005c9a <HAL_PCD_SetAddress+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f004 feb7 	bl	800a9fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b092      	sub	sp, #72	@ 0x48
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005caa:	e333      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cb4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005cb6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005cc2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 8108 	bne.w	8005edc <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005ccc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d14c      	bne.n	8005d70 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce6:	813b      	strh	r3, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3310      	adds	r3, #16
 8005cfe:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	441a      	add	r2, r3
 8005d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ff50 	bl	8005bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7b1b      	ldrb	r3, [r3, #12]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 82e5 	beq.w	8006314 <PCD_EP_ISR_Handler+0x672>
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 82e0 	bne.w	8006314 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7b1b      	ldrb	r3, [r3, #12]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	731a      	strb	r2, [r3, #12]
 8005d6e:	e2d1      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d76:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005d80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d032      	beq.n	8005df0 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f004 fe81 	bl	800aacc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	817b      	strh	r3, [r7, #10]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	897a      	ldrh	r2, [r7, #10]
 8005de0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005de4:	b292      	uxth	r2, r2
 8005de6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff04 	bl	8005bf6 <HAL_PCD_SetupStageCallback>
 8005dee:	e291      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005df0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f280 828d 	bge.w	8006314 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005e06:	4013      	ands	r3, r2
 8005e08:	81fb      	strh	r3, [r7, #14]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	89fa      	ldrh	r2, [r7, #14]
 8005e10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e14:	b292      	uxth	r2, r2
 8005e16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <PCD_EP_ISR_Handler+0x1da>
 8005e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d015      	beq.n	8005e7c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e56:	6959      	ldr	r1, [r3, #20]
 8005e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f004 fe33 	bl	800aacc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	441a      	add	r2, r3
 8005e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005e74:	2100      	movs	r1, #0
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fea5 	bl	8005bc6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005e84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f040 8242 	bne.w	8006314 <PCD_EP_ISR_Handler+0x672>
 8005e90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9a:	f000 823b 	beq.w	8006314 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	81bb      	strh	r3, [r7, #12]
 8005eb0:	89bb      	ldrh	r3, [r7, #12]
 8005eb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005eb6:	81bb      	strh	r3, [r7, #12]
 8005eb8:	89bb      	ldrh	r3, [r7, #12]
 8005eba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ebe:	81bb      	strh	r3, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	89bb      	ldrh	r3, [r7, #12]
 8005ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8013      	strh	r3, [r2, #0]
 8005eda:	e21b      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005eee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f280 80f1 	bge.w	80060da <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005f0e:	4013      	ands	r3, r2
 8005f10:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005f22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f26:	b292      	uxth	r2, r2
 8005f28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f2a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f42:	7b1b      	ldrb	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d123      	bne.n	8005f90 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005f70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 808b 	beq.w	8006090 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f80:	6959      	ldr	r1, [r3, #20]
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	88da      	ldrh	r2, [r3, #6]
 8005f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f8a:	f004 fd9f 	bl	800aacc <USB_ReadPMA>
 8005f8e:	e07f      	b.n	8006090 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f92:	78db      	ldrb	r3, [r3, #3]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d109      	bne.n	8005fac <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9c6 	bl	8006330 <HAL_PCD_EP_DB_Receive>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005faa:	e071      	b.n	8006090 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d022      	beq.n	800604c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	4413      	add	r3, r2
 8006020:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800602e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02c      	beq.n	8006090 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800603c:	6959      	ldr	r1, [r3, #20]
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	891a      	ldrh	r2, [r3, #8]
 8006042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006046:	f004 fd41 	bl	800aacc <USB_ReadPMA>
 800604a:	e021      	b.n	8006090 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4413      	add	r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	4413      	add	r3, r2
 8006066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006070:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006074:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006082:	6959      	ldr	r1, [r3, #20]
 8006084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006086:	895a      	ldrh	r2, [r3, #10]
 8006088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800608c:	f004 fd1e 	bl	800aacc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006098:	441a      	add	r2, r3
 800609a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800609c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800609e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80060a6:	441a      	add	r2, r3
 80060a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80060ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <PCD_EP_ISR_Handler+0x41e>
 80060b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80060b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d206      	bcs.n	80060ce <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80060c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fd7d 	bl	8005bc6 <HAL_PCD_DataOutStageCallback>
 80060cc:	e005      	b.n	80060da <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060d4:	4618      	mov	r0, r3
 80060d6:	f003 fee3 	bl	8009ea0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80060da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8117 	beq.w	8006314 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80060e6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	3310      	adds	r3, #16
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006114:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b01      	cmp	r3, #1
 8006138:	f040 80a1 	bne.w	800627e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800613c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800613e:	2200      	movs	r2, #0
 8006140:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006144:	7b1b      	ldrb	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8092 	beq.w	8006270 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800614c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d046      	beq.n	80061e4 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d126      	bne.n	80061ac <PCD_EP_ISR_Handler+0x50a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00da      	lsls	r2, r3, #3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e061      	b.n	8006270 <PCD_EP_ISR_Handler+0x5ce>
 80061ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d15d      	bne.n	8006270 <PCD_EP_ISR_Handler+0x5ce>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00da      	lsls	r2, r3, #3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2200      	movs	r2, #0
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e045      	b.n	8006270 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d126      	bne.n	8006240 <PCD_EP_ISR_Handler+0x59e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	4413      	add	r3, r2
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
 800620a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00da      	lsls	r2, r3, #3
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	4413      	add	r3, r2
 8006214:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006224:	b29a      	uxth	r2, r3
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e017      	b.n	8006270 <PCD_EP_ISR_Handler+0x5ce>
 8006240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d113      	bne.n	8006270 <PCD_EP_ISR_Handler+0x5ce>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006256:	4413      	add	r3, r2
 8006258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800625a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00da      	lsls	r2, r3, #3
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	4413      	add	r3, r2
 8006264:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	2200      	movs	r2, #0
 800626e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fcb1 	bl	8005bde <HAL_PCD_DataInStageCallback>
 800627c:	e04a      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800627e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d13f      	bne.n	8006308 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4413      	add	r3, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ac:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80062ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d906      	bls.n	80062c6 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80062b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c2:	619a      	str	r2, [r3, #24]
 80062c4:	e002      	b.n	80062cc <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80062c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c8:	2200      	movs	r2, #0
 80062ca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80062cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff fc7f 	bl	8005bde <HAL_PCD_DataInStageCallback>
 80062e0:	e018      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80062e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062e8:	441a      	add	r2, r3
 80062ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80062ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f0:	69da      	ldr	r2, [r3, #28]
 80062f2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062f4:	441a      	add	r2, r3
 80062f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006300:	4618      	mov	r0, r3
 8006302:	f003 fdcd 	bl	8009ea0 <USB_EPStartXfer>
 8006306:	e005      	b.n	8006314 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800630a:	461a      	mov	r2, r3
 800630c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f917 	bl	8006542 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800631c:	b29b      	uxth	r3, r3
 800631e:	b21b      	sxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	f6ff acc3 	blt.w	8005cac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3748      	adds	r7, #72	@ 0x48
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d07c      	beq.n	8006442 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	4413      	add	r3, r2
 8006362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800636c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	429a      	cmp	r2, r3
 8006376:	d306      	bcc.n	8006386 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	8b7b      	ldrh	r3, [r7, #26]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	619a      	str	r2, [r3, #24]
 8006384:	e002      	b.n	800638c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2200      	movs	r2, #0
 800638a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d123      	bne.n	80063dc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ae:	833b      	strh	r3, [r7, #24]
 80063b0:	8b3b      	ldrh	r3, [r7, #24]
 80063b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063b6:	833b      	strh	r3, [r7, #24]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	8b3b      	ldrh	r3, [r7, #24]
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01f      	beq.n	8006426 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	82fb      	strh	r3, [r7, #22]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8afb      	ldrh	r3, [r7, #22]
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006426:	8b7b      	ldrh	r3, [r7, #26]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8085 	beq.w	8006538 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6959      	ldr	r1, [r3, #20]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	891a      	ldrh	r2, [r3, #8]
 800643a:	8b7b      	ldrh	r3, [r7, #26]
 800643c:	f004 fb46 	bl	800aacc <USB_ReadPMA>
 8006440:	e07a      	b.n	8006538 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4413      	add	r3, r2
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	4413      	add	r3, r2
 800645c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006466:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	8b7b      	ldrh	r3, [r7, #26]
 800646e:	429a      	cmp	r2, r3
 8006470:	d306      	bcc.n	8006480 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	8b7b      	ldrh	r3, [r7, #26]
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	619a      	str	r2, [r3, #24]
 800647e:	e002      	b.n	8006486 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d123      	bne.n	80064d6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a8:	83fb      	strh	r3, [r7, #30]
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064b0:	83fb      	strh	r3, [r7, #30]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	441a      	add	r2, r3
 80064c0:	8bfb      	ldrh	r3, [r7, #30]
 80064c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11f      	bne.n	8006520 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fa:	83bb      	strh	r3, [r7, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8bbb      	ldrh	r3, [r7, #28]
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006518:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006520:	8b7b      	ldrh	r3, [r7, #26]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6959      	ldr	r1, [r3, #20]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	895a      	ldrh	r2, [r3, #10]
 8006532:	8b7b      	ldrh	r3, [r7, #26]
 8006534:	f004 faca 	bl	800aacc <USB_ReadPMA>
    }
  }

  return count;
 8006538:	8b7b      	ldrh	r3, [r7, #26]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b0a6      	sub	sp, #152	@ 0x98
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	4613      	mov	r3, r2
 800654e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 81f7 	beq.w	800694a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	4413      	add	r3, r2
 8006576:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006580:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800658c:	429a      	cmp	r2, r3
 800658e:	d907      	bls.n	80065a0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	619a      	str	r2, [r3, #24]
 800659e:	e002      	b.n	80065a6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 80e1 	bne.w	8006772 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d126      	bne.n	8006606 <HAL_PCD_EP_DB_Transmit+0xc4>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	4413      	add	r3, r2
 80065ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	00da      	lsls	r2, r3, #3
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	4413      	add	r3, r2
 80065da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e01a      	b.n	800663c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d116      	bne.n	800663c <HAL_PCD_EP_DB_Transmit+0xfa>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	4413      	add	r3, r2
 8006624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	00da      	lsls	r2, r3, #3
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	4413      	add	r3, r2
 8006630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
 8006636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006638:	2200      	movs	r2, #0
 800663a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d126      	bne.n	8006698 <HAL_PCD_EP_DB_Transmit+0x156>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	4413      	add	r3, r2
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	00da      	lsls	r2, r3, #3
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	4413      	add	r3, r2
 800666c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667c:	b29a      	uxth	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006690:	b29a      	uxth	r2, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e017      	b.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x186>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d113      	bne.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x186>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	4413      	add	r3, r2
 80066b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	00da      	lsls	r2, r3, #3
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	2200      	movs	r2, #0
 80066c6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d123      	bne.n	8006718 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ea:	837b      	strh	r3, [r7, #26]
 80066ec:	8b7b      	ldrh	r3, [r7, #26]
 80066ee:	f083 0320 	eor.w	r3, r3, #32
 80066f2:	837b      	strh	r3, [r7, #26]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	8b7b      	ldrh	r3, [r7, #26]
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	4619      	mov	r1, r3
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fa5d 	bl	8005bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01f      	beq.n	800676e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006748:	833b      	strh	r3, [r7, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8b3b      	ldrh	r3, [r7, #24]
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e31f      	b.n	8006db2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d021      	beq.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	441a      	add	r2, r3
 80067a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 82ca 	bne.w	8006d60 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067d4:	441a      	add	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80067e2:	441a      	add	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d309      	bcc.n	8006808 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	621a      	str	r2, [r3, #32]
 8006806:	e015      	b.n	8006834 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d107      	bne.n	8006820 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006810:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006814:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800681e:	e009      	b.n	8006834 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d15f      	bne.n	80068fc <HAL_PCD_EP_DB_Transmit+0x3ba>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	643b      	str	r3, [r7, #64]	@ 0x40
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006850:	4413      	add	r3, r2
 8006852:	643b      	str	r3, [r7, #64]	@ 0x40
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	00da      	lsls	r2, r3, #3
 800685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685c:	4413      	add	r3, r2
 800685e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800686e:	b29a      	uxth	r2, r3
 8006870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_PCD_EP_DB_Transmit+0x34e>
 800687a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006888:	b29a      	uxth	r2, r3
 800688a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e051      	b.n	8006934 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006892:	2b3e      	cmp	r3, #62	@ 0x3e
 8006894:	d816      	bhi.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x382>
 8006896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	653b      	str	r3, [r7, #80]	@ 0x50
 800689c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_PCD_EP_DB_Transmit+0x36a>
 80068a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a8:	3301      	adds	r3, #1
 80068aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	029b      	lsls	r3, r3, #10
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e037      	b.n	8006934 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80068c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_PCD_EP_DB_Transmit+0x398>
 80068d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d6:	3b01      	subs	r3, #1
 80068d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	029b      	lsls	r3, r3, #10
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e01b      	b.n	8006934 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d117      	bne.n	8006934 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006912:	b29b      	uxth	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006918:	4413      	add	r3, r2
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	00da      	lsls	r2, r3, #3
 8006922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006924:	4413      	add	r3, r2
 8006926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
 800692c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800692e:	b29a      	uxth	r2, r3
 8006930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006932:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6959      	ldr	r1, [r3, #20]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	891a      	ldrh	r2, [r3, #8]
 8006940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006942:	b29b      	uxth	r3, r3
 8006944:	f004 f87f 	bl	800aa46 <USB_WritePMA>
 8006948:	e20a      	b.n	8006d60 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006952:	b29b      	uxth	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4413      	add	r3, r2
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	4413      	add	r3, r2
 8006964:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800696e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800697a:	429a      	cmp	r2, r3
 800697c:	d307      	bcc.n	800698e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	e002      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 80f6 	bne.w	8006b8a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d126      	bne.n	80069f4 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069ba:	4413      	add	r3, r2
 80069bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	00da      	lsls	r2, r3, #3
 80069c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c6:	4413      	add	r3, r2
 80069c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80069ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	e01a      	b.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d116      	bne.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a10:	4413      	add	r3, r2
 8006a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	00da      	lsls	r2, r3, #3
 8006a1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a26:	2200      	movs	r2, #0
 8006a28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d12f      	bne.n	8006a9a <HAL_PCD_EP_DB_Transmit+0x558>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a52:	4413      	add	r3, r2
 8006a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	00da      	lsls	r2, r3, #3
 8006a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a96:	801a      	strh	r2, [r3, #0]
 8006a98:	e01c      	b.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x592>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d118      	bne.n	8006ad4 <HAL_PCD_EP_DB_Transmit+0x592>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	00da      	lsls	r2, r3, #3
 8006abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d127      	bne.n	8006b2c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006afa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006afe:	f083 0320 	eor.w	r3, r3, #32
 8006b02:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	4619      	mov	r1, r3
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff f853 	bl	8005bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d121      	bne.n	8006b86 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e113      	b.n	8006db2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d121      	bne.n	8006bd8 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	f040 80be 	bne.w	8006d60 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	695a      	ldr	r2, [r3, #20]
 8006be8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bec:	441a      	add	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d309      	bcc.n	8006c20 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	621a      	str	r2, [r3, #32]
 8006c1e:	e015      	b.n	8006c4c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006c28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c36:	e009      	b.n	8006c4c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d15f      	bne.n	8006d1a <HAL_PCD_EP_DB_Transmit+0x7d8>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c6e:	4413      	add	r3, r2
 8006c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	00da      	lsls	r2, r3, #3
 8006c78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_PCD_EP_DB_Transmit+0x76c>
 8006c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e04e      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x80a>
 8006cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cb2:	d816      	bhi.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_PCD_EP_DB_Transmit+0x788>
 8006cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e034      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x80a>
 8006ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ce8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e018      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x80a>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d114      	bne.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x80a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d30:	4413      	add	r3, r2
 8006d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00da      	lsls	r2, r3, #3
 8006d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6959      	ldr	r1, [r3, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	895a      	ldrh	r2, [r3, #10]
 8006d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f003 fe73 	bl	800aa46 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d7a:	82fb      	strh	r3, [r7, #22]
 8006d7c:	8afb      	ldrh	r3, [r7, #22]
 8006d7e:	f083 0310 	eor.w	r3, r3, #16
 8006d82:	82fb      	strh	r3, [r7, #22]
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	f083 0320 	eor.w	r3, r3, #32
 8006d8a:	82fb      	strh	r3, [r7, #22]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3798      	adds	r7, #152	@ 0x98
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f043 0302 	orr.w	r3, r3, #2
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d141      	bne.n	8006eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e36:	4b4b      	ldr	r3, [pc, #300]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e42:	d131      	bne.n	8006ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e44:	4b47      	ldr	r3, [pc, #284]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4a:	4a46      	ldr	r2, [pc, #280]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e54:	4b43      	ldr	r3, [pc, #268]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e5c:	4a41      	ldr	r2, [pc, #260]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e64:	4b40      	ldr	r3, [pc, #256]	@ (8006f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2232      	movs	r2, #50	@ 0x32
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8006f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	0c9b      	lsrs	r3, r3, #18
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e7a:	e002      	b.n	8006e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e82:	4b38      	ldr	r3, [pc, #224]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8e:	d102      	bne.n	8006e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f2      	bne.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e96:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea2:	d158      	bne.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e057      	b.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eae:	4a2d      	ldr	r2, [pc, #180]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006eb8:	e04d      	b.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec0:	d141      	bne.n	8006f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ec2:	4b28      	ldr	r3, [pc, #160]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ece:	d131      	bne.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ed0:	4b24      	ldr	r3, [pc, #144]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed6:	4a23      	ldr	r2, [pc, #140]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ee0:	4b20      	ldr	r3, [pc, #128]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2232      	movs	r2, #50	@ 0x32
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	4a1c      	ldr	r2, [pc, #112]	@ (8006f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	0c9b      	lsrs	r3, r3, #18
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f06:	e002      	b.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f0e:	4b15      	ldr	r3, [pc, #84]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d102      	bne.n	8006f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f2      	bne.n	8006f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2e:	d112      	bne.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e011      	b.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f34:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f44:	e007      	b.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f46:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f4e:	4a05      	ldr	r2, [pc, #20]	@ (8006f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	40007000 	.word	0x40007000
 8006f68:	20000000 	.word	0x20000000
 8006f6c:	431bde83 	.word	0x431bde83

08006f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f74:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	4a04      	ldr	r2, [pc, #16]	@ (8006f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f7e:	6093      	str	r3, [r2, #8]
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40007000 	.word	0x40007000

08006f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e2fe      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d075      	beq.n	800709a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fae:	4b97      	ldr	r3, [pc, #604]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
 8006fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb8:	4b94      	ldr	r3, [pc, #592]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b0c      	cmp	r3, #12
 8006fc6:	d102      	bne.n	8006fce <HAL_RCC_OscConfig+0x3e>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d002      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x44>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d10b      	bne.n	8006fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d05b      	beq.n	8007098 <HAL_RCC_OscConfig+0x108>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d157      	bne.n	8007098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e2d9      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff4:	d106      	bne.n	8007004 <HAL_RCC_OscConfig+0x74>
 8006ff6:	4b85      	ldr	r3, [pc, #532]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a84      	ldr	r2, [pc, #528]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e01d      	b.n	8007040 <HAL_RCC_OscConfig+0xb0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800700c:	d10c      	bne.n	8007028 <HAL_RCC_OscConfig+0x98>
 800700e:	4b7f      	ldr	r3, [pc, #508]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a7e      	ldr	r2, [pc, #504]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	4b7c      	ldr	r3, [pc, #496]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a7b      	ldr	r2, [pc, #492]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e00b      	b.n	8007040 <HAL_RCC_OscConfig+0xb0>
 8007028:	4b78      	ldr	r3, [pc, #480]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a77      	ldr	r2, [pc, #476]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800702e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	4b75      	ldr	r3, [pc, #468]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a74      	ldr	r2, [pc, #464]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800703a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800703e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d013      	beq.n	8007070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fa fd7c 	bl	8001b44 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007050:	f7fa fd78 	bl	8001b44 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	@ 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e29e      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007062:	4b6a      	ldr	r3, [pc, #424]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCC_OscConfig+0xc0>
 800706e:	e014      	b.n	800709a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fa fd68 	bl	8001b44 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007078:	f7fa fd64 	bl	8001b44 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b64      	cmp	r3, #100	@ 0x64
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e28a      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800708a:	4b60      	ldr	r3, [pc, #384]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <HAL_RCC_OscConfig+0xe8>
 8007096:	e000      	b.n	800709a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d075      	beq.n	8007192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070a6:	4b59      	ldr	r3, [pc, #356]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070b0:	4b56      	ldr	r3, [pc, #344]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b0c      	cmp	r3, #12
 80070be:	d102      	bne.n	80070c6 <HAL_RCC_OscConfig+0x136>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d002      	beq.n	80070cc <HAL_RCC_OscConfig+0x13c>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d11f      	bne.n	800710c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070cc:	4b4f      	ldr	r3, [pc, #316]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_OscConfig+0x154>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e25d      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e4:	4b49      	ldr	r3, [pc, #292]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	061b      	lsls	r3, r3, #24
 80070f2:	4946      	ldr	r1, [pc, #280]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070f8:	4b45      	ldr	r3, [pc, #276]	@ (8007210 <HAL_RCC_OscConfig+0x280>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fa fcd5 	bl	8001aac <HAL_InitTick>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d043      	beq.n	8007190 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e249      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d023      	beq.n	800715c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007114:	4b3d      	ldr	r3, [pc, #244]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a3c      	ldr	r2, [pc, #240]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800711a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fa fd10 	bl	8001b44 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007128:	f7fa fd0c 	bl	8001b44 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e232      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800713a:	4b34      	ldr	r3, [pc, #208]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007146:	4b31      	ldr	r3, [pc, #196]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	061b      	lsls	r3, r3, #24
 8007154:	492d      	ldr	r1, [pc, #180]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	604b      	str	r3, [r1, #4]
 800715a:	e01a      	b.n	8007192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800715c:	4b2b      	ldr	r3, [pc, #172]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2a      	ldr	r2, [pc, #168]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fa fcec 	bl	8001b44 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007170:	f7fa fce8 	bl	8001b44 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e20e      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007182:	4b22      	ldr	r3, [pc, #136]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x1e0>
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d041      	beq.n	8007222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d01c      	beq.n	80071e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a6:	4b19      	ldr	r3, [pc, #100]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80071a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ac:	4a17      	ldr	r2, [pc, #92]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b6:	f7fa fcc5 	bl	8001b44 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071be:	f7fa fcc1 	bl	8001b44 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e1e7      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071d0:	4b0e      	ldr	r3, [pc, #56]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80071d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ef      	beq.n	80071be <HAL_RCC_OscConfig+0x22e>
 80071de:	e020      	b.n	8007222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e0:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80071e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e6:	4a09      	ldr	r2, [pc, #36]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f0:	f7fa fca8 	bl	8001b44 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f6:	e00d      	b.n	8007214 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f8:	f7fa fca4 	bl	8001b44 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d906      	bls.n	8007214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e1ca      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
 800720a:	bf00      	nop
 800720c:	40021000 	.word	0x40021000
 8007210:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007214:	4b8c      	ldr	r3, [pc, #560]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1ea      	bne.n	80071f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80a6 	beq.w	800737c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007230:	2300      	movs	r3, #0
 8007232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007234:	4b84      	ldr	r3, [pc, #528]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_RCC_OscConfig+0x2b4>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <HAL_RCC_OscConfig+0x2b6>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	4b7f      	ldr	r3, [pc, #508]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724e:	4a7e      	ldr	r2, [pc, #504]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007254:	6593      	str	r3, [r2, #88]	@ 0x58
 8007256:	4b7c      	ldr	r3, [pc, #496]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007262:	2301      	movs	r3, #1
 8007264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007266:	4b79      	ldr	r3, [pc, #484]	@ (800744c <HAL_RCC_OscConfig+0x4bc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d118      	bne.n	80072a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007272:	4b76      	ldr	r3, [pc, #472]	@ (800744c <HAL_RCC_OscConfig+0x4bc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a75      	ldr	r2, [pc, #468]	@ (800744c <HAL_RCC_OscConfig+0x4bc>)
 8007278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800727e:	f7fa fc61 	bl	8001b44 <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007286:	f7fa fc5d 	bl	8001b44 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e183      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007298:	4b6c      	ldr	r3, [pc, #432]	@ (800744c <HAL_RCC_OscConfig+0x4bc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0f0      	beq.n	8007286 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d108      	bne.n	80072be <HAL_RCC_OscConfig+0x32e>
 80072ac:	4b66      	ldr	r3, [pc, #408]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	4a65      	ldr	r2, [pc, #404]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072bc:	e024      	b.n	8007308 <HAL_RCC_OscConfig+0x378>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d110      	bne.n	80072e8 <HAL_RCC_OscConfig+0x358>
 80072c6:	4b60      	ldr	r3, [pc, #384]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072cc:	4a5e      	ldr	r2, [pc, #376]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072ce:	f043 0304 	orr.w	r3, r3, #4
 80072d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072de:	f043 0301 	orr.w	r3, r3, #1
 80072e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072e6:	e00f      	b.n	8007308 <HAL_RCC_OscConfig+0x378>
 80072e8:	4b57      	ldr	r3, [pc, #348]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	4a56      	ldr	r2, [pc, #344]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072f8:	4b53      	ldr	r3, [pc, #332]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fe:	4a52      	ldr	r2, [pc, #328]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d016      	beq.n	800733e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007310:	f7fa fc18 	bl	8001b44 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007316:	e00a      	b.n	800732e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007318:	f7fa fc14 	bl	8001b44 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e138      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800732e:	4b46      	ldr	r3, [pc, #280]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0ed      	beq.n	8007318 <HAL_RCC_OscConfig+0x388>
 800733c:	e015      	b.n	800736a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733e:	f7fa fc01 	bl	8001b44 <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007344:	e00a      	b.n	800735c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fa fbfd 	bl	8001b44 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e121      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800735c:	4b3a      	ldr	r3, [pc, #232]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1ed      	bne.n	8007346 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800736a:	7ffb      	ldrb	r3, [r7, #31]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007370:	4b35      	ldr	r3, [pc, #212]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007374:	4a34      	ldr	r2, [pc, #208]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800737a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d03c      	beq.n	8007402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01c      	beq.n	80073ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007390:	4b2d      	ldr	r3, [pc, #180]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007396:	4a2c      	ldr	r2, [pc, #176]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a0:	f7fa fbd0 	bl	8001b44 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a8:	f7fa fbcc 	bl	8001b44 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e0f2      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ba:	4b23      	ldr	r3, [pc, #140]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80073bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0ef      	beq.n	80073a8 <HAL_RCC_OscConfig+0x418>
 80073c8:	e01b      	b.n	8007402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80073cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073da:	f7fa fbb3 	bl	8001b44 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073e2:	f7fa fbaf 	bl	8001b44 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e0d5      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073f4:	4b14      	ldr	r3, [pc, #80]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 80073f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1ef      	bne.n	80073e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80c9 	beq.w	800759e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800740c:	4b0e      	ldr	r3, [pc, #56]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	2b0c      	cmp	r3, #12
 8007416:	f000 8083 	beq.w	8007520 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d15e      	bne.n	80074e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007422:	4b09      	ldr	r3, [pc, #36]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a08      	ldr	r2, [pc, #32]	@ (8007448 <HAL_RCC_OscConfig+0x4b8>)
 8007428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800742c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742e:	f7fa fb89 	bl	8001b44 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007434:	e00c      	b.n	8007450 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007436:	f7fa fb85 	bl	8001b44 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d905      	bls.n	8007450 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0ab      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
 8007448:	40021000 	.word	0x40021000
 800744c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007450:	4b55      	ldr	r3, [pc, #340]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1ec      	bne.n	8007436 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800745c:	4b52      	ldr	r3, [pc, #328]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	4b52      	ldr	r3, [pc, #328]	@ (80075ac <HAL_RCC_OscConfig+0x61c>)
 8007462:	4013      	ands	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6a11      	ldr	r1, [r2, #32]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800746c:	3a01      	subs	r2, #1
 800746e:	0112      	lsls	r2, r2, #4
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007476:	0212      	lsls	r2, r2, #8
 8007478:	4311      	orrs	r1, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800747e:	0852      	lsrs	r2, r2, #1
 8007480:	3a01      	subs	r2, #1
 8007482:	0552      	lsls	r2, r2, #21
 8007484:	4311      	orrs	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800748a:	0852      	lsrs	r2, r2, #1
 800748c:	3a01      	subs	r2, #1
 800748e:	0652      	lsls	r2, r2, #25
 8007490:	4311      	orrs	r1, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007496:	06d2      	lsls	r2, r2, #27
 8007498:	430a      	orrs	r2, r1
 800749a:	4943      	ldr	r1, [pc, #268]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 800749c:	4313      	orrs	r3, r2
 800749e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a0:	4b41      	ldr	r3, [pc, #260]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a40      	ldr	r2, [pc, #256]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074ac:	4b3e      	ldr	r3, [pc, #248]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a3d      	ldr	r2, [pc, #244]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b8:	f7fa fb44 	bl	8001b44 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c0:	f7fa fb40 	bl	8001b44 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e066      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074d2:	4b35      	ldr	r3, [pc, #212]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f0      	beq.n	80074c0 <HAL_RCC_OscConfig+0x530>
 80074de:	e05e      	b.n	800759e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e0:	4b31      	ldr	r3, [pc, #196]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a30      	ldr	r2, [pc, #192]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 80074e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fa fb2a 	bl	8001b44 <HAL_GetTick>
 80074f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f4:	f7fa fb26 	bl	8001b44 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e04c      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007506:	4b28      	ldr	r3, [pc, #160]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f0      	bne.n	80074f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007512:	4b25      	ldr	r3, [pc, #148]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	4924      	ldr	r1, [pc, #144]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 8007518:	4b25      	ldr	r3, [pc, #148]	@ (80075b0 <HAL_RCC_OscConfig+0x620>)
 800751a:	4013      	ands	r3, r2
 800751c:	60cb      	str	r3, [r1, #12]
 800751e:	e03e      	b.n	800759e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e039      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800752c:	4b1e      	ldr	r3, [pc, #120]	@ (80075a8 <HAL_RCC_OscConfig+0x618>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f003 0203 	and.w	r2, r3, #3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	429a      	cmp	r2, r3
 800753e:	d12c      	bne.n	800759a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	3b01      	subs	r3, #1
 800754c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d123      	bne.n	800759a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800755e:	429a      	cmp	r2, r3
 8007560:	d11b      	bne.n	800759a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800756e:	429a      	cmp	r2, r3
 8007570:	d113      	bne.n	800759a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	3b01      	subs	r3, #1
 8007580:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007582:	429a      	cmp	r2, r3
 8007584:	d109      	bne.n	800759a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	3b01      	subs	r3, #1
 8007594:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007596:	429a      	cmp	r2, r3
 8007598:	d001      	beq.n	800759e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40021000 	.word	0x40021000
 80075ac:	019f800c 	.word	0x019f800c
 80075b0:	feeefffc 	.word	0xfeeefffc

080075b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e11e      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075cc:	4b91      	ldr	r3, [pc, #580]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d910      	bls.n	80075fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075da:	4b8e      	ldr	r3, [pc, #568]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f023 020f 	bic.w	r2, r3, #15
 80075e2:	498c      	ldr	r1, [pc, #560]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ea:	4b8a      	ldr	r3, [pc, #552]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e106      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d073      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d129      	bne.n	8007664 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007610:	4b81      	ldr	r3, [pc, #516]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0f4      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007620:	f000 f99e 	bl	8007960 <RCC_GetSysClockFreqFromPLLSource>
 8007624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	4a7c      	ldr	r2, [pc, #496]	@ (800781c <HAL_RCC_ClockConfig+0x268>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d93f      	bls.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800762e:	4b7a      	ldr	r3, [pc, #488]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007642:	2b00      	cmp	r3, #0
 8007644:	d033      	beq.n	80076ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800764a:	2b00      	cmp	r3, #0
 800764c:	d12f      	bne.n	80076ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800764e:	4b72      	ldr	r3, [pc, #456]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007656:	4a70      	ldr	r2, [pc, #448]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800765e:	2380      	movs	r3, #128	@ 0x80
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e024      	b.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d107      	bne.n	800767c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800766c:	4b6a      	ldr	r3, [pc, #424]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0c6      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800767c:	4b66      	ldr	r3, [pc, #408]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0be      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800768c:	f000 f8ce 	bl	800782c <HAL_RCC_GetSysClockFreq>
 8007690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4a61      	ldr	r2, [pc, #388]	@ (800781c <HAL_RCC_ClockConfig+0x268>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d909      	bls.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800769a:	4b5f      	ldr	r3, [pc, #380]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076a2:	4a5d      	ldr	r2, [pc, #372]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076aa:	2380      	movs	r3, #128	@ 0x80
 80076ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f023 0203 	bic.w	r2, r3, #3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4957      	ldr	r1, [pc, #348]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c0:	f7fa fa40 	bl	8001b44 <HAL_GetTick>
 80076c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c6:	e00a      	b.n	80076de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c8:	f7fa fa3c 	bl	8001b44 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e095      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076de:	4b4e      	ldr	r3, [pc, #312]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 020c 	and.w	r2, r3, #12
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d1eb      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007708:	4b43      	ldr	r3, [pc, #268]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a42      	ldr	r2, [pc, #264]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800770e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007712:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007720:	4b3d      	ldr	r3, [pc, #244]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007728:	4a3b      	ldr	r2, [pc, #236]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800772a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800772e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4b39      	ldr	r3, [pc, #228]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4936      	ldr	r1, [pc, #216]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
 8007742:	e008      	b.n	8007756 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b80      	cmp	r3, #128	@ 0x80
 8007748:	d105      	bne.n	8007756 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800774a:	4b33      	ldr	r3, [pc, #204]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4a32      	ldr	r2, [pc, #200]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007754:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007756:	4b2f      	ldr	r3, [pc, #188]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d21d      	bcs.n	80077a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007764:	4b2b      	ldr	r3, [pc, #172]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f023 020f 	bic.w	r2, r3, #15
 800776c:	4929      	ldr	r1, [pc, #164]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007774:	f7fa f9e6 	bl	8001b44 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800777a:	e00a      	b.n	8007792 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777c:	f7fa f9e2 	bl	8001b44 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e03b      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007792:	4b20      	ldr	r3, [pc, #128]	@ (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d1ed      	bne.n	800777c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4917      	ldr	r1, [pc, #92]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ca:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	490f      	ldr	r1, [pc, #60]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077de:	f000 f825 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	091b      	lsrs	r3, r3, #4
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	490c      	ldr	r1, [pc, #48]	@ (8007820 <HAL_RCC_ClockConfig+0x26c>)
 80077f0:	5ccb      	ldrb	r3, [r1, r3]
 80077f2:	f003 031f 	and.w	r3, r3, #31
 80077f6:	fa22 f303 	lsr.w	r3, r2, r3
 80077fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007824 <HAL_RCC_ClockConfig+0x270>)
 80077fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <HAL_RCC_ClockConfig+0x274>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fa f952 	bl	8001aac <HAL_InitTick>
 8007808:	4603      	mov	r3, r0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40022000 	.word	0x40022000
 8007818:	40021000 	.word	0x40021000
 800781c:	04c4b400 	.word	0x04c4b400
 8007820:	0800abd4 	.word	0x0800abd4
 8007824:	20000000 	.word	0x20000000
 8007828:	20000004 	.word	0x20000004

0800782c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007832:	4b2c      	ldr	r3, [pc, #176]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b04      	cmp	r3, #4
 800783c:	d102      	bne.n	8007844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800783e:	4b2a      	ldr	r3, [pc, #168]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e047      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007844:	4b27      	ldr	r3, [pc, #156]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b08      	cmp	r3, #8
 800784e:	d102      	bne.n	8007856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007850:	4b26      	ldr	r3, [pc, #152]	@ (80078ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e03e      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007856:	4b23      	ldr	r3, [pc, #140]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	2b0c      	cmp	r3, #12
 8007860:	d136      	bne.n	80078d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007862:	4b20      	ldr	r3, [pc, #128]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800786c:	4b1d      	ldr	r3, [pc, #116]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	3301      	adds	r3, #1
 8007878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d10c      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007880:	4a1a      	ldr	r2, [pc, #104]	@ (80078ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	4a16      	ldr	r2, [pc, #88]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800788a:	68d2      	ldr	r2, [r2, #12]
 800788c:	0a12      	lsrs	r2, r2, #8
 800788e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	617b      	str	r3, [r7, #20]
      break;
 8007898:	e00c      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800789a:	4a13      	ldr	r2, [pc, #76]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	4a10      	ldr	r2, [pc, #64]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a4:	68d2      	ldr	r2, [r2, #12]
 80078a6:	0a12      	lsrs	r2, r2, #8
 80078a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]
      break;
 80078b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078b4:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	0e5b      	lsrs	r3, r3, #25
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	e001      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078d4:	693b      	ldr	r3, [r7, #16]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000
 80078e8:	00f42400 	.word	0x00f42400
 80078ec:	007a1200 	.word	0x007a1200

080078f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f4:	4b03      	ldr	r3, [pc, #12]	@ (8007904 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f6:	681b      	ldr	r3, [r3, #0]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000000 	.word	0x20000000

08007908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800790c:	f7ff fff0 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4904      	ldr	r1, [pc, #16]	@ (8007930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40021000 	.word	0x40021000
 8007930:	0800abe4 	.word	0x0800abe4

08007934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007938:	f7ff ffda 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 800793c:	4602      	mov	r2, r0
 800793e:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	0adb      	lsrs	r3, r3, #11
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	4904      	ldr	r1, [pc, #16]	@ (800795c <HAL_RCC_GetPCLK2Freq+0x28>)
 800794a:	5ccb      	ldrb	r3, [r1, r3]
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40021000 	.word	0x40021000
 800795c:	0800abe4 	.word	0x0800abe4

08007960 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007966:	4b1e      	ldr	r3, [pc, #120]	@ (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007970:	4b1b      	ldr	r3, [pc, #108]	@ (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d10c      	bne.n	800799e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007984:	4a17      	ldr	r2, [pc, #92]	@ (80079e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800798e:	68d2      	ldr	r2, [r2, #12]
 8007990:	0a12      	lsrs	r2, r2, #8
 8007992:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	617b      	str	r3, [r7, #20]
    break;
 800799c:	e00c      	b.n	80079b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800799e:	4a12      	ldr	r2, [pc, #72]	@ (80079e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	4a0e      	ldr	r2, [pc, #56]	@ (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079a8:	68d2      	ldr	r2, [r2, #12]
 80079aa:	0a12      	lsrs	r2, r2, #8
 80079ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079b0:	fb02 f303 	mul.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]
    break;
 80079b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079b8:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	0e5b      	lsrs	r3, r3, #25
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	3301      	adds	r3, #1
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079d2:	687b      	ldr	r3, [r7, #4]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	40021000 	.word	0x40021000
 80079e4:	007a1200 	.word	0x007a1200
 80079e8:	00f42400 	.word	0x00f42400

080079ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079f4:	2300      	movs	r3, #0
 80079f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079f8:	2300      	movs	r3, #0
 80079fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8098 	beq.w	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a0e:	4b43      	ldr	r3, [pc, #268]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10d      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a1a:	4b40      	ldr	r3, [pc, #256]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a26:	4b3d      	ldr	r3, [pc, #244]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a32:	2301      	movs	r3, #1
 8007a34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a36:	4b3a      	ldr	r3, [pc, #232]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a39      	ldr	r2, [pc, #228]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a42:	f7fa f87f 	bl	8001b44 <HAL_GetTick>
 8007a46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a48:	e009      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a4a:	f7fa f87b 	bl	8001b44 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d902      	bls.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a5c:	e005      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5e:	4b30      	ldr	r3, [pc, #192]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ef      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a6a:	7cfb      	ldrb	r3, [r7, #19]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d159      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a70:	4b2a      	ldr	r3, [pc, #168]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01e      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d019      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a8c:	4b23      	ldr	r3, [pc, #140]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a98:	4b20      	ldr	r3, [pc, #128]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aae:	4a1b      	ldr	r2, [pc, #108]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ab8:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aca:	f7fa f83b 	bl	8001b44 <HAL_GetTick>
 8007ace:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ad0:	e00b      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7fa f837 	bl	8001b44 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d902      	bls.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ae8:	e006      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aea:	4b0c      	ldr	r3, [pc, #48]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0ec      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007af8:	7cfb      	ldrb	r3, [r7, #19]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10b      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afe:	4b07      	ldr	r3, [pc, #28]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b0c:	4903      	ldr	r1, [pc, #12]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b14:	e008      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b16:	7cfb      	ldrb	r3, [r7, #19]
 8007b18:	74bb      	strb	r3, [r7, #18]
 8007b1a:	e005      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b28:	7c7b      	ldrb	r3, [r7, #17]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d105      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b2e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b32:	4aa6      	ldr	r2, [pc, #664]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b46:	4ba1      	ldr	r3, [pc, #644]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4c:	f023 0203 	bic.w	r2, r3, #3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	499d      	ldr	r1, [pc, #628]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b68:	4b98      	ldr	r3, [pc, #608]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6e:	f023 020c 	bic.w	r2, r3, #12
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4995      	ldr	r1, [pc, #596]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b8a:	4b90      	ldr	r3, [pc, #576]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	498c      	ldr	r1, [pc, #560]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0308 	and.w	r3, r3, #8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bac:	4b87      	ldr	r3, [pc, #540]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	4984      	ldr	r1, [pc, #528]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bce:	4b7f      	ldr	r3, [pc, #508]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	497b      	ldr	r1, [pc, #492]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf0:	4b76      	ldr	r3, [pc, #472]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	4973      	ldr	r1, [pc, #460]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c12:	4b6e      	ldr	r3, [pc, #440]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	496a      	ldr	r1, [pc, #424]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c34:	4b65      	ldr	r3, [pc, #404]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	4962      	ldr	r1, [pc, #392]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c56:	4b5d      	ldr	r3, [pc, #372]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	4959      	ldr	r1, [pc, #356]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c78:	4b54      	ldr	r3, [pc, #336]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c7e:	f023 0203 	bic.w	r2, r3, #3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c86:	4951      	ldr	r1, [pc, #324]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	4948      	ldr	r1, [pc, #288]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cbc:	4b43      	ldr	r3, [pc, #268]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cca:	4940      	ldr	r1, [pc, #256]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cda:	d105      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ce6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d015      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cf4:	4b35      	ldr	r3, [pc, #212]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d02:	4932      	ldr	r1, [pc, #200]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d12:	d105      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d14:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4a2c      	ldr	r2, [pc, #176]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d1e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d015      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d2c:	4b27      	ldr	r3, [pc, #156]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	4924      	ldr	r1, [pc, #144]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d4a:	d105      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4a1e      	ldr	r2, [pc, #120]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d015      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d64:	4b19      	ldr	r3, [pc, #100]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	4916      	ldr	r1, [pc, #88]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d82:	d105      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d84:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4a10      	ldr	r2, [pc, #64]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d019      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	4908      	ldr	r1, [pc, #32]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dba:	d109      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dbc:	4b03      	ldr	r3, [pc, #12]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	4a02      	ldr	r2, [pc, #8]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dc6:	60d3      	str	r3, [r2, #12]
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007dca:	bf00      	nop
 8007dcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d015      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ddc:	4b29      	ldr	r3, [pc, #164]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dea:	4926      	ldr	r1, [pc, #152]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dfc:	4b21      	ldr	r3, [pc, #132]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4a20      	ldr	r2, [pc, #128]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d015      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e14:	4b1b      	ldr	r3, [pc, #108]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e22:	4918      	ldr	r1, [pc, #96]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e32:	d105      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e34:	4b13      	ldr	r3, [pc, #76]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	4a12      	ldr	r2, [pc, #72]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d015      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e5a:	490a      	ldr	r1, [pc, #40]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e6a:	d105      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4a04      	ldr	r2, [pc, #16]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e78:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40021000 	.word	0x40021000

08007e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e049      	b.n	8007f2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7f9 fc40 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f000 fa5c 	bl	8008384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_TIM_PWM_Start+0x24>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e03c      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d109      	bne.n	8007f76 <HAL_TIM_PWM_Start+0x3e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	e02f      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start+0x58>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e022      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b0c      	cmp	r3, #12
 8007f94:	d109      	bne.n	8007faa <HAL_TIM_PWM_Start+0x72>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e015      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d109      	bne.n	8007fc4 <HAL_TIM_PWM_Start+0x8c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	bf14      	ite	ne
 8007fbc:	2301      	movne	r3, #1
 8007fbe:	2300      	moveq	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e008      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x9e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e0a6      	b.n	800812c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0xb6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fec:	e023      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0xc6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ffc:	e01b      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d104      	bne.n	800800e <HAL_TIM_PWM_Start+0xd6>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800800c:	e013      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start+0xe6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800801c:	e00b      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b10      	cmp	r3, #16
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0xf6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800802c:	e003      	b.n	8008036 <HAL_TIM_PWM_Start+0xfe>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2201      	movs	r2, #1
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fd7e 	bl	8008b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a3a      	ldr	r2, [pc, #232]	@ (8008134 <HAL_TIM_PWM_Start+0x1fc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a39      	ldr	r2, [pc, #228]	@ (8008138 <HAL_TIM_PWM_Start+0x200>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a37      	ldr	r2, [pc, #220]	@ (800813c <HAL_TIM_PWM_Start+0x204>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a36      	ldr	r2, [pc, #216]	@ (8008140 <HAL_TIM_PWM_Start+0x208>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a34      	ldr	r2, [pc, #208]	@ (8008144 <HAL_TIM_PWM_Start+0x20c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_PWM_Start+0x148>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a33      	ldr	r2, [pc, #204]	@ (8008148 <HAL_TIM_PWM_Start+0x210>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_TIM_PWM_Start+0x14c>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_TIM_PWM_Start+0x14e>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a25      	ldr	r2, [pc, #148]	@ (8008134 <HAL_TIM_PWM_Start+0x1fc>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d022      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ac:	d01d      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a26      	ldr	r2, [pc, #152]	@ (800814c <HAL_TIM_PWM_Start+0x214>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d018      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a24      	ldr	r2, [pc, #144]	@ (8008150 <HAL_TIM_PWM_Start+0x218>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d013      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a23      	ldr	r2, [pc, #140]	@ (8008154 <HAL_TIM_PWM_Start+0x21c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00e      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a19      	ldr	r2, [pc, #100]	@ (8008138 <HAL_TIM_PWM_Start+0x200>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d009      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a18      	ldr	r2, [pc, #96]	@ (800813c <HAL_TIM_PWM_Start+0x204>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d004      	beq.n	80080ea <HAL_TIM_PWM_Start+0x1b2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a18      	ldr	r2, [pc, #96]	@ (8008148 <HAL_TIM_PWM_Start+0x210>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d115      	bne.n	8008116 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	4b19      	ldr	r3, [pc, #100]	@ (8008158 <HAL_TIM_PWM_Start+0x220>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	d015      	beq.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008102:	d011      	beq.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008114:	e008      	b.n	8008128 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e000      	b.n	800812a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800
 8008148:	40015000 	.word	0x40015000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	00010007 	.word	0x00010007

0800815c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008176:	2302      	movs	r3, #2
 8008178:	e0ff      	b.n	800837a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b14      	cmp	r3, #20
 8008186:	f200 80f0 	bhi.w	800836a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800818a:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081e5 	.word	0x080081e5
 8008194:	0800836b 	.word	0x0800836b
 8008198:	0800836b 	.word	0x0800836b
 800819c:	0800836b 	.word	0x0800836b
 80081a0:	08008225 	.word	0x08008225
 80081a4:	0800836b 	.word	0x0800836b
 80081a8:	0800836b 	.word	0x0800836b
 80081ac:	0800836b 	.word	0x0800836b
 80081b0:	08008267 	.word	0x08008267
 80081b4:	0800836b 	.word	0x0800836b
 80081b8:	0800836b 	.word	0x0800836b
 80081bc:	0800836b 	.word	0x0800836b
 80081c0:	080082a7 	.word	0x080082a7
 80081c4:	0800836b 	.word	0x0800836b
 80081c8:	0800836b 	.word	0x0800836b
 80081cc:	0800836b 	.word	0x0800836b
 80081d0:	080082e9 	.word	0x080082e9
 80081d4:	0800836b 	.word	0x0800836b
 80081d8:	0800836b 	.word	0x0800836b
 80081dc:	0800836b 	.word	0x0800836b
 80081e0:	08008329 	.word	0x08008329
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 f97e 	bl	80084ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0208 	orr.w	r2, r2, #8
 80081fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0204 	bic.w	r2, r2, #4
 800820e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6999      	ldr	r1, [r3, #24]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	619a      	str	r2, [r3, #24]
      break;
 8008222:	e0a5      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f9f8 	bl	8008620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800823e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800824e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6999      	ldr	r1, [r3, #24]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	021a      	lsls	r2, r3, #8
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	619a      	str	r2, [r3, #24]
      break;
 8008264:	e084      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fa6b 	bl	8008748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0208 	orr.w	r2, r2, #8
 8008280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0204 	bic.w	r2, r2, #4
 8008290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69d9      	ldr	r1, [r3, #28]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	61da      	str	r2, [r3, #28]
      break;
 80082a4:	e064      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fadd 	bl	800886c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69d9      	ldr	r1, [r3, #28]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	021a      	lsls	r2, r3, #8
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	61da      	str	r2, [r3, #28]
      break;
 80082e6:	e043      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fb50 	bl	8008994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0208 	orr.w	r2, r2, #8
 8008302:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0204 	bic.w	r2, r2, #4
 8008312:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	691a      	ldr	r2, [r3, #16]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008326:	e023      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb9a 	bl	8008a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008342:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008352:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	021a      	lsls	r2, r3, #8
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008368:	e002      	b.n	8008370 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
      break;
 800836e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop

08008384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a4c      	ldr	r2, [pc, #304]	@ (80084c8 <TIM_Base_SetConfig+0x144>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d017      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a2:	d013      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a49      	ldr	r2, [pc, #292]	@ (80084cc <TIM_Base_SetConfig+0x148>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00f      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a48      	ldr	r2, [pc, #288]	@ (80084d0 <TIM_Base_SetConfig+0x14c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00b      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a47      	ldr	r2, [pc, #284]	@ (80084d4 <TIM_Base_SetConfig+0x150>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d007      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a46      	ldr	r2, [pc, #280]	@ (80084d8 <TIM_Base_SetConfig+0x154>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0x48>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a45      	ldr	r2, [pc, #276]	@ (80084dc <TIM_Base_SetConfig+0x158>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d108      	bne.n	80083de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a39      	ldr	r2, [pc, #228]	@ (80084c8 <TIM_Base_SetConfig+0x144>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d023      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a36      	ldr	r2, [pc, #216]	@ (80084cc <TIM_Base_SetConfig+0x148>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a35      	ldr	r2, [pc, #212]	@ (80084d0 <TIM_Base_SetConfig+0x14c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a34      	ldr	r2, [pc, #208]	@ (80084d4 <TIM_Base_SetConfig+0x150>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a33      	ldr	r2, [pc, #204]	@ (80084d8 <TIM_Base_SetConfig+0x154>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a33      	ldr	r2, [pc, #204]	@ (80084e0 <TIM_Base_SetConfig+0x15c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a32      	ldr	r2, [pc, #200]	@ (80084e4 <TIM_Base_SetConfig+0x160>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a31      	ldr	r2, [pc, #196]	@ (80084e8 <TIM_Base_SetConfig+0x164>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2c      	ldr	r2, [pc, #176]	@ (80084dc <TIM_Base_SetConfig+0x158>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a18      	ldr	r2, [pc, #96]	@ (80084c8 <TIM_Base_SetConfig+0x144>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d013      	beq.n	8008494 <TIM_Base_SetConfig+0x110>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1a      	ldr	r2, [pc, #104]	@ (80084d8 <TIM_Base_SetConfig+0x154>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00f      	beq.n	8008494 <TIM_Base_SetConfig+0x110>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1a      	ldr	r2, [pc, #104]	@ (80084e0 <TIM_Base_SetConfig+0x15c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00b      	beq.n	8008494 <TIM_Base_SetConfig+0x110>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a19      	ldr	r2, [pc, #100]	@ (80084e4 <TIM_Base_SetConfig+0x160>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d007      	beq.n	8008494 <TIM_Base_SetConfig+0x110>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <TIM_Base_SetConfig+0x164>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_Base_SetConfig+0x110>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a13      	ldr	r2, [pc, #76]	@ (80084dc <TIM_Base_SetConfig+0x158>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d103      	bne.n	800849c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	611a      	str	r2, [r3, #16]
  }
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40013400 	.word	0x40013400
 80084dc:	40015000 	.word	0x40015000
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800

080084ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	f023 0201 	bic.w	r2, r3, #1
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 0302 	bic.w	r3, r3, #2
 8008538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a30      	ldr	r2, [pc, #192]	@ (8008608 <TIM_OC1_SetConfig+0x11c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d013      	beq.n	8008574 <TIM_OC1_SetConfig+0x88>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a2f      	ldr	r2, [pc, #188]	@ (800860c <TIM_OC1_SetConfig+0x120>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00f      	beq.n	8008574 <TIM_OC1_SetConfig+0x88>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a2e      	ldr	r2, [pc, #184]	@ (8008610 <TIM_OC1_SetConfig+0x124>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00b      	beq.n	8008574 <TIM_OC1_SetConfig+0x88>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a2d      	ldr	r2, [pc, #180]	@ (8008614 <TIM_OC1_SetConfig+0x128>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d007      	beq.n	8008574 <TIM_OC1_SetConfig+0x88>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a2c      	ldr	r2, [pc, #176]	@ (8008618 <TIM_OC1_SetConfig+0x12c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_OC1_SetConfig+0x88>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a2b      	ldr	r2, [pc, #172]	@ (800861c <TIM_OC1_SetConfig+0x130>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d10c      	bne.n	800858e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0308 	bic.w	r3, r3, #8
 800857a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f023 0304 	bic.w	r3, r3, #4
 800858c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <TIM_OC1_SetConfig+0x11c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <TIM_OC1_SetConfig+0xd2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1c      	ldr	r2, [pc, #112]	@ (800860c <TIM_OC1_SetConfig+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00f      	beq.n	80085be <TIM_OC1_SetConfig+0xd2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <TIM_OC1_SetConfig+0x124>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00b      	beq.n	80085be <TIM_OC1_SetConfig+0xd2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008614 <TIM_OC1_SetConfig+0x128>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d007      	beq.n	80085be <TIM_OC1_SetConfig+0xd2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a19      	ldr	r2, [pc, #100]	@ (8008618 <TIM_OC1_SetConfig+0x12c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_OC1_SetConfig+0xd2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a18      	ldr	r2, [pc, #96]	@ (800861c <TIM_OC1_SetConfig+0x130>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d111      	bne.n	80085e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	621a      	str	r2, [r3, #32]
}
 80085fc:	bf00      	nop
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40013400 	.word	0x40013400
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800
 800861c:	40015000 	.word	0x40015000

08008620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	f023 0210 	bic.w	r2, r3, #16
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800864e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800865a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4313      	orrs	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a2c      	ldr	r2, [pc, #176]	@ (8008730 <TIM_OC2_SetConfig+0x110>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d007      	beq.n	8008694 <TIM_OC2_SetConfig+0x74>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a2b      	ldr	r2, [pc, #172]	@ (8008734 <TIM_OC2_SetConfig+0x114>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_OC2_SetConfig+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a2a      	ldr	r2, [pc, #168]	@ (8008738 <TIM_OC2_SetConfig+0x118>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d10d      	bne.n	80086b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800869a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008730 <TIM_OC2_SetConfig+0x110>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <TIM_OC2_SetConfig+0xc0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008734 <TIM_OC2_SetConfig+0x114>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00f      	beq.n	80086e0 <TIM_OC2_SetConfig+0xc0>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1e      	ldr	r2, [pc, #120]	@ (800873c <TIM_OC2_SetConfig+0x11c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00b      	beq.n	80086e0 <TIM_OC2_SetConfig+0xc0>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008740 <TIM_OC2_SetConfig+0x120>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d007      	beq.n	80086e0 <TIM_OC2_SetConfig+0xc0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008744 <TIM_OC2_SetConfig+0x124>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_OC2_SetConfig+0xc0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a17      	ldr	r2, [pc, #92]	@ (8008738 <TIM_OC2_SetConfig+0x118>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d113      	bne.n	8008708 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40012c00 	.word	0x40012c00
 8008734:	40013400 	.word	0x40013400
 8008738:	40015000 	.word	0x40015000
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400
 8008744:	40014800 	.word	0x40014800

08008748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008854 <TIM_OC3_SetConfig+0x10c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d007      	beq.n	80087ba <TIM_OC3_SetConfig+0x72>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008858 <TIM_OC3_SetConfig+0x110>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_OC3_SetConfig+0x72>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a29      	ldr	r2, [pc, #164]	@ (800885c <TIM_OC3_SetConfig+0x114>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d10d      	bne.n	80087d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008854 <TIM_OC3_SetConfig+0x10c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <TIM_OC3_SetConfig+0xbe>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008858 <TIM_OC3_SetConfig+0x110>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00f      	beq.n	8008806 <TIM_OC3_SetConfig+0xbe>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008860 <TIM_OC3_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00b      	beq.n	8008806 <TIM_OC3_SetConfig+0xbe>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008864 <TIM_OC3_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d007      	beq.n	8008806 <TIM_OC3_SetConfig+0xbe>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008868 <TIM_OC3_SetConfig+0x120>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d003      	beq.n	8008806 <TIM_OC3_SetConfig+0xbe>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a16      	ldr	r2, [pc, #88]	@ (800885c <TIM_OC3_SetConfig+0x114>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d113      	bne.n	800882e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800880c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	621a      	str	r2, [r3, #32]
}
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40013400 	.word	0x40013400
 800885c:	40015000 	.word	0x40015000
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800

0800886c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	031b      	lsls	r3, r3, #12
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a2c      	ldr	r2, [pc, #176]	@ (800897c <TIM_OC4_SetConfig+0x110>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_OC4_SetConfig+0x74>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008980 <TIM_OC4_SetConfig+0x114>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_OC4_SetConfig+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a2a      	ldr	r2, [pc, #168]	@ (8008984 <TIM_OC4_SetConfig+0x118>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10d      	bne.n	80088fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1f      	ldr	r2, [pc, #124]	@ (800897c <TIM_OC4_SetConfig+0x110>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <TIM_OC4_SetConfig+0xc0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a1e      	ldr	r2, [pc, #120]	@ (8008980 <TIM_OC4_SetConfig+0x114>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00f      	beq.n	800892c <TIM_OC4_SetConfig+0xc0>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1e      	ldr	r2, [pc, #120]	@ (8008988 <TIM_OC4_SetConfig+0x11c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00b      	beq.n	800892c <TIM_OC4_SetConfig+0xc0>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a1d      	ldr	r2, [pc, #116]	@ (800898c <TIM_OC4_SetConfig+0x120>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <TIM_OC4_SetConfig+0xc0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a1c      	ldr	r2, [pc, #112]	@ (8008990 <TIM_OC4_SetConfig+0x124>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC4_SetConfig+0xc0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a17      	ldr	r2, [pc, #92]	@ (8008984 <TIM_OC4_SetConfig+0x118>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d113      	bne.n	8008954 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800893a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	019b      	lsls	r3, r3, #6
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	019b      	lsls	r3, r3, #6
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40013400 	.word	0x40013400
 8008984:	40015000 	.word	0x40015000
 8008988:	40014000 	.word	0x40014000
 800898c:	40014400 	.word	0x40014400
 8008990:	40014800 	.word	0x40014800

08008994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a19      	ldr	r2, [pc, #100]	@ (8008a50 <TIM_OC5_SetConfig+0xbc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d013      	beq.n	8008a16 <TIM_OC5_SetConfig+0x82>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a18      	ldr	r2, [pc, #96]	@ (8008a54 <TIM_OC5_SetConfig+0xc0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00f      	beq.n	8008a16 <TIM_OC5_SetConfig+0x82>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a17      	ldr	r2, [pc, #92]	@ (8008a58 <TIM_OC5_SetConfig+0xc4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00b      	beq.n	8008a16 <TIM_OC5_SetConfig+0x82>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <TIM_OC5_SetConfig+0xc8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <TIM_OC5_SetConfig+0x82>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a15      	ldr	r2, [pc, #84]	@ (8008a60 <TIM_OC5_SetConfig+0xcc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d003      	beq.n	8008a16 <TIM_OC5_SetConfig+0x82>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a14      	ldr	r2, [pc, #80]	@ (8008a64 <TIM_OC5_SetConfig+0xd0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d109      	bne.n	8008a2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	621a      	str	r2, [r3, #32]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40013400 	.word	0x40013400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800
 8008a64:	40015000 	.word	0x40015000

08008a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a1a      	ldr	r2, [pc, #104]	@ (8008b28 <TIM_OC6_SetConfig+0xc0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d013      	beq.n	8008aec <TIM_OC6_SetConfig+0x84>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a19      	ldr	r2, [pc, #100]	@ (8008b2c <TIM_OC6_SetConfig+0xc4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00f      	beq.n	8008aec <TIM_OC6_SetConfig+0x84>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a18      	ldr	r2, [pc, #96]	@ (8008b30 <TIM_OC6_SetConfig+0xc8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00b      	beq.n	8008aec <TIM_OC6_SetConfig+0x84>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	@ (8008b34 <TIM_OC6_SetConfig+0xcc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <TIM_OC6_SetConfig+0x84>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a16      	ldr	r2, [pc, #88]	@ (8008b38 <TIM_OC6_SetConfig+0xd0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC6_SetConfig+0x84>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a15      	ldr	r2, [pc, #84]	@ (8008b3c <TIM_OC6_SetConfig+0xd4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d109      	bne.n	8008b00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	029b      	lsls	r3, r3, #10
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	621a      	str	r2, [r3, #32]
}
 8008b1a:	bf00      	nop
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800
 8008b3c:	40015000 	.word	0x40015000

08008b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2201      	movs	r2, #1
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1a      	ldr	r2, [r3, #32]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	fa01 f303 	lsl.w	r3, r1, r3
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e074      	b.n	8008c8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a34      	ldr	r2, [pc, #208]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d009      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a33      	ldr	r2, [pc, #204]	@ (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a31      	ldr	r2, [pc, #196]	@ (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d108      	bne.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008be8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a21      	ldr	r2, [pc, #132]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d022      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c24:	d01d      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d018      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d013      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00e      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a15      	ldr	r2, [pc, #84]	@ (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d009      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a18      	ldr	r2, [pc, #96]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d004      	beq.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d10c      	bne.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	40013400 	.word	0x40013400
 8008ca4:	40015000 	.word	0x40015000
 8008ca8:	40000400 	.word	0x40000400
 8008cac:	40000800 	.word	0x40000800
 8008cb0:	40000c00 	.word	0x40000c00
 8008cb4:	40014000 	.word	0x40014000

08008cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e078      	b.n	8008dc6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d009      	beq.n	8008d7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d004      	beq.n	8008d7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a19      	ldr	r2, [pc, #100]	@ (8008ddc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d11c      	bne.n	8008db4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d84:	051b      	lsls	r3, r3, #20
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40013400 	.word	0x40013400
 8008ddc:	40015000 	.word	0x40015000

08008de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e042      	b.n	8008e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7f8 fced 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2224      	movs	r2, #36	@ 0x24
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fb24 	bl	8009478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f825 	bl	8008e80 <UART_SetConfig>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e01b      	b.n	8008e78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fba3 	bl	80095bc <UART_CheckIdleState>
 8008e76:	4603      	mov	r3, r0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e84:	b08c      	sub	sp, #48	@ 0x30
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4baa      	ldr	r3, [pc, #680]	@ (8009158 <UART_SetConfig+0x2d8>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a9f      	ldr	r2, [pc, #636]	@ (800915c <UART_SetConfig+0x2dc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008ef6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f00:	430b      	orrs	r3, r1
 8008f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0a:	f023 010f 	bic.w	r1, r3, #15
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a90      	ldr	r2, [pc, #576]	@ (8009160 <UART_SetConfig+0x2e0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d125      	bne.n	8008f70 <UART_SetConfig+0xf0>
 8008f24:	4b8f      	ldr	r3, [pc, #572]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d81a      	bhi.n	8008f68 <UART_SetConfig+0xe8>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0xb8>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f61 	.word	0x08008f61
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e116      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e112      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e10e      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e10a      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e106      	b.n	800917e <UART_SetConfig+0x2fe>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a7c      	ldr	r2, [pc, #496]	@ (8009168 <UART_SetConfig+0x2e8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d138      	bne.n	8008fec <UART_SetConfig+0x16c>
 8008f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f80:	f003 030c 	and.w	r3, r3, #12
 8008f84:	2b0c      	cmp	r3, #12
 8008f86:	d82d      	bhi.n	8008fe4 <UART_SetConfig+0x164>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <UART_SetConfig+0x110>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fc5 	.word	0x08008fc5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fe5 	.word	0x08008fe5
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fcd 	.word	0x08008fcd
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	08008fe5 	.word	0x08008fe5
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e0d8      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd2:	e0d4      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fda:	e0d0      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe2:	e0cc      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fea:	e0c8      	b.n	800917e <UART_SetConfig+0x2fe>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800916c <UART_SetConfig+0x2ec>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d125      	bne.n	8009042 <UART_SetConfig+0x1c2>
 8008ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8009164 <UART_SetConfig+0x2e4>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ffc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009000:	2b30      	cmp	r3, #48	@ 0x30
 8009002:	d016      	beq.n	8009032 <UART_SetConfig+0x1b2>
 8009004:	2b30      	cmp	r3, #48	@ 0x30
 8009006:	d818      	bhi.n	800903a <UART_SetConfig+0x1ba>
 8009008:	2b20      	cmp	r3, #32
 800900a:	d00a      	beq.n	8009022 <UART_SetConfig+0x1a2>
 800900c:	2b20      	cmp	r3, #32
 800900e:	d814      	bhi.n	800903a <UART_SetConfig+0x1ba>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <UART_SetConfig+0x19a>
 8009014:	2b10      	cmp	r3, #16
 8009016:	d008      	beq.n	800902a <UART_SetConfig+0x1aa>
 8009018:	e00f      	b.n	800903a <UART_SetConfig+0x1ba>
 800901a:	2300      	movs	r3, #0
 800901c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009020:	e0ad      	b.n	800917e <UART_SetConfig+0x2fe>
 8009022:	2302      	movs	r3, #2
 8009024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009028:	e0a9      	b.n	800917e <UART_SetConfig+0x2fe>
 800902a:	2304      	movs	r3, #4
 800902c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009030:	e0a5      	b.n	800917e <UART_SetConfig+0x2fe>
 8009032:	2308      	movs	r3, #8
 8009034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009038:	e0a1      	b.n	800917e <UART_SetConfig+0x2fe>
 800903a:	2310      	movs	r3, #16
 800903c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009040:	e09d      	b.n	800917e <UART_SetConfig+0x2fe>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a4a      	ldr	r2, [pc, #296]	@ (8009170 <UART_SetConfig+0x2f0>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d125      	bne.n	8009098 <UART_SetConfig+0x218>
 800904c:	4b45      	ldr	r3, [pc, #276]	@ (8009164 <UART_SetConfig+0x2e4>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009052:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009056:	2bc0      	cmp	r3, #192	@ 0xc0
 8009058:	d016      	beq.n	8009088 <UART_SetConfig+0x208>
 800905a:	2bc0      	cmp	r3, #192	@ 0xc0
 800905c:	d818      	bhi.n	8009090 <UART_SetConfig+0x210>
 800905e:	2b80      	cmp	r3, #128	@ 0x80
 8009060:	d00a      	beq.n	8009078 <UART_SetConfig+0x1f8>
 8009062:	2b80      	cmp	r3, #128	@ 0x80
 8009064:	d814      	bhi.n	8009090 <UART_SetConfig+0x210>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <UART_SetConfig+0x1f0>
 800906a:	2b40      	cmp	r3, #64	@ 0x40
 800906c:	d008      	beq.n	8009080 <UART_SetConfig+0x200>
 800906e:	e00f      	b.n	8009090 <UART_SetConfig+0x210>
 8009070:	2300      	movs	r3, #0
 8009072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009076:	e082      	b.n	800917e <UART_SetConfig+0x2fe>
 8009078:	2302      	movs	r3, #2
 800907a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907e:	e07e      	b.n	800917e <UART_SetConfig+0x2fe>
 8009080:	2304      	movs	r3, #4
 8009082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009086:	e07a      	b.n	800917e <UART_SetConfig+0x2fe>
 8009088:	2308      	movs	r3, #8
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800908e:	e076      	b.n	800917e <UART_SetConfig+0x2fe>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009096:	e072      	b.n	800917e <UART_SetConfig+0x2fe>
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a35      	ldr	r2, [pc, #212]	@ (8009174 <UART_SetConfig+0x2f4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d12a      	bne.n	80090f8 <UART_SetConfig+0x278>
 80090a2:	4b30      	ldr	r3, [pc, #192]	@ (8009164 <UART_SetConfig+0x2e4>)
 80090a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b0:	d01a      	beq.n	80090e8 <UART_SetConfig+0x268>
 80090b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b6:	d81b      	bhi.n	80090f0 <UART_SetConfig+0x270>
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090bc:	d00c      	beq.n	80090d8 <UART_SetConfig+0x258>
 80090be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c2:	d815      	bhi.n	80090f0 <UART_SetConfig+0x270>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <UART_SetConfig+0x250>
 80090c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090cc:	d008      	beq.n	80090e0 <UART_SetConfig+0x260>
 80090ce:	e00f      	b.n	80090f0 <UART_SetConfig+0x270>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d6:	e052      	b.n	800917e <UART_SetConfig+0x2fe>
 80090d8:	2302      	movs	r3, #2
 80090da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090de:	e04e      	b.n	800917e <UART_SetConfig+0x2fe>
 80090e0:	2304      	movs	r3, #4
 80090e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e6:	e04a      	b.n	800917e <UART_SetConfig+0x2fe>
 80090e8:	2308      	movs	r3, #8
 80090ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ee:	e046      	b.n	800917e <UART_SetConfig+0x2fe>
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	e042      	b.n	800917e <UART_SetConfig+0x2fe>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a17      	ldr	r2, [pc, #92]	@ (800915c <UART_SetConfig+0x2dc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d13a      	bne.n	8009178 <UART_SetConfig+0x2f8>
 8009102:	4b18      	ldr	r3, [pc, #96]	@ (8009164 <UART_SetConfig+0x2e4>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800910c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009110:	d01a      	beq.n	8009148 <UART_SetConfig+0x2c8>
 8009112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009116:	d81b      	bhi.n	8009150 <UART_SetConfig+0x2d0>
 8009118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800911c:	d00c      	beq.n	8009138 <UART_SetConfig+0x2b8>
 800911e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009122:	d815      	bhi.n	8009150 <UART_SetConfig+0x2d0>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <UART_SetConfig+0x2b0>
 8009128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912c:	d008      	beq.n	8009140 <UART_SetConfig+0x2c0>
 800912e:	e00f      	b.n	8009150 <UART_SetConfig+0x2d0>
 8009130:	2300      	movs	r3, #0
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009136:	e022      	b.n	800917e <UART_SetConfig+0x2fe>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913e:	e01e      	b.n	800917e <UART_SetConfig+0x2fe>
 8009140:	2304      	movs	r3, #4
 8009142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009146:	e01a      	b.n	800917e <UART_SetConfig+0x2fe>
 8009148:	2308      	movs	r3, #8
 800914a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914e:	e016      	b.n	800917e <UART_SetConfig+0x2fe>
 8009150:	2310      	movs	r3, #16
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009156:	e012      	b.n	800917e <UART_SetConfig+0x2fe>
 8009158:	cfff69f3 	.word	0xcfff69f3
 800915c:	40008000 	.word	0x40008000
 8009160:	40013800 	.word	0x40013800
 8009164:	40021000 	.word	0x40021000
 8009168:	40004400 	.word	0x40004400
 800916c:	40004800 	.word	0x40004800
 8009170:	40004c00 	.word	0x40004c00
 8009174:	40005000 	.word	0x40005000
 8009178:	2310      	movs	r3, #16
 800917a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4aae      	ldr	r2, [pc, #696]	@ (800943c <UART_SetConfig+0x5bc>)
 8009184:	4293      	cmp	r3, r2
 8009186:	f040 8097 	bne.w	80092b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800918a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800918e:	2b08      	cmp	r3, #8
 8009190:	d823      	bhi.n	80091da <UART_SetConfig+0x35a>
 8009192:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <UART_SetConfig+0x318>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091db 	.word	0x080091db
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091db 	.word	0x080091db
 80091a8:	080091cb 	.word	0x080091cb
 80091ac:	080091db 	.word	0x080091db
 80091b0:	080091db 	.word	0x080091db
 80091b4:	080091db 	.word	0x080091db
 80091b8:	080091d3 	.word	0x080091d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7fe fba4 	bl	8007908 <HAL_RCC_GetPCLK1Freq>
 80091c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091c2:	e010      	b.n	80091e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091c4:	4b9e      	ldr	r3, [pc, #632]	@ (8009440 <UART_SetConfig+0x5c0>)
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091c8:	e00d      	b.n	80091e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ca:	f7fe fb2f 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80091ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d0:	e009      	b.n	80091e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091d8:	e005      	b.n	80091e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8130 	beq.w	800944e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	4a94      	ldr	r2, [pc, #592]	@ (8009444 <UART_SetConfig+0x5c4>)
 80091f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009200:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	4413      	add	r3, r2
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	429a      	cmp	r2, r3
 8009210:	d305      	bcc.n	800921e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	429a      	cmp	r2, r3
 800921c:	d903      	bls.n	8009226 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009224:	e113      	b.n	800944e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	2200      	movs	r2, #0
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	60fa      	str	r2, [r7, #12]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	4a84      	ldr	r2, [pc, #528]	@ (8009444 <UART_SetConfig+0x5c4>)
 8009234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009238:	b29b      	uxth	r3, r3
 800923a:	2200      	movs	r2, #0
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009248:	f7f6 ffe6 	bl	8000218 <__aeabi_uldivmod>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	020b      	lsls	r3, r1, #8
 800925e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009262:	0202      	lsls	r2, r0, #8
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	6849      	ldr	r1, [r1, #4]
 8009268:	0849      	lsrs	r1, r1, #1
 800926a:	2000      	movs	r0, #0
 800926c:	460c      	mov	r4, r1
 800926e:	4605      	mov	r5, r0
 8009270:	eb12 0804 	adds.w	r8, r2, r4
 8009274:	eb43 0905 	adc.w	r9, r3, r5
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	469a      	mov	sl, r3
 8009280:	4693      	mov	fp, r2
 8009282:	4652      	mov	r2, sl
 8009284:	465b      	mov	r3, fp
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f6 ffc5 	bl	8000218 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4613      	mov	r3, r2
 8009294:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929c:	d308      	bcc.n	80092b0 <UART_SetConfig+0x430>
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a4:	d204      	bcs.n	80092b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a3a      	ldr	r2, [r7, #32]
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e0ce      	b.n	800944e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092b6:	e0ca      	b.n	800944e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c0:	d166      	bne.n	8009390 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80092c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d827      	bhi.n	800931a <UART_SetConfig+0x49a>
 80092ca:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <UART_SetConfig+0x450>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	0800931b 	.word	0x0800931b
 80092e0:	0800930b 	.word	0x0800930b
 80092e4:	0800931b 	.word	0x0800931b
 80092e8:	0800931b 	.word	0x0800931b
 80092ec:	0800931b 	.word	0x0800931b
 80092f0:	08009313 	.word	0x08009313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f4:	f7fe fb08 	bl	8007908 <HAL_RCC_GetPCLK1Freq>
 80092f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092fa:	e014      	b.n	8009326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092fc:	f7fe fb1a 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 8009300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009302:	e010      	b.n	8009326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009304:	4b4e      	ldr	r3, [pc, #312]	@ (8009440 <UART_SetConfig+0x5c0>)
 8009306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009308:	e00d      	b.n	8009326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930a:	f7fe fa8f 	bl	800782c <HAL_RCC_GetSysClockFreq>
 800930e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009310:	e009      	b.n	8009326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009318:	e005      	b.n	8009326 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8090 	beq.w	800944e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009332:	4a44      	ldr	r2, [pc, #272]	@ (8009444 <UART_SetConfig+0x5c4>)
 8009334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009338:	461a      	mov	r2, r3
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009340:	005a      	lsls	r2, r3, #1
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	441a      	add	r2, r3
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	2b0f      	cmp	r3, #15
 8009358:	d916      	bls.n	8009388 <UART_SetConfig+0x508>
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009360:	d212      	bcs.n	8009388 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f023 030f 	bic.w	r3, r3, #15
 800936a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	085b      	lsrs	r3, r3, #1
 8009370:	b29b      	uxth	r3, r3
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	b29a      	uxth	r2, r3
 8009378:	8bfb      	ldrh	r3, [r7, #30]
 800937a:	4313      	orrs	r3, r2
 800937c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	8bfa      	ldrh	r2, [r7, #30]
 8009384:	60da      	str	r2, [r3, #12]
 8009386:	e062      	b.n	800944e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800938e:	e05e      	b.n	800944e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009394:	2b08      	cmp	r3, #8
 8009396:	d828      	bhi.n	80093ea <UART_SetConfig+0x56a>
 8009398:	a201      	add	r2, pc, #4	@ (adr r2, 80093a0 <UART_SetConfig+0x520>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093c5 	.word	0x080093c5
 80093a4:	080093cd 	.word	0x080093cd
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093eb 	.word	0x080093eb
 80093b0:	080093db 	.word	0x080093db
 80093b4:	080093eb 	.word	0x080093eb
 80093b8:	080093eb 	.word	0x080093eb
 80093bc:	080093eb 	.word	0x080093eb
 80093c0:	080093e3 	.word	0x080093e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c4:	f7fe faa0 	bl	8007908 <HAL_RCC_GetPCLK1Freq>
 80093c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ca:	e014      	b.n	80093f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093cc:	f7fe fab2 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093d2:	e010      	b.n	80093f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009440 <UART_SetConfig+0x5c0>)
 80093d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093d8:	e00d      	b.n	80093f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093da:	f7fe fa27 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80093de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093e0:	e009      	b.n	80093f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093e8:	e005      	b.n	80093f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093f4:	bf00      	nop
    }

    if (pclk != 0U)
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d028      	beq.n	800944e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	4a10      	ldr	r2, [pc, #64]	@ (8009444 <UART_SetConfig+0x5c4>)
 8009402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009406:	461a      	mov	r2, r3
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	fbb3 f2f2 	udiv	r2, r3, r2
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	441a      	add	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	fbb2 f3f3 	udiv	r3, r2, r3
 800941e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b0f      	cmp	r3, #15
 8009424:	d910      	bls.n	8009448 <UART_SetConfig+0x5c8>
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800942c:	d20c      	bcs.n	8009448 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	b29a      	uxth	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	e009      	b.n	800944e <UART_SetConfig+0x5ce>
 800943a:	bf00      	nop
 800943c:	40008000 	.word	0x40008000
 8009440:	00f42400 	.word	0x00f42400
 8009444:	0800abec 	.word	0x0800abec
      }
      else
      {
        ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2201      	movs	r2, #1
 8009452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2201      	movs	r2, #1
 800945a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2200      	movs	r2, #0
 8009462:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2200      	movs	r2, #0
 8009468:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800946a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800946e:	4618      	mov	r0, r3
 8009470:	3730      	adds	r7, #48	@ 0x30
 8009472:	46bd      	mov	sp, r7
 8009474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	f003 0308 	and.w	r3, r3, #8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01a      	beq.n	800958e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009576:	d10a      	bne.n	800958e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b098      	sub	sp, #96	@ 0x60
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095cc:	f7f8 faba 	bl	8001b44 <HAL_GetTick>
 80095d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0308 	and.w	r3, r3, #8
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d12f      	bne.n	8009640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e8:	2200      	movs	r2, #0
 80095ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f88e 	bl	8009710 <UART_WaitOnFlagUntilTimeout>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d022      	beq.n	8009640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	e853 3f00 	ldrex	r3, [r3]
 8009606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800960e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009618:	647b      	str	r3, [r7, #68]	@ 0x44
 800961a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800961e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009620:	e841 2300 	strex	r3, r2, [r1]
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e6      	bne.n	80095fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e063      	b.n	8009708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b04      	cmp	r3, #4
 800964c:	d149      	bne.n	80096e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009656:	2200      	movs	r2, #0
 8009658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f857 	bl	8009710 <UART_WaitOnFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d03c      	beq.n	80096e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	623b      	str	r3, [r7, #32]
   return(result);
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800967c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
 8009688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800968c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e6      	bne.n	8009668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ba:	61fa      	str	r2, [r7, #28]
 80096bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	69b9      	ldr	r1, [r7, #24]
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	617b      	str	r3, [r7, #20]
   return(result);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e012      	b.n	8009708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3758      	adds	r7, #88	@ 0x58
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	4613      	mov	r3, r2
 800971e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009720:	e04f      	b.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d04b      	beq.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972a:	f7f8 fa0b 	bl	8001b44 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	429a      	cmp	r2, r3
 8009738:	d302      	bcc.n	8009740 <UART_WaitOnFlagUntilTimeout+0x30>
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e04e      	b.n	80097e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0304 	and.w	r3, r3, #4
 800974e:	2b00      	cmp	r3, #0
 8009750:	d037      	beq.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b80      	cmp	r3, #128	@ 0x80
 8009756:	d034      	beq.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b40      	cmp	r3, #64	@ 0x40
 800975c:	d031      	beq.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b08      	cmp	r3, #8
 800976a:	d110      	bne.n	800978e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2208      	movs	r2, #8
 8009772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f838 	bl	80097ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2208      	movs	r2, #8
 800977e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e029      	b.n	80097e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800979c:	d111      	bne.n	80097c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f81e 	bl	80097ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e00f      	b.n	80097e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69da      	ldr	r2, [r3, #28]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4013      	ands	r3, r2
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	bf0c      	ite	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	2300      	movne	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d0a0      	beq.n	8009722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b095      	sub	sp, #84	@ 0x54
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009810:	643b      	str	r3, [r7, #64]	@ 0x40
 8009812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800981e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3308      	adds	r3, #8
 800982a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	61fb      	str	r3, [r7, #28]
   return(result);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800983a:	f023 0301 	bic.w	r3, r3, #1
 800983e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800984e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e3      	bne.n	8009824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009860:	2b01      	cmp	r3, #1
 8009862:	d118      	bne.n	8009896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	60bb      	str	r3, [r7, #8]
   return(result);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f023 0310 	bic.w	r3, r3, #16
 8009878:	647b      	str	r3, [r7, #68]	@ 0x44
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6979      	ldr	r1, [r7, #20]
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	613b      	str	r3, [r7, #16]
   return(result);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e6      	bne.n	8009864 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2220      	movs	r2, #32
 800989a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098aa:	bf00      	nop
 80098ac:	3754      	adds	r7, #84	@ 0x54
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_UARTEx_DisableFifoMode+0x16>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e027      	b.n	800991c <HAL_UARTEx_DisableFifoMode+0x66>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2224      	movs	r2, #36	@ 0x24
 80098d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800993c:	2302      	movs	r3, #2
 800993e:	e02d      	b.n	800999c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2224      	movs	r2, #36	@ 0x24
 800994c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0201 	bic.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f84f 	bl	8009a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e02d      	b.n	8009a18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2224      	movs	r2, #36	@ 0x24
 80099c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0201 	bic.w	r2, r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f811 	bl	8009a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d108      	bne.n	8009a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a40:	e031      	b.n	8009aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a42:	2308      	movs	r3, #8
 8009a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a46:	2308      	movs	r3, #8
 8009a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	0e5b      	lsrs	r3, r3, #25
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	0f5b      	lsrs	r3, r3, #29
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	7b3a      	ldrb	r2, [r7, #12]
 8009a6e:	4911      	ldr	r1, [pc, #68]	@ (8009ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a70:	5c8a      	ldrb	r2, [r1, r2]
 8009a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a76:	7b3a      	ldrb	r2, [r7, #12]
 8009a78:	490f      	ldr	r1, [pc, #60]	@ (8009ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8009a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	7b7a      	ldrb	r2, [r7, #13]
 8009a8c:	4909      	ldr	r1, [pc, #36]	@ (8009ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a8e:	5c8a      	ldrb	r2, [r1, r2]
 8009a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a94:	7b7a      	ldrb	r2, [r7, #13]
 8009a96:	4908      	ldr	r1, [pc, #32]	@ (8009ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8009a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	0800ac04 	.word	0x0800ac04
 8009ab8:	0800ac0c 	.word	0x0800ac0c

08009abc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b08b      	sub	sp, #44	@ 0x2c
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	fa93 f3a3 	rbit	r3, r3
 8009ad6:	613b      	str	r3, [r7, #16]
  return result;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	e003      	b.n	8009aee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	fab3 f383 	clz	r3, r3
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	2103      	movs	r1, #3
 8009af2:	fa01 f303 	lsl.w	r3, r1, r3
 8009af6:	43db      	mvns	r3, r3
 8009af8:	401a      	ands	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	fa93 f3a3 	rbit	r3, r3
 8009b04:	61fb      	str	r3, [r7, #28]
  return result;
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009b10:	2320      	movs	r3, #32
 8009b12:	e003      	b.n	8009b1c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	fab3 f383 	clz	r3, r3
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	fa01 f303 	lsl.w	r3, r1, r3
 8009b24:	431a      	orrs	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	601a      	str	r2, [r3, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	372c      	adds	r7, #44	@ 0x2c
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	43db      	mvns	r3, r3
 8009b4a:	401a      	ands	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	431a      	orrs	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	605a      	str	r2, [r3, #4]
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b08b      	sub	sp, #44	@ 0x2c
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	fa93 f3a3 	rbit	r3, r3
 8009b80:	613b      	str	r3, [r7, #16]
  return result;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	e003      	b.n	8009b98 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	fab3 f383 	clz	r3, r3
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	2103      	movs	r1, #3
 8009b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba0:	43db      	mvns	r3, r3
 8009ba2:	401a      	ands	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	fa93 f3a3 	rbit	r3, r3
 8009bae:	61fb      	str	r3, [r7, #28]
  return result;
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009bba:	2320      	movs	r3, #32
 8009bbc:	e003      	b.n	8009bc6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc0:	fab3 f383 	clz	r3, r3
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	fa01 f303 	lsl.w	r3, r1, r3
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009bd4:	bf00      	nop
 8009bd6:	372c      	adds	r7, #44	@ 0x2c
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b08b      	sub	sp, #44	@ 0x2c
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	fa93 f3a3 	rbit	r3, r3
 8009bfa:	613b      	str	r3, [r7, #16]
  return result;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009c06:	2320      	movs	r3, #32
 8009c08:	e003      	b.n	8009c12 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	fab3 f383 	clz	r3, r3
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	2103      	movs	r1, #3
 8009c16:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1a:	43db      	mvns	r3, r3
 8009c1c:	401a      	ands	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	fa93 f3a3 	rbit	r3, r3
 8009c28:	61fb      	str	r3, [r7, #28]
  return result;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009c34:	2320      	movs	r3, #32
 8009c36:	e003      	b.n	8009c40 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	fab3 f383 	clz	r3, r3
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	fa01 f303 	lsl.w	r3, r1, r3
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	60da      	str	r2, [r3, #12]
}
 8009c4e:	bf00      	nop
 8009c50:	372c      	adds	r7, #44	@ 0x2c
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b08b      	sub	sp, #44	@ 0x2c
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	fa93 f3a3 	rbit	r3, r3
 8009c74:	613b      	str	r3, [r7, #16]
  return result;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c80:	2320      	movs	r3, #32
 8009c82:	e003      	b.n	8009c8c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	fab3 f383 	clz	r3, r3
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	210f      	movs	r1, #15
 8009c90:	fa01 f303 	lsl.w	r3, r1, r3
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	fa93 f3a3 	rbit	r3, r3
 8009ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009cae:	2320      	movs	r3, #32
 8009cb0:	e003      	b.n	8009cba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb4:	fab3 f383 	clz	r3, r3
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009cc8:	bf00      	nop
 8009cca:	372c      	adds	r7, #44	@ 0x2c
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b08b      	sub	sp, #44	@ 0x2c
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	0a1b      	lsrs	r3, r3, #8
 8009ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	fa93 f3a3 	rbit	r3, r3
 8009cf0:	613b      	str	r3, [r7, #16]
  return result;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	e003      	b.n	8009d08 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	fab3 f383 	clz	r3, r3
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	210f      	movs	r1, #15
 8009d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	0a1b      	lsrs	r3, r3, #8
 8009d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	fa93 f3a3 	rbit	r3, r3
 8009d20:	61fb      	str	r3, [r7, #28]
  return result;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	e003      	b.n	8009d38 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	fab3 f383 	clz	r3, r3
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d40:	431a      	orrs	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009d46:	bf00      	nop
 8009d48:	372c      	adds	r7, #44	@ 0x2c
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b088      	sub	sp, #32
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	fa93 f3a3 	rbit	r3, r3
 8009d68:	60fb      	str	r3, [r7, #12]
  return result;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <LL_GPIO_Init+0x26>
    return 32U;
 8009d74:	2320      	movs	r3, #32
 8009d76:	e003      	b.n	8009d80 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	fab3 f383 	clz	r3, r3
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009d82:	e048      	b.n	8009e16 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d90:	4013      	ands	r3, r2
 8009d92:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d03a      	beq.n	8009e10 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d003      	beq.n	8009daa <LL_GPIO_Init+0x58>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d10e      	bne.n	8009dc8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	461a      	mov	r2, r3
 8009db0:	69b9      	ldr	r1, [r7, #24]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff fed7 	bl	8009b66 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6819      	ldr	r1, [r3, #0]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff feb7 	bl	8009b36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff05 	bl	8009be0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d111      	bne.n	8009e02 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2bff      	cmp	r3, #255	@ 0xff
 8009de2:	d807      	bhi.n	8009df4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	461a      	mov	r2, r3
 8009dea:	69b9      	ldr	r1, [r7, #24]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff34 	bl	8009c5a <LL_GPIO_SetAFPin_0_7>
 8009df2:	e006      	b.n	8009e02 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	69b9      	ldr	r1, [r7, #24]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff ff69 	bl	8009cd4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	461a      	mov	r2, r3
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fe56 	bl	8009abc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	3301      	adds	r3, #1
 8009e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1af      	bne.n	8009d84 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b085      	sub	sp, #20
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009e3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	43db      	mvns	r3, r3
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	1d3b      	adds	r3, r7, #4
 8009e6e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b0ac      	sub	sp, #176	@ 0xb0
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	f040 84ca 	bne.w	800a848 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	699a      	ldr	r2, [r3, #24]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d904      	bls.n	8009eca <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ec8:	e003      	b.n	8009ed2 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	7b1b      	ldrb	r3, [r3, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d122      	bne.n	8009f20 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88da      	ldrh	r2, [r3, #6]
 8009ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fdac 	bl	800aa46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	461a      	mov	r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4413      	add	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	00da      	lsls	r2, r3, #3
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	f000 bc6f 	b.w	800a7fe <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	78db      	ldrb	r3, [r3, #3]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	f040 831e 	bne.w	800a566 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6a1a      	ldr	r2, [r3, #32]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	f240 82cf 	bls.w	800a4d6 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	441a      	add	r2, r3
 8009f5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	6a1a      	ldr	r2, [r3, #32]
 8009f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f7c:	1ad2      	subs	r2, r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 814f 	beq.w	800a238 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d16b      	bne.n	800a07e <USB_EPStartXfer+0x1de>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	4413      	add	r3, r2
 8009fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	00da      	lsls	r2, r3, #3
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd8:	801a      	strh	r2, [r3, #0]
 8009fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <USB_EPStartXfer+0x158>
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff4:	801a      	strh	r2, [r3, #0]
 8009ff6:	e05b      	b.n	800a0b0 <USB_EPStartXfer+0x210>
 8009ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ffe:	d81c      	bhi.n	800a03a <USB_EPStartXfer+0x19a>
 800a000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a004:	085b      	lsrs	r3, r3, #1
 800a006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a00a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <USB_EPStartXfer+0x180>
 800a016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a01a:	3301      	adds	r3, #1
 800a01c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29a      	uxth	r2, r3
 800a026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	029b      	lsls	r3, r3, #10
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	801a      	strh	r2, [r3, #0]
 800a038:	e03a      	b.n	800a0b0 <USB_EPStartXfer+0x210>
 800a03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a03e:	095b      	lsrs	r3, r3, #5
 800a040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a048:	f003 031f 	and.w	r3, r3, #31
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <USB_EPStartXfer+0x1ba>
 800a050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a054:	3b01      	subs	r3, #1
 800a056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a064:	b29b      	uxth	r3, r3
 800a066:	029b      	lsls	r3, r3, #10
 800a068:	b29b      	uxth	r3, r3
 800a06a:	4313      	orrs	r3, r2
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a076:	b29a      	uxth	r2, r3
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	801a      	strh	r2, [r3, #0]
 800a07c:	e018      	b.n	800a0b0 <USB_EPStartXfer+0x210>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d114      	bne.n	800a0b0 <USB_EPStartXfer+0x210>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	4413      	add	r3, r2
 800a094:	633b      	str	r3, [r7, #48]	@ 0x30
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	00da      	lsls	r2, r3, #3
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	4413      	add	r3, r2
 800a0a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	895b      	ldrh	r3, [r3, #10]
 800a0b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	6959      	ldr	r1, [r3, #20]
 800a0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fcbd 	bl	800aa46 <USB_WritePMA>
            ep->xfer_buff += len;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	695a      	ldr	r2, [r3, #20]
 800a0d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0d4:	441a      	add	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d907      	bls.n	800a0f6 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6a1a      	ldr	r2, [r3, #32]
 800a0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	621a      	str	r2, [r3, #32]
 800a0f4:	e006      	b.n	800a104 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d16b      	bne.n	800a1e4 <USB_EPStartXfer+0x344>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	61bb      	str	r3, [r7, #24]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a116:	b29b      	uxth	r3, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	4413      	add	r3, r2
 800a11e:	61bb      	str	r3, [r7, #24]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	00da      	lsls	r2, r3, #3
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	4413      	add	r3, r2
 800a12a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <USB_EPStartXfer+0x2be>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a156:	b29a      	uxth	r2, r3
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	e05d      	b.n	800a21a <USB_EPStartXfer+0x37a>
 800a15e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a162:	2b3e      	cmp	r3, #62	@ 0x3e
 800a164:	d81c      	bhi.n	800a1a0 <USB_EPStartXfer+0x300>
 800a166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a16a:	085b      	lsrs	r3, r3, #1
 800a16c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <USB_EPStartXfer+0x2e6>
 800a17c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a180:	3301      	adds	r3, #1
 800a182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a190:	b29b      	uxth	r3, r3
 800a192:	029b      	lsls	r3, r3, #10
 800a194:	b29b      	uxth	r3, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	b29a      	uxth	r2, r3
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	801a      	strh	r2, [r3, #0]
 800a19e:	e03c      	b.n	800a21a <USB_EPStartXfer+0x37a>
 800a1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a4:	095b      	lsrs	r3, r3, #5
 800a1a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a1aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1ae:	f003 031f 	and.w	r3, r3, #31
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <USB_EPStartXfer+0x320>
 800a1b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	029b      	lsls	r3, r3, #10
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	e01a      	b.n	800a21a <USB_EPStartXfer+0x37a>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	785b      	ldrb	r3, [r3, #1]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d116      	bne.n	800a21a <USB_EPStartXfer+0x37a>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	623b      	str	r3, [r7, #32]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	623b      	str	r3, [r7, #32]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	00da      	lsls	r2, r3, #3
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	4413      	add	r3, r2
 800a20a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a214:	b29a      	uxth	r2, r3
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	891b      	ldrh	r3, [r3, #8]
 800a21e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	6959      	ldr	r1, [r3, #20]
 800a226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fc08 	bl	800aa46 <USB_WritePMA>
 800a236:	e2e2      	b.n	800a7fe <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d16b      	bne.n	800a318 <USB_EPStartXfer+0x478>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	461a      	mov	r2, r3
 800a24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a250:	4413      	add	r3, r2
 800a252:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	00da      	lsls	r2, r3, #3
 800a25a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a25c:	4413      	add	r3, r2
 800a25e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a262:	647b      	str	r3, [r7, #68]	@ 0x44
 800a264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a26e:	b29a      	uxth	r2, r3
 800a270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a272:	801a      	strh	r2, [r3, #0]
 800a274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <USB_EPStartXfer+0x3f2>
 800a27c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	e05d      	b.n	800a34e <USB_EPStartXfer+0x4ae>
 800a292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a296:	2b3e      	cmp	r3, #62	@ 0x3e
 800a298:	d81c      	bhi.n	800a2d4 <USB_EPStartXfer+0x434>
 800a29a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d004      	beq.n	800a2ba <USB_EPStartXfer+0x41a>
 800a2b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	029b      	lsls	r3, r3, #10
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d0:	801a      	strh	r2, [r3, #0]
 800a2d2:	e03c      	b.n	800a34e <USB_EPStartXfer+0x4ae>
 800a2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2e2:	f003 031f 	and.w	r3, r3, #31
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d104      	bne.n	800a2f4 <USB_EPStartXfer+0x454>
 800a2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	029b      	lsls	r3, r3, #10
 800a302:	b29b      	uxth	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b29b      	uxth	r3, r3
 800a308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a310:	b29a      	uxth	r2, r3
 800a312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	e01a      	b.n	800a34e <USB_EPStartXfer+0x4ae>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d116      	bne.n	800a34e <USB_EPStartXfer+0x4ae>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	653b      	str	r3, [r7, #80]	@ 0x50
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a330:	4413      	add	r3, r2
 800a332:	653b      	str	r3, [r7, #80]	@ 0x50
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	00da      	lsls	r2, r3, #3
 800a33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a33c:	4413      	add	r3, r2
 800a33e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a34c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	891b      	ldrh	r3, [r3, #8]
 800a352:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	6959      	ldr	r1, [r3, #20]
 800a35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a35e:	b29b      	uxth	r3, r3
 800a360:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fb6e 	bl	800aa46 <USB_WritePMA>
            ep->xfer_buff += len;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695a      	ldr	r2, [r3, #20]
 800a36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a372:	441a      	add	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6a1a      	ldr	r2, [r3, #32]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	429a      	cmp	r2, r3
 800a382:	d907      	bls.n	800a394 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a38c:	1ad2      	subs	r2, r2, r3
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	621a      	str	r2, [r3, #32]
 800a392:	e006      	b.n	800a3a2 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	785b      	ldrb	r3, [r3, #1]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d16b      	bne.n	800a486 <USB_EPStartXfer+0x5e6>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3be:	4413      	add	r3, r2
 800a3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	00da      	lsls	r2, r3, #3
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10a      	bne.n	800a400 <USB_EPStartXfer+0x560>
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	e05b      	b.n	800a4b8 <USB_EPStartXfer+0x618>
 800a400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a404:	2b3e      	cmp	r3, #62	@ 0x3e
 800a406:	d81c      	bhi.n	800a442 <USB_EPStartXfer+0x5a2>
 800a408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <USB_EPStartXfer+0x588>
 800a41e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a422:	3301      	adds	r3, #1
 800a424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a432:	b29b      	uxth	r3, r3
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	b29b      	uxth	r3, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	e03a      	b.n	800a4b8 <USB_EPStartXfer+0x618>
 800a442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a450:	f003 031f 	and.w	r3, r3, #31
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USB_EPStartXfer+0x5c2>
 800a458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a45c:	3b01      	subs	r3, #1
 800a45e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	029b      	lsls	r3, r3, #10
 800a470:	b29b      	uxth	r3, r3
 800a472:	4313      	orrs	r3, r2
 800a474:	b29b      	uxth	r3, r3
 800a476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	e018      	b.n	800a4b8 <USB_EPStartXfer+0x618>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d114      	bne.n	800a4b8 <USB_EPStartXfer+0x618>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a494:	b29b      	uxth	r3, r3
 800a496:	461a      	mov	r2, r3
 800a498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a49a:	4413      	add	r3, r2
 800a49c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	00da      	lsls	r2, r3, #3
 800a4a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	895b      	ldrh	r3, [r3, #10]
 800a4bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	6959      	ldr	r1, [r3, #20]
 800a4c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fab9 	bl	800aa46 <USB_WritePMA>
 800a4d4:	e193      	b.n	800a7fe <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a4f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	441a      	add	r2, r3
 800a502:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a50a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a50e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a516:	b29b      	uxth	r3, r3
 800a518:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a524:	b29b      	uxth	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a52a:	4413      	add	r3, r2
 800a52c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	00da      	lsls	r2, r3, #3
 800a534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a536:	4413      	add	r3, r2
 800a538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a53c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a53e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a542:	b29a      	uxth	r2, r3
 800a544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a546:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	891b      	ldrh	r3, [r3, #8]
 800a54c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	6959      	ldr	r1, [r3, #20]
 800a554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa71 	bl	800aa46 <USB_WritePMA>
 800a564:	e14b      	b.n	800a7fe <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	6a1a      	ldr	r2, [r3, #32]
 800a56a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b29b      	uxth	r3, r3
 800a582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 809a 	beq.w	800a6c0 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	785b      	ldrb	r3, [r3, #1]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d16b      	bne.n	800a670 <USB_EPStartXfer+0x7d0>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5a8:	4413      	add	r3, r2
 800a5aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	00da      	lsls	r2, r3, #3
 800a5b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <USB_EPStartXfer+0x74a>
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e05b      	b.n	800a6a2 <USB_EPStartXfer+0x802>
 800a5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5f0:	d81c      	bhi.n	800a62c <USB_EPStartXfer+0x78c>
 800a5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f6:	085b      	lsrs	r3, r3, #1
 800a5f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <USB_EPStartXfer+0x772>
 800a608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a60c:	3301      	adds	r3, #1
 800a60e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	029b      	lsls	r3, r3, #10
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e03a      	b.n	800a6a2 <USB_EPStartXfer+0x802>
 800a62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USB_EPStartXfer+0x7ac>
 800a642:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a646:	3b01      	subs	r3, #1
 800a648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a64c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b29a      	uxth	r2, r3
 800a652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a656:	b29b      	uxth	r3, r3
 800a658:	029b      	lsls	r3, r3, #10
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4313      	orrs	r3, r2
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a668:	b29a      	uxth	r2, r3
 800a66a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	e018      	b.n	800a6a2 <USB_EPStartXfer+0x802>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d114      	bne.n	800a6a2 <USB_EPStartXfer+0x802>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a67e:	b29b      	uxth	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a684:	4413      	add	r3, r2
 800a686:	673b      	str	r3, [r7, #112]	@ 0x70
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	00da      	lsls	r2, r3, #3
 800a68e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a690:	4413      	add	r3, r2
 800a692:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	895b      	ldrh	r3, [r3, #10]
 800a6a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6959      	ldr	r1, [r3, #20]
 800a6ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f9c4 	bl	800aa46 <USB_WritePMA>
 800a6be:	e09e      	b.n	800a7fe <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d16b      	bne.n	800a7a0 <USB_EPStartXfer+0x900>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a6d8:	4413      	add	r3, r2
 800a6da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	00da      	lsls	r2, r3, #3
 800a6e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6fa:	801a      	strh	r2, [r3, #0]
 800a6fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10a      	bne.n	800a71a <USB_EPStartXfer+0x87a>
 800a704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a712:	b29a      	uxth	r2, r3
 800a714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	e063      	b.n	800a7e2 <USB_EPStartXfer+0x942>
 800a71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a71e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a720:	d81c      	bhi.n	800a75c <USB_EPStartXfer+0x8bc>
 800a722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a72c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <USB_EPStartXfer+0x8a2>
 800a738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a73c:	3301      	adds	r3, #1
 800a73e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29a      	uxth	r2, r3
 800a748:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	029b      	lsls	r3, r3, #10
 800a750:	b29b      	uxth	r3, r3
 800a752:	4313      	orrs	r3, r2
 800a754:	b29a      	uxth	r2, r3
 800a756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a758:	801a      	strh	r2, [r3, #0]
 800a75a:	e042      	b.n	800a7e2 <USB_EPStartXfer+0x942>
 800a75c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a760:	095b      	lsrs	r3, r3, #5
 800a762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a76a:	f003 031f 	and.w	r3, r3, #31
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <USB_EPStartXfer+0x8dc>
 800a772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a776:	3b01      	subs	r3, #1
 800a778:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a77c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	b29a      	uxth	r2, r3
 800a782:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a786:	b29b      	uxth	r3, r3
 800a788:	029b      	lsls	r3, r3, #10
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	b29b      	uxth	r3, r3
 800a790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	e020      	b.n	800a7e2 <USB_EPStartXfer+0x942>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d11c      	bne.n	800a7e2 <USB_EPStartXfer+0x942>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7bc:	4413      	add	r3, r2
 800a7be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	00da      	lsls	r2, r3, #3
 800a7c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	891b      	ldrh	r3, [r3, #8]
 800a7e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	6959      	ldr	r1, [r3, #20]
 800a7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f924 	bl	800aa46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4413      	add	r3, r2
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a814:	817b      	strh	r3, [r7, #10]
 800a816:	897b      	ldrh	r3, [r7, #10]
 800a818:	f083 0310 	eor.w	r3, r3, #16
 800a81c:	817b      	strh	r3, [r7, #10]
 800a81e:	897b      	ldrh	r3, [r7, #10]
 800a820:	f083 0320 	eor.w	r3, r3, #32
 800a824:	817b      	strh	r3, [r7, #10]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	441a      	add	r2, r3
 800a830:	897b      	ldrh	r3, [r7, #10]
 800a832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a83a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a842:	b29b      	uxth	r3, r3
 800a844:	8013      	strh	r3, [r2, #0]
 800a846:	e0d5      	b.n	800a9f4 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	7b1b      	ldrb	r3, [r3, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d156      	bne.n	800a8fe <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d122      	bne.n	800a89e <USB_EPStartXfer+0x9fe>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	78db      	ldrb	r3, [r3, #3]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d11e      	bne.n	800a89e <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a876:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	441a      	add	r2, r3
 800a884:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a88c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a890:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a898:	b29b      	uxth	r3, r3
 800a89a:	8013      	strh	r3, [r2, #0]
 800a89c:	e01d      	b.n	800a8da <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	441a      	add	r2, r3
 800a8c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a8c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	699a      	ldr	r2, [r3, #24]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d907      	bls.n	800a8f6 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	619a      	str	r2, [r3, #24]
 800a8f4:	e054      	b.n	800a9a0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	619a      	str	r2, [r3, #24]
 800a8fc:	e050      	b.n	800a9a0 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	78db      	ldrb	r3, [r3, #3]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d142      	bne.n	800a98c <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d048      	beq.n	800a9a0 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a91e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d005      	beq.n	800a936 <USB_EPStartXfer+0xa96>
 800a92a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10b      	bne.n	800a94e <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a936:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a93a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d12e      	bne.n	800a9a0 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a942:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d128      	bne.n	800a9a0 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a964:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	441a      	add	r2, r3
 800a972:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a97a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a97e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a982:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a986:	b29b      	uxth	r3, r3
 800a988:	8013      	strh	r3, [r2, #0]
 800a98a:	e009      	b.n	800a9a0 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	78db      	ldrb	r3, [r3, #3]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d103      	bne.n	800a99c <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2200      	movs	r2, #0
 800a998:	619a      	str	r2, [r3, #24]
 800a99a:	e001      	b.n	800a9a0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e02a      	b.n	800a9f6 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a9c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	441a      	add	r2, r3
 800a9dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	37b0      	adds	r7, #176	@ 0xb0
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d103      	bne.n	800aa18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aa38:	68fb      	ldr	r3, [r7, #12]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b08b      	sub	sp, #44	@ 0x2c
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	4611      	mov	r1, r2
 800aa52:	461a      	mov	r2, r3
 800aa54:	460b      	mov	r3, r1
 800aa56:	80fb      	strh	r3, [r7, #6]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa5c:	88bb      	ldrh	r3, [r7, #4]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	085b      	lsrs	r3, r3, #1
 800aa62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa6c:	88fa      	ldrh	r2, [r7, #6]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa76:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa7c:	e01c      	b.n	800aab8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	3301      	adds	r3, #1
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b21b      	sxth	r3, r3
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	b21a      	sxth	r2, r3
 800aa90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	b21b      	sxth	r3, r3
 800aa98:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	8a7a      	ldrh	r2, [r7, #18]
 800aa9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	3301      	adds	r3, #1
 800aab0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	3b01      	subs	r3, #1
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1df      	bne.n	800aa7e <USB_WritePMA+0x38>
  }
}
 800aabe:	bf00      	nop
 800aac0:	bf00      	nop
 800aac2:	372c      	adds	r7, #44	@ 0x2c
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aacc:	b480      	push	{r7}
 800aace:	b08b      	sub	sp, #44	@ 0x2c
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4611      	mov	r1, r2
 800aad8:	461a      	mov	r2, r3
 800aada:	460b      	mov	r3, r1
 800aadc:	80fb      	strh	r3, [r7, #6]
 800aade:	4613      	mov	r3, r2
 800aae0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aae2:	88bb      	ldrh	r3, [r7, #4]
 800aae4:	085b      	lsrs	r3, r3, #1
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aaf2:	88fa      	ldrh	r2, [r7, #6]
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aafc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab02:	e018      	b.n	800ab36 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	3302      	adds	r3, #2
 800ab10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	3b01      	subs	r3, #1
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e3      	bne.n	800ab04 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ab3c:	88bb      	ldrh	r3, [r7, #4]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	701a      	strb	r2, [r3, #0]
  }
}
 800ab58:	bf00      	nop
 800ab5a:	372c      	adds	r7, #44	@ 0x2c
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <memset>:
 800ab64:	4402      	add	r2, r0
 800ab66:	4603      	mov	r3, r0
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d100      	bne.n	800ab6e <memset+0xa>
 800ab6c:	4770      	bx	lr
 800ab6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab72:	e7f9      	b.n	800ab68 <memset+0x4>

0800ab74 <__libc_init_array>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4d0d      	ldr	r5, [pc, #52]	@ (800abac <__libc_init_array+0x38>)
 800ab78:	4c0d      	ldr	r4, [pc, #52]	@ (800abb0 <__libc_init_array+0x3c>)
 800ab7a:	1b64      	subs	r4, r4, r5
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	2600      	movs	r6, #0
 800ab80:	42a6      	cmp	r6, r4
 800ab82:	d109      	bne.n	800ab98 <__libc_init_array+0x24>
 800ab84:	4d0b      	ldr	r5, [pc, #44]	@ (800abb4 <__libc_init_array+0x40>)
 800ab86:	4c0c      	ldr	r4, [pc, #48]	@ (800abb8 <__libc_init_array+0x44>)
 800ab88:	f000 f818 	bl	800abbc <_init>
 800ab8c:	1b64      	subs	r4, r4, r5
 800ab8e:	10a4      	asrs	r4, r4, #2
 800ab90:	2600      	movs	r6, #0
 800ab92:	42a6      	cmp	r6, r4
 800ab94:	d105      	bne.n	800aba2 <__libc_init_array+0x2e>
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab9c:	4798      	blx	r3
 800ab9e:	3601      	adds	r6, #1
 800aba0:	e7ee      	b.n	800ab80 <__libc_init_array+0xc>
 800aba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba6:	4798      	blx	r3
 800aba8:	3601      	adds	r6, #1
 800abaa:	e7f2      	b.n	800ab92 <__libc_init_array+0x1e>
 800abac:	0800ac1c 	.word	0x0800ac1c
 800abb0:	0800ac1c 	.word	0x0800ac1c
 800abb4:	0800ac1c 	.word	0x0800ac1c
 800abb8:	0800ac20 	.word	0x0800ac20

0800abbc <_init>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr

0800abc8 <_fini>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr
