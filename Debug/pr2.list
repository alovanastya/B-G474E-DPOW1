
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e508  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800e6e0  0800e6e0  0000f6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  0001000c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e900  0800e900  0000f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e908  0800e908  0000f908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e90c  0800e90c  0000f90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800e910  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2000000c  0800e91c  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800e91c  00010848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000253e5  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  00035421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  000391f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018b8  00000000  00000000  0003b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee29  00000000  00000000  0003ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230c1  00000000  00000000  0006b879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014cb02  00000000  00000000  0008e93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f80  00000000  00000000  001db480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001e4400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e6c8 	.word	0x0800e6c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800e6c8 	.word	0x0800e6c8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ecc:	4907      	ldr	r1, [pc, #28]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <LL_APB1_GRP2_EnableClock+0x2c>)
 8000ed6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f001 fcd4 	bl	80028a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f99f 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 fe89 	bl	8001c14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f000 fe3d 	bl	8001b80 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f06:	f000 f9e7 	bl	80012d8 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000f0a:	f000 fa5d 	bl	80013c8 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000f0e:	f000 fa81 	bl	8001414 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000f12:	f000 faa5 	bl	8001460 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000f16:	f000 fac9 	bl	80014ac <MX_COMP6_Init>
  MX_DAC1_Init();
 8000f1a:	f000 faed 	bl	80014f8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000f1e:	f000 fb35 	bl	800158c <MX_DAC2_Init>
  MX_DAC3_Init();
 8000f22:	f000 fb6d 	bl	8001600 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 8000f26:	f000 fbaf 	bl	8001688 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 8000f2a:	f000 fd87 	bl	8001a3c <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 8000f2e:	f000 fdb3 	bl	8001a98 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000f32:	f000 fdfd 	bl	8001b30 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f36:	f000 fcb7 	bl	80018a8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000f3a:	f000 fd49 	bl	80019d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000f3e:	48b2      	ldr	r0, [pc, #712]	@ (8001208 <main+0x318>)
 8000f40:	f008 fdaa 	bl	8009a98 <HAL_TIM_Base_Start_IT>

  __HAL_DAC_ENABLE(&hdac3, DAC_CHANNEL_1);
 8000f44:	4bb1      	ldr	r3, [pc, #708]	@ (800120c <main+0x31c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4bb0      	ldr	r3, [pc, #704]	@ (800120c <main+0x31c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_2);
 8000f54:	4bae      	ldr	r3, [pc, #696]	@ (8001210 <main+0x320>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4bad      	ldr	r3, [pc, #692]	@ (8001210 <main+0x320>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f62:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f64:	2108      	movs	r1, #8
 8000f66:	48a8      	ldr	r0, [pc, #672]	@ (8001208 <main+0x318>)
 8000f68:	f008 fe66 	bl	8009c38 <HAL_TIM_PWM_Start>

  char msg[] = "MEOW!\r\n";
 8000f6c:	4aa9      	ldr	r2, [pc, #676]	@ (8001214 <main+0x324>)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f74:	e883 0003 	stmia.w	r3, {r0, r1}
  // HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f94c 	bl	8000218 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	48a3      	ldr	r0, [pc, #652]	@ (8001218 <main+0x328>)
 8000f8a:	f009 ffc1 	bl	800af10 <HAL_UART_Transmit_DMA>
  HAL_Delay(5);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f001 fcf8 	bl	8002984 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f94:	217f      	movs	r1, #127	@ 0x7f
 8000f96:	48a1      	ldr	r0, [pc, #644]	@ (800121c <main+0x32c>)
 8000f98:	f003 f880 	bl	800409c <HAL_ADCEx_Calibration_Start>
   HAL_TIM_Base_Start(&htim6);
   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2,(uint32_t*)sineWave_3,SAMPLE_COUNT_1,DAC_ALIGN_12B_R);

   */

  uint32_t sineWave_1[SAMPLE_COUNT];
 8000f9c:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	ebad 0d03 	sub.w	sp, sp, r3
 8000fb0:	ab02      	add	r3, sp, #8
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  uint32_t sineWave_2[SAMPLE_COUNT];
 8000fba:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fc4:	3307      	adds	r3, #7
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	ebad 0d03 	sub.w	sp, sp, r3
 8000fce:	ab02      	add	r3, sp, #8
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
  uint32_t sineWave_3[SAMPLE_COUNT];
 8000fd8:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fe2:	3307      	adds	r3, #7
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fec:	ab02      	add	r3, sp, #8
 8000fee:	3303      	adds	r3, #3
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SAMPLE_COUNT; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffa:	e097      	b.n	800112c <main+0x23c>
  {
      sineWave_1[i] = (uint32_t)(2047 * (AMPLITUDE_1 * (sin((2 * M_PI * i * F1) / Fs) + 1)));
 8000ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ffe:	f7ff fa65 	bl	80004cc <__aeabi_i2d>
 8001002:	a37b      	add	r3, pc, #492	@ (adr r3, 80011f0 <main+0x300>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff faca 	bl	80005a0 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b81      	ldr	r3, [pc, #516]	@ (8001220 <main+0x330>)
 800101a:	f7ff fac1 	bl	80005a0 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	a374      	add	r3, pc, #464	@ (adr r3, 80011f8 <main+0x308>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fbe2 	bl	80007f4 <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	ec43 2b17 	vmov	d7, r2, r3
 8001038:	eeb0 0a47 	vmov.f32	s0, s14
 800103c:	eef0 0a67 	vmov.f32	s1, s15
 8001040:	f00c fb1e 	bl	800d680 <sin>
 8001044:	ec51 0b10 	vmov	r0, r1, d0
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b75      	ldr	r3, [pc, #468]	@ (8001224 <main+0x334>)
 800104e:	f7ff f8f1 	bl	8000234 <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b72      	ldr	r3, [pc, #456]	@ (8001228 <main+0x338>)
 8001060:	f7ff fa9e 	bl	80005a0 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	a364      	add	r3, pc, #400	@ (adr r3, 8001200 <main+0x310>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fa95 	bl	80005a0 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd51 	bl	8000b24 <__aeabi_d2uiz>
 8001082:	4601      	mov	r1, r0
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      sineWave_2[i] = (uint32_t)(2047 * (AMPLITUDE_2 * (sin((2 * M_PI * i * F2) / Fs) + 1)));
 800108c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800108e:	f7ff fa1d 	bl	80004cc <__aeabi_i2d>
 8001092:	a357      	add	r3, pc, #348	@ (adr r3, 80011f0 <main+0x300>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fa82 	bl	80005a0 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b60      	ldr	r3, [pc, #384]	@ (800122c <main+0x33c>)
 80010aa:	f7ff fa79 	bl	80005a0 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	a350      	add	r3, pc, #320	@ (adr r3, 80011f8 <main+0x308>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fb9a 	bl	80007f4 <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	ec43 2b17 	vmov	d7, r2, r3
 80010c8:	eeb0 0a47 	vmov.f32	s0, s14
 80010cc:	eef0 0a67 	vmov.f32	s1, s15
 80010d0:	f00c fad6 	bl	800d680 <sin>
 80010d4:	ec51 0b10 	vmov	r0, r1, d0
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <main+0x334>)
 80010de:	f7ff f8a9 	bl	8000234 <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	a345      	add	r3, pc, #276	@ (adr r3, 8001200 <main+0x310>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fa56 	bl	80005a0 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd12 	bl	8000b24 <__aeabi_d2uiz>
 8001100:	4601      	mov	r1, r0
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      sineWave_3[i] = (sineWave_1[i] + sineWave_2[i]) / 2;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800111a:	4413      	add	r3, r2
 800111c:	0859      	lsrs	r1, r3, #1
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SAMPLE_COUNT; i++)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	3301      	adds	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001132:	f4ff af63 	bcc.w	8000ffc <main+0x10c>
  }

  HAL_TIM_Base_Start(&htim6);
 8001136:	483e      	ldr	r0, [pc, #248]	@ (8001230 <main+0x340>)
 8001138:	f008 fc3e 	bl	80099b8 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sineWave_3, SAMPLE_COUNT, DAC_ALIGN_12B_R);
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	2110      	movs	r1, #16
 8001148:	4831      	ldr	r0, [pc, #196]	@ (8001210 <main+0x320>)
 800114a:	f003 fd5f 	bl	8004c0c <HAL_DAC_Start_DMA>
    if(pwm_value == 500) step = -1;
	pwm_value += step;
	setPWM(pwm_value);
	// HAL_Delay(5);
*/
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 800114e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001152:	4838      	ldr	r0, [pc, #224]	@ (8001234 <main+0x344>)
 8001154:	f004 fdae 	bl	8005cb4 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <main+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2120      	movs	r1, #32
 8001162:	4834      	ldr	r0, [pc, #208]	@ (8001234 <main+0x344>)
 8001164:	f004 fdbe 	bl	8005ce4 <HAL_GPIO_WritePin>
 8001168:	e004      	b.n	8001174 <main+0x284>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	4831      	ldr	r0, [pc, #196]	@ (8001234 <main+0x344>)
 8001170:	f004 fdb8 	bl	8005ce4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 8001174:	2120      	movs	r1, #32
 8001176:	4830      	ldr	r0, [pc, #192]	@ (8001238 <main+0x348>)
 8001178:	f004 fd9c 	bl	8005cb4 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <main+0x2a2>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118c:	f004 fdaa 	bl	8005ce4 <HAL_GPIO_WritePin>
 8001190:	e006      	b.n	80011a0 <main+0x2b0>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f004 fda2 	bl	8005ce4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 80011a0:	2110      	movs	r1, #16
 80011a2:	4825      	ldr	r0, [pc, #148]	@ (8001238 <main+0x348>)
 80011a4:	f004 fd86 	bl	8005cb4 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <main+0x2ca>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2102      	movs	r1, #2
 80011b2:	4820      	ldr	r0, [pc, #128]	@ (8001234 <main+0x344>)
 80011b4:	f004 fd96 	bl	8005ce4 <HAL_GPIO_WritePin>
 80011b8:	e004      	b.n	80011c4 <main+0x2d4>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	481d      	ldr	r0, [pc, #116]	@ (8001234 <main+0x344>)
 80011c0:	f004 fd90 	bl	8005ce4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 80011c4:	2104      	movs	r1, #4
 80011c6:	481b      	ldr	r0, [pc, #108]	@ (8001234 <main+0x344>)
 80011c8:	f004 fd74 	bl	8005cb4 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <main+0x2ee>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	4817      	ldr	r0, [pc, #92]	@ (8001234 <main+0x344>)
 80011d8:	f004 fd84 	bl	8005ce4 <HAL_GPIO_WritePin>
 80011dc:	e7b7      	b.n	800114e <main+0x25e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <main+0x344>)
 80011e4:	f004 fd7e 	bl	8005ce4 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 80011e8:	e7b1      	b.n	800114e <main+0x25e>
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	54442d18 	.word	0x54442d18
 80011f4:	401921fb 	.word	0x401921fb
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40f86a00 	.word	0x40f86a00
 8001200:	00000000 	.word	0x00000000
 8001204:	409ffc00 	.word	0x409ffc00
 8001208:	2000031c 	.word	0x2000031c
 800120c:	2000014c 	.word	0x2000014c
 8001210:	20000124 	.word	0x20000124
 8001214:	0800e6e0 	.word	0x0800e6e0
 8001218:	20000414 	.word	0x20000414
 800121c:	20000028 	.word	0x20000028
 8001220:	408f4000 	.word	0x408f4000
 8001224:	3ff00000 	.word	0x3ff00000
 8001228:	3fe00000 	.word	0x3fe00000
 800122c:	40590000 	.word	0x40590000
 8001230:	20000368 	.word	0x20000368
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	2238      	movs	r2, #56	@ 0x38
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00c f9ec 	bl	800d628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800125e:	2000      	movs	r0, #0
 8001260:	f007 fb22 	bl	80088a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001264:	2322      	movs	r3, #34	@ 0x22
 8001266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2340      	movs	r3, #64	@ 0x40
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001272:	2301      	movs	r3, #1
 8001274:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800127e:	2304      	movs	r3, #4
 8001280:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001282:	2355      	movs	r3, #85	@ 0x55
 8001284:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001286:	2308      	movs	r3, #8
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800128a:	2308      	movs	r3, #8
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fbba 	bl	8008a10 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012a2:	f000 fd95 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2104      	movs	r1, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 feb8 	bl	8009034 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012ca:	f000 fd81 	bl	8001dd0 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	@ 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00c f999 	bl	800d628 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 80012f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001300:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001304:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001320:	2204      	movs	r2, #4
 8001322:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001330:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001332:	2201      	movs	r2, #1
 8001334:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800134a:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 8001362:	f001 fd6f 	bl	8002e44 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800136c:	f000 fd30 	bl	8001dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 800137c:	f002 ff22 	bl	80041c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001386:	f000 fd23 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_ADC1_Init+0xec>)
 800138c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138e:	2306      	movs	r3, #6
 8001390:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001396:	237f      	movs	r3, #127	@ 0x7f
 8001398:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139a:	2304      	movs	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_ADC1_Init+0xe8>)
 80013a8:	f002 f986 	bl	80036b8 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013b2:	f000 fd0d 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3730      	adds	r7, #48	@ 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000028 	.word	0x20000028
 80013c4:	08600004 	.word	0x08600004

080013c8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_COMP2_Init+0x44>)
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <MX_COMP2_Init+0x48>)
 80013d0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_COMP2_Init+0x44>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_COMP2_Init+0x44>)
 80013da:	2240      	movs	r2, #64	@ 0x40
 80013dc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_COMP2_Init+0x44>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_COMP2_Init+0x44>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_COMP2_Init+0x44>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_COMP2_Init+0x44>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_COMP2_Init+0x44>)
 80013f8:	f003 f93c 	bl	8004674 <HAL_COMP_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001402:	f000 fce5 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000094 	.word	0x20000094
 8001410:	40010204 	.word	0x40010204

08001414 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_COMP3_Init+0x44>)
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <MX_COMP3_Init+0x48>)
 800141c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_COMP3_Init+0x44>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_COMP3_Init+0x44>)
 8001426:	2240      	movs	r2, #64	@ 0x40
 8001428:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_COMP3_Init+0x44>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_COMP3_Init+0x44>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_COMP3_Init+0x44>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_COMP3_Init+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_COMP3_Init+0x44>)
 8001444:	f003 f916 	bl	8004674 <HAL_COMP_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 800144e:	f000 fcbf 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000b8 	.word	0x200000b8
 800145c:	40010208 	.word	0x40010208

08001460 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_Init 0 */
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */
  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_COMP4_Init+0x44>)
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <MX_COMP4_Init+0x48>)
 8001468:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_COMP4_Init+0x44>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_COMP4_Init+0x44>)
 8001472:	2250      	movs	r2, #80	@ 0x50
 8001474:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_COMP4_Init+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_COMP4_Init+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <MX_COMP4_Init+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_COMP4_Init+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_COMP4_Init+0x44>)
 8001490:	f003 f8f0 	bl	8004674 <HAL_COMP_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 800149a:	f000 fc99 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000dc 	.word	0x200000dc
 80014a8:	4001020c 	.word	0x4001020c

080014ac <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP6_Init 0 */
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */
  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <MX_COMP6_Init+0x48>)
 80014b4:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014be:	2250      	movs	r2, #80	@ 0x50
 80014c0:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_COMP6_Init+0x44>)
 80014dc:	f003 f8ca 	bl	8004674 <HAL_COMP_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 80014e6:	f000 fc73 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000100 	.word	0x20000100
 80014f4:	40010214 	.word	0x40010214

080014f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2230      	movs	r2, #48	@ 0x30
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f00c f88f 	bl	800d628 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_DAC1_Init+0x8c>)
 800150c:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <MX_DAC1_Init+0x90>)
 800150e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001510:	481c      	ldr	r0, [pc, #112]	@ (8001584 <MX_DAC1_Init+0x8c>)
 8001512:	f003 fb58 	bl	8004bc6 <HAL_DAC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800151c:	f000 fc58 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001520:	2302      	movs	r3, #2
 8001522:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <MX_DAC1_Init+0x8c>)
 800154c:	f003 fcb0 	bl	8004eb0 <HAL_DAC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001556:	f000 fc3b 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800155a:	231e      	movs	r3, #30
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2210      	movs	r2, #16
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_DAC1_Init+0x8c>)
 800156e:	f003 fc9f 	bl	8004eb0 <HAL_DAC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001578:	f000 fc2a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	@ 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000124 	.word	0x20000124
 8001588:	50000800 	.word	0x50000800

0800158c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2230      	movs	r2, #48	@ 0x30
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00c f845 	bl	800d628 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_DAC2_Init+0x6c>)
 80015a0:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <MX_DAC2_Init+0x70>)
 80015a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80015a4:	4814      	ldr	r0, [pc, #80]	@ (80015f8 <MX_DAC2_Init+0x6c>)
 80015a6:	f003 fb0e 	bl	8004bc6 <HAL_DAC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80015b0:	f000 fc0e 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015b4:	2302      	movs	r3, #2
 80015b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015cc:	2302      	movs	r3, #2
 80015ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <MX_DAC2_Init+0x6c>)
 80015e0:	f003 fc66 	bl	8004eb0 <HAL_DAC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80015ea:	f000 fbf1 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	@ 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000138 	.word	0x20000138
 80015fc:	50000c00 	.word	0x50000c00

08001600 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2230      	movs	r2, #48	@ 0x30
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00c f80b 	bl	800d628 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_DAC3_Init+0x80>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <MX_DAC3_Init+0x84>)
 8001616:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001618:	4819      	ldr	r0, [pc, #100]	@ (8001680 <MX_DAC3_Init+0x80>)
 800161a:	f003 fad4 	bl	8004bc6 <HAL_DAC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001624:	f000 fbd4 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001628:	2302      	movs	r3, #2
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001640:	2302      	movs	r3, #2
 8001642:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	480b      	ldr	r0, [pc, #44]	@ (8001680 <MX_DAC3_Init+0x80>)
 8001654:	f003 fc2c 	bl	8004eb0 <HAL_DAC_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800165e:	f000 fbb7 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2210      	movs	r2, #16
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_DAC3_Init+0x80>)
 800166a:	f003 fc21 	bl	8004eb0 <HAL_DAC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001674:	f000 fbac 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	@ 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000014c 	.word	0x2000014c
 8001684:	50001000 	.word	0x50001000

08001688 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ac      	sub	sp, #176	@ 0xb0
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800168e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800169c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	2260      	movs	r2, #96	@ 0x60
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00b ffb5 	bl	800d628 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2220      	movs	r2, #32
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00b ffaf 	bl	800d628 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80016ca:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80016cc:	4a75      	ldr	r2, [pc, #468]	@ (80018a4 <MX_HRTIM1_Init+0x21c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80016d0:	4b73      	ldr	r3, [pc, #460]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80016d6:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80016dc:	4870      	ldr	r0, [pc, #448]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80016de:	f004 fb3d 	bl	8005d5c <HAL_HRTIM_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 80016e8:	f000 fb72 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80016ec:	210c      	movs	r1, #12
 80016ee:	486c      	ldr	r0, [pc, #432]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80016f0:	f004 fc04 	bl	8005efc <HAL_HRTIM_DLLCalibrationStart>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 80016fa:	f000 fb69 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80016fe:	210a      	movs	r1, #10
 8001700:	4867      	ldr	r0, [pc, #412]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001702:	f004 fc53 	bl	8005fac <HAL_HRTIM_PollForDLLCalibration>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 800170c:	f000 fb60 	bl	8001dd0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8001710:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001724:	2308      	movs	r3, #8
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 800172a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800172e:	461a      	mov	r2, r3
 8001730:	2104      	movs	r1, #4
 8001732:	485b      	ldr	r0, [pc, #364]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001734:	f004 fc6e 	bl	8006014 <HAL_HRTIM_TimeBaseConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 800173e:	f000 fb47 	bl	8001dd0 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 800174e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001752:	461a      	mov	r2, r3
 8001754:	2104      	movs	r1, #4
 8001756:	4852      	ldr	r0, [pc, #328]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001758:	f004 fd11 	bl	800617e <HAL_HRTIM_WaveformTimerControl>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8001762:	f000 fb35 	bl	8001dd0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8001776:	2301      	movs	r3, #1
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800177e:	2300      	movs	r3, #0
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001782:	2300      	movs	r3, #0
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001786:	2300      	movs	r3, #0
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800178e:	2300      	movs	r3, #0
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001792:	2300      	movs	r3, #0
 8001794:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001796:	2300      	movs	r3, #0
 8001798:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800179a:	2300      	movs	r3, #0
 800179c:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800179e:	2300      	movs	r3, #0
 80017a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80017aa:	2300      	movs	r3, #0
 80017ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80017ae:	2300      	movs	r3, #0
 80017b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80017ba:	2300      	movs	r3, #0
 80017bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	461a      	mov	r2, r3
 80017ca:	2104      	movs	r1, #4
 80017cc:	4834      	ldr	r0, [pc, #208]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80017ce:	f004 fc49 	bl	8006064 <HAL_HRTIM_WaveformTimerConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 80017d8:	f000 fafa 	bl	8001dd0 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 80017dc:	2300      	movs	r3, #0
 80017de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 80017e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e4:	461a      	mov	r2, r3
 80017e6:	2105      	movs	r1, #5
 80017e8:	482d      	ldr	r0, [pc, #180]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 80017ea:	f004 fc3b 	bl	8006064 <HAL_HRTIM_WaveformTimerConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 80017f4:	f000 faec 	bl	8001dd0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181e:	2104      	movs	r1, #4
 8001820:	481f      	ldr	r0, [pc, #124]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001822:	f004 fcdf 	bl	80061e4 <HAL_HRTIM_WaveformOutputConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 800182c:	f000 fad0 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001836:	2105      	movs	r1, #5
 8001838:	4819      	ldr	r0, [pc, #100]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 800183a:	f004 fcd3 	bl	80061e4 <HAL_HRTIM_WaveformOutputConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8001844:	f000 fac4 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8001848:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800184c:	461a      	mov	r2, r3
 800184e:	2105      	movs	r1, #5
 8001850:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001852:	f004 fbdf 	bl	8006014 <HAL_HRTIM_TimeBaseConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 800185c:	f000 fab8 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8001860:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001864:	461a      	mov	r2, r3
 8001866:	2105      	movs	r1, #5
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 800186a:	f004 fc88 	bl	800617e <HAL_HRTIM_WaveformTimerControl>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 8001874:	f000 faac 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800187e:	2105      	movs	r1, #5
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001882:	f004 fcaf 	bl	80061e4 <HAL_HRTIM_WaveformOutputConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 800188c:	f000 faa0 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_HRTIM1_Init+0x218>)
 8001892:	f000 fcd9 	bl	8002248 <HAL_HRTIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	37b0      	adds	r7, #176	@ 0xb0
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000220 	.word	0x20000220
 80018a4:	40016800 	.word	0x40016800

080018a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b098      	sub	sp, #96	@ 0x60
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2234      	movs	r2, #52	@ 0x34
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b fea7 	bl	800d628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018da:	4b3b      	ldr	r3, [pc, #236]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018dc:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <MX_TIM1_Init+0x124>)
 80018de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018e2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80018e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80018ee:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <MX_TIM1_Init+0x120>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001908:	482f      	ldr	r0, [pc, #188]	@ (80019c8 <MX_TIM1_Init+0x120>)
 800190a:	f008 f93d 	bl	8009b88 <HAL_TIM_PWM_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001914:	f000 fa5c 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001924:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001928:	4619      	mov	r1, r3
 800192a:	4827      	ldr	r0, [pc, #156]	@ (80019c8 <MX_TIM1_Init+0x120>)
 800192c:	f009 f930 	bl	800ab90 <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001936:	f000 fa4b 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193a:	2360      	movs	r3, #96	@ 0x60
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001956:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800195a:	2208      	movs	r2, #8
 800195c:	4619      	mov	r1, r3
 800195e:	481a      	ldr	r0, [pc, #104]	@ (80019c8 <MX_TIM1_Init+0x120>)
 8001960:	f008 fbcc 	bl	800a0fc <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800196a:	f000 fa31 	bl	8001dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001994:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80019ac:	f009 f986 	bl	800acbc <HAL_TIMEx_ConfigBreakDeadTime>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80019b6:	f000 fa0b 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ba:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <MX_TIM1_Init+0x120>)
 80019bc:	f000 fd3e 	bl	800243c <HAL_TIM_MspPostInit>

}
 80019c0:	bf00      	nop
 80019c2:	3760      	adds	r7, #96	@ 0x60
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000031c 	.word	0x2000031c
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_TIM6_Init+0x64>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <MX_TIM6_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 80019e6:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <MX_TIM6_Init+0x64>)
 80019e8:	22aa      	movs	r2, #170	@ 0xaa
 80019ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_TIM6_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_TIM6_Init+0x64>)
 80019f4:	220a      	movs	r2, #10
 80019f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_TIM6_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019fe:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <MX_TIM6_Init+0x64>)
 8001a00:	f007 ff82 	bl	8009908 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a0a:	f000 f9e1 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <MX_TIM6_Init+0x64>)
 8001a1c:	f009 f8b8 	bl	800ab90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a26:	f000 f9d3 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000368 	.word	0x20000368
 8001a38:	40001000 	.word	0x40001000

08001a3c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a52:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a56:	f7ff fa33 	bl	8000ec0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7ff fa18 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a60:	2310      	movs	r3, #16
 8001a62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4808      	ldr	r0, [pc, #32]	@ (8001a94 <MX_UCPD1_Init+0x58>)
 8001a72:	f00a fed0 	bl	800c816 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a76:	2340      	movs	r3, #64	@ 0x40
 8001a78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <MX_UCPD1_Init+0x58>)
 8001a88:	f00a fec5 	bl	800c816 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	48000400 	.word	0x48000400

08001a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001a9e:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <MX_USART3_UART_Init+0x94>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ada:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae0:	4811      	ldr	r0, [pc, #68]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001ae2:	f009 f9c5 	bl	800ae70 <HAL_UART_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001aec:	f000 f970 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af0:	2100      	movs	r1, #0
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001af4:	f00a fc79 	bl	800c3ea <HAL_UARTEx_SetTxFifoThreshold>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001afe:	f000 f967 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001b06:	f00a fcae 	bl	800c466 <HAL_UARTEx_SetRxFifoThreshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b10:	f000 f95e 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <MX_USART3_UART_Init+0x90>)
 8001b16:	f00a fc2f 	bl	800c378 <HAL_UARTEx_DisableFifoMode>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b20:	f000 f956 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000414 	.word	0x20000414
 8001b2c:	40004800 	.word	0x40004800

08001b30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b36:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <MX_USB_PCD_Init+0x4c>)
 8001b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <MX_USB_PCD_Init+0x48>)
 8001b66:	f005 fb79 	bl	800725c <HAL_PCD_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001b70:	f000 f92e 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000568 	.word	0x20000568
 8001b7c:	40005c00 	.word	0x40005c00

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b86:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <MX_DMA_Init+0x90>)
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f002 ffcf 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc0:	200b      	movs	r0, #11
 8001bc2:	f002 ffe6 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f002 ffc7 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bd0:	200c      	movs	r0, #12
 8001bd2:	f002 ffde 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	200d      	movs	r0, #13
 8001bdc:	f002 ffbf 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001be0:	200d      	movs	r0, #13
 8001be2:	f002 ffd6 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	200e      	movs	r0, #14
 8001bec:	f002 ffb7 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bf0:	200e      	movs	r0, #14
 8001bf2:	f002 ffce 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f002 ffaf 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c00:	200f      	movs	r0, #15
 8001c02:	f002 ffc6 	bl	8004b92 <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	@ 0x28
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a59      	ldr	r2, [pc, #356]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a53      	ldr	r2, [pc, #332]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b51      	ldr	r3, [pc, #324]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	4a4d      	ldr	r2, [pc, #308]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dac <MX_GPIO_Init+0x198>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f24c 0108 	movw	r1, #49160	@ 0xc008
 8001c90:	4847      	ldr	r0, [pc, #284]	@ (8001db0 <MX_GPIO_Init+0x19c>)
 8001c92:	f004 f827 	bl	8005ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	21a2      	movs	r1, #162	@ 0xa2
 8001c9a:	4846      	ldr	r0, [pc, #280]	@ (8001db4 <MX_GPIO_Init+0x1a0>)
 8001c9c:	f004 f822 	bl	8005ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001caa:	f004 f81b 	bl	8005ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4841      	ldr	r0, [pc, #260]	@ (8001db8 <MX_GPIO_Init+0x1a4>)
 8001cb4:	f004 f816 	bl	8005ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 8001cb8:	f24c 0308 	movw	r3, #49160	@ 0xc008
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4837      	ldr	r0, [pc, #220]	@ (8001db0 <MX_GPIO_Init+0x19c>)
 8001cd2:	f003 fe6d 	bl	80059b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001cd6:	2330      	movs	r3, #48	@ 0x30
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4831      	ldr	r0, [pc, #196]	@ (8001db0 <MX_GPIO_Init+0x19c>)
 8001cec:	f003 fe60 	bl	80059b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 8001cf0:	23a2      	movs	r3, #162	@ 0xa2
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	482b      	ldr	r0, [pc, #172]	@ (8001db4 <MX_GPIO_Init+0x1a0>)
 8001d08:	f003 fe52 	bl	80059b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001d0c:	f240 4304 	movw	r3, #1028	@ 0x404
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4824      	ldr	r0, [pc, #144]	@ (8001db4 <MX_GPIO_Init+0x1a0>)
 8001d24:	f003 fe44 	bl	80059b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001d28:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d44:	f003 fe34 	bl	80059b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4816      	ldr	r0, [pc, #88]	@ (8001db8 <MX_GPIO_Init+0x1a4>)
 8001d60:	f003 fe26 	bl	80059b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2008      	movs	r0, #8
 8001d6a:	f002 fef8 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d6e:	2008      	movs	r0, #8
 8001d70:	f002 ff0f 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f002 fef0 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d7e:	200a      	movs	r0, #10
 8001d80:	f002 ff07 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2017      	movs	r0, #23
 8001d8a:	f002 fee8 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d8e:	2017      	movs	r0, #23
 8001d90:	f002 feff 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2028      	movs	r0, #40	@ 0x28
 8001d9a:	f002 fee0 	bl	8004b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d9e:	2028      	movs	r0, #40	@ 0x28
 8001da0:	f002 fef7 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	@ 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000400 	.word	0x48000400
 8001db8:	48000c00 	.word	0x48000c00

08001dbc <HAL_UART_TxCpltCallback>:
    // USART1 завершил прием данных
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
    // USART2 завершил отправку данных
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_MspInit+0x44>)
 8001de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e20 <HAL_MspInit+0x44>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_MspInit+0x44>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_MspInit+0x44>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_MspInit+0x44>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_MspInit+0x44>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e12:	f006 fded 	bl	80089f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0a0      	sub	sp, #128	@ 0x80
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	2254      	movs	r2, #84	@ 0x54
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00b fbef 	bl	800d628 <memset>
  if(hadc->Instance==ADC1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e52:	d154      	bne.n	8001efe <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e5a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f007 fb01 	bl	800946c <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e70:	f7ff ffae 	bl	8001dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e74:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea8:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_ADC_MspInit+0xe4>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <HAL_ADC_MspInit+0xe8>)
 8001ed0:	f003 fd6e 	bl	80059b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001ed4:	230e      	movs	r3, #14
 8001ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eea:	f003 fd61 	bl	80059b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2012      	movs	r0, #18
 8001ef4:	f002 fe33 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ef8:	2012      	movs	r0, #18
 8001efa:	f002 fe4a 	bl	8004b92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001efe:	bf00      	nop
 8001f00:	3780      	adds	r7, #128	@ 0x80
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000800 	.word	0x48000800

08001f10 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8002024 <HAL_COMP_MspInit+0x114>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d119      	bne.n	8001f66 <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a3c      	ldr	r2, [pc, #240]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f60:	f003 fd26 	bl	80059b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001f64:	e05a      	b.n	800201c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a30      	ldr	r2, [pc, #192]	@ (800202c <HAL_COMP_MspInit+0x11c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d119      	bne.n	8001fa4 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f74:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9e:	f003 fd07 	bl	80059b0 <HAL_GPIO_Init>
}
 8001fa2:	e03b      	b.n	800201c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <HAL_COMP_MspInit+0x120>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d118      	bne.n	8001fe0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4816      	ldr	r0, [pc, #88]	@ (8002034 <HAL_COMP_MspInit+0x124>)
 8001fda:	f003 fce9 	bl	80059b0 <HAL_GPIO_Init>
}
 8001fde:	e01d      	b.n	800201c <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <HAL_COMP_MspInit+0x128>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d118      	bne.n	800201c <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_COMP_MspInit+0x118>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 8002002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4807      	ldr	r0, [pc, #28]	@ (8002034 <HAL_COMP_MspInit+0x124>)
 8002018:	f003 fcca 	bl	80059b0 <HAL_GPIO_Init>
}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	@ 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40010204 	.word	0x40010204
 8002028:	40021000 	.word	0x40021000
 800202c:	40010208 	.word	0x40010208
 8002030:	4001020c 	.word	0x4001020c
 8002034:	48000400 	.word	0x48000400
 8002038:	40010214 	.word	0x40010214

0800203c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5c      	ldr	r2, [pc, #368]	@ (80021cc <HAL_DAC_MspInit+0x190>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f040 8086 	bne.w	800216c <HAL_DAC_MspInit+0x130>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002060:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	4a5a      	ldr	r2, [pc, #360]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206c:	4b58      	ldr	r3, [pc, #352]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b55      	ldr	r3, [pc, #340]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207c:	4a54      	ldr	r2, [pc, #336]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002084:	4b52      	ldr	r3, [pc, #328]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002090:	2320      	movs	r3, #32
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a6:	f003 fc83 	bl	80059b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel5;
 80020aa:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020ac:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_DAC_MspInit+0x19c>)
 80020ae:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80020b0:	4b48      	ldr	r3, [pc, #288]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020b2:	2207      	movs	r2, #7
 80020b4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b6:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020b8:	2210      	movs	r2, #16
 80020ba:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020bc:	4b45      	ldr	r3, [pc, #276]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80020c2:	4b44      	ldr	r3, [pc, #272]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020c8:	4b42      	ldr	r3, [pc, #264]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ce:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020d0:	4b40      	ldr	r3, [pc, #256]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020d6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80020d8:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020da:	2220      	movs	r2, #32
 80020dc:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80020e6:	483b      	ldr	r0, [pc, #236]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020e8:	f003 f930 	bl	800534c <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 80020f2:	f7ff fe6d 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a36      	ldr	r2, [pc, #216]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	4a35      	ldr	r2, [pc, #212]	@ (80021d4 <HAL_DAC_MspInit+0x198>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002102:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002104:	4a36      	ldr	r2, [pc, #216]	@ (80021e0 <HAL_DAC_MspInit+0x1a4>)
 8002106:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002108:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 800210a:	2206      	movs	r2, #6
 800210c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002110:	2210      	movs	r2, #16
 8002112:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002114:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800211a:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 800211c:	2280      	movs	r2, #128	@ 0x80
 800211e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002120:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002126:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002128:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 800212a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800212e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800213c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800213e:	4827      	ldr	r0, [pc, #156]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002140:	f003 f904 	bl	800534c <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 800214a:	f7ff fe41 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a22      	ldr	r2, [pc, #136]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <HAL_DAC_MspInit+0x1a0>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2036      	movs	r0, #54	@ 0x36
 8002160:	f002 fcfd 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002164:	2036      	movs	r0, #54	@ 0x36
 8002166:	f002 fd14 	bl	8004b92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 800216a:	e02a      	b.n	80021c2 <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_DAC_MspInit+0x1a8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10c      	bne.n	8002190 <HAL_DAC_MspInit+0x154>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
}
 800218e:	e018      	b.n	80021c2 <HAL_DAC_MspInit+0x186>
  else if(hdac->Instance==DAC3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <HAL_DAC_MspInit+0x1ac>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d113      	bne.n	80021c2 <HAL_DAC_MspInit+0x186>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_DAC_MspInit+0x194>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2036      	movs	r0, #54	@ 0x36
 80021b8:	f002 fcd1 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021bc:	2036      	movs	r0, #54	@ 0x36
 80021be:	f002 fce8 	bl	8004b92 <HAL_NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	@ 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	50000800 	.word	0x50000800
 80021d0:	40021000 	.word	0x40021000
 80021d4:	20000160 	.word	0x20000160
 80021d8:	40020058 	.word	0x40020058
 80021dc:	200001c0 	.word	0x200001c0
 80021e0:	4002001c 	.word	0x4002001c
 80021e4:	50000c00 	.word	0x50000c00
 80021e8:	50001000 	.word	0x50001000

080021ec <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_HRTIM_MspInit+0x54>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11b      	bne.n	8002236 <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_HRTIM_MspInit+0x58>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_HRTIM_MspInit+0x58>)
 8002204:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002208:	6613      	str	r3, [r2, #96]	@ 0x60
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_HRTIM_MspInit+0x58>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2043      	movs	r0, #67	@ 0x43
 800221c:	f002 fc9f 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8002220:	2043      	movs	r0, #67	@ 0x43
 8002222:	f002 fcb6 	bl	8004b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	204a      	movs	r0, #74	@ 0x4a
 800222c:	f002 fc97 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8002230:	204a      	movs	r0, #74	@ 0x4a
 8002232:	f002 fcae 	bl	8004b92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40016800 	.word	0x40016800
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a37      	ldr	r2, [pc, #220]	@ (8002344 <HAL_HRTIM_MspPostInit+0xfc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d167      	bne.n	800233a <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	4a36      	ldr	r2, [pc, #216]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002276:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228e:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	4a2a      	ldr	r2, [pc, #168]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a6:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <HAL_HRTIM_MspPostInit+0x100>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80022b2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022c4:	230d      	movs	r3, #13
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	481f      	ldr	r0, [pc, #124]	@ (800234c <HAL_HRTIM_MspPostInit+0x104>)
 80022d0:	f003 fb6e 	bl	80059b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80022d4:	23c0      	movs	r3, #192	@ 0xc0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80022e4:	230d      	movs	r3, #13
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4818      	ldr	r0, [pc, #96]	@ (8002350 <HAL_HRTIM_MspPostInit+0x108>)
 80022f0:	f003 fb5e 	bl	80059b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 80022f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8002306:	2303      	movs	r3, #3
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	480f      	ldr	r0, [pc, #60]	@ (8002350 <HAL_HRTIM_MspPostInit+0x108>)
 8002312:	f003 fb4d 	bl	80059b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8002316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8002328:	230d      	movs	r3, #13
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002336:	f003 fb3b 	bl	80059b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	@ 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40016800 	.word	0x40016800
 8002348:	40021000 	.word	0x40021000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800

08002354 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_TIM_PWM_MspInit+0x38>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10b      	bne.n	800237e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_TIM_PWM_MspInit+0x3c>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	4a09      	ldr	r2, [pc, #36]	@ (8002390 <HAL_TIM_PWM_MspInit+0x3c>)
 800236c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002370:	6613      	str	r3, [r2, #96]	@ 0x60
 8002372:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <HAL_TIM_PWM_MspInit+0x3c>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_TIM_Base_MspInit+0x98>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d13e      	bne.n	8002424 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023a6:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <HAL_TIM_Base_MspInit+0x9c>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	4a21      	ldr	r2, [pc, #132]	@ (8002430 <HAL_TIM_Base_MspInit+0x9c>)
 80023ac:	f043 0310 	orr.w	r3, r3, #16
 80023b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <HAL_TIM_Base_MspInit+0x9c>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel3;
 80023be:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002438 <HAL_TIM_Base_MspInit+0xa4>)
 80023c2:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023c6:	2208      	movs	r2, #8
 80023c8:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d0:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 80023d6:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023e2:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023e4:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ea:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023ee:	2220      	movs	r2, #32
 80023f0:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 80023f8:	480e      	ldr	r0, [pc, #56]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 80023fa:	f002 ffa7 	bl	800534c <HAL_DMA_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002404:	f7ff fce4 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 800240c:	621a      	str	r2, [r3, #32]
 800240e:	4a09      	ldr	r2, [pc, #36]	@ (8002434 <HAL_TIM_Base_MspInit+0xa0>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2036      	movs	r0, #54	@ 0x36
 800241a:	f002 fba0 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800241e:	2036      	movs	r0, #54	@ 0x36
 8002420:	f002 fbb7 	bl	8004b92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40001000 	.word	0x40001000
 8002430:	40021000 	.word	0x40021000
 8002434:	200003b4 	.word	0x200003b4
 8002438:	40020030 	.word	0x40020030

0800243c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <HAL_TIM_MspPostInit+0x68>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d11d      	bne.n	800249a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002488:	2306      	movs	r3, #6
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002496:	f003 fa8b 	bl	80059b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09e      	sub	sp, #120	@ 0x78
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	2254      	movs	r2, #84	@ 0x54
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00b f8ab 	bl	800d628 <memset>
  if(huart->Instance==USART3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	@ (800260c <HAL_UART_MspInit+0x160>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	f040 8092 	bne.w	8002602 <HAL_UART_MspInit+0x156>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024de:	2304      	movs	r3, #4
 80024e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f006 ffbe 	bl	800946c <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024f6:	f7ff fc6b 	bl	8001dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <HAL_UART_MspInit+0x164>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4a44      	ldr	r2, [pc, #272]	@ (8002610 <HAL_UART_MspInit+0x164>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	4b42      	ldr	r3, [pc, #264]	@ (8002610 <HAL_UART_MspInit+0x164>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002512:	4b3f      	ldr	r3, [pc, #252]	@ (8002610 <HAL_UART_MspInit+0x164>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	4a3e      	ldr	r2, [pc, #248]	@ (8002610 <HAL_UART_MspInit+0x164>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251e:	4b3c      	ldr	r3, [pc, #240]	@ (8002610 <HAL_UART_MspInit+0x164>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800252a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800252e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002538:	2301      	movs	r3, #1
 800253a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800253c:	2307      	movs	r3, #7
 800253e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002540:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002544:	4619      	mov	r1, r3
 8002546:	4833      	ldr	r0, [pc, #204]	@ (8002614 <HAL_UART_MspInit+0x168>)
 8002548:	f003 fa32 	bl	80059b0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800254c:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 800254e:	4a33      	ldr	r2, [pc, #204]	@ (800261c <HAL_UART_MspInit+0x170>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002554:	221c      	movs	r2, #28
 8002556:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256a:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002576:	4b28      	ldr	r3, [pc, #160]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002578:	2200      	movs	r2, #0
 800257a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002582:	4825      	ldr	r0, [pc, #148]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002584:	f002 fee2 	bl	800534c <HAL_DMA_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800258e:	f7ff fc1f 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 8002596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800259a:	4a1f      	ldr	r2, [pc, #124]	@ (8002618 <HAL_UART_MspInit+0x16c>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025a2:	4a20      	ldr	r2, [pc, #128]	@ (8002624 <HAL_UART_MspInit+0x178>)
 80025a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025a8:	221d      	movs	r2, #29
 80025aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025ae:	2210      	movs	r2, #16
 80025b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c4:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025d6:	4812      	ldr	r0, [pc, #72]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025d8:	f002 feb8 	bl	800534c <HAL_DMA_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80025e2:	f7ff fbf5 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <HAL_UART_MspInit+0x174>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2027      	movs	r0, #39	@ 0x27
 80025f8:	f002 fab1 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025fc:	2027      	movs	r0, #39	@ 0x27
 80025fe:	f002 fac8 	bl	8004b92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002602:	bf00      	nop
 8002604:	3778      	adds	r7, #120	@ 0x78
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40004800 	.word	0x40004800
 8002610:	40021000 	.word	0x40021000
 8002614:	48000800 	.word	0x48000800
 8002618:	200004a8 	.word	0x200004a8
 800261c:	40020008 	.word	0x40020008
 8002620:	20000508 	.word	0x20000508
 8002624:	40020044 	.word	0x40020044

08002628 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b098      	sub	sp, #96	@ 0x60
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2254      	movs	r2, #84	@ 0x54
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f00a fff5 	bl	800d628 <memset>
  if(hpcd->Instance==USB)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a15      	ldr	r2, [pc, #84]	@ (8002698 <HAL_PCD_MspInit+0x70>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d122      	bne.n	800268e <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800264c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800264e:	2300      	movs	r3, #0
 8002650:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4618      	mov	r0, r3
 8002658:	f006 ff08 	bl	800946c <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002662:	f7ff fbb5 	bl	8001dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_PCD_MspInit+0x74>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_PCD_MspInit+0x74>)
 800266c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <HAL_PCD_MspInit+0x74>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	2013      	movs	r0, #19
 8002684:	f002 fa6b 	bl	8004b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8002688:	2013      	movs	r0, #19
 800268a:	f002 fa82 	bl	8004b92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 800268e:	bf00      	nop
 8002690:	3760      	adds	r7, #96	@ 0x60
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40005c00 	.word	0x40005c00
 800269c:	40021000 	.word	0x40021000

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <NMI_Handler+0x4>

080026a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <MemManage_Handler+0x4>

080026b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f6:	f000 f927 	bl	8002948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}

080026fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 8002702:	2004      	movs	r0, #4
 8002704:	f003 fb06 	bl	8005d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 8002710:	2010      	movs	r0, #16
 8002712:	f003 faff 	bl	8005d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <DMA1_Channel1_IRQHandler+0x10>)
 8002722:	f002 fff6 	bl	8005712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200004a8 	.word	0x200004a8

08002730 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <DMA1_Channel2_IRQHandler+0x10>)
 8002736:	f002 ffec 	bl	8005712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200001c0 	.word	0x200001c0

08002744 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <DMA1_Channel3_IRQHandler+0x10>)
 800274a:	f002 ffe2 	bl	8005712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003b4 	.word	0x200003b4

08002758 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <DMA1_Channel4_IRQHandler+0x10>)
 800275e:	f002 ffd8 	bl	8005712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000508 	.word	0x20000508

0800276c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <DMA1_Channel5_IRQHandler+0x10>)
 8002772:	f002 ffce 	bl	8005712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000160 	.word	0x20000160

08002780 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <ADC1_2_IRQHandler+0x10>)
 8002786:	f000 fd19 	bl	80031bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000028 	.word	0x20000028

08002794 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <USB_HP_IRQHandler+0x10>)
 800279a:	f004 fe2d 	bl	80073f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000568 	.word	0x20000568

080027a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 80027ac:	2020      	movs	r0, #32
 80027ae:	f003 fab1 	bl	8005d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART3_IRQHandler+0x10>)
 80027be:	f008 fc27 	bl	800b010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000414 	.word	0x20000414

080027cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 80027d0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027d4:	f003 fa9e 	bl	8005d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e0:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <TIM6_DAC_IRQHandler+0x1c>)
 80027e2:	f007 fb3b 	bl	8009e5c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <TIM6_DAC_IRQHandler+0x20>)
 80027e8:	f002 fae4 	bl	8004db4 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 80027ec:	4804      	ldr	r0, [pc, #16]	@ (8002800 <TIM6_DAC_IRQHandler+0x24>)
 80027ee:	f002 fae1 	bl	8004db4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000368 	.word	0x20000368
 80027fc:	20000124 	.word	0x20000124
 8002800:	2000014c 	.word	0x2000014c

08002804 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8002808:	2106      	movs	r1, #6
 800280a:	4802      	ldr	r0, [pc, #8]	@ (8002814 <HRTIM1_Master_IRQHandler+0x10>)
 800280c:	f003 fd1b 	bl	8006246 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000220 	.word	0x20000220

08002818 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 800281c:	2105      	movs	r1, #5
 800281e:	4802      	ldr	r0, [pc, #8]	@ (8002828 <HRTIM1_TIMF_IRQHandler+0x10>)
 8002820:	f003 fd11 	bl	8006246 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000220 	.word	0x20000220

0800282c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002830:	4b06      	ldr	r3, [pc, #24]	@ (800284c <SystemInit+0x20>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	4a05      	ldr	r2, [pc, #20]	@ (800284c <SystemInit+0x20>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002850:	480d      	ldr	r0, [pc, #52]	@ (8002888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002852:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002854:	f7ff ffea 	bl	800282c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002858:	480c      	ldr	r0, [pc, #48]	@ (800288c <LoopForever+0x6>)
  ldr r1, =_edata
 800285a:	490d      	ldr	r1, [pc, #52]	@ (8002890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800285c:	4a0d      	ldr	r2, [pc, #52]	@ (8002894 <LoopForever+0xe>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002860:	e002      	b.n	8002868 <LoopCopyDataInit>

08002862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002866:	3304      	adds	r3, #4

08002868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800286c:	d3f9      	bcc.n	8002862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002870:	4c0a      	ldr	r4, [pc, #40]	@ (800289c <LoopForever+0x16>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002874:	e001      	b.n	800287a <LoopFillZerobss>

08002876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002878:	3204      	adds	r2, #4

0800287a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800287c:	d3fb      	bcc.n	8002876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287e:	f00a fedb 	bl	800d638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002882:	f7fe fb35 	bl	8000ef0 <main>

08002886 <LoopForever>:

LoopForever:
    b LoopForever
 8002886:	e7fe      	b.n	8002886 <LoopForever>
  ldr   r0, =_estack
 8002888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002894:	0800e910 	.word	0x0800e910
  ldr r2, =_sbss
 8002898:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800289c:	20000848 	.word	0x20000848

080028a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC3_IRQHandler>

080028a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f002 f94b 	bl	8004b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 f80e 	bl	80028d4 <HAL_InitTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	71fb      	strb	r3, [r7, #7]
 80028c2:	e001      	b.n	80028c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028c4:	f7ff fa8a 	bl	8001ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c8:	79fb      	ldrb	r3, [r7, #7]

}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028e0:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_InitTick+0x68>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d022      	beq.n	800292e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_InitTick+0x6c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_InitTick+0x68>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f956 	bl	8004bae <HAL_SYSTICK_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	d809      	bhi.n	8002922 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290e:	2200      	movs	r2, #0
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	f04f 30ff 	mov.w	r0, #4294967295
 8002916:	f002 f922 	bl	8004b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_InitTick+0x70>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e007      	b.n	8002932 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e004      	b.n	8002932 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e001      	b.n	8002932 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000008 	.word	0x20000008
 8002940:	20000000 	.word	0x20000000
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_IncTick+0x1c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_IncTick+0x20>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4413      	add	r3, r2
 8002956:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <HAL_IncTick+0x1c>)
 8002958:	6013      	str	r3, [r2, #0]
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	20000844 	.word	0x20000844
 8002968:	20000008 	.word	0x20000008

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000844 	.word	0x20000844

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d004      	beq.n	80029a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_Delay+0x40>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a8:	bf00      	nop
 80029aa:	f7ff ffdf 	bl	800296c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8f7      	bhi.n	80029aa <HAL_Delay+0x26>
  {
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000008 	.word	0x20000008

080029c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	609a      	str	r2, [r3, #8]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3360      	adds	r3, #96	@ 0x60
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <LL_ADC_SetOffset+0x44>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	03fff000 	.word	0x03fff000

08002a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3360      	adds	r3, #96	@ 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3360      	adds	r3, #96	@ 0x60
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b087      	sub	sp, #28
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3360      	adds	r3, #96	@ 0x60
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3360      	adds	r3, #96	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	615a      	str	r2, [r3, #20]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3330      	adds	r3, #48	@ 0x30
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	4413      	add	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	211f      	movs	r1, #31
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 011f 	and.w	r1, r3, #31
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0e5b      	lsrs	r3, r3, #25
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	0d1b      	lsrs	r3, r3, #20
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2107      	movs	r1, #7
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	401a      	ands	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	0d1b      	lsrs	r3, r3, #20
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	431a      	orrs	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0318 	and.w	r3, r3, #24
 8002c8a:	4908      	ldr	r1, [pc, #32]	@ (8002cac <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c8c:	40d9      	lsrs	r1, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	400b      	ands	r3, r1
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	0007ffff 	.word	0x0007ffff

08002cb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d98:	f043 0202 	orr.w	r2, r3, #2
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <LL_ADC_IsEnabled+0x18>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <LL_ADC_IsEnabled+0x1a>
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsDisableOngoing+0x18>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsDisableOngoing+0x1a>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d101      	bne.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d101      	bne.n	8002e36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1a9      	b.n	80031b2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe ffd9 	bl	8001e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff41 	bl	8002d0c <LL_ADC_IsDeepPowerDownEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff27 	bl	8002ce8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff5c 	bl	8002d5c <LL_ADC_IsInternalRegulatorEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d115      	bne.n	8002ed6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff40 	bl	8002d34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8003128 <HAL_ADC_Init+0x2e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	4a9c      	ldr	r2, [pc, #624]	@ (800312c <HAL_ADC_Init+0x2e8>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff3e 	bl	8002d5c <LL_ADC_IsInternalRegulatorEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff76 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 8142 	bne.w	80031a0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 813e 	bne.w	80031a0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f2c:	f043 0202 	orr.w	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff37 	bl	8002dac <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d141      	bne.n	8002fc8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_Init+0x114>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a77      	ldr	r2, [pc, #476]	@ (8003130 <HAL_ADC_Init+0x2ec>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10f      	bne.n	8002f78 <HAL_ADC_Init+0x134>
 8002f58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f5c:	f7ff ff26 	bl	8002dac <LL_ADC_IsEnabled>
 8002f60:	4604      	mov	r4, r0
 8002f62:	4873      	ldr	r0, [pc, #460]	@ (8003130 <HAL_ADC_Init+0x2ec>)
 8002f64:	f7ff ff22 	bl	8002dac <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_ADC_Init+0x15a>
 8002f78:	486e      	ldr	r0, [pc, #440]	@ (8003134 <HAL_ADC_Init+0x2f0>)
 8002f7a:	f7ff ff17 	bl	8002dac <LL_ADC_IsEnabled>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	486d      	ldr	r0, [pc, #436]	@ (8003138 <HAL_ADC_Init+0x2f4>)
 8002f82:	f7ff ff13 	bl	8002dac <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	431c      	orrs	r4, r3
 8002f8a:	486c      	ldr	r0, [pc, #432]	@ (800313c <HAL_ADC_Init+0x2f8>)
 8002f8c:	f7ff ff0e 	bl	8002dac <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4323      	orrs	r3, r4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_Init+0x172>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003130 <HAL_ADC_Init+0x2ec>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Init+0x176>
 8002fb6:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_ADC_Init+0x2fc>)
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_Init+0x178>
 8002fba:	4a62      	ldr	r2, [pc, #392]	@ (8003144 <HAL_ADC_Init+0x300>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff fd00 	bl	80029c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7f5b      	ldrb	r3, [r3, #29]
 8002fcc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fe6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d106      	bne.n	8003004 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	045b      	lsls	r3, r3, #17
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4b48      	ldr	r3, [pc, #288]	@ (8003148 <HAL_ADC_Init+0x304>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	430b      	orrs	r3, r1
 8003032:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fee5 	bl	8002e1e <LL_ADC_INJ_IsConversionOngoing>
 8003054:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d17f      	bne.n	800315c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d17c      	bne.n	800315c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003066:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800306e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800307e:	f023 0302 	bic.w	r3, r3, #2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	430b      	orrs	r3, r1
 800308a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6911      	ldr	r1, [r2, #16]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030c2:	e013      	b.n	80030ec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d12a      	bne.n	800314c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003118:	430a      	orrs	r2, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	e019      	b.n	800315c <HAL_ADC_Init+0x318>
 8003128:	20000000 	.word	0x20000000
 800312c:	053e2d63 	.word	0x053e2d63
 8003130:	50000100 	.word	0x50000100
 8003134:	50000400 	.word	0x50000400
 8003138:	50000500 	.word	0x50000500
 800313c:	50000600 	.word	0x50000600
 8003140:	50000300 	.word	0x50000300
 8003144:	50000700 	.word	0x50000700
 8003148:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f023 010f 	bic.w	r1, r3, #15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
 800317c:	e007      	b.n	800318e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 020f 	bic.w	r2, r2, #15
 800318c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800319e:	e007      	b.n	80031b0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f043 0210 	orr.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	bf00      	nop

080031bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_IRQHandler+0x30>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003420 <HAL_ADC_IRQHandler+0x264>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_IRQHandler+0x34>
 80031ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003424 <HAL_ADC_IRQHandler+0x268>)
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_IRQHandler+0x36>
 80031f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003428 <HAL_ADC_IRQHandler+0x26c>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd5c 	bl	8002cb0 <LL_ADC_GetMultimode>
 80031f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_ADC_IRQHandler+0x78>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ffc2 	bl	80041b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_ADC_IRQHandler+0x8c>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8094 	beq.w	800337c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 808e 	beq.w	800337c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fc75 	bl	8002b6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d072      	beq.n	800336e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a64      	ldr	r2, [pc, #400]	@ (8003420 <HAL_ADC_IRQHandler+0x264>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_ADC_IRQHandler+0xea>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_ADC_IRQHandler+0x270>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d002      	beq.n	80032a2 <HAL_ADC_IRQHandler+0xe6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e003      	b.n	80032aa <HAL_ADC_IRQHandler+0xee>
 80032a2:	4b63      	ldr	r3, [pc, #396]	@ (8003430 <HAL_ADC_IRQHandler+0x274>)
 80032a4:	e001      	b.n	80032aa <HAL_ADC_IRQHandler+0xee>
 80032a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d008      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d104      	bne.n	80032ce <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	e014      	b.n	80032f8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a53      	ldr	r2, [pc, #332]	@ (8003420 <HAL_ADC_IRQHandler+0x264>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_ADC_IRQHandler+0x130>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a53      	ldr	r2, [pc, #332]	@ (800342c <HAL_ADC_IRQHandler+0x270>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d002      	beq.n	80032e8 <HAL_ADC_IRQHandler+0x12c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_IRQHandler+0x134>
 80032e8:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <HAL_ADC_IRQHandler+0x274>)
 80032ea:	e001      	b.n	80032f0 <HAL_ADC_IRQHandler+0x134>
 80032ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d135      	bne.n	800336e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d12e      	bne.n	800336e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fd6f 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11a      	bne.n	8003356 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 020c 	bic.w	r2, r2, #12
 800332e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d112      	bne.n	800336e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003354:	e00b      	b.n	800336e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f984 	bl	800367c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	220c      	movs	r2, #12
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_ADC_IRQHandler+0x1d4>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80b3 	beq.w	8003502 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80ad 	beq.w	8003502 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fc10 	bl	8002bea <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fbcb 	bl	8002b6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a10      	ldr	r2, [pc, #64]	@ (8003420 <HAL_ADC_IRQHandler+0x264>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x23a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_ADC_IRQHandler+0x270>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d002      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x236>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	e003      	b.n	80033fa <HAL_ADC_IRQHandler+0x23e>
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <HAL_ADC_IRQHandler+0x274>)
 80033f4:	e001      	b.n	80033fa <HAL_ADC_IRQHandler+0x23e>
 80033f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4293      	cmp	r3, r2
 8003400:	d008      	beq.n	8003414 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d002      	beq.n	8003414 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b07      	cmp	r3, #7
 8003412:	d10f      	bne.n	8003434 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	e01f      	b.n	800345e <HAL_ADC_IRQHandler+0x2a2>
 800341e:	bf00      	nop
 8003420:	50000100 	.word	0x50000100
 8003424:	50000300 	.word	0x50000300
 8003428:	50000700 	.word	0x50000700
 800342c:	50000500 	.word	0x50000500
 8003430:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a8b      	ldr	r2, [pc, #556]	@ (8003668 <HAL_ADC_IRQHandler+0x4ac>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_ADC_IRQHandler+0x296>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a8a      	ldr	r2, [pc, #552]	@ (800366c <HAL_ADC_IRQHandler+0x4b0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d002      	beq.n	800344e <HAL_ADC_IRQHandler+0x292>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e003      	b.n	8003456 <HAL_ADC_IRQHandler+0x29a>
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_ADC_IRQHandler+0x4b4>)
 8003450:	e001      	b.n	8003456 <HAL_ADC_IRQHandler+0x29a>
 8003452:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003456:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d047      	beq.n	80034f4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_ADC_IRQHandler+0x2c2>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03f      	beq.n	80034f4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	d13a      	bne.n	80034f4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d133      	bne.n	80034f4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12e      	bne.n	80034f4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fcbf 	bl	8002e1e <LL_ADC_INJ_IsConversionOngoing>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11a      	bne.n	80034dc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d112      	bne.n	80034f4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034da:	e00b      	b.n	80034f4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f043 0210 	orr.w	r2, r3, #16
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fe33 	bl	8004160 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2260      	movs	r2, #96	@ 0x60
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d011      	beq.n	8003530 <HAL_ADC_IRQHandler+0x374>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8b4 	bl	8003690 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2280      	movs	r2, #128	@ 0x80
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_ADC_IRQHandler+0x3a4>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fe19 	bl	8004188 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <HAL_ADC_IRQHandler+0x3d4>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fe0b 	bl	800419c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d043      	beq.n	8003622 <HAL_ADC_IRQHandler+0x466>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03e      	beq.n	8003622 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80035ac:	2301      	movs	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b0:	e021      	b.n	80035f6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c0:	d004      	beq.n	80035cc <HAL_ADC_IRQHandler+0x410>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <HAL_ADC_IRQHandler+0x4ac>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x414>
 80035cc:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <HAL_ADC_IRQHandler+0x4b8>)
 80035ce:	e000      	b.n	80035d2 <HAL_ADC_IRQHandler+0x416>
 80035d0:	4b29      	ldr	r3, [pc, #164]	@ (8003678 <HAL_ADC_IRQHandler+0x4bc>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fb7a 	bl	8002ccc <LL_ADC_GetMultiDMATransfer>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035de:	2301      	movs	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	e008      	b.n	80035f6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035f2:	2301      	movs	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10e      	bne.n	800361a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f043 0202 	orr.w	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f845 	bl	80036a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2210      	movs	r2, #16
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d018      	beq.n	800365e <HAL_ADC_IRQHandler+0x4a2>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003656:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fd8b 	bl	8004174 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	@ 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	50000100 	.word	0x50000100
 800366c:	50000500 	.word	0x50000500
 8003670:	50000400 	.word	0x50000400
 8003674:	50000300 	.word	0x50000300
 8003678:	50000700 	.word	0x50000700

0800367c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0b6      	sub	sp, #216	@ 0xd8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x24>
 80036d6:	2302      	movs	r3, #2
 80036d8:	f000 bc13 	b.w	8003f02 <HAL_ADC_ConfigChannel+0x84a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fb85 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 83f3 	bne.w	8003edc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f7ff fa45 	bl	8002b92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fb73 	bl	8002df8 <LL_ADC_REG_IsConversionOngoing>
 8003712:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fb7f 	bl	8002e1e <LL_ADC_INJ_IsConversionOngoing>
 8003720:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 81d9 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800372e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 81d4 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003740:	d10f      	bne.n	8003762 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	4619      	mov	r1, r3
 800374e:	f7ff fa5f 	bl	8002c10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff f9f3 	bl	8002b46 <LL_ADC_SetSamplingTimeCommonConfig>
 8003760:	e00e      	b.n	8003780 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	461a      	mov	r2, r3
 8003770:	f7ff fa4e 	bl	8002c10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff f9e3 	bl	8002b46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d022      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6919      	ldr	r1, [r3, #16]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037b2:	f7ff f93d 	bl	8002a30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f7ff f989 	bl	8002ada <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d102      	bne.n	80037de <HAL_ADC_ConfigChannel+0x126>
 80037d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037dc:	e000      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x128>
 80037de:	2300      	movs	r3, #0
 80037e0:	461a      	mov	r2, r3
 80037e2:	f7ff f995 	bl	8002b10 <LL_ADC_SetOffsetSaturation>
 80037e6:	e17b      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f942 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x15c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f937 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 800380a:	4603      	mov	r3, r0
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	f003 021f 	and.w	r2, r3, #31
 8003812:	e01e      	b.n	8003852 <HAL_ADC_ConfigChannel+0x19a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f92c 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003836:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800383a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e004      	b.n	8003850 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <HAL_ADC_ConfigChannel+0x1b2>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0e9b      	lsrs	r3, r3, #26
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	e018      	b.n	800389c <HAL_ADC_ConfigChannel+0x1e4>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800387e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800388e:	2320      	movs	r3, #32
 8003890:	e004      	b.n	800389c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800389c:	429a      	cmp	r2, r3
 800389e:	d106      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f8fb 	bl	8002aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f8df 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_ADC_ConfigChannel+0x222>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f8d4 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	e01e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x260>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f8c9 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e004      	b.n	8003916 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800390c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x278>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	e018      	b.n	8003962 <HAL_ADC_ConfigChannel+0x2aa>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003944:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800394c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e004      	b.n	8003962 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003962:	429a      	cmp	r2, r3
 8003964:	d106      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f898 	bl	8002aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f87c 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x2e8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2102      	movs	r1, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f871 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	f003 021f 	and.w	r2, r3, #31
 800399e:	e01e      	b.n	80039de <HAL_ADC_ConfigChannel+0x326>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f866 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e004      	b.n	80039dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x33e>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	e016      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x36c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e004      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d106      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f837 	bl	8002aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2103      	movs	r1, #3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff f81b 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x3aa>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2103      	movs	r1, #3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f810 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	0e9b      	lsrs	r3, r3, #26
 8003a5c:	f003 021f 	and.w	r2, r3, #31
 8003a60:	e017      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x3da>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2103      	movs	r1, #3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f805 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e003      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x3f2>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	e011      	b.n	8003ace <HAL_ADC_ConfigChannel+0x416>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e003      	b.n	8003ace <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d106      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe ffe2 	bl	8002aa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f961 	bl	8002dac <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f040 813d 	bne.w	8003d6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7ff f8b2 	bl	8002c68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4aa2      	ldr	r2, [pc, #648]	@ (8003d94 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f040 812e 	bne.w	8003d6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x480>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	3301      	adds	r3, #1
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2b09      	cmp	r3, #9
 8003b2e:	bf94      	ite	ls
 8003b30:	2301      	movls	r3, #1
 8003b32:	2300      	movhi	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e019      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x4b4>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b50:	2320      	movs	r3, #32
 8003b52:	e003      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2b09      	cmp	r3, #9
 8003b64:	bf94      	ite	ls
 8003b66:	2301      	movls	r3, #1
 8003b68:	2300      	movhi	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d079      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x4d4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	3301      	adds	r3, #1
 8003b84:	069b      	lsls	r3, r3, #26
 8003b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b8a:	e015      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x500>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e003      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x520>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	e017      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x550>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e003      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x576>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	051b      	lsls	r3, r3, #20
 8003c2c:	e018      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x5a8>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c46:	2320      	movs	r3, #32
 8003c48:	e003      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c60:	430b      	orrs	r3, r1
 8003c62:	e07e      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x5c8>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	0e9b      	lsrs	r3, r3, #26
 8003c76:	3301      	adds	r3, #1
 8003c78:	069b      	lsls	r3, r3, #26
 8003c7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7e:	e015      	b.n	8003cac <HAL_ADC_ConfigChannel+0x5f4>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	069b      	lsls	r3, r3, #26
 8003ca8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x614>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	e017      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x644>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e003      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10d      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x670>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	051b      	lsls	r3, r3, #20
 8003d22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	e01b      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x6a8>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	613b      	str	r3, [r7, #16]
  return result;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f003 021f 	and.w	r2, r3, #31
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	3b1e      	subs	r3, #30
 8003d5a:	051b      	lsls	r3, r3, #20
 8003d5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fe ff52 	bl	8002c10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80be 	beq.w	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d82:	d004      	beq.n	8003d8e <HAL_ADC_ConfigChannel+0x6d6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a04      	ldr	r2, [pc, #16]	@ (8003d9c <HAL_ADC_ConfigChannel+0x6e4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10a      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x6ec>
 8003d8e:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d90:	e009      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x6ee>
 8003d92:	bf00      	nop
 8003d94:	407f0000 	.word	0x407f0000
 8003d98:	80080000 	.word	0x80080000
 8003d9c:	50000100 	.word	0x50000100
 8003da0:	50000300 	.word	0x50000300
 8003da4:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_ADC_ConfigChannel+0x854>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fe34 	bl	8002a14 <LL_ADC_GetCommonPathInternalCh>
 8003dac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a56      	ldr	r2, [pc, #344]	@ (8003f10 <HAL_ADC_ConfigChannel+0x858>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x70c>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	@ (8003f14 <HAL_ADC_ConfigChannel+0x85c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d13a      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d134      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd8:	d005      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x72e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4e      	ldr	r2, [pc, #312]	@ (8003f18 <HAL_ADC_ConfigChannel+0x860>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	f040 8085 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dee:	d004      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0x742>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a49      	ldr	r2, [pc, #292]	@ (8003f1c <HAL_ADC_ConfigChannel+0x864>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x746>
 8003dfa:	4a49      	ldr	r2, [pc, #292]	@ (8003f20 <HAL_ADC_ConfigChannel+0x868>)
 8003dfc:	e000      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x748>
 8003dfe:	4a43      	ldr	r2, [pc, #268]	@ (8003f0c <HAL_ADC_ConfigChannel+0x854>)
 8003e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fe fdef 	bl	80029ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e10:	4b44      	ldr	r3, [pc, #272]	@ (8003f24 <HAL_ADC_ConfigChannel+0x86c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	4a44      	ldr	r2, [pc, #272]	@ (8003f28 <HAL_ADC_ConfigChannel+0x870>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e38:	e05a      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f2c <HAL_ADC_ConfigChannel+0x874>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d125      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11f      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <HAL_ADC_ConfigChannel+0x864>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d104      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x7ac>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a34      	ldr	r2, [pc, #208]	@ (8003f30 <HAL_ADC_ConfigChannel+0x878>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d047      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e6c:	d004      	beq.n	8003e78 <HAL_ADC_ConfigChannel+0x7c0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <HAL_ADC_ConfigChannel+0x864>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x7c4>
 8003e78:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <HAL_ADC_ConfigChannel+0x868>)
 8003e7a:	e000      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x7c6>
 8003e7c:	4a23      	ldr	r2, [pc, #140]	@ (8003f0c <HAL_ADC_ConfigChannel+0x854>)
 8003e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7fe fdb0 	bl	80029ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e8e:	e031      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <HAL_ADC_ConfigChannel+0x87c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d12d      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d127      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <HAL_ADC_ConfigChannel+0x864>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb8:	d004      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0x80c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <HAL_ADC_ConfigChannel+0x864>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x810>
 8003ec4:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <HAL_ADC_ConfigChannel+0x868>)
 8003ec6:	e000      	b.n	8003eca <HAL_ADC_ConfigChannel+0x812>
 8003ec8:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <HAL_ADC_ConfigChannel+0x854>)
 8003eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe fd8a 	bl	80029ee <LL_ADC_SetCommonPathInternalCh>
 8003eda:	e00c      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003eee:	e002      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003efe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	37d8      	adds	r7, #216	@ 0xd8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	50000700 	.word	0x50000700
 8003f10:	c3210000 	.word	0xc3210000
 8003f14:	90c00010 	.word	0x90c00010
 8003f18:	50000600 	.word	0x50000600
 8003f1c:	50000100 	.word	0x50000100
 8003f20:	50000300 	.word	0x50000300
 8003f24:	20000000 	.word	0x20000000
 8003f28:	053e2d63 	.word	0x053e2d63
 8003f2c:	c7520000 	.word	0xc7520000
 8003f30:	50000500 	.word	0x50000500
 8003f34:	cb840000 	.word	0xcb840000

08003f38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ff44 	bl	8002dd2 <LL_ADC_IsDisableOngoing>
 8003f4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe ff2b 	bl	8002dac <LL_ADC_IsEnabled>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d047      	beq.n	8003fec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d144      	bne.n	8003fec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030d 	and.w	r3, r3, #13
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe ff05 	bl	8002d84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f82:	f7fe fcf3 	bl	800296c <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f88:	e029      	b.n	8003fde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e023      	b.n	8003fee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fa6:	f7fe fce1 	bl	800296c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d914      	bls.n	8003fde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc6:	f043 0210 	orr.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e007      	b.n	8003fee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1dc      	bne.n	8003fa6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <LL_ADC_IsEnabled>:
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <LL_ADC_IsEnabled+0x18>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <LL_ADC_IsEnabled+0x1a>
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_ADC_StartCalibration>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800402e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004038:	4313      	orrs	r3, r2
 800403a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	609a      	str	r2, [r3, #8]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_ADC_IsCalibrationOnGoing>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800405e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004062:	d101      	bne.n	8004068 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_ADC_REG_IsConversionOngoing>:
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d101      	bne.n	800408e <LL_ADC_REG_IsConversionOngoing+0x18>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e04d      	b.n	8004154 <HAL_ADCEx_Calibration_Start+0xb8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff39 	bl	8003f38 <ADC_Disable>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d136      	bne.n	800413e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040d8:	f023 0302 	bic.w	r3, r3, #2
 80040dc:	f043 0202 	orr.w	r2, r3, #2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff96 	bl	800401c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040f0:	e014      	b.n	800411c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a18      	ldr	r2, [pc, #96]	@ (800415c <HAL_ADCEx_Calibration_Start+0xc0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90d      	bls.n	800411c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f023 0312 	bic.w	r3, r3, #18
 8004108:	f043 0210 	orr.w	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e01b      	b.n	8004154 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff94 	bl	800404e <LL_ADC_IsCalibrationOnGoing>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e2      	bne.n	80040f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	f023 0303 	bic.w	r3, r3, #3
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800413c:	e005      	b.n	800414a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004142:	f043 0210 	orr.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	0004de01 	.word	0x0004de01

08004160 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b0a1      	sub	sp, #132	@ 0x84
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0e7      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80041ea:	2300      	movs	r3, #0
 80041ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80041ee:	2300      	movs	r3, #0
 80041f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fa:	d102      	bne.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041fc:	4b6f      	ldr	r3, [pc, #444]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	e009      	b.n	8004216 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6e      	ldr	r2, [pc, #440]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d102      	bne.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800420c:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e001      	b.n	8004216 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0be      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff1d 	bl	8004076 <LL_ADC_REG_IsConversionOngoing>
 800423c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff17 	bl	8004076 <LL_ADC_REG_IsConversionOngoing>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 80a0 	bne.w	8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 809c 	bne.w	8004390 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004260:	d004      	beq.n	800426c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a55      	ldr	r2, [pc, #340]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800426c:	4b56      	ldr	r3, [pc, #344]	@ (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800426e:	e000      	b.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004270:	4b56      	ldr	r3, [pc, #344]	@ (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004272:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04b      	beq.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800427c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800428e:	035b      	lsls	r3, r3, #13
 8004290:	430b      	orrs	r3, r1
 8004292:	431a      	orrs	r2, r3
 8004294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004296:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a0:	d004      	beq.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a45      	ldr	r2, [pc, #276]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10f      	bne.n	80042cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042b0:	f7ff fea1 	bl	8003ff6 <LL_ADC_IsEnabled>
 80042b4:	4604      	mov	r4, r0
 80042b6:	4841      	ldr	r0, [pc, #260]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042b8:	f7ff fe9d 	bl	8003ff6 <LL_ADC_IsEnabled>
 80042bc:	4603      	mov	r3, r0
 80042be:	4323      	orrs	r3, r4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e012      	b.n	80042f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80042cc:	483c      	ldr	r0, [pc, #240]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042ce:	f7ff fe92 	bl	8003ff6 <LL_ADC_IsEnabled>
 80042d2:	4604      	mov	r4, r0
 80042d4:	483b      	ldr	r0, [pc, #236]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042d6:	f7ff fe8e 	bl	8003ff6 <LL_ADC_IsEnabled>
 80042da:	4603      	mov	r3, r0
 80042dc:	431c      	orrs	r4, r3
 80042de:	483c      	ldr	r0, [pc, #240]	@ (80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042e0:	f7ff fe89 	bl	8003ff6 <LL_ADC_IsEnabled>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4323      	orrs	r3, r4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d056      	beq.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042fe:	f023 030f 	bic.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	430a      	orrs	r2, r1
 800430c:	431a      	orrs	r2, r3
 800430e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004310:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004312:	e047      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800431c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004328:	d004      	beq.n	8004334 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10f      	bne.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004334:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004338:	f7ff fe5d 	bl	8003ff6 <LL_ADC_IsEnabled>
 800433c:	4604      	mov	r4, r0
 800433e:	481f      	ldr	r0, [pc, #124]	@ (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004340:	f7ff fe59 	bl	8003ff6 <LL_ADC_IsEnabled>
 8004344:	4603      	mov	r3, r0
 8004346:	4323      	orrs	r3, r4
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e012      	b.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004354:	481a      	ldr	r0, [pc, #104]	@ (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004356:	f7ff fe4e 	bl	8003ff6 <LL_ADC_IsEnabled>
 800435a:	4604      	mov	r4, r0
 800435c:	4819      	ldr	r0, [pc, #100]	@ (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800435e:	f7ff fe4a 	bl	8003ff6 <LL_ADC_IsEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	431c      	orrs	r4, r3
 8004366:	481a      	ldr	r0, [pc, #104]	@ (80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004368:	f7ff fe45 	bl	8003ff6 <LL_ADC_IsEnabled>
 800436c:	4603      	mov	r3, r0
 800436e:	4323      	orrs	r3, r4
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800437e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004386:	f023 030f 	bic.w	r3, r3, #15
 800438a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800438c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800438e:	e009      	b.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80043a2:	e000      	b.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3784      	adds	r7, #132	@ 0x84
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	50000100 	.word	0x50000100
 80043c0:	50000400 	.word	0x50000400
 80043c4:	50000500 	.word	0x50000500
 80043c8:	50000300 	.word	0x50000300
 80043cc:	50000700 	.word	0x50000700
 80043d0:	50000600 	.word	0x50000600

080043d4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40010400 	.word	0x40010400

080043f8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <LL_EXTI_EnableIT_32_63+0x20>)
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <LL_EXTI_EnableIT_32_63+0x20>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	620b      	str	r3, [r1, #32]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40010400 	.word	0x40010400

0800441c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <LL_EXTI_DisableIT_0_31+0x24>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	43db      	mvns	r3, r3
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <LL_EXTI_DisableIT_0_31+0x24>)
 800442e:	4013      	ands	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010400 	.word	0x40010400

08004444 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800444c:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <LL_EXTI_DisableIT_32_63+0x24>)
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	43db      	mvns	r3, r3
 8004454:	4904      	ldr	r1, [pc, #16]	@ (8004468 <LL_EXTI_DisableIT_32_63+0x24>)
 8004456:	4013      	ands	r3, r2
 8004458:	620b      	str	r3, [r1, #32]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010400 	.word	0x40010400

0800446c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	4904      	ldr	r1, [pc, #16]	@ (800448c <LL_EXTI_EnableEvent_0_31+0x20>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]

}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40010400 	.word	0x40010400

08004490 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800449a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800449c:	4904      	ldr	r1, [pc, #16]	@ (80044b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40010400 	.word	0x40010400

080044b4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	4904      	ldr	r1, [pc, #16]	@ (80044d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010400 	.word	0x40010400

080044dc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80044e4:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <LL_EXTI_DisableEvent_32_63+0x24>)
 80044e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	4904      	ldr	r1, [pc, #16]	@ (8004500 <LL_EXTI_DisableEvent_32_63+0x24>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010400 	.word	0x40010400

08004504 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4904      	ldr	r1, [pc, #16]	@ (8004524 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]

}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40010400 	.word	0x40010400

08004528 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4313      	orrs	r3, r2
 800453a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40010400 	.word	0x40010400

0800454c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	43db      	mvns	r3, r3
 800455c:	4904      	ldr	r1, [pc, #16]	@ (8004570 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800455e:	4013      	ands	r3, r2
 8004560:	608b      	str	r3, [r1, #8]

}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010400 	.word	0x40010400

08004574 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800457e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	43db      	mvns	r3, r3
 8004584:	4904      	ldr	r1, [pc, #16]	@ (8004598 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004586:	4013      	ands	r3, r2
 8004588:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010400 	.word	0x40010400

0800459c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4904      	ldr	r1, [pc, #16]	@ (80045bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40010400 	.word	0x40010400

080045c0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045cc:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40010400 	.word	0x40010400

080045e4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	4904      	ldr	r1, [pc, #16]	@ (8004608 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	60cb      	str	r3, [r1, #12]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010400 	.word	0x40010400

0800460c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	43db      	mvns	r3, r3
 800461c:	4904      	ldr	r1, [pc, #16]	@ (8004630 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800461e:	4013      	ands	r3, r2
 8004620:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010400 	.word	0x40010400

08004634 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6153      	str	r3, [r2, #20]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010400 	.word	0x40010400

08004654 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010400 	.word	0x40010400

08004674 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e181      	b.n	8004994 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800469a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800469e:	d102      	bne.n	80046a6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e176      	b.n	8004994 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7f5b      	ldrb	r3, [r3, #29]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fd fc27 	bl	8001f10 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046cc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b90      	ldr	r3, [pc, #576]	@ (8004934 <HAL_COMP_Init+0x2c0>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_COMP_Init+0xc8>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d113      	bne.n	800473c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004714:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_COMP_Init+0x2c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	4a88      	ldr	r2, [pc, #544]	@ (800493c <HAL_COMP_Init+0x2c8>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800472e:	e002      	b.n	8004736 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3b01      	subs	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f9      	bne.n	8004730 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7f      	ldr	r2, [pc, #508]	@ (8004940 <HAL_COMP_Init+0x2cc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d028      	beq.n	8004798 <HAL_COMP_Init+0x124>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7e      	ldr	r2, [pc, #504]	@ (8004944 <HAL_COMP_Init+0x2d0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d020      	beq.n	8004792 <HAL_COMP_Init+0x11e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_COMP_Init+0x2d4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_COMP_Init+0x118>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7b      	ldr	r2, [pc, #492]	@ (800494c <HAL_COMP_Init+0x2d8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d010      	beq.n	8004786 <HAL_COMP_Init+0x112>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a79      	ldr	r2, [pc, #484]	@ (8004950 <HAL_COMP_Init+0x2dc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d008      	beq.n	8004780 <HAL_COMP_Init+0x10c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a78      	ldr	r2, [pc, #480]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_COMP_Init+0x108>
 8004778:	2301      	movs	r3, #1
 800477a:	e00f      	b.n	800479c <HAL_COMP_Init+0x128>
 800477c:	2302      	movs	r3, #2
 800477e:	e00d      	b.n	800479c <HAL_COMP_Init+0x128>
 8004780:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004784:	e00a      	b.n	800479c <HAL_COMP_Init+0x128>
 8004786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800478a:	e007      	b.n	800479c <HAL_COMP_Init+0x128>
 800478c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004790:	e004      	b.n	800479c <HAL_COMP_Init+0x128>
 8004792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004796:	e001      	b.n	800479c <HAL_COMP_Init+0x128>
 8004798:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800479c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80b6 	beq.w	8004918 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d011      	beq.n	80047dc <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_COMP_Init+0x158>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a64      	ldr	r2, [pc, #400]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f7ff feab 	bl	8004528 <LL_EXTI_EnableRisingTrig_32_63>
 80047d2:	e014      	b.n	80047fe <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80047d4:	6938      	ldr	r0, [r7, #16]
 80047d6:	f7ff fe95 	bl	8004504 <LL_EXTI_EnableRisingTrig_0_31>
 80047da:	e010      	b.n	80047fe <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_COMP_Init+0x17c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80047f0:	6938      	ldr	r0, [r7, #16]
 80047f2:	f7ff febf 	bl	8004574 <LL_EXTI_DisableRisingTrig_32_63>
 80047f6:	e002      	b.n	80047fe <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80047f8:	6938      	ldr	r0, [r7, #16]
 80047fa:	f7ff fea7 	bl	800454c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a51      	ldr	r2, [pc, #324]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_COMP_Init+0x1aa>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a4f      	ldr	r2, [pc, #316]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d103      	bne.n	8004826 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800481e:	6938      	ldr	r0, [r7, #16]
 8004820:	f7ff fece 	bl	80045c0 <LL_EXTI_EnableFallingTrig_32_63>
 8004824:	e014      	b.n	8004850 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004826:	6938      	ldr	r0, [r7, #16]
 8004828:	f7ff feb8 	bl	800459c <LL_EXTI_EnableFallingTrig_0_31>
 800482c:	e010      	b.n	8004850 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a48      	ldr	r2, [pc, #288]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_COMP_Init+0x1ce>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a46      	ldr	r2, [pc, #280]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d103      	bne.n	800484a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004842:	6938      	ldr	r0, [r7, #16]
 8004844:	f7ff fee2 	bl	800460c <LL_EXTI_DisableFallingTrig_32_63>
 8004848:	e002      	b.n	8004850 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800484a:	6938      	ldr	r0, [r7, #16]
 800484c:	f7ff feca 	bl	80045e4 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_COMP_Init+0x1f0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3e      	ldr	r2, [pc, #248]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004864:	6938      	ldr	r0, [r7, #16]
 8004866:	f7ff fef5 	bl	8004654 <LL_EXTI_ClearFlag_32_63>
 800486a:	e002      	b.n	8004872 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800486c:	6938      	ldr	r0, [r7, #16]
 800486e:	f7ff fee1 	bl	8004634 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a34      	ldr	r2, [pc, #208]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_COMP_Init+0x21e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a32      	ldr	r2, [pc, #200]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d103      	bne.n	800489a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f7ff fdfc 	bl	8004490 <LL_EXTI_EnableEvent_32_63>
 8004898:	e014      	b.n	80048c4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f7ff fde6 	bl	800446c <LL_EXTI_EnableEvent_0_31>
 80048a0:	e010      	b.n	80048c4 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_COMP_Init+0x242>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a29      	ldr	r2, [pc, #164]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d103      	bne.n	80048be <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f7ff fe10 	bl	80044dc <LL_EXTI_DisableEvent_32_63>
 80048bc:	e002      	b.n	80048c4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80048be:	6938      	ldr	r0, [r7, #16]
 80048c0:	f7ff fdf8 	bl	80044b4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d011      	beq.n	80048f4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_COMP_Init+0x270>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80048e4:	6938      	ldr	r0, [r7, #16]
 80048e6:	f7ff fd87 	bl	80043f8 <LL_EXTI_EnableIT_32_63>
 80048ea:	e04b      	b.n	8004984 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80048ec:	6938      	ldr	r0, [r7, #16]
 80048ee:	f7ff fd71 	bl	80043d4 <LL_EXTI_EnableIT_0_31>
 80048f2:	e047      	b.n	8004984 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_COMP_Init+0x294>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004908:	6938      	ldr	r0, [r7, #16]
 800490a:	f7ff fd9b 	bl	8004444 <LL_EXTI_DisableIT_32_63>
 800490e:	e039      	b.n	8004984 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004910:	6938      	ldr	r0, [r7, #16]
 8004912:	f7ff fd83 	bl	800441c <LL_EXTI_DisableIT_0_31>
 8004916:	e035      	b.n	8004984 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <HAL_COMP_Init+0x2e0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_COMP_Init+0x2b8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0c      	ldr	r2, [pc, #48]	@ (8004958 <HAL_COMP_Init+0x2e4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d117      	bne.n	800495c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800492c:	6938      	ldr	r0, [r7, #16]
 800492e:	f7ff fdd5 	bl	80044dc <LL_EXTI_DisableEvent_32_63>
 8004932:	e016      	b.n	8004962 <HAL_COMP_Init+0x2ee>
 8004934:	ff007e0f 	.word	0xff007e0f
 8004938:	20000000 	.word	0x20000000
 800493c:	053e2d63 	.word	0x053e2d63
 8004940:	40010200 	.word	0x40010200
 8004944:	40010204 	.word	0x40010204
 8004948:	40010208 	.word	0x40010208
 800494c:	4001020c 	.word	0x4001020c
 8004950:	40010210 	.word	0x40010210
 8004954:	40010214 	.word	0x40010214
 8004958:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800495c:	6938      	ldr	r0, [r7, #16]
 800495e:	f7ff fda9 	bl	80044b4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0e      	ldr	r2, [pc, #56]	@ (80049a0 <HAL_COMP_Init+0x32c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_COMP_Init+0x302>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0c      	ldr	r2, [pc, #48]	@ (80049a4 <HAL_COMP_Init+0x330>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d103      	bne.n	800497e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004976:	6938      	ldr	r0, [r7, #16]
 8004978:	f7ff fd64 	bl	8004444 <LL_EXTI_DisableIT_32_63>
 800497c:	e002      	b.n	8004984 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800497e:	6938      	ldr	r0, [r7, #16]
 8004980:	f7ff fd4c 	bl	800441c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	7f5b      	ldrb	r3, [r3, #29]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004994:	7ffb      	ldrb	r3, [r7, #31]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40010214 	.word	0x40010214
 80049a4:	40010218 	.word	0x40010218

080049a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b8:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <__NVIC_SetPriorityGrouping+0x44>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049c4:	4013      	ands	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049da:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <__NVIC_SetPriorityGrouping+0x44>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	60d3      	str	r3, [r2, #12]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f4:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <__NVIC_GetPriorityGrouping+0x18>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	f003 0307 	and.w	r3, r3, #7
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db0b      	blt.n	8004a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4907      	ldr	r1, [pc, #28]	@ (8004a44 <__NVIC_EnableIRQ+0x38>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000e100 	.word	0xe000e100

08004a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	6039      	str	r1, [r7, #0]
 8004a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db0a      	blt.n	8004a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	490c      	ldr	r1, [pc, #48]	@ (8004a94 <__NVIC_SetPriority+0x4c>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a70:	e00a      	b.n	8004a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4908      	ldr	r1, [pc, #32]	@ (8004a98 <__NVIC_SetPriority+0x50>)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	0112      	lsls	r2, r2, #4
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	440b      	add	r3, r1
 8004a86:	761a      	strb	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000e100 	.word	0xe000e100
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	@ 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f1c3 0307 	rsb	r3, r3, #7
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	bf28      	it	cs
 8004aba:	2304      	movcs	r3, #4
 8004abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d902      	bls.n	8004acc <NVIC_EncodePriority+0x30>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3b03      	subs	r3, #3
 8004aca:	e000      	b.n	8004ace <NVIC_EncodePriority+0x32>
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	401a      	ands	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	43d9      	mvns	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af4:	4313      	orrs	r3, r2
         );
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	@ 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b14:	d301      	bcc.n	8004b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00f      	b.n	8004b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <SysTick_Config+0x40>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b22:	210f      	movs	r1, #15
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	f7ff ff8e 	bl	8004a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <SysTick_Config+0x40>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b32:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <SysTick_Config+0x40>)
 8004b34:	2207      	movs	r2, #7
 8004b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	e000e010 	.word	0xe000e010

08004b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff29 	bl	80049a8 <__NVIC_SetPriorityGrouping>
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b6c:	f7ff ff40 	bl	80049f0 <__NVIC_GetPriorityGrouping>
 8004b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7ff ff90 	bl	8004a9c <NVIC_EncodePriority>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff5f 	bl	8004a48 <__NVIC_SetPriority>
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff33 	bl	8004a0c <__NVIC_EnableIRQ>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ffa4 	bl	8004b04 <SysTick_Config>
 8004bbc:	4603      	mov	r3, r0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e014      	b.n	8004c02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	791b      	ldrb	r3, [r3, #4]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd fa27 	bl	800203c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0b2      	b.n	8004d8a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	795b      	ldrb	r3, [r3, #5]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_DAC_Start_DMA+0x24>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0ac      	b.n	8004d8a <HAL_DAC_Start_DMA+0x17e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d129      	bne.n	8004c96 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a53      	ldr	r2, [pc, #332]	@ (8004d94 <HAL_DAC_Start_DMA+0x188>)
 8004c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <HAL_DAC_Start_DMA+0x18c>)
 8004c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4a51      	ldr	r2, [pc, #324]	@ (8004d9c <HAL_DAC_Start_DMA+0x190>)
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_DAC_Start_DMA+0x6c>
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d005      	beq.n	8004c82 <HAL_DAC_Start_DMA+0x76>
 8004c76:	e009      	b.n	8004c8c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	61bb      	str	r3, [r7, #24]
        break;
 8004c80:	e033      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	61bb      	str	r3, [r7, #24]
        break;
 8004c8a:	e02e      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3310      	adds	r3, #16
 8004c92:	61bb      	str	r3, [r7, #24]
        break;
 8004c94:	e029      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a41      	ldr	r2, [pc, #260]	@ (8004da0 <HAL_DAC_Start_DMA+0x194>)
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a40      	ldr	r2, [pc, #256]	@ (8004da4 <HAL_DAC_Start_DMA+0x198>)
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a3f      	ldr	r2, [pc, #252]	@ (8004da8 <HAL_DAC_Start_DMA+0x19c>)
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_DAC_Start_DMA+0xc0>
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DAC_Start_DMA+0xca>
 8004cca:	e009      	b.n	8004ce0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	61bb      	str	r3, [r7, #24]
        break;
 8004cd4:	e009      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	61bb      	str	r3, [r7, #24]
        break;
 8004cde:	e004      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	331c      	adds	r3, #28
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6898      	ldr	r0, [r3, #8]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	f000 fbc7 	bl	800549c <HAL_DMA_Start_IT>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e010      	b.n	8004d36 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68d8      	ldr	r0, [r3, #12]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	f000 fbb5 	bl	800549c <HAL_DMA_Start_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d3c:	7ffb      	ldrb	r3, [r7, #31]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11c      	bne.n	8004d7c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d5a:	4b14      	ldr	r3, [pc, #80]	@ (8004dac <HAL_DAC_Start_DMA+0x1a0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	4a13      	ldr	r2, [pc, #76]	@ (8004db0 <HAL_DAC_Start_DMA+0x1a4>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	3301      	adds	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d6c:	e002      	b.n	8004d74 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f9      	bne.n	8004d6e <HAL_DAC_Start_DMA+0x162>
 8004d7a:	e005      	b.n	8004d88 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f043 0204 	orr.w	r2, r3, #4
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	08005225 	.word	0x08005225
 8004d98:	08005247 	.word	0x08005247
 8004d9c:	08005263 	.word	0x08005263
 8004da0:	080052e1 	.word	0x080052e1
 8004da4:	08005303 	.word	0x08005303
 8004da8:	0800531f 	.word	0x0800531f
 8004dac:	20000000 	.word	0x20000000
 8004db0:	053e2d63 	.word	0x053e2d63

08004db4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dca:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d018      	beq.n	8004e12 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2204      	movs	r2, #4
 8004de4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f043 0201 	orr.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f845 	bl	8004e9c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01d      	beq.n	8004e58 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d018      	beq.n	8004e58 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f043 0202 	orr.w	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa3a 	bl	80052cc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	@ 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_DAC_ConfigChannel+0x1c>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e1a1      	b.n	8005214 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	795b      	ldrb	r3, [r3, #5]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_DAC_ConfigChannel+0x32>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e198      	b.n	8005214 <HAL_DAC_ConfigChannel+0x364>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2202      	movs	r2, #2
 8004eec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d17a      	bne.n	8004fec <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ef6:	f7fd fd39 	bl	800296c <HAL_GetTick>
 8004efa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d13d      	bne.n	8004f7e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f02:	e018      	b.n	8004f36 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f04:	f7fd fd32 	bl	800296c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d911      	bls.n	8004f36 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f043 0208 	orr.w	r2, r3, #8
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e16e      	b.n	8005214 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1df      	bne.n	8004f04 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f4e:	e020      	b.n	8004f92 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f50:	f7fd fd0c 	bl	800296c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d90f      	bls.n	8004f7e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da0a      	bge.n	8004f7e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f043 0208 	orr.w	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2203      	movs	r2, #3
 8004f78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e14a      	b.n	8005214 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dbe3      	blt.n	8004f50 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	ea02 0103 	and.w	r1, r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	21ff      	movs	r1, #255	@ 0xff
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	ea02 0103 	and.w	r1, r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d11d      	bne.n	8005030 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	221f      	movs	r2, #31
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	4013      	ands	r3, r2
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	4313      	orrs	r3, r2
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2207      	movs	r2, #7
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	4013      	ands	r3, r2
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d102      	bne.n	800505a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	e00f      	b.n	800507a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d102      	bne.n	8005068 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005062:	2301      	movs	r3, #1
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	e008      	b.n	800507a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005070:	2301      	movs	r3, #1
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	e001      	b.n	800507a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005076:	2300      	movs	r3, #0
 8005078:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509c:	4013      	ands	r3, r2
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	791b      	ldrb	r3, [r3, #4]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d102      	bne.n	80050ae <HAL_DAC_ConfigChannel+0x1fe>
 80050a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050ac:	e000      	b.n	80050b0 <HAL_DAC_ConfigChannel+0x200>
 80050ae:	2300      	movs	r3, #0
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c8:	4013      	ands	r3, r2
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	795b      	ldrb	r3, [r3, #5]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_DAC_ConfigChannel+0x22a>
 80050d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050d8:	e000      	b.n	80050dc <HAL_DAC_ConfigChannel+0x22c>
 80050da:	2300      	movs	r3, #0
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d114      	bne.n	800511c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80050f2:	f004 f93d 	bl	8009370 <HAL_RCC_GetHCLKFreq>
 80050f6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4a48      	ldr	r2, [pc, #288]	@ (800521c <HAL_DAC_ConfigChannel+0x36c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d904      	bls.n	800510a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
 8005108:	e00f      	b.n	800512a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4a44      	ldr	r2, [pc, #272]	@ (8005220 <HAL_DAC_ConfigChannel+0x370>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d90a      	bls.n	8005128 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
 800511a:	e006      	b.n	800512a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005122:	4313      	orrs	r3, r2
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
 8005126:	e000      	b.n	800512a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005128:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	4313      	orrs	r3, r2
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43da      	mvns	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	400a      	ands	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	4013      	ands	r3, r2
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	4313      	orrs	r3, r2
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	22c0      	movs	r2, #192	@ 0xc0
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43da      	mvns	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	400a      	ands	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	089b      	lsrs	r3, r3, #2
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	ea02 0103 	and.w	r1, r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	409a      	lsls	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005212:	7ffb      	ldrb	r3, [r7, #31]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	@ 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	09896800 	.word	0x09896800
 8005220:	04c4b400 	.word	0x04c4b400

08005224 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fe14 	bl	8004e60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	711a      	strb	r2, [r3, #4]
}
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fe0d 	bl	8004e74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f043 0204 	orr.w	r2, r3, #4
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fe03 	bl	8004e88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	711a      	strb	r2, [r3, #4]
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ffce 	bl	8005290 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	711a      	strb	r2, [r3, #4]
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff ffc7 	bl	80052a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f043 0204 	orr.w	r2, r3, #4
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff ffbd 	bl	80052b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	711a      	strb	r2, [r3, #4]
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e08d      	b.n	800547a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	4b47      	ldr	r3, [pc, #284]	@ (8005484 <HAL_DMA_Init+0x138>)
 8005366:	429a      	cmp	r2, r3
 8005368:	d80f      	bhi.n	800538a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	4b45      	ldr	r3, [pc, #276]	@ (8005488 <HAL_DMA_Init+0x13c>)
 8005372:	4413      	add	r3, r2
 8005374:	4a45      	ldr	r2, [pc, #276]	@ (800548c <HAL_DMA_Init+0x140>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	009a      	lsls	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a42      	ldr	r2, [pc, #264]	@ (8005490 <HAL_DMA_Init+0x144>)
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40
 8005388:	e00e      	b.n	80053a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	4b40      	ldr	r3, [pc, #256]	@ (8005494 <HAL_DMA_Init+0x148>)
 8005392:	4413      	add	r3, r2
 8005394:	4a3d      	ldr	r2, [pc, #244]	@ (800548c <HAL_DMA_Init+0x140>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005498 <HAL_DMA_Init+0x14c>)
 80053a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa76 	bl	80058ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005408:	d102      	bne.n	8005410 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005424:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_DMA_Init+0x104>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d80c      	bhi.n	8005450 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa96 	bl	8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	e008      	b.n	8005462 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40020407 	.word	0x40020407
 8005488:	bffdfff8 	.word	0xbffdfff8
 800548c:	cccccccd 	.word	0xcccccccd
 8005490:	40020000 	.word	0x40020000
 8005494:	bffdfbf8 	.word	0xbffdfbf8
 8005498:	40020400 	.word	0x40020400

0800549c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_DMA_Start_IT+0x20>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e066      	b.n	800558a <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d155      	bne.n	800557c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f9bb 	bl	8005870 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 020e 	orr.w	r2, r2, #14
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e00f      	b.n	8005534 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 020a 	orr.w	r2, r2, #10
 8005532:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005550:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005568:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e005      	b.n	8005588 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005584:	2302      	movs	r3, #2
 8005586:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005588:	7dfb      	ldrb	r3, [r7, #23]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d005      	beq.n	80055b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2204      	movs	r2, #4
 80055ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
 80055b4:	e037      	b.n	8005626 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 020e 	bic.w	r2, r2, #14
 80055c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f003 021f 	and.w	r2, r3, #31
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f202 	lsl.w	r2, r1, r2
 80055f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005602:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800561a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005624:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d00d      	beq.n	8005678 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2204      	movs	r2, #4
 8005660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e047      	b.n	8005708 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 020e 	bic.w	r2, r2, #14
 8005686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
    }
  }
  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2204      	movs	r2, #4
 8005734:	409a      	lsls	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d026      	beq.n	800578c <HAL_DMA_IRQHandler+0x7a>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d021      	beq.n	800578c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0204 	bic.w	r2, r2, #4
 8005764:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	f003 021f 	and.w	r2, r3, #31
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2104      	movs	r1, #4
 8005774:	fa01 f202 	lsl.w	r2, r1, r2
 8005778:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d071      	beq.n	8005866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800578a:	e06c      	b.n	8005866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	2202      	movs	r2, #2
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02e      	beq.n	80057fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d029      	beq.n	80057fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 020a 	bic.w	r2, r2, #10
 80057c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2102      	movs	r1, #2
 80057de:	fa01 f202 	lsl.w	r2, r1, r2
 80057e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d038      	beq.n	8005866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057fc:	e033      	b.n	8005866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2208      	movs	r2, #8
 8005808:	409a      	lsls	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4013      	ands	r3, r2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02a      	beq.n	8005868 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d025      	beq.n	8005868 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020e 	bic.w	r2, r2, #14
 800582a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	2101      	movs	r1, #1
 800583a:	fa01 f202 	lsl.w	r2, r1, r2
 800583e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005866:	bf00      	nop
 8005868:	bf00      	nop
}
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005886:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589e:	f003 021f 	and.w	r2, r3, #31
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	2101      	movs	r1, #1
 80058a8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d108      	bne.n	80058d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ce:	e007      	b.n	80058e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d802      	bhi.n	8005906 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005900:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e001      	b.n	800590a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005906:	4b15      	ldr	r3, [pc, #84]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005908:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	3b08      	subs	r3, #8
 8005916:	4a12      	ldr	r2, [pc, #72]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a0b      	ldr	r2, [pc, #44]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005936:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	409a      	lsls	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40020407 	.word	0x40020407
 8005958:	40020800 	.word	0x40020800
 800595c:	40020820 	.word	0x40020820
 8005960:	cccccccd 	.word	0xcccccccd
 8005964:	40020880 	.word	0x40020880

08005968 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	461a      	mov	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a08      	ldr	r2, [pc, #32]	@ (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800598a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3b01      	subs	r3, #1
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2201      	movs	r2, #1
 8005996:	409a      	lsls	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	1000823f 	.word	0x1000823f
 80059ac:	40020940 	.word	0x40020940

080059b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059be:	e15a      	b.n	8005c76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 814c 	beq.w	8005c70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d005      	beq.n	80059f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d130      	bne.n	8005a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	2203      	movs	r2, #3
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4013      	ands	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a26:	2201      	movs	r2, #1
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 0201 	and.w	r2, r3, #1
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d017      	beq.n	8005a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	2203      	movs	r2, #3
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4013      	ands	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d123      	bne.n	8005ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	08da      	lsrs	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3208      	adds	r2, #8
 8005aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	220f      	movs	r2, #15
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	08da      	lsrs	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3208      	adds	r2, #8
 8005adc:	6939      	ldr	r1, [r7, #16]
 8005ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	2203      	movs	r2, #3
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 0203 	and.w	r2, r3, #3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80a6 	beq.w	8005c70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b24:	4b5b      	ldr	r3, [pc, #364]	@ (8005c94 <HAL_GPIO_Init+0x2e4>)
 8005b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b28:	4a5a      	ldr	r2, [pc, #360]	@ (8005c94 <HAL_GPIO_Init+0x2e4>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b30:	4b58      	ldr	r3, [pc, #352]	@ (8005c94 <HAL_GPIO_Init+0x2e4>)
 8005b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b3c:	4a56      	ldr	r2, [pc, #344]	@ (8005c98 <HAL_GPIO_Init+0x2e8>)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	3302      	adds	r3, #2
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	220f      	movs	r2, #15
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b66:	d01f      	beq.n	8005ba8 <HAL_GPIO_Init+0x1f8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005c9c <HAL_GPIO_Init+0x2ec>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d019      	beq.n	8005ba4 <HAL_GPIO_Init+0x1f4>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a4b      	ldr	r2, [pc, #300]	@ (8005ca0 <HAL_GPIO_Init+0x2f0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <HAL_GPIO_Init+0x1f0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca4 <HAL_GPIO_Init+0x2f4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00d      	beq.n	8005b9c <HAL_GPIO_Init+0x1ec>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a49      	ldr	r2, [pc, #292]	@ (8005ca8 <HAL_GPIO_Init+0x2f8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <HAL_GPIO_Init+0x1e8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a48      	ldr	r2, [pc, #288]	@ (8005cac <HAL_GPIO_Init+0x2fc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_GPIO_Init+0x1e4>
 8005b90:	2305      	movs	r3, #5
 8005b92:	e00a      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005b94:	2306      	movs	r3, #6
 8005b96:	e008      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	e006      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e004      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e002      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_GPIO_Init+0x1fa>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	f002 0203 	and.w	r2, r2, #3
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	4093      	lsls	r3, r2
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bba:	4937      	ldr	r1, [pc, #220]	@ (8005c98 <HAL_GPIO_Init+0x2e8>)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bc8:	4b39      	ldr	r3, [pc, #228]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bec:	4a30      	ldr	r2, [pc, #192]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c16:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c1c:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	43db      	mvns	r3, r3
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c40:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c46:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4013      	ands	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <HAL_GPIO_Init+0x300>)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3301      	adds	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f47f ae9d 	bne.w	80059c0 <HAL_GPIO_Init+0x10>
  }
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	48000400 	.word	0x48000400
 8005ca0:	48000800 	.word	0x48000800
 8005ca4:	48000c00 	.word	0x48000c00
 8005ca8:	48001000 	.word	0x48001000
 8005cac:	48001400 	.word	0x48001400
 8005cb0:	40010400 	.word	0x40010400

08005cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	887b      	ldrh	r3, [r7, #2]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	e001      	b.n	8005cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	807b      	strh	r3, [r7, #2]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf4:	787b      	ldrb	r3, [r7, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d00:	e002      	b.n	8005d08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d1e:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d006      	beq.n	8005d38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d2a:	4a05      	ldr	r2, [pc, #20]	@ (8005d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f806 	bl	8005d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40010400 	.word	0x40010400

08005d44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e0be      	b.n	8005eec <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02e      	beq.n	8005e18 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef4 <HAL_HRTIM_Init+0x198>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d10b      	bne.n	8005ddc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef8 <HAL_HRTIM_Init+0x19c>)
 8005dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef8 <HAL_HRTIM_Init+0x19c>)
 8005dca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dce:	6613      	str	r3, [r2, #96]	@ 0x60
 8005dd0:	4b49      	ldr	r3, [pc, #292]	@ (8005ef8 <HAL_HRTIM_Init+0x19c>)
 8005dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005dea:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e00:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fc f9e7 	bl	80021ec <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e38:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
 8005e64:	e03e      	b.n	8005ee4 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005e66:	7dfa      	ldrb	r2, [r7, #23]
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3318      	adds	r3, #24
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005e7a:	7dfa      	ldrb	r2, [r7, #23]
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	331c      	adds	r3, #28
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005e8e:	7dfa      	ldrb	r2, [r7, #23]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3320      	adds	r3, #32
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005ea2:	7dfa      	ldrb	r2, [r7, #23]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3324      	adds	r3, #36	@ 0x24
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005eb6:	7dfa      	ldrb	r2, [r7, #23]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3328      	adds	r3, #40	@ 0x28
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005eca:	7dfa      	ldrb	r2, [r7, #23]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3330      	adds	r3, #48	@ 0x30
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d9bd      	bls.n	8005e66 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40016800 	.word	0x40016800
 8005ef8:	40021000 	.word	0x40021000

08005efc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e045      	b.n	8005fa0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d114      	bne.n	8005f56 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0202 	bic.w	r2, r2, #2
 8005f3c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8005f54:	e01f      	b.n	8005f96 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0202 	orr.w	r2, r2, #2
 8005f66:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f72:	f023 010c 	bic.w	r1, r3, #12
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8005fb6:	f7fc fcd9 	bl	800296c <HAL_GetTick>
 8005fba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fbc:	e014      	b.n	8005fe8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d010      	beq.n	8005fe8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fc fcd1 	bl	800296c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <HAL_HRTIM_PollForDLLCalibration+0x30>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2207      	movs	r2, #7
 8005fe0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e011      	b.n	800600c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff8:	d1e1      	bne.n	8005fbe <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d101      	bne.n	8006030 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	e015      	b.n	800605c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d104      	bne.n	8006048 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa19 	bl	8006478 <HRTIM_MasterBase_Config>
 8006046:	e004      	b.n	8006052 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa42 	bl	80064d6 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d101      	bne.n	8006080 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 800607c:	2302      	movs	r3, #2
 800607e:	e07a      	b.n	8006176 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800608a:	2302      	movs	r3, #2
 800608c:	e073      	b.n	8006176 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d104      	bne.n	80060ae <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa55 	bl	8006556 <HRTIM_MasterWaveform_Config>
 80060ac:	e004      	b.n	80060b8 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 faec 	bl	8006690 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4403      	add	r3, r0
 80060ca:	3320      	adds	r3, #32
 80060cc:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4403      	add	r3, r0
 80060e0:	3324      	adds	r3, #36	@ 0x24
 80060e2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4403      	add	r3, r0
 80060f6:	3328      	adds	r3, #40	@ 0x28
 80060f8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68d9      	ldr	r1, [r3, #12]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4403      	add	r3, r0
 800610c:	332c      	adds	r3, #44	@ 0x2c
 800610e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6919      	ldr	r1, [r3, #16]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4403      	add	r3, r0
 8006122:	3330      	adds	r3, #48	@ 0x30
 8006124:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fd7f 	bl	8006c2c <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d017      	beq.n	8006164 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d113      	bne.n	8006164 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3301      	adds	r3, #1
 8006144:	01db      	lsls	r3, r3, #7
 8006146:	4413      	add	r3, r2
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006152:	025b      	lsls	r3, r3, #9
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	6809      	ldr	r1, [r1, #0]
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3301      	adds	r3, #1
 800615e:	01db      	lsls	r3, r3, #7
 8006160:	440b      	add	r3, r1
 8006162:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d101      	bne.n	800619a <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	e020      	b.n	80061dc <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e019      	b.n	80061dc <HAL_HRTIM_WaveformTimerControl+0x5e>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fbed 	bl	800699c <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fd31 	bl	8006c2c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d101      	bne.n	8006202 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
 8006200:	e01d      	b.n	800623e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800620c:	2302      	movs	r3, #2
 800620e:	e016      	b.n	800623e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fc18 	bl	8006a5c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2bff      	cmp	r3, #255	@ 0xff
 8006254:	d103      	bne.n	800625e <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd56 	bl	8006d08 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800625c:	e00a      	b.n	8006274 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b06      	cmp	r3, #6
 8006262:	d103      	bne.n	800626c <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fddf 	bl	8006e28 <HRTIM_Master_ISR>
}
 800626a:	e003      	b.n	8006274 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fe9f 	bl	8006fb2 <HRTIM_Timer_ISR>
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0318 	bic.w	r3, r3, #24
 80064a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	619a      	str	r2, [r3, #24]
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3301      	adds	r3, #1
 80064ea:	01db      	lsls	r3, r3, #7
 80064ec:	4413      	add	r3, r2
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0307 	bic.w	r3, r3, #7
 80064f8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0318 	bic.w	r3, r3, #24
 800650a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3301      	adds	r3, #1
 800651e:	01db      	lsls	r3, r3, #7
 8006520:	4413      	add	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	01db      	lsls	r3, r3, #7
 8006532:	440b      	add	r3, r1
 8006534:	3394      	adds	r3, #148	@ 0x94
 8006536:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	01db      	lsls	r3, r3, #7
 8006544:	440b      	add	r3, r1
 8006546:	3398      	adds	r3, #152	@ 0x98
 8006548:	601a      	str	r2, [r3, #0]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006570:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800658a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	2b20      	cmp	r3, #32
 8006592:	d003      	beq.n	800659c <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d108      	bne.n	80065ae <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065a2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f043 0320 	orr.w	r3, r3, #32
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e021      	b.n	80065f2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d108      	bne.n	80065c8 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065bc:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e014      	b.n	80065f2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d108      	bne.n	80065e2 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d6:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e007      	b.n	80065f2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f023 0320 	bic.w	r3, r3, #32
 80065e8:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800660a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800661c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800662e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006640:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006654:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006666:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006690:	b480      	push	{r7}
 8006692:	b08b      	sub	sp, #44	@ 0x2c
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3301      	adds	r3, #1
 80066a4:	01db      	lsls	r3, r3, #7
 80066a6:	4413      	add	r3, r2
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	6811      	ldr	r1, [r2, #0]
 80066ae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	3301      	adds	r3, #1
 80066b6:	01db      	lsls	r3, r3, #7
 80066b8:	440b      	add	r3, r1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	3301      	adds	r3, #1
 80066c4:	01db      	lsls	r3, r3, #7
 80066c6:	4413      	add	r3, r2
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	01db      	lsls	r3, r3, #7
 80066d4:	4413      	add	r3, r2
 80066d6:	33e8      	adds	r3, #232	@ 0xe8
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	01db      	lsls	r3, r3, #7
 80066e4:	4413      	add	r3, r2
 80066e6:	33e4      	adds	r3, #228	@ 0xe4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80066f4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	f023 0320 	bic.w	r3, r3, #32
 80066fc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006704:	4313      	orrs	r3, r2
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	2b20      	cmp	r3, #32
 800670e:	d003      	beq.n	8006718 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d108      	bne.n	800672a <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	f043 0320 	orr.w	r3, r3, #32
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
 8006728:	e021      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2b03      	cmp	r3, #3
 8006730:	d108      	bne.n	8006744 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
 8006742:	e014      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b04      	cmp	r3, #4
 800674a:	d108      	bne.n	800675e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
 800675c:	e007      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	f023 0320 	bic.w	r3, r3, #32
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800677c:	4313      	orrs	r3, r2
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678e:	4313      	orrs	r3, r2
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	4313      	orrs	r3, r2
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b2:	4313      	orrs	r3, r2
 80067b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c4:	4313      	orrs	r3, r2
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d8:	d103      	bne.n	80067e2 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f0:	4313      	orrs	r3, r2
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006802:	4313      	orrs	r3, r2
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800680c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006818:	4313      	orrs	r3, r2
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006822:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006838:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4313      	orrs	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800684a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	4313      	orrs	r3, r2
 8006854:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800685e:	d004      	beq.n	800686a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006864:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006868:	d103      	bne.n	8006872 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d108      	bne.n	8006884 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8006878:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	4313      	orrs	r3, r2
 8006882:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800688a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	4313      	orrs	r3, r2
 8006894:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b05      	cmp	r3, #5
 80068a0:	d850      	bhi.n	8006944 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <HRTIM_TimingUnitWaveform_Config+0x218>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	08006903 	.word	0x08006903
 80068b8:	08006919 	.word	0x08006919
 80068bc:	0800692f 	.word	0x0800692f
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61fb      	str	r3, [r7, #28]
      break;
 80068d4:	e037      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61fb      	str	r3, [r7, #28]
      break;
 80068ea:	e02c      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80068f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61fb      	str	r3, [r7, #28]
      break;
 8006900:	e021      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006908:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	4313      	orrs	r3, r2
 8006914:	61fb      	str	r3, [r7, #28]
      break;
 8006916:	e016      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800691e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	015b      	lsls	r3, r3, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	4313      	orrs	r3, r2
 800692a:	61fb      	str	r3, [r7, #28]
      break;
 800692c:	e00b      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006934:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	4313      	orrs	r3, r2
 8006940:	61fb      	str	r3, [r7, #28]
      break;
 8006942:	e000      	b.n	8006946 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8006944:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3301      	adds	r3, #1
 800694e:	01db      	lsls	r3, r3, #7
 8006950:	4413      	add	r3, r2
 8006952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006954:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	01db      	lsls	r3, r3, #7
 800695e:	4413      	add	r3, r2
 8006960:	33e8      	adds	r3, #232	@ 0xe8
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	01db      	lsls	r3, r3, #7
 800696e:	4413      	add	r3, r2
 8006970:	33e4      	adds	r3, #228	@ 0xe4
 8006972:	6a3a      	ldr	r2, [r7, #32]
 8006974:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	01db      	lsls	r3, r3, #7
 800697e:	4413      	add	r3, r2
 8006980:	33d4      	adds	r3, #212	@ 0xd4
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006990:	bf00      	nop
 8006992:	372c      	adds	r7, #44	@ 0x2c
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	33ec      	adds	r3, #236	@ 0xec
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069d2:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e4:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069f6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d11a      	bne.n	8006a40 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0302 	bic.w	r3, r3, #2
 8006a22:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 0301 	bic.w	r3, r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	01db      	lsls	r3, r3, #7
 8006a48:	4413      	add	r3, r2
 8006a4a:	33ec      	adds	r3, #236	@ 0xec
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	601a      	str	r2, [r3, #0]

}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	@ 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	01db      	lsls	r3, r3, #7
 8006a76:	4413      	add	r3, r2
 8006a78:	33e4      	adds	r3, #228	@ 0xe4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	01db      	lsls	r3, r3, #7
 8006a86:	4413      	add	r3, r2
 8006a88:	33b8      	adds	r3, #184	@ 0xb8
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d05d      	beq.n	8006b52 <HRTIM_OutputConfig+0xf6>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9c:	d86e      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa4:	d042      	beq.n	8006b2c <HRTIM_OutputConfig+0xd0>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aac:	d866      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab4:	d04d      	beq.n	8006b52 <HRTIM_OutputConfig+0xf6>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006abc:	d85e      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac4:	d032      	beq.n	8006b2c <HRTIM_OutputConfig+0xd0>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006acc:	d856      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b80      	cmp	r3, #128	@ 0x80
 8006ad2:	d03e      	beq.n	8006b52 <HRTIM_OutputConfig+0xf6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d850      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d025      	beq.n	8006b2c <HRTIM_OutputConfig+0xd0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d84a      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d01f      	beq.n	8006b2c <HRTIM_OutputConfig+0xd0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d044      	beq.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d841      	bhi.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d33e      	bcc.n	8006b7c <HRTIM_OutputConfig+0x120>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3b02      	subs	r3, #2
 8006b02:	2201      	movs	r2, #1
 8006b04:	409a      	lsls	r2, r3
 8006b06:	4b48      	ldr	r3, [pc, #288]	@ (8006c28 <HRTIM_OutputConfig+0x1cc>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bf14      	ite	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	2300      	moveq	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11c      	bne.n	8006b52 <HRTIM_OutputConfig+0xf6>
 8006b18:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d027      	beq.n	8006b7c <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6819      	ldr	r1, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	440b      	add	r3, r1
 8006b3a:	33bc      	adds	r3, #188	@ 0xbc
 8006b3c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	01db      	lsls	r3, r3, #7
 8006b4a:	440b      	add	r3, r1
 8006b4c:	33c0      	adds	r3, #192	@ 0xc0
 8006b4e:	601a      	str	r2, [r3, #0]
      break;
 8006b50:	e015      	b.n	8006b7e <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	01db      	lsls	r3, r3, #7
 8006b5e:	440b      	add	r3, r1
 8006b60:	33c4      	adds	r3, #196	@ 0xc4
 8006b62:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6819      	ldr	r1, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	440b      	add	r3, r1
 8006b72:	33c8      	adds	r3, #200	@ 0xc8
 8006b74:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006b76:	2310      	movs	r3, #16
 8006b78:	61bb      	str	r3, [r7, #24]
      break;
 8006b7a:	e000      	b.n	8006b7e <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8006b7c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006b7e:	22fe      	movs	r2, #254	@ 0xfe
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d111      	bne.n	8006c0a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d107      	bne.n	8006c0a <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	01db      	lsls	r3, r3, #7
 8006c12:	4413      	add	r3, r2
 8006c14:	33e4      	adds	r3, #228	@ 0xe4
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3724      	adds	r7, #36	@ 0x24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40000041 	.word	0x40000041

08006c2c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d85e      	bhi.n	8006cfa <HRTIM_ForceRegistersUpdate+0xce>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HRTIM_ForceRegistersUpdate+0x18>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c77 	.word	0x08006c77
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006ca3 	.word	0x08006ca3
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006ccf 	.word	0x08006ccf
 8006c58:	08006ce5 	.word	0x08006ce5
 8006c5c:	08006c61 	.word	0x08006c61
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c74:	e042      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0202 	orr.w	r2, r2, #2
 8006c86:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006c8a:	e037      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0204 	orr.w	r2, r2, #4
 8006c9c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006ca0:	e02c      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cb6:	e021      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0210 	orr.w	r2, r2, #16
 8006cc8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006ccc:	e016      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0220 	orr.w	r2, r2, #32
 8006cde:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006ce2:	e00b      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cf4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006cf8:	e000      	b.n	8006cfc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8006cfa:	bf00      	nop
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fa9a 	bl	800627c <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00c      	beq.n	8006d6c <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2202      	movs	r2, #2
 8006d62:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fa92 	bl	8006290 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2204      	movs	r2, #4
 8006d86:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fa8a 	bl	80062a4 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2208      	movs	r2, #8
 8006daa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fa82 	bl	80062b8 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fa7a 	bl	80062cc <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fa72 	bl	80062e0 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00c      	beq.n	8006e20 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fa6a 	bl	80062f4 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006e38:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8006e42:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d015      	beq.n	8006e8a <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d010      	beq.n	8006e8a <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006e70:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fa3f 	bl	8006308 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00d      	beq.n	8006eb0 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006ea6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fa36 	bl	800631c <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00c      	beq.n	8006ed4 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006ecc:	2106      	movs	r1, #6
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fa4e 	bl	8006370 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2202      	movs	r2, #2
 8006eee:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006ef0:	2106      	movs	r1, #6
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fa47 	bl	8006386 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2204      	movs	r2, #4
 8006f12:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f14:	2106      	movs	r1, #6
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fa40 	bl	800639c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2208      	movs	r2, #8
 8006f36:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f38:	2106      	movs	r1, #6
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fa39 	bl	80063b2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2210      	movs	r2, #16
 8006f5a:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006f5c:	2106      	movs	r1, #6
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff f9fb 	bl	800635a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff f9d5 	bl	8006330 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006fa2:	2106      	movs	r1, #6
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff f9cd 	bl	8006344 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	01db      	lsls	r3, r3, #7
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	01db      	lsls	r3, r3, #7
 8006fd6:	4413      	add	r3, r2
 8006fd8:	338c      	adds	r3, #140	@ 0x8c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	01db      	lsls	r3, r3, #7
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3388      	adds	r3, #136	@ 0x88
 8006ffe:	2201      	movs	r2, #1
 8007000:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff f9b3 	bl	8006370 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	01db      	lsls	r3, r3, #7
 8007026:	4413      	add	r3, r2
 8007028:	3388      	adds	r3, #136	@ 0x88
 800702a:	2202      	movs	r2, #2
 800702c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff f9a8 	bl	8006386 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d010      	beq.n	8007062 <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	01db      	lsls	r3, r3, #7
 8007052:	4413      	add	r3, r2
 8007054:	3388      	adds	r3, #136	@ 0x88
 8007056:	2204      	movs	r2, #4
 8007058:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff f99d 	bl	800639c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	01db      	lsls	r3, r3, #7
 800707e:	4413      	add	r3, r2
 8007080:	3388      	adds	r3, #136	@ 0x88
 8007082:	2208      	movs	r2, #8
 8007084:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff f992 	bl	80063b2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	01db      	lsls	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	3388      	adds	r3, #136	@ 0x88
 80070ae:	2210      	movs	r2, #16
 80070b0:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff f950 	bl	800635a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	01db      	lsls	r3, r3, #7
 80070d6:	4413      	add	r3, r2
 80070d8:	3388      	adds	r3, #136	@ 0x88
 80070da:	2240      	movs	r2, #64	@ 0x40
 80070dc:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff f92f 	bl	8006344 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	01db      	lsls	r3, r3, #7
 8007102:	4413      	add	r3, r2
 8007104:	3388      	adds	r3, #136	@ 0x88
 8007106:	2280      	movs	r2, #128	@ 0x80
 8007108:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff f95b 	bl	80063c8 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	01db      	lsls	r3, r3, #7
 800712e:	4413      	add	r3, r2
 8007130:	3388      	adds	r3, #136	@ 0x88
 8007132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007136:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff f94f 	bl	80063de <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00c      	beq.n	800716e <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	01db      	lsls	r3, r3, #7
 800715c:	4413      	add	r3, r2
 800715e:	3388      	adds	r3, #136	@ 0x88
 8007160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007164:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff f959 	bl	8006420 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007174:	2b00      	cmp	r3, #0
 8007176:	d011      	beq.n	800719c <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	01db      	lsls	r3, r3, #7
 800718a:	4413      	add	r3, r2
 800718c:	3388      	adds	r3, #136	@ 0x88
 800718e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007192:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff f94d 	bl	8006436 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d011      	beq.n	80071ca <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	01db      	lsls	r3, r3, #7
 80071b8:	4413      	add	r3, r2
 80071ba:	3388      	adds	r3, #136	@ 0x88
 80071bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071c0:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff f941 	bl	800644c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d011      	beq.n	80071f8 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	01db      	lsls	r3, r3, #7
 80071e6:	4413      	add	r3, r2
 80071e8:	3388      	adds	r3, #136	@ 0x88
 80071ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071ee:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff f935 	bl	8006462 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4413      	add	r3, r2
 8007216:	3388      	adds	r3, #136	@ 0x88
 8007218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800721c:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff f8f2 	bl	800640a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d011      	beq.n	8007254 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00c      	beq.n	8007254 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	01db      	lsls	r3, r3, #7
 8007242:	4413      	add	r3, r2
 8007244:	3388      	adds	r3, #136	@ 0x88
 8007246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800724a:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff f8d0 	bl	80063f4 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e0c0      	b.n	80073f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fb f9d0 	bl	8002628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f005 fb2c 	bl	800c8f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e03e      	b.n	800731e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072a0:	7bfa      	ldrb	r2, [r7, #15]
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	440b      	add	r3, r1
 80072ae:	3311      	adds	r3, #17
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072b4:	7bfa      	ldrb	r2, [r7, #15]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	440b      	add	r3, r1
 80072c2:	3310      	adds	r3, #16
 80072c4:	7bfa      	ldrb	r2, [r7, #15]
 80072c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072c8:	7bfa      	ldrb	r2, [r7, #15]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	440b      	add	r3, r1
 80072d6:	3313      	adds	r3, #19
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	440b      	add	r3, r1
 80072ea:	3320      	adds	r3, #32
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3324      	adds	r3, #36	@ 0x24
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	440b      	add	r3, r1
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	3301      	adds	r3, #1
 800731c:	73fb      	strb	r3, [r7, #15]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	7bfa      	ldrb	r2, [r7, #15]
 8007324:	429a      	cmp	r2, r3
 8007326:	d3bb      	bcc.n	80072a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e044      	b.n	80073b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	440b      	add	r3, r1
 800733c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	440b      	add	r3, r1
 8007352:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007356:	7bfa      	ldrb	r2, [r7, #15]
 8007358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800735a:	7bfa      	ldrb	r2, [r7, #15]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	440b      	add	r3, r1
 8007368:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	440b      	add	r3, r1
 800737e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	440b      	add	r3, r1
 8007394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	440b      	add	r3, r1
 80073aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	3301      	adds	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	791b      	ldrb	r3, [r3, #4]
 80073bc:	7bfa      	ldrb	r2, [r7, #15]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3b5      	bcc.n	800732e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80073ce:	f005 faab 	bl	800c928 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7a9b      	ldrb	r3, [r3, #10]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fa26 	bl	800883a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f006 f870 	bl	800d4ea <USB_ReadInterrupts>
 800740a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f983 	bl	8007722 <PCD_EP_ISR_Handler>

    return;
 800741c:	e110      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007424:	2b00      	cmp	r3, #0
 8007426:	d013      	beq.n	8007450 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007430:	b29a      	uxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800743a:	b292      	uxth	r2, r2
 800743c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f92c 	bl	800769e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007446:	2100      	movs	r1, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f946 	bl	80076da <HAL_PCD_SetAddress>

    return;
 800744e:	e0f7      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800746c:	b292      	uxth	r2, r2
 800746e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007472:	e0e5      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007490:	b292      	uxth	r2, r2
 8007492:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007496:	e0d3      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d034      	beq.n	800750c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0204 	bic.w	r2, r2, #4
 80074b4:	b292      	uxth	r2, r2
 80074b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0208 	bic.w	r2, r2, #8
 80074cc:	b292      	uxth	r2, r2
 80074ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f9d1 	bl	800888e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8ea 	bl	80076c6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007504:	b292      	uxth	r2, r2
 8007506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800750a:	e099      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007512:	2b00      	cmp	r3, #0
 8007514:	d027      	beq.n	8007566 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0208 	orr.w	r2, r2, #8
 8007528:	b292      	uxth	r2, r2
 800752a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007540:	b292      	uxth	r2, r2
 8007542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0204 	orr.w	r2, r2, #4
 8007558:	b292      	uxth	r2, r2
 800755a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f8a7 	bl	80076b2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007564:	e06c      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d040      	beq.n	80075f2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007582:	b292      	uxth	r2, r2
 8007584:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d12b      	bne.n	80075ea <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0204 	orr.w	r2, r2, #4
 80075a4:	b292      	uxth	r2, r2
 80075a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0208 	orr.w	r2, r2, #8
 80075bc:	b292      	uxth	r2, r2
 80075be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	089b      	lsrs	r3, r3, #2
 80075d6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075e0:	2101      	movs	r1, #1
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 f953 	bl	800888e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80075e8:	e02a      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f861 	bl	80076b2 <HAL_PCD_SuspendCallback>
    return;
 80075f0:	e026      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00f      	beq.n	800761c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007604:	b29a      	uxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800760e:	b292      	uxth	r2, r2
 8007610:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f838 	bl	800768a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800761a:	e011      	b.n	8007640 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800762e:	b29a      	uxth	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007638:	b292      	uxth	r2, r2
 800763a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800763e:	bf00      	nop
  }
}
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_PCD_SetAddress+0x1a>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e012      	b.n	800771a <HAL_PCD_SetAddress+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f005 fed9 	bl	800d4c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b092      	sub	sp, #72	@ 0x48
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800772a:	e333      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007734:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007736:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8007742:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007746:	2b00      	cmp	r3, #0
 8007748:	f040 8108 	bne.w	800795c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800774c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b00      	cmp	r3, #0
 8007754:	d14c      	bne.n	80077f0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007766:	813b      	strh	r3, [r7, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	893b      	ldrh	r3, [r7, #8]
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3310      	adds	r3, #16
 800777e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	4413      	add	r3, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	4413      	add	r3, r2
 800779a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80077a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80077a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	441a      	add	r2, r3
 80077b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff50 	bl	800765e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7b1b      	ldrb	r3, [r3, #12]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 82e5 	beq.w	8007d94 <PCD_EP_ISR_Handler+0x672>
 80077ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 82e0 	bne.w	8007d94 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7b1b      	ldrb	r3, [r3, #12]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	731a      	strb	r2, [r3, #12]
 80077ee:	e2d1      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077f6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007800:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007806:	2b00      	cmp	r3, #0
 8007808:	d032      	beq.n	8007870 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	4413      	add	r3, r2
 8007824:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800782e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007830:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800783c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007842:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007844:	b29b      	uxth	r3, r3
 8007846:	f005 fea3 	bl	800d590 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29a      	uxth	r2, r3
 8007852:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007856:	4013      	ands	r3, r2
 8007858:	817b      	strh	r3, [r7, #10]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	897a      	ldrh	r2, [r7, #10]
 8007860:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007864:	b292      	uxth	r2, r2
 8007866:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff04 	bl	8007676 <HAL_PCD_SetupStageCallback>
 800786e:	e291      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007870:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007874:	2b00      	cmp	r3, #0
 8007876:	f280 828d 	bge.w	8007d94 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007886:	4013      	ands	r3, r2
 8007888:	81fb      	strh	r3, [r7, #14]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	89fa      	ldrh	r2, [r7, #14]
 8007890:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007894:	b292      	uxth	r2, r2
 8007896:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	4413      	add	r3, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80078bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80078c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d019      	beq.n	80078fc <PCD_EP_ISR_Handler+0x1da>
 80078c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d015      	beq.n	80078fc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d6:	6959      	ldr	r1, [r3, #20]
 80078d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80078dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f005 fe55 	bl	800d590 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	441a      	add	r2, r3
 80078f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fea5 	bl	8007646 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007904:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8242 	bne.w	8007d94 <PCD_EP_ISR_Handler+0x672>
 8007910:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007912:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007916:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800791a:	f000 823b 	beq.w	8007d94 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792e:	81bb      	strh	r3, [r7, #12]
 8007930:	89bb      	ldrh	r3, [r7, #12]
 8007932:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007936:	81bb      	strh	r3, [r7, #12]
 8007938:	89bb      	ldrh	r3, [r7, #12]
 800793a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800793e:	81bb      	strh	r3, [r7, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	89bb      	ldrh	r3, [r7, #12]
 8007946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800794a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800794e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007956:	b29b      	uxth	r3, r3
 8007958:	8013      	strh	r3, [r2, #0]
 800795a:	e21b      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800796e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007972:	2b00      	cmp	r3, #0
 8007974:	f280 80f1 	bge.w	8007b5a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29a      	uxth	r2, r3
 800798a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800798e:	4013      	ands	r3, r2
 8007990:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80079a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079a6:	b292      	uxth	r2, r2
 80079a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80079aa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80079c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079c2:	7b1b      	ldrb	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d123      	bne.n	8007a10 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	4413      	add	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80079f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 808b 	beq.w	8007b10 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a00:	6959      	ldr	r1, [r3, #20]
 8007a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a04:	88da      	ldrh	r2, [r3, #6]
 8007a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a0a:	f005 fdc1 	bl	800d590 <USB_ReadPMA>
 8007a0e:	e07f      	b.n	8007b10 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a12:	78db      	ldrb	r3, [r3, #3]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d109      	bne.n	8007a2c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007a18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9c6 	bl	8007db0 <HAL_PCD_EP_DB_Receive>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007a2a:	e071      	b.n	8007b10 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a46:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d022      	beq.n	8007acc <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d02c      	beq.n	8007b10 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007abc:	6959      	ldr	r1, [r3, #20]
 8007abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ac0:	891a      	ldrh	r2, [r3, #8]
 8007ac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007ac6:	f005 fd63 	bl	800d590 <USB_ReadPMA>
 8007aca:	e021      	b.n	8007b10 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4413      	add	r3, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007af4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d009      	beq.n	8007b10 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b02:	6959      	ldr	r1, [r3, #20]
 8007b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b06:	895a      	ldrh	r2, [r3, #10]
 8007b08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b0c:	f005 fd40 	bl	800d590 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b18:	441a      	add	r2, r3
 8007b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007b26:	441a      	add	r2, r3
 8007b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <PCD_EP_ISR_Handler+0x41e>
 8007b34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d206      	bcs.n	8007b4e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fd7d 	bl	8007646 <HAL_PCD_DataOutStageCallback>
 8007b4c:	e005      	b.n	8007b5a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b54:	4618      	mov	r0, r3
 8007b56:	f004 ff05 	bl	800c964 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007b5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8117 	beq.w	8007d94 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007b66:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	3310      	adds	r3, #16
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	441a      	add	r2, r3
 8007ba4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb4:	78db      	ldrb	r3, [r3, #3]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	f040 80a1 	bne.w	8007cfe <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bc4:	7b1b      	ldrb	r3, [r3, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8092 	beq.w	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d046      	beq.n	8007c64 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d126      	bne.n	8007c2c <PCD_EP_ISR_Handler+0x50a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	00da      	lsls	r2, r3, #3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	e061      	b.n	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
 8007c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d15d      	bne.n	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	00da      	lsls	r2, r3, #3
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	e045      	b.n	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d126      	bne.n	8007cc0 <PCD_EP_ISR_Handler+0x59e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	4413      	add	r3, r2
 8007c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	00da      	lsls	r2, r3, #3
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c98:	623b      	str	r3, [r7, #32]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e017      	b.n	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
 8007cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d113      	bne.n	8007cf0 <PCD_EP_ISR_Handler+0x5ce>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd6:	4413      	add	r3, r2
 8007cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	00da      	lsls	r2, r3, #3
 8007ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	2200      	movs	r2, #0
 8007cee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fcb1 	bl	800765e <HAL_PCD_DataInStageCallback>
 8007cfc:	e04a      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007cfe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d13f      	bne.n	8007d88 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d906      	bls.n	8007d46 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d42:	619a      	str	r2, [r3, #24]
 8007d44:	e002      	b.n	8007d4c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d48:	2200      	movs	r2, #0
 8007d4a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fc7f 	bl	800765e <HAL_PCD_DataInStageCallback>
 8007d60:	e018      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d68:	441a      	add	r2, r3
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d70:	69da      	ldr	r2, [r3, #28]
 8007d72:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007d74:	441a      	add	r2, r3
 8007d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d78:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d80:	4618      	mov	r0, r3
 8007d82:	f004 fdef 	bl	800c964 <USB_EPStartXfer>
 8007d86:	e005      	b.n	8007d94 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007d88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f917 	bl	8007fc2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	b21b      	sxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f6ff acc3 	blt.w	800772c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3748      	adds	r7, #72	@ 0x48
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d07c      	beq.n	8007ec2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	4413      	add	r3, r2
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	4413      	add	r3, r2
 8007de2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	8b7b      	ldrh	r3, [r7, #26]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d306      	bcc.n	8007e06 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	8b7b      	ldrh	r3, [r7, #26]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	619a      	str	r2, [r3, #24]
 8007e04:	e002      	b.n	8007e0c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d123      	bne.n	8007e5c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2e:	833b      	strh	r3, [r7, #24]
 8007e30:	8b3b      	ldrh	r3, [r7, #24]
 8007e32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e36:	833b      	strh	r3, [r7, #24]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	8b3b      	ldrh	r3, [r7, #24]
 8007e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01f      	beq.n	8007ea6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e80:	82fb      	strh	r3, [r7, #22]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	8afb      	ldrh	r3, [r7, #22]
 8007e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ea6:	8b7b      	ldrh	r3, [r7, #26]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8085 	beq.w	8007fb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6959      	ldr	r1, [r3, #20]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	891a      	ldrh	r2, [r3, #8]
 8007eba:	8b7b      	ldrh	r3, [r7, #26]
 8007ebc:	f005 fb68 	bl	800d590 <USB_ReadPMA>
 8007ec0:	e07a      	b.n	8007fb8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	4413      	add	r3, r2
 8007edc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ee6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	8b7b      	ldrh	r3, [r7, #26]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d306      	bcc.n	8007f00 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	8b7b      	ldrh	r3, [r7, #26]
 8007ef8:	1ad2      	subs	r2, r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	619a      	str	r2, [r3, #24]
 8007efe:	e002      	b.n	8007f06 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d123      	bne.n	8007f56 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f28:	83fb      	strh	r3, [r7, #30]
 8007f2a:	8bfb      	ldrh	r3, [r7, #30]
 8007f2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f30:	83fb      	strh	r3, [r7, #30]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	8bfb      	ldrh	r3, [r7, #30]
 8007f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d11f      	bne.n	8007fa0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7a:	83bb      	strh	r3, [r7, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	441a      	add	r2, r3
 8007f8a:	8bbb      	ldrh	r3, [r7, #28]
 8007f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007fa0:	8b7b      	ldrh	r3, [r7, #26]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6959      	ldr	r1, [r3, #20]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	895a      	ldrh	r2, [r3, #10]
 8007fb2:	8b7b      	ldrh	r3, [r7, #26]
 8007fb4:	f005 faec 	bl	800d590 <USB_ReadPMA>
    }
  }

  return count;
 8007fb8:	8b7b      	ldrh	r3, [r7, #26]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b0a6      	sub	sp, #152	@ 0x98
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 81f7 	beq.w	80083ca <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4413      	add	r3, r2
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008000:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800800c:	429a      	cmp	r2, r3
 800800e:	d907      	bls.n	8008020 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	619a      	str	r2, [r3, #24]
 800801e:	e002      	b.n	8008026 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 80e1 	bne.w	80081f2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d126      	bne.n	8008086 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	633b      	str	r3, [r7, #48]	@ 0x30
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	4413      	add	r3, r2
 800804e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	00da      	lsls	r2, r3, #3
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	4413      	add	r3, r2
 800805a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800806a:	b29a      	uxth	r2, r3
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807e:	b29a      	uxth	r2, r3
 8008080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e01a      	b.n	80080bc <HAL_PCD_EP_DB_Transmit+0xfa>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d116      	bne.n	80080bc <HAL_PCD_EP_DB_Transmit+0xfa>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	4413      	add	r3, r2
 80080a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	00da      	lsls	r2, r3, #3
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	4413      	add	r3, r2
 80080b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b8:	2200      	movs	r2, #0
 80080ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d126      	bne.n	8008118 <HAL_PCD_EP_DB_Transmit+0x156>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	623b      	str	r3, [r7, #32]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d8:	b29b      	uxth	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	4413      	add	r3, r2
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	00da      	lsls	r2, r3, #3
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	4413      	add	r3, r2
 80080ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800810c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008110:	b29a      	uxth	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e017      	b.n	8008148 <HAL_PCD_EP_DB_Transmit+0x186>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d113      	bne.n	8008148 <HAL_PCD_EP_DB_Transmit+0x186>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008128:	b29b      	uxth	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812e:	4413      	add	r3, r2
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	00da      	lsls	r2, r3, #3
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	4413      	add	r3, r2
 800813c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	2200      	movs	r2, #0
 8008146:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	78db      	ldrb	r3, [r3, #3]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d123      	bne.n	8008198 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800816a:	837b      	strh	r3, [r7, #26]
 800816c:	8b7b      	ldrh	r3, [r7, #26]
 800816e:	f083 0320 	eor.w	r3, r3, #32
 8008172:	837b      	strh	r3, [r7, #26]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	8b7b      	ldrh	r3, [r7, #26]
 8008184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800818c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008194:	b29b      	uxth	r3, r3
 8008196:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	4619      	mov	r1, r3
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff fa5d 	bl	800765e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01f      	beq.n	80081ee <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c8:	833b      	strh	r3, [r7, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	441a      	add	r2, r3
 80081d8:	8b3b      	ldrh	r3, [r7, #24]
 80081da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e31f      	b.n	8008832 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d021      	beq.n	8008240 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008216:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800822c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823c:	b29b      	uxth	r3, r3
 800823e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008246:	2b01      	cmp	r3, #1
 8008248:	f040 82ca 	bne.w	80087e0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008254:	441a      	add	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	69da      	ldr	r2, [r3, #28]
 800825e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008262:	441a      	add	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6a1a      	ldr	r2, [r3, #32]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d309      	bcc.n	8008288 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6a1a      	ldr	r2, [r3, #32]
 800827e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	621a      	str	r2, [r3, #32]
 8008286:	e015      	b.n	80082b4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d107      	bne.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8008290:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008294:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800829e:	e009      	b.n	80082b4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d15f      	bne.n	800837c <HAL_PCD_EP_DB_Transmit+0x3ba>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d0:	4413      	add	r3, r2
 80082d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	00da      	lsls	r2, r3, #3
 80082da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082dc:	4413      	add	r3, r2
 80082de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <HAL_PCD_EP_DB_Transmit+0x34e>
 80082fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008308:	b29a      	uxth	r2, r3
 800830a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e051      	b.n	80083b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008312:	2b3e      	cmp	r3, #62	@ 0x3e
 8008314:	d816      	bhi.n	8008344 <HAL_PCD_EP_DB_Transmit+0x382>
 8008316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	653b      	str	r3, [r7, #80]	@ 0x50
 800831c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_PCD_EP_DB_Transmit+0x36a>
 8008326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008328:	3301      	adds	r3, #1
 800832a:	653b      	str	r3, [r7, #80]	@ 0x50
 800832c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29a      	uxth	r2, r3
 8008332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	029b      	lsls	r3, r3, #10
 8008338:	b29b      	uxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b29a      	uxth	r2, r3
 800833e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008340:	801a      	strh	r2, [r3, #0]
 8008342:	e037      	b.n	80083b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	653b      	str	r3, [r7, #80]	@ 0x50
 800834a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800834c:	f003 031f 	and.w	r3, r3, #31
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <HAL_PCD_EP_DB_Transmit+0x398>
 8008354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008356:	3b01      	subs	r3, #1
 8008358:	653b      	str	r3, [r7, #80]	@ 0x50
 800835a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29a      	uxth	r2, r3
 8008360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	029b      	lsls	r3, r3, #10
 8008366:	b29b      	uxth	r3, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008374:	b29a      	uxth	r2, r3
 8008376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e01b      	b.n	80083b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d117      	bne.n	80083b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008392:	b29b      	uxth	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008398:	4413      	add	r3, r2
 800839a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	00da      	lsls	r2, r3, #3
 80083a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083a4:	4413      	add	r3, r2
 80083a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6959      	ldr	r1, [r3, #20]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	891a      	ldrh	r2, [r3, #8]
 80083c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f005 f8a1 	bl	800d50a <USB_WritePMA>
 80083c8:	e20a      	b.n	80087e0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	4413      	add	r3, r2
 80083e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d307      	bcc.n	800840e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	619a      	str	r2, [r3, #24]
 800840c:	e002      	b.n	8008414 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 80f6 	bne.w	800860a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d126      	bne.n	8008474 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	677b      	str	r3, [r7, #116]	@ 0x74
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008434:	b29b      	uxth	r3, r3
 8008436:	461a      	mov	r2, r3
 8008438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800843a:	4413      	add	r3, r2
 800843c:	677b      	str	r3, [r7, #116]	@ 0x74
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	00da      	lsls	r2, r3, #3
 8008444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008446:	4413      	add	r3, r2
 8008448:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800844c:	673b      	str	r3, [r7, #112]	@ 0x70
 800844e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008458:	b29a      	uxth	r2, r3
 800845a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846c:	b29a      	uxth	r2, r3
 800846e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e01a      	b.n	80084aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d116      	bne.n	80084aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800848a:	b29b      	uxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008490:	4413      	add	r3, r2
 8008492:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	00da      	lsls	r2, r3, #3
 800849a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800849c:	4413      	add	r3, r2
 800849e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084a6:	2200      	movs	r2, #0
 80084a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d12f      	bne.n	800851a <HAL_PCD_EP_DB_Transmit+0x558>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084d2:	4413      	add	r3, r2
 80084d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	00da      	lsls	r2, r3, #3
 80084de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084e2:	4413      	add	r3, r2
 80084e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e01c      	b.n	8008554 <HAL_PCD_EP_DB_Transmit+0x592>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d118      	bne.n	8008554 <HAL_PCD_EP_DB_Transmit+0x592>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800852a:	b29b      	uxth	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008532:	4413      	add	r3, r2
 8008534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	00da      	lsls	r2, r3, #3
 800853e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008542:	4413      	add	r3, r2
 8008544:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800854c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008550:	2200      	movs	r2, #0
 8008552:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	78db      	ldrb	r3, [r3, #3]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d127      	bne.n	80085ac <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008576:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800857a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800857e:	f083 0320 	eor.w	r3, r3, #32
 8008582:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800859c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff f853 	bl	800765e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d121      	bne.n	8008606 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085dc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80085f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e113      	b.n	8008832 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d121      	bne.n	8008658 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800862a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800864c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008654:	b29b      	uxth	r3, r3
 8008656:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800865e:	2b01      	cmp	r3, #1
 8008660:	f040 80be 	bne.w	80087e0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	695a      	ldr	r2, [r3, #20]
 8008668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800866c:	441a      	add	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800867a:	441a      	add	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	429a      	cmp	r2, r3
 800868a:	d309      	bcc.n	80086a0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6a1a      	ldr	r2, [r3, #32]
 8008696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008698:	1ad2      	subs	r2, r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	621a      	str	r2, [r3, #32]
 800869e:	e015      	b.n	80086cc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80086a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086ac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80086b6:	e009      	b.n	80086cc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d15f      	bne.n	800879a <HAL_PCD_EP_DB_Transmit+0x7d8>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ee:	4413      	add	r3, r2
 80086f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	00da      	lsls	r2, r3, #3
 80086f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086fa:	4413      	add	r3, r2
 80086fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008700:	667b      	str	r3, [r7, #100]	@ 0x64
 8008702:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800870c:	b29a      	uxth	r2, r3
 800870e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <HAL_PCD_EP_DB_Transmit+0x76c>
 8008718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008726:	b29a      	uxth	r2, r3
 8008728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e04e      	b.n	80087cc <HAL_PCD_EP_DB_Transmit+0x80a>
 800872e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008730:	2b3e      	cmp	r3, #62	@ 0x3e
 8008732:	d816      	bhi.n	8008762 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8008734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	663b      	str	r3, [r7, #96]	@ 0x60
 800873a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <HAL_PCD_EP_DB_Transmit+0x788>
 8008744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008746:	3301      	adds	r3, #1
 8008748:	663b      	str	r3, [r7, #96]	@ 0x60
 800874a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29a      	uxth	r2, r3
 8008750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008752:	b29b      	uxth	r3, r3
 8008754:	029b      	lsls	r3, r3, #10
 8008756:	b29b      	uxth	r3, r3
 8008758:	4313      	orrs	r3, r2
 800875a:	b29a      	uxth	r2, r3
 800875c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	e034      	b.n	80087cc <HAL_PCD_EP_DB_Transmit+0x80a>
 8008762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008764:	095b      	lsrs	r3, r3, #5
 8008766:	663b      	str	r3, [r7, #96]	@ 0x60
 8008768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800876a:	f003 031f 	and.w	r3, r3, #31
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8008772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008774:	3b01      	subs	r3, #1
 8008776:	663b      	str	r3, [r7, #96]	@ 0x60
 8008778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29a      	uxth	r2, r3
 800877e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008780:	b29b      	uxth	r3, r3
 8008782:	029b      	lsls	r3, r3, #10
 8008784:	b29b      	uxth	r3, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	b29b      	uxth	r3, r3
 800878a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008792:	b29a      	uxth	r2, r3
 8008794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	e018      	b.n	80087cc <HAL_PCD_EP_DB_Transmit+0x80a>
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d114      	bne.n	80087cc <HAL_PCD_EP_DB_Transmit+0x80a>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087b0:	4413      	add	r3, r2
 80087b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	00da      	lsls	r2, r3, #3
 80087ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087bc:	4413      	add	r3, r2
 80087be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6959      	ldr	r1, [r3, #20]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	895a      	ldrh	r2, [r3, #10]
 80087d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f004 fe95 	bl	800d50a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087fa:	82fb      	strh	r3, [r7, #22]
 80087fc:	8afb      	ldrh	r3, [r7, #22]
 80087fe:	f083 0310 	eor.w	r3, r3, #16
 8008802:	82fb      	strh	r3, [r7, #22]
 8008804:	8afb      	ldrh	r3, [r7, #22]
 8008806:	f083 0320 	eor.w	r3, r3, #32
 800880a:	82fb      	strh	r3, [r7, #22]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	8afb      	ldrh	r3, [r7, #22]
 800881c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882c:	b29b      	uxth	r3, r3
 800882e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3798      	adds	r7, #152	@ 0x98
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800885e:	b29b      	uxth	r3, r3
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008872:	b29b      	uxth	r3, r3
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d141      	bne.n	800893a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088b6:	4b4b      	ldr	r3, [pc, #300]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c2:	d131      	bne.n	8008928 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088c4:	4b47      	ldr	r3, [pc, #284]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ca:	4a46      	ldr	r2, [pc, #280]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088d4:	4b43      	ldr	r3, [pc, #268]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088dc:	4a41      	ldr	r2, [pc, #260]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80088e4:	4b40      	ldr	r3, [pc, #256]	@ (80089e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2232      	movs	r2, #50	@ 0x32
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	4a3f      	ldr	r2, [pc, #252]	@ (80089ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80088f0:	fba2 2303 	umull	r2, r3, r2, r3
 80088f4:	0c9b      	lsrs	r3, r3, #18
 80088f6:	3301      	adds	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088fa:	e002      	b.n	8008902 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3b01      	subs	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008902:	4b38      	ldr	r3, [pc, #224]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800890a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800890e:	d102      	bne.n	8008916 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f2      	bne.n	80088fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008916:	4b33      	ldr	r3, [pc, #204]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800891e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008922:	d158      	bne.n	80089d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e057      	b.n	80089d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008928:	4b2e      	ldr	r3, [pc, #184]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800892a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800892e:	4a2d      	ldr	r2, [pc, #180]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008938:	e04d      	b.n	80089d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008940:	d141      	bne.n	80089c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008942:	4b28      	ldr	r3, [pc, #160]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800894a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894e:	d131      	bne.n	80089b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008950:	4b24      	ldr	r3, [pc, #144]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008956:	4a23      	ldr	r2, [pc, #140]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800895c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008960:	4b20      	ldr	r3, [pc, #128]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008968:	4a1e      	ldr	r2, [pc, #120]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800896a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800896e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008970:	4b1d      	ldr	r3, [pc, #116]	@ (80089e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2232      	movs	r2, #50	@ 0x32
 8008976:	fb02 f303 	mul.w	r3, r2, r3
 800897a:	4a1c      	ldr	r2, [pc, #112]	@ (80089ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800897c:	fba2 2303 	umull	r2, r3, r2, r3
 8008980:	0c9b      	lsrs	r3, r3, #18
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008986:	e002      	b.n	800898e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3b01      	subs	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800898e:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800899a:	d102      	bne.n	80089a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f2      	bne.n	8008988 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089a2:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ae:	d112      	bne.n	80089d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e011      	b.n	80089d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089b4:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ba:	4a0a      	ldr	r2, [pc, #40]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80089c4:	e007      	b.n	80089d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80089c6:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089ce:	4a05      	ldr	r2, [pc, #20]	@ (80089e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40007000 	.word	0x40007000
 80089e8:	20000000 	.word	0x20000000
 80089ec:	431bde83 	.word	0x431bde83

080089f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80089f4:	4b05      	ldr	r3, [pc, #20]	@ (8008a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	4a04      	ldr	r2, [pc, #16]	@ (8008a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089fe:	6093      	str	r3, [r2, #8]
}
 8008a00:	bf00      	nop
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40007000 	.word	0x40007000

08008a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e2fe      	b.n	8009020 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d075      	beq.n	8008b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a2e:	4b97      	ldr	r3, [pc, #604]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a38:	4b94      	ldr	r3, [pc, #592]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d102      	bne.n	8008a4e <HAL_RCC_OscConfig+0x3e>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d002      	beq.n	8008a54 <HAL_RCC_OscConfig+0x44>
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d10b      	bne.n	8008a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a54:	4b8d      	ldr	r3, [pc, #564]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d05b      	beq.n	8008b18 <HAL_RCC_OscConfig+0x108>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d157      	bne.n	8008b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e2d9      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a74:	d106      	bne.n	8008a84 <HAL_RCC_OscConfig+0x74>
 8008a76:	4b85      	ldr	r3, [pc, #532]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a84      	ldr	r2, [pc, #528]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e01d      	b.n	8008ac0 <HAL_RCC_OscConfig+0xb0>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a8c:	d10c      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x98>
 8008a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a7e      	ldr	r2, [pc, #504]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e00b      	b.n	8008ac0 <HAL_RCC_OscConfig+0xb0>
 8008aa8:	4b78      	ldr	r3, [pc, #480]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a77      	ldr	r2, [pc, #476]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	4b75      	ldr	r3, [pc, #468]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a74      	ldr	r2, [pc, #464]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d013      	beq.n	8008af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7f9 ff50 	bl	800296c <HAL_GetTick>
 8008acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ad0:	f7f9 ff4c 	bl	800296c <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b64      	cmp	r3, #100	@ 0x64
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e29e      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f0      	beq.n	8008ad0 <HAL_RCC_OscConfig+0xc0>
 8008aee:	e014      	b.n	8008b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7f9 ff3c 	bl	800296c <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008af8:	f7f9 ff38 	bl	800296c <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b64      	cmp	r3, #100	@ 0x64
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e28a      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b0a:	4b60      	ldr	r3, [pc, #384]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0xe8>
 8008b16:	e000      	b.n	8008b1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d075      	beq.n	8008c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b26:	4b59      	ldr	r3, [pc, #356]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 030c 	and.w	r3, r3, #12
 8008b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b30:	4b56      	ldr	r3, [pc, #344]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	d102      	bne.n	8008b46 <HAL_RCC_OscConfig+0x136>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d002      	beq.n	8008b4c <HAL_RCC_OscConfig+0x13c>
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d11f      	bne.n	8008b8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_RCC_OscConfig+0x154>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e25d      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b64:	4b49      	ldr	r3, [pc, #292]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	061b      	lsls	r3, r3, #24
 8008b72:	4946      	ldr	r1, [pc, #280]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b78:	4b45      	ldr	r3, [pc, #276]	@ (8008c90 <HAL_RCC_OscConfig+0x280>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f9 fea9 	bl	80028d4 <HAL_InitTick>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d043      	beq.n	8008c10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e249      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d023      	beq.n	8008bdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b94:	4b3d      	ldr	r3, [pc, #244]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a3c      	ldr	r2, [pc, #240]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba0:	f7f9 fee4 	bl	800296c <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba8:	f7f9 fee0 	bl	800296c <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e232      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bba:	4b34      	ldr	r3, [pc, #208]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0f0      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc6:	4b31      	ldr	r3, [pc, #196]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	061b      	lsls	r3, r3, #24
 8008bd4:	492d      	ldr	r1, [pc, #180]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	604b      	str	r3, [r1, #4]
 8008bda:	e01a      	b.n	8008c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a2a      	ldr	r2, [pc, #168]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008be2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be8:	f7f9 fec0 	bl	800296c <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bf0:	f7f9 febc 	bl	800296c <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e20e      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c02:	4b22      	ldr	r3, [pc, #136]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f0      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x1e0>
 8008c0e:	e000      	b.n	8008c12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d041      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01c      	beq.n	8008c60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c26:	4b19      	ldr	r3, [pc, #100]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c2c:	4a17      	ldr	r2, [pc, #92]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c2e:	f043 0301 	orr.w	r3, r3, #1
 8008c32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c36:	f7f9 fe99 	bl	800296c <HAL_GetTick>
 8008c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c3c:	e008      	b.n	8008c50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c3e:	f7f9 fe95 	bl	800296c <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e1e7      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c50:	4b0e      	ldr	r3, [pc, #56]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0ef      	beq.n	8008c3e <HAL_RCC_OscConfig+0x22e>
 8008c5e:	e020      	b.n	8008ca2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c60:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c66:	4a09      	ldr	r2, [pc, #36]	@ (8008c8c <HAL_RCC_OscConfig+0x27c>)
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c70:	f7f9 fe7c 	bl	800296c <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c76:	e00d      	b.n	8008c94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c78:	f7f9 fe78 	bl	800296c <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d906      	bls.n	8008c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e1ca      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
 8008c8a:	bf00      	nop
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c94:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1ea      	bne.n	8008c78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80a6 	beq.w	8008dfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008cb4:	4b84      	ldr	r3, [pc, #528]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x2b4>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCC_OscConfig+0x2b6>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cca:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	4a7e      	ldr	r2, [pc, #504]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ce6:	4b79      	ldr	r3, [pc, #484]	@ (8008ecc <HAL_RCC_OscConfig+0x4bc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d118      	bne.n	8008d24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cf2:	4b76      	ldr	r3, [pc, #472]	@ (8008ecc <HAL_RCC_OscConfig+0x4bc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a75      	ldr	r2, [pc, #468]	@ (8008ecc <HAL_RCC_OscConfig+0x4bc>)
 8008cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cfe:	f7f9 fe35 	bl	800296c <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d06:	f7f9 fe31 	bl	800296c <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e183      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d18:	4b6c      	ldr	r3, [pc, #432]	@ (8008ecc <HAL_RCC_OscConfig+0x4bc>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d108      	bne.n	8008d3e <HAL_RCC_OscConfig+0x32e>
 8008d2c:	4b66      	ldr	r3, [pc, #408]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d32:	4a65      	ldr	r2, [pc, #404]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d3c:	e024      	b.n	8008d88 <HAL_RCC_OscConfig+0x378>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	d110      	bne.n	8008d68 <HAL_RCC_OscConfig+0x358>
 8008d46:	4b60      	ldr	r3, [pc, #384]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d4e:	f043 0304 	orr.w	r3, r3, #4
 8008d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d56:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d66:	e00f      	b.n	8008d88 <HAL_RCC_OscConfig+0x378>
 8008d68:	4b57      	ldr	r3, [pc, #348]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6e:	4a56      	ldr	r2, [pc, #344]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d78:	4b53      	ldr	r3, [pc, #332]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7e:	4a52      	ldr	r2, [pc, #328]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008d80:	f023 0304 	bic.w	r3, r3, #4
 8008d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d016      	beq.n	8008dbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d90:	f7f9 fdec 	bl	800296c <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d96:	e00a      	b.n	8008dae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d98:	f7f9 fde8 	bl	800296c <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e138      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dae:	4b46      	ldr	r3, [pc, #280]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0ed      	beq.n	8008d98 <HAL_RCC_OscConfig+0x388>
 8008dbc:	e015      	b.n	8008dea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dbe:	f7f9 fdd5 	bl	800296c <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dc4:	e00a      	b.n	8008ddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc6:	f7f9 fdd1 	bl	800296c <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e121      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1ed      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008dea:	7ffb      	ldrb	r3, [r7, #31]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df0:	4b35      	ldr	r3, [pc, #212]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df4:	4a34      	ldr	r2, [pc, #208]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d03c      	beq.n	8008e82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01c      	beq.n	8008e4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e10:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e16:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e18:	f043 0301 	orr.w	r3, r3, #1
 8008e1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e20:	f7f9 fda4 	bl	800296c <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e28:	f7f9 fda0 	bl	800296c <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e0f2      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e3a:	4b23      	ldr	r3, [pc, #140]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0ef      	beq.n	8008e28 <HAL_RCC_OscConfig+0x418>
 8008e48:	e01b      	b.n	8008e82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e50:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e52:	f023 0301 	bic.w	r3, r3, #1
 8008e56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5a:	f7f9 fd87 	bl	800296c <HAL_GetTick>
 8008e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e60:	e008      	b.n	8008e74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e62:	f7f9 fd83 	bl	800296c <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e0d5      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e74:	4b14      	ldr	r3, [pc, #80]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1ef      	bne.n	8008e62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 80c9 	beq.w	800901e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 030c 	and.w	r3, r3, #12
 8008e94:	2b0c      	cmp	r3, #12
 8008e96:	f000 8083 	beq.w	8008fa0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d15e      	bne.n	8008f60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea2:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a08      	ldr	r2, [pc, #32]	@ (8008ec8 <HAL_RCC_OscConfig+0x4b8>)
 8008ea8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eae:	f7f9 fd5d 	bl	800296c <HAL_GetTick>
 8008eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eb4:	e00c      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb6:	f7f9 fd59 	bl	800296c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d905      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e0ab      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
 8008ec8:	40021000 	.word	0x40021000
 8008ecc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ed0:	4b55      	ldr	r3, [pc, #340]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1ec      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008edc:	4b52      	ldr	r3, [pc, #328]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	4b52      	ldr	r3, [pc, #328]	@ (800902c <HAL_RCC_OscConfig+0x61c>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6a11      	ldr	r1, [r2, #32]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008eec:	3a01      	subs	r2, #1
 8008eee:	0112      	lsls	r2, r2, #4
 8008ef0:	4311      	orrs	r1, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ef6:	0212      	lsls	r2, r2, #8
 8008ef8:	4311      	orrs	r1, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008efe:	0852      	lsrs	r2, r2, #1
 8008f00:	3a01      	subs	r2, #1
 8008f02:	0552      	lsls	r2, r2, #21
 8008f04:	4311      	orrs	r1, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f0a:	0852      	lsrs	r2, r2, #1
 8008f0c:	3a01      	subs	r2, #1
 8008f0e:	0652      	lsls	r2, r2, #25
 8008f10:	4311      	orrs	r1, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f16:	06d2      	lsls	r2, r2, #27
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	4943      	ldr	r1, [pc, #268]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f20:	4b41      	ldr	r3, [pc, #260]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a40      	ldr	r2, [pc, #256]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	4a3d      	ldr	r2, [pc, #244]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f38:	f7f9 fd18 	bl	800296c <HAL_GetTick>
 8008f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f3e:	e008      	b.n	8008f52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f40:	f7f9 fd14 	bl	800296c <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e066      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f52:	4b35      	ldr	r3, [pc, #212]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0f0      	beq.n	8008f40 <HAL_RCC_OscConfig+0x530>
 8008f5e:	e05e      	b.n	800901e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f60:	4b31      	ldr	r3, [pc, #196]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a30      	ldr	r2, [pc, #192]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6c:	f7f9 fcfe 	bl	800296c <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f74:	f7f9 fcfa 	bl	800296c <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e04c      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f86:	4b28      	ldr	r3, [pc, #160]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008f92:	4b25      	ldr	r3, [pc, #148]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	4924      	ldr	r1, [pc, #144]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008f98:	4b25      	ldr	r3, [pc, #148]	@ (8009030 <HAL_RCC_OscConfig+0x620>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	60cb      	str	r3, [r1, #12]
 8008f9e:	e03e      	b.n	800901e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d101      	bne.n	8008fac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e039      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008fac:	4b1e      	ldr	r3, [pc, #120]	@ (8009028 <HAL_RCC_OscConfig+0x618>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 0203 	and.w	r2, r3, #3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d12c      	bne.n	800901a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d123      	bne.n	800901a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d11b      	bne.n	800901a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d113      	bne.n	800901a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	3b01      	subs	r3, #1
 8009000:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009002:	429a      	cmp	r2, r3
 8009004:	d109      	bne.n	800901a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	3b01      	subs	r3, #1
 8009014:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009016:	429a      	cmp	r2, r3
 8009018:	d001      	beq.n	800901e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	40021000 	.word	0x40021000
 800902c:	019f800c 	.word	0x019f800c
 8009030:	feeefffc 	.word	0xfeeefffc

08009034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e11e      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800904c:	4b91      	ldr	r3, [pc, #580]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 030f 	and.w	r3, r3, #15
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d910      	bls.n	800907c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800905a:	4b8e      	ldr	r3, [pc, #568]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f023 020f 	bic.w	r2, r3, #15
 8009062:	498c      	ldr	r1, [pc, #560]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	4313      	orrs	r3, r2
 8009068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800906a:	4b8a      	ldr	r3, [pc, #552]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d001      	beq.n	800907c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e106      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d073      	beq.n	8009170 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b03      	cmp	r3, #3
 800908e:	d129      	bne.n	80090e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009090:	4b81      	ldr	r3, [pc, #516]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0f4      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80090a0:	f000 f99e 	bl	80093e0 <RCC_GetSysClockFreqFromPLLSource>
 80090a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4a7c      	ldr	r2, [pc, #496]	@ (800929c <HAL_RCC_ClockConfig+0x268>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d93f      	bls.n	800912e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090ae:	4b7a      	ldr	r3, [pc, #488]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d033      	beq.n	800912e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d12f      	bne.n	800912e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090ce:	4b72      	ldr	r3, [pc, #456]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090d6:	4a70      	ldr	r2, [pc, #448]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80090d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80090de:	2380      	movs	r3, #128	@ 0x80
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e024      	b.n	800912e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d107      	bne.n	80090fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0c6      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090fc:	4b66      	ldr	r3, [pc, #408]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e0be      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800910c:	f000 f8ce 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 8009110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4a61      	ldr	r2, [pc, #388]	@ (800929c <HAL_RCC_ClockConfig+0x268>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d909      	bls.n	800912e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800911a:	4b5f      	ldr	r3, [pc, #380]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009122:	4a5d      	ldr	r2, [pc, #372]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 8009124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009128:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800912a:	2380      	movs	r3, #128	@ 0x80
 800912c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800912e:	4b5a      	ldr	r3, [pc, #360]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f023 0203 	bic.w	r2, r3, #3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4957      	ldr	r1, [pc, #348]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800913c:	4313      	orrs	r3, r2
 800913e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009140:	f7f9 fc14 	bl	800296c <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009146:	e00a      	b.n	800915e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009148:	f7f9 fc10 	bl	800296c <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e095      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	4b4e      	ldr	r3, [pc, #312]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 020c 	and.w	r2, r3, #12
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	429a      	cmp	r2, r3
 800916e:	d1eb      	bne.n	8009148 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d023      	beq.n	80091c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009188:	4b43      	ldr	r3, [pc, #268]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4a42      	ldr	r2, [pc, #264]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800918e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009192:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0308 	and.w	r3, r3, #8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d007      	beq.n	80091b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80091a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091a8:	4a3b      	ldr	r2, [pc, #236]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091b0:	4b39      	ldr	r3, [pc, #228]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	4936      	ldr	r1, [pc, #216]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	608b      	str	r3, [r1, #8]
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b80      	cmp	r3, #128	@ 0x80
 80091c8:	d105      	bne.n	80091d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80091ca:	4b33      	ldr	r3, [pc, #204]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	4a32      	ldr	r2, [pc, #200]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 80091d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d21d      	bcs.n	8009220 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f023 020f 	bic.w	r2, r3, #15
 80091ec:	4929      	ldr	r1, [pc, #164]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80091f4:	f7f9 fbba 	bl	800296c <HAL_GetTick>
 80091f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091fa:	e00a      	b.n	8009212 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091fc:	f7f9 fbb6 	bl	800296c <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800920a:	4293      	cmp	r3, r2
 800920c:	d901      	bls.n	8009212 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e03b      	b.n	800928a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009212:	4b20      	ldr	r3, [pc, #128]	@ (8009294 <HAL_RCC_ClockConfig+0x260>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d1ed      	bne.n	80091fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800922c:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4917      	ldr	r1, [pc, #92]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800923a:	4313      	orrs	r3, r2
 800923c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0308 	and.w	r3, r3, #8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800924a:	4b13      	ldr	r3, [pc, #76]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	490f      	ldr	r1, [pc, #60]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 800925a:	4313      	orrs	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800925e:	f000 f825 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 8009262:	4602      	mov	r2, r0
 8009264:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <HAL_RCC_ClockConfig+0x264>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	091b      	lsrs	r3, r3, #4
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	490c      	ldr	r1, [pc, #48]	@ (80092a0 <HAL_RCC_ClockConfig+0x26c>)
 8009270:	5ccb      	ldrb	r3, [r1, r3]
 8009272:	f003 031f 	and.w	r3, r3, #31
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	4a0a      	ldr	r2, [pc, #40]	@ (80092a4 <HAL_RCC_ClockConfig+0x270>)
 800927c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800927e:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <HAL_RCC_ClockConfig+0x274>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f7f9 fb26 	bl	80028d4 <HAL_InitTick>
 8009288:	4603      	mov	r3, r0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40022000 	.word	0x40022000
 8009298:	40021000 	.word	0x40021000
 800929c:	04c4b400 	.word	0x04c4b400
 80092a0:	0800e6e8 	.word	0x0800e6e8
 80092a4:	20000000 	.word	0x20000000
 80092a8:	20000004 	.word	0x20000004

080092ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d102      	bne.n	80092c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80092be:	4b2a      	ldr	r3, [pc, #168]	@ (8009368 <HAL_RCC_GetSysClockFreq+0xbc>)
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	e047      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80092c4:	4b27      	ldr	r3, [pc, #156]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 030c 	and.w	r3, r3, #12
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d102      	bne.n	80092d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092d0:	4b26      	ldr	r3, [pc, #152]	@ (800936c <HAL_RCC_GetSysClockFreq+0xc0>)
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	e03e      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80092d6:	4b23      	ldr	r3, [pc, #140]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 030c 	and.w	r3, r3, #12
 80092de:	2b0c      	cmp	r3, #12
 80092e0:	d136      	bne.n	8009350 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092e2:	4b20      	ldr	r3, [pc, #128]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	091b      	lsrs	r3, r3, #4
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	3301      	adds	r3, #1
 80092f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d10c      	bne.n	800931a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009300:	4a1a      	ldr	r2, [pc, #104]	@ (800936c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	fbb2 f3f3 	udiv	r3, r2, r3
 8009308:	4a16      	ldr	r2, [pc, #88]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 800930a:	68d2      	ldr	r2, [r2, #12]
 800930c:	0a12      	lsrs	r2, r2, #8
 800930e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	617b      	str	r3, [r7, #20]
      break;
 8009318:	e00c      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800931a:	4a13      	ldr	r2, [pc, #76]	@ (8009368 <HAL_RCC_GetSysClockFreq+0xbc>)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009322:	4a10      	ldr	r2, [pc, #64]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009324:	68d2      	ldr	r2, [r2, #12]
 8009326:	0a12      	lsrs	r2, r2, #8
 8009328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	617b      	str	r3, [r7, #20]
      break;
 8009332:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009334:	4b0b      	ldr	r3, [pc, #44]	@ (8009364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	0e5b      	lsrs	r3, r3, #25
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	3301      	adds	r3, #1
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	fbb2 f3f3 	udiv	r3, r2, r3
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	e001      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009354:	693b      	ldr	r3, [r7, #16]
}
 8009356:	4618      	mov	r0, r3
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	40021000 	.word	0x40021000
 8009368:	00f42400 	.word	0x00f42400
 800936c:	007a1200 	.word	0x007a1200

08009370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009374:	4b03      	ldr	r3, [pc, #12]	@ (8009384 <HAL_RCC_GetHCLKFreq+0x14>)
 8009376:	681b      	ldr	r3, [r3, #0]
}
 8009378:	4618      	mov	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000000 	.word	0x20000000

08009388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800938c:	f7ff fff0 	bl	8009370 <HAL_RCC_GetHCLKFreq>
 8009390:	4602      	mov	r2, r0
 8009392:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	0a1b      	lsrs	r3, r3, #8
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	4904      	ldr	r1, [pc, #16]	@ (80093b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800939e:	5ccb      	ldrb	r3, [r1, r3]
 80093a0:	f003 031f 	and.w	r3, r3, #31
 80093a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40021000 	.word	0x40021000
 80093b0:	0800e6f8 	.word	0x0800e6f8

080093b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80093b8:	f7ff ffda 	bl	8009370 <HAL_RCC_GetHCLKFreq>
 80093bc:	4602      	mov	r2, r0
 80093be:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	0adb      	lsrs	r3, r3, #11
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	4904      	ldr	r1, [pc, #16]	@ (80093dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80093ca:	5ccb      	ldrb	r3, [r1, r3]
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40021000 	.word	0x40021000
 80093dc:	0800e6f8 	.word	0x0800e6f8

080093e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80093e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	091b      	lsrs	r3, r3, #4
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	3301      	adds	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b03      	cmp	r3, #3
 8009402:	d10c      	bne.n	800941e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009404:	4a17      	ldr	r2, [pc, #92]	@ (8009464 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	fbb2 f3f3 	udiv	r3, r2, r3
 800940c:	4a14      	ldr	r2, [pc, #80]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800940e:	68d2      	ldr	r2, [r2, #12]
 8009410:	0a12      	lsrs	r2, r2, #8
 8009412:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	617b      	str	r3, [r7, #20]
    break;
 800941c:	e00c      	b.n	8009438 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800941e:	4a12      	ldr	r2, [pc, #72]	@ (8009468 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	4a0e      	ldr	r2, [pc, #56]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009428:	68d2      	ldr	r2, [r2, #12]
 800942a:	0a12      	lsrs	r2, r2, #8
 800942c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	617b      	str	r3, [r7, #20]
    break;
 8009436:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009438:	4b09      	ldr	r3, [pc, #36]	@ (8009460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	0e5b      	lsrs	r3, r3, #25
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	3301      	adds	r3, #1
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009450:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009452:	687b      	ldr	r3, [r7, #4]
}
 8009454:	4618      	mov	r0, r3
 8009456:	371c      	adds	r7, #28
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	40021000 	.word	0x40021000
 8009464:	007a1200 	.word	0x007a1200
 8009468:	00f42400 	.word	0x00f42400

0800946c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009474:	2300      	movs	r3, #0
 8009476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009478:	2300      	movs	r3, #0
 800947a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8098 	beq.w	80095ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800948a:	2300      	movs	r3, #0
 800948c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800948e:	4b43      	ldr	r3, [pc, #268]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10d      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800949a:	4b40      	ldr	r3, [pc, #256]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800949c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949e:	4a3f      	ldr	r2, [pc, #252]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a6:	4b3d      	ldr	r3, [pc, #244]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ae:	60bb      	str	r3, [r7, #8]
 80094b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094b2:	2301      	movs	r3, #1
 80094b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094b6:	4b3a      	ldr	r3, [pc, #232]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a39      	ldr	r2, [pc, #228]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094c2:	f7f9 fa53 	bl	800296c <HAL_GetTick>
 80094c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094c8:	e009      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ca:	f7f9 fa4f 	bl	800296c <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d902      	bls.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	74fb      	strb	r3, [r7, #19]
        break;
 80094dc:	e005      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094de:	4b30      	ldr	r3, [pc, #192]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0ef      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80094ea:	7cfb      	ldrb	r3, [r7, #19]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d159      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80094f0:	4b2a      	ldr	r3, [pc, #168]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01e      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	429a      	cmp	r2, r3
 800950a:	d019      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800950c:	4b23      	ldr	r3, [pc, #140]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800950e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009518:	4b20      	ldr	r3, [pc, #128]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800951a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951e:	4a1f      	ldr	r2, [pc, #124]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009528:	4b1c      	ldr	r3, [pc, #112]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800952a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952e:	4a1b      	ldr	r2, [pc, #108]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009538:	4a18      	ldr	r2, [pc, #96]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d016      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954a:	f7f9 fa0f 	bl	800296c <HAL_GetTick>
 800954e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009550:	e00b      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009552:	f7f9 fa0b 	bl	800296c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009560:	4293      	cmp	r3, r2
 8009562:	d902      	bls.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	74fb      	strb	r3, [r7, #19]
            break;
 8009568:	e006      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0ec      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009578:	7cfb      	ldrb	r3, [r7, #19]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10b      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800957e:	4b07      	ldr	r3, [pc, #28]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800958c:	4903      	ldr	r1, [pc, #12]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800958e:	4313      	orrs	r3, r2
 8009590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009594:	e008      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009596:	7cfb      	ldrb	r3, [r7, #19]
 8009598:	74bb      	strb	r3, [r7, #18]
 800959a:	e005      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800959c:	40021000 	.word	0x40021000
 80095a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a4:	7cfb      	ldrb	r3, [r7, #19]
 80095a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095a8:	7c7b      	ldrb	r3, [r7, #17]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d105      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ae:	4ba7      	ldr	r3, [pc, #668]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b2:	4aa6      	ldr	r2, [pc, #664]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095c6:	4ba1      	ldr	r3, [pc, #644]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095cc:	f023 0203 	bic.w	r2, r3, #3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	499d      	ldr	r1, [pc, #628]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095e8:	4b98      	ldr	r3, [pc, #608]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ee:	f023 020c 	bic.w	r2, r3, #12
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	4995      	ldr	r1, [pc, #596]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800960a:	4b90      	ldr	r3, [pc, #576]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009610:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	498c      	ldr	r1, [pc, #560]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0308 	and.w	r3, r3, #8
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00a      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800962c:	4b87      	ldr	r3, [pc, #540]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009632:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	4984      	ldr	r1, [pc, #528]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0310 	and.w	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800964e:	4b7f      	ldr	r3, [pc, #508]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	497b      	ldr	r1, [pc, #492]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009670:	4b76      	ldr	r3, [pc, #472]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009676:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	4973      	ldr	r1, [pc, #460]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009680:	4313      	orrs	r3, r2
 8009682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009692:	4b6e      	ldr	r3, [pc, #440]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009698:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	496a      	ldr	r1, [pc, #424]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096b4:	4b65      	ldr	r3, [pc, #404]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	4962      	ldr	r1, [pc, #392]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096d6:	4b5d      	ldr	r3, [pc, #372]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e4:	4959      	ldr	r1, [pc, #356]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00a      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096f8:	4b54      	ldr	r3, [pc, #336]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096fe:	f023 0203 	bic.w	r2, r3, #3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	4951      	ldr	r1, [pc, #324]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009708:	4313      	orrs	r3, r2
 800970a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800971a:	4b4c      	ldr	r3, [pc, #304]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800971c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009720:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	4948      	ldr	r1, [pc, #288]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972a:	4313      	orrs	r3, r2
 800972c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009738:	2b00      	cmp	r3, #0
 800973a:	d015      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800973c:	4b43      	ldr	r3, [pc, #268]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974a:	4940      	ldr	r1, [pc, #256]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800974c:	4313      	orrs	r3, r2
 800974e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800975a:	d105      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800975c:	4b3b      	ldr	r3, [pc, #236]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	4a3a      	ldr	r2, [pc, #232]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009766:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009770:	2b00      	cmp	r3, #0
 8009772:	d015      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009774:	4b35      	ldr	r3, [pc, #212]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009782:	4932      	ldr	r1, [pc, #200]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009784:	4313      	orrs	r3, r2
 8009786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009792:	d105      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009794:	4b2d      	ldr	r3, [pc, #180]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	4a2c      	ldr	r2, [pc, #176]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800979e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d015      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097ac:	4b27      	ldr	r3, [pc, #156]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ba:	4924      	ldr	r1, [pc, #144]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097ca:	d105      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097cc:	4b1f      	ldr	r3, [pc, #124]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	4a1e      	ldr	r2, [pc, #120]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d015      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097e4:	4b19      	ldr	r3, [pc, #100]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f2:	4916      	ldr	r1, [pc, #88]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009802:	d105      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009804:	4b11      	ldr	r3, [pc, #68]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	4a10      	ldr	r2, [pc, #64]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800980a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800980e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d019      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800981c:	4b0b      	ldr	r3, [pc, #44]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982a:	4908      	ldr	r1, [pc, #32]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982c:	4313      	orrs	r3, r2
 800982e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983a:	d109      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800983c:	4b03      	ldr	r3, [pc, #12]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	4a02      	ldr	r2, [pc, #8]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009846:	60d3      	str	r3, [r2, #12]
 8009848:	e002      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800984a:	bf00      	nop
 800984c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d015      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800985c:	4b29      	ldr	r3, [pc, #164]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009862:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986a:	4926      	ldr	r1, [pc, #152]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800987a:	d105      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800987c:	4b21      	ldr	r3, [pc, #132]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	4a20      	ldr	r2, [pc, #128]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009886:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d015      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009894:	4b1b      	ldr	r3, [pc, #108]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a2:	4918      	ldr	r1, [pc, #96]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098b2:	d105      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098b4:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4a12      	ldr	r2, [pc, #72]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d015      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80098cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098da:	490a      	ldr	r1, [pc, #40]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098ea:	d105      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	4a04      	ldr	r2, [pc, #16]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80098f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40021000 	.word	0x40021000

08009908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e049      	b.n	80099ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7f8 fd30 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3304      	adds	r3, #4
 8009944:	4619      	mov	r1, r3
 8009946:	4610      	mov	r0, r2
 8009948:	f000 fd1e 	bl	800a388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d001      	beq.n	80099d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e04c      	b.n	8009a6a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2202      	movs	r2, #2
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a26      	ldr	r2, [pc, #152]	@ (8009a78 <HAL_TIM_Base_Start+0xc0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d022      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ea:	d01d      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a22      	ldr	r2, [pc, #136]	@ (8009a7c <HAL_TIM_Base_Start+0xc4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d018      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a21      	ldr	r2, [pc, #132]	@ (8009a80 <HAL_TIM_Base_Start+0xc8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d013      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1f      	ldr	r2, [pc, #124]	@ (8009a84 <HAL_TIM_Base_Start+0xcc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00e      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a88 <HAL_TIM_Base_Start+0xd0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1c      	ldr	r2, [pc, #112]	@ (8009a8c <HAL_TIM_Base_Start+0xd4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <HAL_TIM_Base_Start+0x70>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a1b      	ldr	r2, [pc, #108]	@ (8009a90 <HAL_TIM_Base_Start+0xd8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d115      	bne.n	8009a54 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	4b19      	ldr	r3, [pc, #100]	@ (8009a94 <HAL_TIM_Base_Start+0xdc>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b06      	cmp	r3, #6
 8009a38:	d015      	beq.n	8009a66 <HAL_TIM_Base_Start+0xae>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a40:	d011      	beq.n	8009a66 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0201 	orr.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a52:	e008      	b.n	8009a66 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0201 	orr.w	r2, r2, #1
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	e000      	b.n	8009a68 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40012c00 	.word	0x40012c00
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40013400 	.word	0x40013400
 8009a8c:	40014000 	.word	0x40014000
 8009a90:	40015000 	.word	0x40015000
 8009a94:	00010007 	.word	0x00010007

08009a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d001      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e054      	b.n	8009b5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a26      	ldr	r2, [pc, #152]	@ (8009b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d022      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ada:	d01d      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a22      	ldr	r2, [pc, #136]	@ (8009b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d018      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a21      	ldr	r2, [pc, #132]	@ (8009b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d013      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a1f      	ldr	r2, [pc, #124]	@ (8009b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00e      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1e      	ldr	r2, [pc, #120]	@ (8009b78 <HAL_TIM_Base_Start_IT+0xe0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d009      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1c      	ldr	r2, [pc, #112]	@ (8009b7c <HAL_TIM_Base_Start_IT+0xe4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d004      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1b      	ldr	r2, [pc, #108]	@ (8009b80 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d115      	bne.n	8009b44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689a      	ldr	r2, [r3, #8]
 8009b1e:	4b19      	ldr	r3, [pc, #100]	@ (8009b84 <HAL_TIM_Base_Start_IT+0xec>)
 8009b20:	4013      	ands	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b06      	cmp	r3, #6
 8009b28:	d015      	beq.n	8009b56 <HAL_TIM_Base_Start_IT+0xbe>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b30:	d011      	beq.n	8009b56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f042 0201 	orr.w	r2, r2, #1
 8009b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b42:	e008      	b.n	8009b56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e000      	b.n	8009b58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40012c00 	.word	0x40012c00
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	40000800 	.word	0x40000800
 8009b74:	40000c00 	.word	0x40000c00
 8009b78:	40013400 	.word	0x40013400
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40015000 	.word	0x40015000
 8009b84:	00010007 	.word	0x00010007

08009b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e049      	b.n	8009c2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7f8 fbd0 	bl	8002354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f000 fbde 	bl	800a388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d109      	bne.n	8009c5c <HAL_TIM_PWM_Start+0x24>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	e03c      	b.n	8009cd6 <HAL_TIM_PWM_Start+0x9e>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d109      	bne.n	8009c76 <HAL_TIM_PWM_Start+0x3e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	bf14      	ite	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	2300      	moveq	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	e02f      	b.n	8009cd6 <HAL_TIM_PWM_Start+0x9e>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d109      	bne.n	8009c90 <HAL_TIM_PWM_Start+0x58>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	bf14      	ite	ne
 8009c88:	2301      	movne	r3, #1
 8009c8a:	2300      	moveq	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	e022      	b.n	8009cd6 <HAL_TIM_PWM_Start+0x9e>
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b0c      	cmp	r3, #12
 8009c94:	d109      	bne.n	8009caa <HAL_TIM_PWM_Start+0x72>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	bf14      	ite	ne
 8009ca2:	2301      	movne	r3, #1
 8009ca4:	2300      	moveq	r3, #0
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	e015      	b.n	8009cd6 <HAL_TIM_PWM_Start+0x9e>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d109      	bne.n	8009cc4 <HAL_TIM_PWM_Start+0x8c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	bf14      	ite	ne
 8009cbc:	2301      	movne	r3, #1
 8009cbe:	2300      	moveq	r3, #0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	e008      	b.n	8009cd6 <HAL_TIM_PWM_Start+0x9e>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	bf14      	ite	ne
 8009cd0:	2301      	movne	r3, #1
 8009cd2:	2300      	moveq	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e0a6      	b.n	8009e2c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_PWM_Start+0xb6>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cec:	e023      	b.n	8009d36 <HAL_TIM_PWM_Start+0xfe>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d104      	bne.n	8009cfe <HAL_TIM_PWM_Start+0xc6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cfc:	e01b      	b.n	8009d36 <HAL_TIM_PWM_Start+0xfe>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d104      	bne.n	8009d0e <HAL_TIM_PWM_Start+0xd6>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d0c:	e013      	b.n	8009d36 <HAL_TIM_PWM_Start+0xfe>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b0c      	cmp	r3, #12
 8009d12:	d104      	bne.n	8009d1e <HAL_TIM_PWM_Start+0xe6>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d1c:	e00b      	b.n	8009d36 <HAL_TIM_PWM_Start+0xfe>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b10      	cmp	r3, #16
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_PWM_Start+0xf6>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d2c:	e003      	b.n	8009d36 <HAL_TIM_PWM_Start+0xfe>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2202      	movs	r2, #2
 8009d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 ff00 	bl	800ab44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a3a      	ldr	r2, [pc, #232]	@ (8009e34 <HAL_TIM_PWM_Start+0x1fc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d018      	beq.n	8009d80 <HAL_TIM_PWM_Start+0x148>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a39      	ldr	r2, [pc, #228]	@ (8009e38 <HAL_TIM_PWM_Start+0x200>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d013      	beq.n	8009d80 <HAL_TIM_PWM_Start+0x148>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a37      	ldr	r2, [pc, #220]	@ (8009e3c <HAL_TIM_PWM_Start+0x204>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00e      	beq.n	8009d80 <HAL_TIM_PWM_Start+0x148>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a36      	ldr	r2, [pc, #216]	@ (8009e40 <HAL_TIM_PWM_Start+0x208>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_TIM_PWM_Start+0x148>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a34      	ldr	r2, [pc, #208]	@ (8009e44 <HAL_TIM_PWM_Start+0x20c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <HAL_TIM_PWM_Start+0x148>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a33      	ldr	r2, [pc, #204]	@ (8009e48 <HAL_TIM_PWM_Start+0x210>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d101      	bne.n	8009d84 <HAL_TIM_PWM_Start+0x14c>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <HAL_TIM_PWM_Start+0x14e>
 8009d84:	2300      	movs	r3, #0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a25      	ldr	r2, [pc, #148]	@ (8009e34 <HAL_TIM_PWM_Start+0x1fc>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d022      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dac:	d01d      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a26      	ldr	r2, [pc, #152]	@ (8009e4c <HAL_TIM_PWM_Start+0x214>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d018      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a24      	ldr	r2, [pc, #144]	@ (8009e50 <HAL_TIM_PWM_Start+0x218>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d013      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a23      	ldr	r2, [pc, #140]	@ (8009e54 <HAL_TIM_PWM_Start+0x21c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00e      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a19      	ldr	r2, [pc, #100]	@ (8009e38 <HAL_TIM_PWM_Start+0x200>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d009      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a18      	ldr	r2, [pc, #96]	@ (8009e3c <HAL_TIM_PWM_Start+0x204>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d004      	beq.n	8009dea <HAL_TIM_PWM_Start+0x1b2>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a18      	ldr	r2, [pc, #96]	@ (8009e48 <HAL_TIM_PWM_Start+0x210>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d115      	bne.n	8009e16 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	4b19      	ldr	r3, [pc, #100]	@ (8009e58 <HAL_TIM_PWM_Start+0x220>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b06      	cmp	r3, #6
 8009dfa:	d015      	beq.n	8009e28 <HAL_TIM_PWM_Start+0x1f0>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e02:	d011      	beq.n	8009e28 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e14:	e008      	b.n	8009e28 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f042 0201 	orr.w	r2, r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e000      	b.n	8009e2a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40012c00 	.word	0x40012c00
 8009e38:	40013400 	.word	0x40013400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	40015000 	.word	0x40015000
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	40000800 	.word	0x40000800
 8009e54:	40000c00 	.word	0x40000c00
 8009e58:	00010007 	.word	0x00010007

08009e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d020      	beq.n	8009ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01b      	beq.n	8009ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f06f 0202 	mvn.w	r2, #2
 8009e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d003      	beq.n	8009eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa50 	bl	800a34c <HAL_TIM_IC_CaptureCallback>
 8009eac:	e005      	b.n	8009eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa42 	bl	800a338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa53 	bl	800a360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d020      	beq.n	8009f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01b      	beq.n	8009f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0204 	mvn.w	r2, #4
 8009edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa2a 	bl	800a34c <HAL_TIM_IC_CaptureCallback>
 8009ef8:	e005      	b.n	8009f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa1c 	bl	800a338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fa2d 	bl	800a360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d020      	beq.n	8009f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01b      	beq.n	8009f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f06f 0208 	mvn.w	r2, #8
 8009f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa04 	bl	800a34c <HAL_TIM_IC_CaptureCallback>
 8009f44:	e005      	b.n	8009f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f9f6 	bl	800a338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa07 	bl	800a360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d020      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01b      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f06f 0210 	mvn.w	r2, #16
 8009f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2208      	movs	r2, #8
 8009f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9de 	bl	800a34c <HAL_TIM_IC_CaptureCallback>
 8009f90:	e005      	b.n	8009f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f9d0 	bl	800a338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f9e1 	bl	800a360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d007      	beq.n	8009fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0201 	mvn.w	r2, #1
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f9ae 	bl	800a324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00c      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 ff01 	bl	800adf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00c      	beq.n	800a01a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fef9 	bl	800ae0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d007      	beq.n	800a03e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f99b 	bl	800a374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f06f 0220 	mvn.w	r2, #32
 800a05a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fec1 	bl	800ade4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fecd 	bl	800ae20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fec5 	bl	800ae34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00c      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 febd 	bl	800ae48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00c      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 feb5 	bl	800ae5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a112:	2b01      	cmp	r3, #1
 800a114:	d101      	bne.n	800a11a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a116:	2302      	movs	r3, #2
 800a118:	e0ff      	b.n	800a31a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b14      	cmp	r3, #20
 800a126:	f200 80f0 	bhi.w	800a30a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a12a:	a201      	add	r2, pc, #4	@ (adr r2, 800a130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a185 	.word	0x0800a185
 800a134:	0800a30b 	.word	0x0800a30b
 800a138:	0800a30b 	.word	0x0800a30b
 800a13c:	0800a30b 	.word	0x0800a30b
 800a140:	0800a1c5 	.word	0x0800a1c5
 800a144:	0800a30b 	.word	0x0800a30b
 800a148:	0800a30b 	.word	0x0800a30b
 800a14c:	0800a30b 	.word	0x0800a30b
 800a150:	0800a207 	.word	0x0800a207
 800a154:	0800a30b 	.word	0x0800a30b
 800a158:	0800a30b 	.word	0x0800a30b
 800a15c:	0800a30b 	.word	0x0800a30b
 800a160:	0800a247 	.word	0x0800a247
 800a164:	0800a30b 	.word	0x0800a30b
 800a168:	0800a30b 	.word	0x0800a30b
 800a16c:	0800a30b 	.word	0x0800a30b
 800a170:	0800a289 	.word	0x0800a289
 800a174:	0800a30b 	.word	0x0800a30b
 800a178:	0800a30b 	.word	0x0800a30b
 800a17c:	0800a30b 	.word	0x0800a30b
 800a180:	0800a2c9 	.word	0x0800a2c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 f9b0 	bl	800a4f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0208 	orr.w	r2, r2, #8
 800a19e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0204 	bic.w	r2, r2, #4
 800a1ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6999      	ldr	r1, [r3, #24]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691a      	ldr	r2, [r3, #16]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	619a      	str	r2, [r3, #24]
      break;
 800a1c2:	e0a5      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fa2a 	bl	800a624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	699a      	ldr	r2, [r3, #24]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699a      	ldr	r2, [r3, #24]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6999      	ldr	r1, [r3, #24]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	021a      	lsls	r2, r3, #8
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	619a      	str	r2, [r3, #24]
      break;
 800a204:	e084      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fa9d 	bl	800a74c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69da      	ldr	r2, [r3, #28]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 0208 	orr.w	r2, r2, #8
 800a220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69da      	ldr	r2, [r3, #28]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0204 	bic.w	r2, r2, #4
 800a230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69d9      	ldr	r1, [r3, #28]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	61da      	str	r2, [r3, #28]
      break;
 800a244:	e064      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fb0f 	bl	800a870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69da      	ldr	r2, [r3, #28]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	69d9      	ldr	r1, [r3, #28]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	021a      	lsls	r2, r3, #8
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	61da      	str	r2, [r3, #28]
      break;
 800a286:	e043      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68b9      	ldr	r1, [r7, #8]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fb82 	bl	800a998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f042 0208 	orr.w	r2, r2, #8
 800a2a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0204 	bic.w	r2, r2, #4
 800a2b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	691a      	ldr	r2, [r3, #16]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2c6:	e023      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fbcc 	bl	800aa6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	021a      	lsls	r2, r3, #8
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a308:	e002      	b.n	800a310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	75fb      	strb	r3, [r7, #23]
      break;
 800a30e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop

0800a324 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a4c      	ldr	r2, [pc, #304]	@ (800a4cc <TIM_Base_SetConfig+0x144>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d017      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a6:	d013      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a49      	ldr	r2, [pc, #292]	@ (800a4d0 <TIM_Base_SetConfig+0x148>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00f      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a48      	ldr	r2, [pc, #288]	@ (800a4d4 <TIM_Base_SetConfig+0x14c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00b      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a47      	ldr	r2, [pc, #284]	@ (800a4d8 <TIM_Base_SetConfig+0x150>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d007      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a46      	ldr	r2, [pc, #280]	@ (800a4dc <TIM_Base_SetConfig+0x154>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d003      	beq.n	800a3d0 <TIM_Base_SetConfig+0x48>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a45      	ldr	r2, [pc, #276]	@ (800a4e0 <TIM_Base_SetConfig+0x158>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d108      	bne.n	800a3e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a39      	ldr	r2, [pc, #228]	@ (800a4cc <TIM_Base_SetConfig+0x144>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d023      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f0:	d01f      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a36      	ldr	r2, [pc, #216]	@ (800a4d0 <TIM_Base_SetConfig+0x148>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d01b      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a35      	ldr	r2, [pc, #212]	@ (800a4d4 <TIM_Base_SetConfig+0x14c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d017      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a34      	ldr	r2, [pc, #208]	@ (800a4d8 <TIM_Base_SetConfig+0x150>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d013      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a33      	ldr	r2, [pc, #204]	@ (800a4dc <TIM_Base_SetConfig+0x154>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00f      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a33      	ldr	r2, [pc, #204]	@ (800a4e4 <TIM_Base_SetConfig+0x15c>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d00b      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a32      	ldr	r2, [pc, #200]	@ (800a4e8 <TIM_Base_SetConfig+0x160>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d007      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a31      	ldr	r2, [pc, #196]	@ (800a4ec <TIM_Base_SetConfig+0x164>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d003      	beq.n	800a432 <TIM_Base_SetConfig+0xaa>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a2c      	ldr	r2, [pc, #176]	@ (800a4e0 <TIM_Base_SetConfig+0x158>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d108      	bne.n	800a444 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a18      	ldr	r2, [pc, #96]	@ (800a4cc <TIM_Base_SetConfig+0x144>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d013      	beq.n	800a498 <TIM_Base_SetConfig+0x110>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a1a      	ldr	r2, [pc, #104]	@ (800a4dc <TIM_Base_SetConfig+0x154>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d00f      	beq.n	800a498 <TIM_Base_SetConfig+0x110>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e4 <TIM_Base_SetConfig+0x15c>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d00b      	beq.n	800a498 <TIM_Base_SetConfig+0x110>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a19      	ldr	r2, [pc, #100]	@ (800a4e8 <TIM_Base_SetConfig+0x160>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d007      	beq.n	800a498 <TIM_Base_SetConfig+0x110>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a18      	ldr	r2, [pc, #96]	@ (800a4ec <TIM_Base_SetConfig+0x164>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d003      	beq.n	800a498 <TIM_Base_SetConfig+0x110>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a13      	ldr	r2, [pc, #76]	@ (800a4e0 <TIM_Base_SetConfig+0x158>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d103      	bne.n	800a4a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d105      	bne.n	800a4be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f023 0201 	bic.w	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	611a      	str	r2, [r3, #16]
  }
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	40012c00 	.word	0x40012c00
 800a4d0:	40000400 	.word	0x40000400
 800a4d4:	40000800 	.word	0x40000800
 800a4d8:	40000c00 	.word	0x40000c00
 800a4dc:	40013400 	.word	0x40013400
 800a4e0:	40015000 	.word	0x40015000
 800a4e4:	40014000 	.word	0x40014000
 800a4e8:	40014400 	.word	0x40014400
 800a4ec:	40014800 	.word	0x40014800

0800a4f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	f023 0201 	bic.w	r2, r3, #1
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a51e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0303 	bic.w	r3, r3, #3
 800a52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f023 0302 	bic.w	r3, r3, #2
 800a53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a30      	ldr	r2, [pc, #192]	@ (800a60c <TIM_OC1_SetConfig+0x11c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <TIM_OC1_SetConfig+0x88>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a2f      	ldr	r2, [pc, #188]	@ (800a610 <TIM_OC1_SetConfig+0x120>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00f      	beq.n	800a578 <TIM_OC1_SetConfig+0x88>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a2e      	ldr	r2, [pc, #184]	@ (800a614 <TIM_OC1_SetConfig+0x124>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00b      	beq.n	800a578 <TIM_OC1_SetConfig+0x88>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a2d      	ldr	r2, [pc, #180]	@ (800a618 <TIM_OC1_SetConfig+0x128>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d007      	beq.n	800a578 <TIM_OC1_SetConfig+0x88>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a2c      	ldr	r2, [pc, #176]	@ (800a61c <TIM_OC1_SetConfig+0x12c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d003      	beq.n	800a578 <TIM_OC1_SetConfig+0x88>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a2b      	ldr	r2, [pc, #172]	@ (800a620 <TIM_OC1_SetConfig+0x130>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d10c      	bne.n	800a592 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f023 0308 	bic.w	r3, r3, #8
 800a57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f023 0304 	bic.w	r3, r3, #4
 800a590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a1d      	ldr	r2, [pc, #116]	@ (800a60c <TIM_OC1_SetConfig+0x11c>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d013      	beq.n	800a5c2 <TIM_OC1_SetConfig+0xd2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a1c      	ldr	r2, [pc, #112]	@ (800a610 <TIM_OC1_SetConfig+0x120>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d00f      	beq.n	800a5c2 <TIM_OC1_SetConfig+0xd2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a614 <TIM_OC1_SetConfig+0x124>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d00b      	beq.n	800a5c2 <TIM_OC1_SetConfig+0xd2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a1a      	ldr	r2, [pc, #104]	@ (800a618 <TIM_OC1_SetConfig+0x128>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d007      	beq.n	800a5c2 <TIM_OC1_SetConfig+0xd2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a19      	ldr	r2, [pc, #100]	@ (800a61c <TIM_OC1_SetConfig+0x12c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d003      	beq.n	800a5c2 <TIM_OC1_SetConfig+0xd2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a18      	ldr	r2, [pc, #96]	@ (800a620 <TIM_OC1_SetConfig+0x130>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d111      	bne.n	800a5e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	621a      	str	r2, [r3, #32]
}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	40012c00 	.word	0x40012c00
 800a610:	40013400 	.word	0x40013400
 800a614:	40014000 	.word	0x40014000
 800a618:	40014400 	.word	0x40014400
 800a61c:	40014800 	.word	0x40014800
 800a620:	40015000 	.word	0x40015000

0800a624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	f023 0210 	bic.w	r2, r3, #16
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f023 0320 	bic.w	r3, r3, #32
 800a672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a2c      	ldr	r2, [pc, #176]	@ (800a734 <TIM_OC2_SetConfig+0x110>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d007      	beq.n	800a698 <TIM_OC2_SetConfig+0x74>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a2b      	ldr	r2, [pc, #172]	@ (800a738 <TIM_OC2_SetConfig+0x114>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d003      	beq.n	800a698 <TIM_OC2_SetConfig+0x74>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a2a      	ldr	r2, [pc, #168]	@ (800a73c <TIM_OC2_SetConfig+0x118>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d10d      	bne.n	800a6b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a734 <TIM_OC2_SetConfig+0x110>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <TIM_OC2_SetConfig+0xc0>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a1e      	ldr	r2, [pc, #120]	@ (800a738 <TIM_OC2_SetConfig+0x114>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d00f      	beq.n	800a6e4 <TIM_OC2_SetConfig+0xc0>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a740 <TIM_OC2_SetConfig+0x11c>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d00b      	beq.n	800a6e4 <TIM_OC2_SetConfig+0xc0>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a744 <TIM_OC2_SetConfig+0x120>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d007      	beq.n	800a6e4 <TIM_OC2_SetConfig+0xc0>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a748 <TIM_OC2_SetConfig+0x124>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d003      	beq.n	800a6e4 <TIM_OC2_SetConfig+0xc0>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a17      	ldr	r2, [pc, #92]	@ (800a73c <TIM_OC2_SetConfig+0x118>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d113      	bne.n	800a70c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4313      	orrs	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	621a      	str	r2, [r3, #32]
}
 800a726:	bf00      	nop
 800a728:	371c      	adds	r7, #28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	40012c00 	.word	0x40012c00
 800a738:	40013400 	.word	0x40013400
 800a73c:	40015000 	.word	0x40015000
 800a740:	40014000 	.word	0x40014000
 800a744:	40014400 	.word	0x40014400
 800a748:	40014800 	.word	0x40014800

0800a74c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a77a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a2b      	ldr	r2, [pc, #172]	@ (800a858 <TIM_OC3_SetConfig+0x10c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d007      	beq.n	800a7be <TIM_OC3_SetConfig+0x72>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a2a      	ldr	r2, [pc, #168]	@ (800a85c <TIM_OC3_SetConfig+0x110>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d003      	beq.n	800a7be <TIM_OC3_SetConfig+0x72>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a29      	ldr	r2, [pc, #164]	@ (800a860 <TIM_OC3_SetConfig+0x114>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d10d      	bne.n	800a7da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a858 <TIM_OC3_SetConfig+0x10c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <TIM_OC3_SetConfig+0xbe>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <TIM_OC3_SetConfig+0x110>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00f      	beq.n	800a80a <TIM_OC3_SetConfig+0xbe>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a864 <TIM_OC3_SetConfig+0x118>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_OC3_SetConfig+0xbe>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a868 <TIM_OC3_SetConfig+0x11c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_OC3_SetConfig+0xbe>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a86c <TIM_OC3_SetConfig+0x120>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_OC3_SetConfig+0xbe>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a16      	ldr	r2, [pc, #88]	@ (800a860 <TIM_OC3_SetConfig+0x114>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d113      	bne.n	800a832 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	4313      	orrs	r3, r2
 800a830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	621a      	str	r2, [r3, #32]
}
 800a84c:	bf00      	nop
 800a84e:	371c      	adds	r7, #28
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	40012c00 	.word	0x40012c00
 800a85c:	40013400 	.word	0x40013400
 800a860:	40015000 	.word	0x40015000
 800a864:	40014000 	.word	0x40014000
 800a868:	40014400 	.word	0x40014400
 800a86c:	40014800 	.word	0x40014800

0800a870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a89e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	031b      	lsls	r3, r3, #12
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a2c      	ldr	r2, [pc, #176]	@ (800a980 <TIM_OC4_SetConfig+0x110>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d007      	beq.n	800a8e4 <TIM_OC4_SetConfig+0x74>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a984 <TIM_OC4_SetConfig+0x114>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_OC4_SetConfig+0x74>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a2a      	ldr	r2, [pc, #168]	@ (800a988 <TIM_OC4_SetConfig+0x118>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d10d      	bne.n	800a900 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	031b      	lsls	r3, r3, #12
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a1f      	ldr	r2, [pc, #124]	@ (800a980 <TIM_OC4_SetConfig+0x110>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d013      	beq.n	800a930 <TIM_OC4_SetConfig+0xc0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a1e      	ldr	r2, [pc, #120]	@ (800a984 <TIM_OC4_SetConfig+0x114>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00f      	beq.n	800a930 <TIM_OC4_SetConfig+0xc0>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1e      	ldr	r2, [pc, #120]	@ (800a98c <TIM_OC4_SetConfig+0x11c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00b      	beq.n	800a930 <TIM_OC4_SetConfig+0xc0>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1d      	ldr	r2, [pc, #116]	@ (800a990 <TIM_OC4_SetConfig+0x120>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d007      	beq.n	800a930 <TIM_OC4_SetConfig+0xc0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1c      	ldr	r2, [pc, #112]	@ (800a994 <TIM_OC4_SetConfig+0x124>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d003      	beq.n	800a930 <TIM_OC4_SetConfig+0xc0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a17      	ldr	r2, [pc, #92]	@ (800a988 <TIM_OC4_SetConfig+0x118>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d113      	bne.n	800a958 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a936:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a93e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	019b      	lsls	r3, r3, #6
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	4313      	orrs	r3, r2
 800a94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	019b      	lsls	r3, r3, #6
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	4313      	orrs	r3, r2
 800a956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	621a      	str	r2, [r3, #32]
}
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40012c00 	.word	0x40012c00
 800a984:	40013400 	.word	0x40013400
 800a988:	40015000 	.word	0x40015000
 800a98c:	40014000 	.word	0x40014000
 800a990:	40014400 	.word	0x40014400
 800a994:	40014800 	.word	0x40014800

0800a998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	041b      	lsls	r3, r3, #16
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a19      	ldr	r2, [pc, #100]	@ (800aa54 <TIM_OC5_SetConfig+0xbc>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d013      	beq.n	800aa1a <TIM_OC5_SetConfig+0x82>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a18      	ldr	r2, [pc, #96]	@ (800aa58 <TIM_OC5_SetConfig+0xc0>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00f      	beq.n	800aa1a <TIM_OC5_SetConfig+0x82>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a17      	ldr	r2, [pc, #92]	@ (800aa5c <TIM_OC5_SetConfig+0xc4>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00b      	beq.n	800aa1a <TIM_OC5_SetConfig+0x82>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a16      	ldr	r2, [pc, #88]	@ (800aa60 <TIM_OC5_SetConfig+0xc8>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d007      	beq.n	800aa1a <TIM_OC5_SetConfig+0x82>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a15      	ldr	r2, [pc, #84]	@ (800aa64 <TIM_OC5_SetConfig+0xcc>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d003      	beq.n	800aa1a <TIM_OC5_SetConfig+0x82>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a14      	ldr	r2, [pc, #80]	@ (800aa68 <TIM_OC5_SetConfig+0xd0>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d109      	bne.n	800aa2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	621a      	str	r2, [r3, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40012c00 	.word	0x40012c00
 800aa58:	40013400 	.word	0x40013400
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	40014400 	.word	0x40014400
 800aa64:	40014800 	.word	0x40014800
 800aa68:	40015000 	.word	0x40015000

0800aa6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	051b      	lsls	r3, r3, #20
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a1a      	ldr	r2, [pc, #104]	@ (800ab2c <TIM_OC6_SetConfig+0xc0>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d013      	beq.n	800aaf0 <TIM_OC6_SetConfig+0x84>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a19      	ldr	r2, [pc, #100]	@ (800ab30 <TIM_OC6_SetConfig+0xc4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00f      	beq.n	800aaf0 <TIM_OC6_SetConfig+0x84>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a18      	ldr	r2, [pc, #96]	@ (800ab34 <TIM_OC6_SetConfig+0xc8>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d00b      	beq.n	800aaf0 <TIM_OC6_SetConfig+0x84>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a17      	ldr	r2, [pc, #92]	@ (800ab38 <TIM_OC6_SetConfig+0xcc>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d007      	beq.n	800aaf0 <TIM_OC6_SetConfig+0x84>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a16      	ldr	r2, [pc, #88]	@ (800ab3c <TIM_OC6_SetConfig+0xd0>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d003      	beq.n	800aaf0 <TIM_OC6_SetConfig+0x84>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a15      	ldr	r2, [pc, #84]	@ (800ab40 <TIM_OC6_SetConfig+0xd4>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d109      	bne.n	800ab04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aaf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	029b      	lsls	r3, r3, #10
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	621a      	str	r2, [r3, #32]
}
 800ab1e:	bf00      	nop
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40012c00 	.word	0x40012c00
 800ab30:	40013400 	.word	0x40013400
 800ab34:	40014000 	.word	0x40014000
 800ab38:	40014400 	.word	0x40014400
 800ab3c:	40014800 	.word	0x40014800
 800ab40:	40015000 	.word	0x40015000

0800ab44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	2201      	movs	r2, #1
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a1a      	ldr	r2, [r3, #32]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	43db      	mvns	r3, r3
 800ab66:	401a      	ands	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1a      	ldr	r2, [r3, #32]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	621a      	str	r2, [r3, #32]
}
 800ab82:	bf00      	nop
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e074      	b.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a34      	ldr	r2, [pc, #208]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d009      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a33      	ldr	r2, [pc, #204]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d004      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a31      	ldr	r2, [pc, #196]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d108      	bne.n	800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800abfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a21      	ldr	r2, [pc, #132]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d022      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac28:	d01d      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a1f      	ldr	r2, [pc, #124]	@ (800acac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d018      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a1d      	ldr	r2, [pc, #116]	@ (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d013      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a1c      	ldr	r2, [pc, #112]	@ (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00e      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a15      	ldr	r2, [pc, #84]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d009      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a18      	ldr	r2, [pc, #96]	@ (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d004      	beq.n	800ac66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a11      	ldr	r2, [pc, #68]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d10c      	bne.n	800ac80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	40012c00 	.word	0x40012c00
 800aca4:	40013400 	.word	0x40013400
 800aca8:	40015000 	.word	0x40015000
 800acac:	40000400 	.word	0x40000400
 800acb0:	40000800 	.word	0x40000800
 800acb4:	40000c00 	.word	0x40000c00
 800acb8:	40014000 	.word	0x40014000

0800acbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e078      	b.n	800adca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	041b      	lsls	r3, r3, #16
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a1c      	ldr	r2, [pc, #112]	@ (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d009      	beq.n	800ad7e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a1b      	ldr	r2, [pc, #108]	@ (800addc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d004      	beq.n	800ad7e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a19      	ldr	r2, [pc, #100]	@ (800ade0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d11c      	bne.n	800adb8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad88:	051b      	lsls	r3, r3, #20
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	40012c00 	.word	0x40012c00
 800addc:	40013400 	.word	0x40013400
 800ade0:	40015000 	.word	0x40015000

0800ade4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e042      	b.n	800af08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d106      	bne.n	800ae9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7f7 fb09 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2224      	movs	r2, #36	@ 0x24
 800ae9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 0201 	bic.w	r2, r2, #1
 800aeb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 ff06 	bl	800bccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fc07 	bl	800b6d4 <UART_SetConfig>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e01b      	b.n	800af08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aeee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0201 	orr.w	r2, r2, #1
 800aefe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 ff85 	bl	800be10 <UART_CheckIdleState>
 800af06:	4603      	mov	r3, r0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	@ 0x28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af24:	2b20      	cmp	r3, #32
 800af26:	d167      	bne.n	800aff8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <HAL_UART_Transmit_DMA+0x24>
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e060      	b.n	800affa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	88fa      	ldrh	r2, [r7, #6]
 800af42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	88fa      	ldrh	r2, [r7, #6]
 800af4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2221      	movs	r2, #33	@ 0x21
 800af5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af62:	2b00      	cmp	r3, #0
 800af64:	d028      	beq.n	800afb8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af6a:	4a26      	ldr	r2, [pc, #152]	@ (800b004 <HAL_UART_Transmit_DMA+0xf4>)
 800af6c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af72:	4a25      	ldr	r2, [pc, #148]	@ (800b008 <HAL_UART_Transmit_DMA+0xf8>)
 800af74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7a:	4a24      	ldr	r2, [pc, #144]	@ (800b00c <HAL_UART_Transmit_DMA+0xfc>)
 800af7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af82:	2200      	movs	r2, #0
 800af84:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af8e:	4619      	mov	r1, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3328      	adds	r3, #40	@ 0x28
 800af96:	461a      	mov	r2, r3
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	f7fa fa7f 	bl	800549c <HAL_DMA_Start_IT>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2210      	movs	r2, #16
 800afa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e020      	b.n	800affa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2240      	movs	r2, #64	@ 0x40
 800afbe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	613b      	str	r3, [r7, #16]
   return(result);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3308      	adds	r3, #8
 800afde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe0:	623a      	str	r2, [r7, #32]
 800afe2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	69f9      	ldr	r1, [r7, #28]
 800afe6:	6a3a      	ldr	r2, [r7, #32]
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	61bb      	str	r3, [r7, #24]
   return(result);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e5      	bne.n	800afc0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e000      	b.n	800affa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aff8:	2302      	movs	r3, #2
  }
}
 800affa:	4618      	mov	r0, r3
 800affc:	3728      	adds	r7, #40	@ 0x28
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	0800c18d 	.word	0x0800c18d
 800b008:	0800c227 	.word	0x0800c227
 800b00c:	0800c243 	.word	0x0800c243

0800b010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b0ba      	sub	sp, #232	@ 0xe8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b03a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b03e:	4013      	ands	r3, r2
 800b040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11b      	bne.n	800b084 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d015      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d009      	beq.n	800b084 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8300 	beq.w	800b67a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
      }
      return;
 800b082:	e2fa      	b.n	800b67a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 8123 	beq.w	800b2d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b08e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b092:	4b8d      	ldr	r3, [pc, #564]	@ (800b2c8 <HAL_UART_IRQHandler+0x2b8>)
 800b094:	4013      	ands	r3, r2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b09a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b09e:	4b8b      	ldr	r3, [pc, #556]	@ (800b2cc <HAL_UART_IRQHandler+0x2bc>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 8116 	beq.w	800b2d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
 800b0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ce:	f043 0201 	orr.w	r2, r3, #1
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0dc:	f003 0302 	and.w	r3, r3, #2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d011      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
 800b0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0fe:	f043 0204 	orr.w	r2, r3, #4
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d011      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
 800b114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2204      	movs	r2, #4
 800b126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b13c:	f003 0308 	and.w	r3, r3, #8
 800b140:	2b00      	cmp	r3, #0
 800b142:	d017      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b148:	f003 0320 	and.w	r3, r3, #32
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d105      	bne.n	800b15c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b150:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b154:	4b5c      	ldr	r3, [pc, #368]	@ (800b2c8 <HAL_UART_IRQHandler+0x2b8>)
 800b156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2208      	movs	r2, #8
 800b162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16a:	f043 0208 	orr.w	r2, r3, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d012      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
 800b180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b184:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00c      	beq.n	800b1a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19c:	f043 0220 	orr.w	r2, r3, #32
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8266 	beq.w	800b67e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d013      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1fa:	2b40      	cmp	r3, #64	@ 0x40
 800b1fc:	d005      	beq.n	800b20a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b202:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b206:	2b00      	cmp	r3, #0
 800b208:	d054      	beq.n	800b2b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 ff58 	bl	800c0c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b21a:	2b40      	cmp	r3, #64	@ 0x40
 800b21c:	d146      	bne.n	800b2ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b23c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3308      	adds	r3, #8
 800b246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b24a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b24e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1d9      	bne.n	800b21e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b270:	2b00      	cmp	r3, #0
 800b272:	d017      	beq.n	800b2a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b27a:	4a15      	ldr	r2, [pc, #84]	@ (800b2d0 <HAL_UART_IRQHandler+0x2c0>)
 800b27c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b284:	4618      	mov	r0, r3
 800b286:	f7fa f9dd 	bl	8005644 <HAL_DMA_Abort_IT>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d019      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b29e:	4610      	mov	r0, r2
 800b2a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a2:	e00f      	b.n	800b2c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f9ff 	bl	800b6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2aa:	e00b      	b.n	800b2c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f9fb 	bl	800b6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b2:	e007      	b.n	800b2c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f9f7 	bl	800b6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b2c2:	e1dc      	b.n	800b67e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	bf00      	nop
    return;
 800b2c6:	e1da      	b.n	800b67e <HAL_UART_IRQHandler+0x66e>
 800b2c8:	10000001 	.word	0x10000001
 800b2cc:	04000120 	.word	0x04000120
 800b2d0:	0800c2c3 	.word	0x0800c2c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	f040 8170 	bne.w	800b5be <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e2:	f003 0310 	and.w	r3, r3, #16
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8169 	beq.w	800b5be <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2f0:	f003 0310 	and.w	r3, r3, #16
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 8162 	beq.w	800b5be <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2210      	movs	r2, #16
 800b300:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b30c:	2b40      	cmp	r3, #64	@ 0x40
 800b30e:	f040 80d8 	bne.w	800b4c2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80af 	beq.w	800b488 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b330:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b334:	429a      	cmp	r2, r3
 800b336:	f080 80a7 	bcs.w	800b488 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b340:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0320 	and.w	r3, r3, #32
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 8087 	bne.w	800b466 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b36c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b386:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b38e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1da      	bne.n	800b358 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3b4:	f023 0301 	bic.w	r3, r3, #1
 800b3b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e1      	bne.n	800b3a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b402:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b404:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b408:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e3      	bne.n	800b3de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b434:	f023 0310 	bic.w	r3, r3, #16
 800b438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b446:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b448:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b44c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b44e:	e841 2300 	strex	r3, r2, [r1]
 800b452:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e4      	bne.n	800b424 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b460:	4618      	mov	r0, r3
 800b462:	f7fa f896 	bl	8005592 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b478:	b29b      	uxth	r3, r3
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f91b 	bl	800b6bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b486:	e0fc      	b.n	800b682 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b48e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b492:	429a      	cmp	r2, r3
 800b494:	f040 80f5 	bne.w	800b682 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	f040 80eb 	bne.w	800b682 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f8fe 	bl	800b6bc <HAL_UARTEx_RxEventCallback>
      return;
 800b4c0:	e0df      	b.n	800b682 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 80d1 	beq.w	800b686 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b4e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 80cc 	beq.w	800b686 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b510:	647b      	str	r3, [r7, #68]	@ 0x44
 800b512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e4      	bne.n	800b4ee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3308      	adds	r3, #8
 800b52a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	623b      	str	r3, [r7, #32]
   return(result);
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b53a:	f023 0301 	bic.w	r3, r3, #1
 800b53e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3308      	adds	r3, #8
 800b548:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b54c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b54e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e1      	bne.n	800b524 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2220      	movs	r2, #32
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	60fb      	str	r3, [r7, #12]
   return(result);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 0310 	bic.w	r3, r3, #16
 800b588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b596:	61fb      	str	r3, [r7, #28]
 800b598:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59a:	69b9      	ldr	r1, [r7, #24]
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e4      	bne.n	800b574 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f880 	bl	800b6bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5bc:	e063      	b.n	800b686 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00e      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x5d8>
 800b5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d008      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 feab 	bl	800c33c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5e6:	e051      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d014      	beq.n	800b61e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d105      	bne.n	800b60c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d008      	beq.n	800b61e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b610:	2b00      	cmp	r3, #0
 800b612:	d03a      	beq.n	800b68a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	4798      	blx	r3
    }
    return;
 800b61c:	e035      	b.n	800b68a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d009      	beq.n	800b63e <HAL_UART_IRQHandler+0x62e>
 800b62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fe55 	bl	800c2e6 <UART_EndTransmit_IT>
    return;
 800b63c:	e026      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <HAL_UART_IRQHandler+0x64e>
 800b64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b64e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fe84 	bl	800c364 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b65c:	e016      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d010      	beq.n	800b68c <HAL_UART_IRQHandler+0x67c>
 800b66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da0c      	bge.n	800b68c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fe6c 	bl	800c350 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b678:	e008      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
      return;
 800b67a:	bf00      	nop
 800b67c:	e006      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
    return;
 800b67e:	bf00      	nop
 800b680:	e004      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
      return;
 800b682:	bf00      	nop
 800b684:	e002      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
      return;
 800b686:	bf00      	nop
 800b688:	e000      	b.n	800b68c <HAL_UART_IRQHandler+0x67c>
    return;
 800b68a:	bf00      	nop
  }
}
 800b68c:	37e8      	adds	r7, #232	@ 0xe8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop

0800b694 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d8:	b08c      	sub	sp, #48	@ 0x30
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	431a      	orrs	r2, r3
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	4baa      	ldr	r3, [pc, #680]	@ (800b9ac <UART_SetConfig+0x2d8>)
 800b704:	4013      	ands	r3, r2
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a9f      	ldr	r2, [pc, #636]	@ (800b9b0 <UART_SetConfig+0x2dc>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d004      	beq.n	800b740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b73c:	4313      	orrs	r3, r2
 800b73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b74a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	6812      	ldr	r2, [r2, #0]
 800b752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b754:	430b      	orrs	r3, r1
 800b756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75e:	f023 010f 	bic.w	r1, r3, #15
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a90      	ldr	r2, [pc, #576]	@ (800b9b4 <UART_SetConfig+0x2e0>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d125      	bne.n	800b7c4 <UART_SetConfig+0xf0>
 800b778:	4b8f      	ldr	r3, [pc, #572]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b03      	cmp	r3, #3
 800b784:	d81a      	bhi.n	800b7bc <UART_SetConfig+0xe8>
 800b786:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <UART_SetConfig+0xb8>)
 800b788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78c:	0800b79d 	.word	0x0800b79d
 800b790:	0800b7ad 	.word	0x0800b7ad
 800b794:	0800b7a5 	.word	0x0800b7a5
 800b798:	0800b7b5 	.word	0x0800b7b5
 800b79c:	2301      	movs	r3, #1
 800b79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a2:	e116      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7aa:	e112      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b7ac:	2304      	movs	r3, #4
 800b7ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b2:	e10e      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ba:	e10a      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b7bc:	2310      	movs	r3, #16
 800b7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7c2:	e106      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a7c      	ldr	r2, [pc, #496]	@ (800b9bc <UART_SetConfig+0x2e8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d138      	bne.n	800b840 <UART_SetConfig+0x16c>
 800b7ce:	4b7a      	ldr	r3, [pc, #488]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7d4:	f003 030c 	and.w	r3, r3, #12
 800b7d8:	2b0c      	cmp	r3, #12
 800b7da:	d82d      	bhi.n	800b838 <UART_SetConfig+0x164>
 800b7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e4 <UART_SetConfig+0x110>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b819 	.word	0x0800b819
 800b7e8:	0800b839 	.word	0x0800b839
 800b7ec:	0800b839 	.word	0x0800b839
 800b7f0:	0800b839 	.word	0x0800b839
 800b7f4:	0800b829 	.word	0x0800b829
 800b7f8:	0800b839 	.word	0x0800b839
 800b7fc:	0800b839 	.word	0x0800b839
 800b800:	0800b839 	.word	0x0800b839
 800b804:	0800b821 	.word	0x0800b821
 800b808:	0800b839 	.word	0x0800b839
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b831 	.word	0x0800b831
 800b818:	2300      	movs	r3, #0
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81e:	e0d8      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b820:	2302      	movs	r3, #2
 800b822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b826:	e0d4      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b828:	2304      	movs	r3, #4
 800b82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b82e:	e0d0      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b830:	2308      	movs	r3, #8
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b836:	e0cc      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b838:	2310      	movs	r3, #16
 800b83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83e:	e0c8      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a5e      	ldr	r2, [pc, #376]	@ (800b9c0 <UART_SetConfig+0x2ec>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d125      	bne.n	800b896 <UART_SetConfig+0x1c2>
 800b84a:	4b5b      	ldr	r3, [pc, #364]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b850:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b854:	2b30      	cmp	r3, #48	@ 0x30
 800b856:	d016      	beq.n	800b886 <UART_SetConfig+0x1b2>
 800b858:	2b30      	cmp	r3, #48	@ 0x30
 800b85a:	d818      	bhi.n	800b88e <UART_SetConfig+0x1ba>
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	d00a      	beq.n	800b876 <UART_SetConfig+0x1a2>
 800b860:	2b20      	cmp	r3, #32
 800b862:	d814      	bhi.n	800b88e <UART_SetConfig+0x1ba>
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <UART_SetConfig+0x19a>
 800b868:	2b10      	cmp	r3, #16
 800b86a:	d008      	beq.n	800b87e <UART_SetConfig+0x1aa>
 800b86c:	e00f      	b.n	800b88e <UART_SetConfig+0x1ba>
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b874:	e0ad      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b876:	2302      	movs	r3, #2
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b87c:	e0a9      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b87e:	2304      	movs	r3, #4
 800b880:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b884:	e0a5      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b886:	2308      	movs	r3, #8
 800b888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b88c:	e0a1      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b88e:	2310      	movs	r3, #16
 800b890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b894:	e09d      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a4a      	ldr	r2, [pc, #296]	@ (800b9c4 <UART_SetConfig+0x2f0>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d125      	bne.n	800b8ec <UART_SetConfig+0x218>
 800b8a0:	4b45      	ldr	r3, [pc, #276]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b8aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8ac:	d016      	beq.n	800b8dc <UART_SetConfig+0x208>
 800b8ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8b0:	d818      	bhi.n	800b8e4 <UART_SetConfig+0x210>
 800b8b2:	2b80      	cmp	r3, #128	@ 0x80
 800b8b4:	d00a      	beq.n	800b8cc <UART_SetConfig+0x1f8>
 800b8b6:	2b80      	cmp	r3, #128	@ 0x80
 800b8b8:	d814      	bhi.n	800b8e4 <UART_SetConfig+0x210>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <UART_SetConfig+0x1f0>
 800b8be:	2b40      	cmp	r3, #64	@ 0x40
 800b8c0:	d008      	beq.n	800b8d4 <UART_SetConfig+0x200>
 800b8c2:	e00f      	b.n	800b8e4 <UART_SetConfig+0x210>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e082      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8d2:	e07e      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b8d4:	2304      	movs	r3, #4
 800b8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8da:	e07a      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b8dc:	2308      	movs	r3, #8
 800b8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8e2:	e076      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b8e4:	2310      	movs	r3, #16
 800b8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ea:	e072      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a35      	ldr	r2, [pc, #212]	@ (800b9c8 <UART_SetConfig+0x2f4>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d12a      	bne.n	800b94c <UART_SetConfig+0x278>
 800b8f6:	4b30      	ldr	r3, [pc, #192]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b904:	d01a      	beq.n	800b93c <UART_SetConfig+0x268>
 800b906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b90a:	d81b      	bhi.n	800b944 <UART_SetConfig+0x270>
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b910:	d00c      	beq.n	800b92c <UART_SetConfig+0x258>
 800b912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b916:	d815      	bhi.n	800b944 <UART_SetConfig+0x270>
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <UART_SetConfig+0x250>
 800b91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b920:	d008      	beq.n	800b934 <UART_SetConfig+0x260>
 800b922:	e00f      	b.n	800b944 <UART_SetConfig+0x270>
 800b924:	2300      	movs	r3, #0
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e052      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b92c:	2302      	movs	r3, #2
 800b92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b932:	e04e      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b934:	2304      	movs	r3, #4
 800b936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b93a:	e04a      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b93c:	2308      	movs	r3, #8
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b942:	e046      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b944:	2310      	movs	r3, #16
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b94a:	e042      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a17      	ldr	r2, [pc, #92]	@ (800b9b0 <UART_SetConfig+0x2dc>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d13a      	bne.n	800b9cc <UART_SetConfig+0x2f8>
 800b956:	4b18      	ldr	r3, [pc, #96]	@ (800b9b8 <UART_SetConfig+0x2e4>)
 800b958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b95c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b964:	d01a      	beq.n	800b99c <UART_SetConfig+0x2c8>
 800b966:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b96a:	d81b      	bhi.n	800b9a4 <UART_SetConfig+0x2d0>
 800b96c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b970:	d00c      	beq.n	800b98c <UART_SetConfig+0x2b8>
 800b972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b976:	d815      	bhi.n	800b9a4 <UART_SetConfig+0x2d0>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <UART_SetConfig+0x2b0>
 800b97c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b980:	d008      	beq.n	800b994 <UART_SetConfig+0x2c0>
 800b982:	e00f      	b.n	800b9a4 <UART_SetConfig+0x2d0>
 800b984:	2300      	movs	r3, #0
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98a:	e022      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b98c:	2302      	movs	r3, #2
 800b98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b992:	e01e      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b994:	2304      	movs	r3, #4
 800b996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99a:	e01a      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a2:	e016      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b9a4:	2310      	movs	r3, #16
 800b9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9aa:	e012      	b.n	800b9d2 <UART_SetConfig+0x2fe>
 800b9ac:	cfff69f3 	.word	0xcfff69f3
 800b9b0:	40008000 	.word	0x40008000
 800b9b4:	40013800 	.word	0x40013800
 800b9b8:	40021000 	.word	0x40021000
 800b9bc:	40004400 	.word	0x40004400
 800b9c0:	40004800 	.word	0x40004800
 800b9c4:	40004c00 	.word	0x40004c00
 800b9c8:	40005000 	.word	0x40005000
 800b9cc:	2310      	movs	r3, #16
 800b9ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4aae      	ldr	r2, [pc, #696]	@ (800bc90 <UART_SetConfig+0x5bc>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	f040 8097 	bne.w	800bb0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d823      	bhi.n	800ba2e <UART_SetConfig+0x35a>
 800b9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ec <UART_SetConfig+0x318>)
 800b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ec:	0800ba11 	.word	0x0800ba11
 800b9f0:	0800ba2f 	.word	0x0800ba2f
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba2f 	.word	0x0800ba2f
 800b9fc:	0800ba1f 	.word	0x0800ba1f
 800ba00:	0800ba2f 	.word	0x0800ba2f
 800ba04:	0800ba2f 	.word	0x0800ba2f
 800ba08:	0800ba2f 	.word	0x0800ba2f
 800ba0c:	0800ba27 	.word	0x0800ba27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba10:	f7fd fcba 	bl	8009388 <HAL_RCC_GetPCLK1Freq>
 800ba14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba16:	e010      	b.n	800ba3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba18:	4b9e      	ldr	r3, [pc, #632]	@ (800bc94 <UART_SetConfig+0x5c0>)
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba1c:	e00d      	b.n	800ba3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba1e:	f7fd fc45 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 800ba22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba24:	e009      	b.n	800ba3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba2c:	e005      	b.n	800ba3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 8130 	beq.w	800bca2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba46:	4a94      	ldr	r2, [pc, #592]	@ (800bc98 <UART_SetConfig+0x5c4>)
 800ba48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	4413      	add	r3, r2
 800ba60:	69ba      	ldr	r2, [r7, #24]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d305      	bcc.n	800ba72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d903      	bls.n	800ba7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba78:	e113      	b.n	800bca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	60bb      	str	r3, [r7, #8]
 800ba80:	60fa      	str	r2, [r7, #12]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba86:	4a84      	ldr	r2, [pc, #528]	@ (800bc98 <UART_SetConfig+0x5c4>)
 800ba88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	2200      	movs	r2, #0
 800ba90:	603b      	str	r3, [r7, #0]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba9c:	f7f5 f862 	bl	8000b64 <__aeabi_uldivmod>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4610      	mov	r0, r2
 800baa6:	4619      	mov	r1, r3
 800baa8:	f04f 0200 	mov.w	r2, #0
 800baac:	f04f 0300 	mov.w	r3, #0
 800bab0:	020b      	lsls	r3, r1, #8
 800bab2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bab6:	0202      	lsls	r2, r0, #8
 800bab8:	6979      	ldr	r1, [r7, #20]
 800baba:	6849      	ldr	r1, [r1, #4]
 800babc:	0849      	lsrs	r1, r1, #1
 800babe:	2000      	movs	r0, #0
 800bac0:	460c      	mov	r4, r1
 800bac2:	4605      	mov	r5, r0
 800bac4:	eb12 0804 	adds.w	r8, r2, r4
 800bac8:	eb43 0905 	adc.w	r9, r3, r5
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	469a      	mov	sl, r3
 800bad4:	4693      	mov	fp, r2
 800bad6:	4652      	mov	r2, sl
 800bad8:	465b      	mov	r3, fp
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f5 f841 	bl	8000b64 <__aeabi_uldivmod>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4613      	mov	r3, r2
 800bae8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baf0:	d308      	bcc.n	800bb04 <UART_SetConfig+0x430>
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baf8:	d204      	bcs.n	800bb04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6a3a      	ldr	r2, [r7, #32]
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	e0ce      	b.n	800bca2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb0a:	e0ca      	b.n	800bca2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb14:	d166      	bne.n	800bbe4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bb16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb1a:	2b08      	cmp	r3, #8
 800bb1c:	d827      	bhi.n	800bb6e <UART_SetConfig+0x49a>
 800bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb24 <UART_SetConfig+0x450>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb49 	.word	0x0800bb49
 800bb28:	0800bb51 	.word	0x0800bb51
 800bb2c:	0800bb59 	.word	0x0800bb59
 800bb30:	0800bb6f 	.word	0x0800bb6f
 800bb34:	0800bb5f 	.word	0x0800bb5f
 800bb38:	0800bb6f 	.word	0x0800bb6f
 800bb3c:	0800bb6f 	.word	0x0800bb6f
 800bb40:	0800bb6f 	.word	0x0800bb6f
 800bb44:	0800bb67 	.word	0x0800bb67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb48:	f7fd fc1e 	bl	8009388 <HAL_RCC_GetPCLK1Freq>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb4e:	e014      	b.n	800bb7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb50:	f7fd fc30 	bl	80093b4 <HAL_RCC_GetPCLK2Freq>
 800bb54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb56:	e010      	b.n	800bb7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb58:	4b4e      	ldr	r3, [pc, #312]	@ (800bc94 <UART_SetConfig+0x5c0>)
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb5c:	e00d      	b.n	800bb7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb5e:	f7fd fba5 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 800bb62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb64:	e009      	b.n	800bb7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb6c:	e005      	b.n	800bb7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 8090 	beq.w	800bca2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb86:	4a44      	ldr	r2, [pc, #272]	@ (800bc98 <UART_SetConfig+0x5c4>)
 800bb88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb90:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb94:	005a      	lsls	r2, r3, #1
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	085b      	lsrs	r3, r3, #1
 800bb9c:	441a      	add	r2, r3
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bba6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	2b0f      	cmp	r3, #15
 800bbac:	d916      	bls.n	800bbdc <UART_SetConfig+0x508>
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbb4:	d212      	bcs.n	800bbdc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	f023 030f 	bic.w	r3, r3, #15
 800bbbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	085b      	lsrs	r3, r3, #1
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	8bfb      	ldrh	r3, [r7, #30]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	8bfa      	ldrh	r2, [r7, #30]
 800bbd8:	60da      	str	r2, [r3, #12]
 800bbda:	e062      	b.n	800bca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbe2:	e05e      	b.n	800bca2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbe4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d828      	bhi.n	800bc3e <UART_SetConfig+0x56a>
 800bbec:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf4 <UART_SetConfig+0x520>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc19 	.word	0x0800bc19
 800bbf8:	0800bc21 	.word	0x0800bc21
 800bbfc:	0800bc29 	.word	0x0800bc29
 800bc00:	0800bc3f 	.word	0x0800bc3f
 800bc04:	0800bc2f 	.word	0x0800bc2f
 800bc08:	0800bc3f 	.word	0x0800bc3f
 800bc0c:	0800bc3f 	.word	0x0800bc3f
 800bc10:	0800bc3f 	.word	0x0800bc3f
 800bc14:	0800bc37 	.word	0x0800bc37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc18:	f7fd fbb6 	bl	8009388 <HAL_RCC_GetPCLK1Freq>
 800bc1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc1e:	e014      	b.n	800bc4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc20:	f7fd fbc8 	bl	80093b4 <HAL_RCC_GetPCLK2Freq>
 800bc24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc26:	e010      	b.n	800bc4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc28:	4b1a      	ldr	r3, [pc, #104]	@ (800bc94 <UART_SetConfig+0x5c0>)
 800bc2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc2c:	e00d      	b.n	800bc4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc2e:	f7fd fb3d 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 800bc32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc34:	e009      	b.n	800bc4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc3c:	e005      	b.n	800bc4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc48:	bf00      	nop
    }

    if (pclk != 0U)
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d028      	beq.n	800bca2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	4a10      	ldr	r2, [pc, #64]	@ (800bc98 <UART_SetConfig+0x5c4>)
 800bc56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	085b      	lsrs	r3, r3, #1
 800bc68:	441a      	add	r2, r3
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	2b0f      	cmp	r3, #15
 800bc78:	d910      	bls.n	800bc9c <UART_SetConfig+0x5c8>
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc80:	d20c      	bcs.n	800bc9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60da      	str	r2, [r3, #12]
 800bc8c:	e009      	b.n	800bca2 <UART_SetConfig+0x5ce>
 800bc8e:	bf00      	nop
 800bc90:	40008000 	.word	0x40008000
 800bc94:	00f42400 	.word	0x00f42400
 800bc98:	0800e700 	.word	0x0800e700
      }
      else
      {
        ret = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bcbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3730      	adds	r7, #48	@ 0x30
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3e:	f003 0304 	and.w	r3, r3, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd60:	f003 0310 	and.w	r3, r3, #16
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00a      	beq.n	800bd7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01a      	beq.n	800bde2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdca:	d10a      	bne.n	800bde2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	605a      	str	r2, [r3, #4]
  }
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b098      	sub	sp, #96	@ 0x60
 800be14:	af02      	add	r7, sp, #8
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be20:	f7f6 fda4 	bl	800296c <HAL_GetTick>
 800be24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	2b08      	cmp	r3, #8
 800be32:	d12f      	bne.n	800be94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be3c:	2200      	movs	r2, #0
 800be3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f88e 	bl	800bf64 <UART_WaitOnFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d022      	beq.n	800be94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be62:	653b      	str	r3, [r7, #80]	@ 0x50
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e6      	bne.n	800be4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e063      	b.n	800bf5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	d149      	bne.n	800bf36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beaa:	2200      	movs	r2, #0
 800beac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f857 	bl	800bf64 <UART_WaitOnFlagUntilTimeout>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d03c      	beq.n	800bf36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	623b      	str	r3, [r7, #32]
   return(result);
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beda:	633b      	str	r3, [r7, #48]	@ 0x30
 800bedc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee2:	e841 2300 	strex	r3, r2, [r1]
 800bee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1e6      	bne.n	800bebc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3308      	adds	r3, #8
 800bef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	e853 3f00 	ldrex	r3, [r3]
 800befc:	60fb      	str	r3, [r7, #12]
   return(result);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f023 0301 	bic.w	r3, r3, #1
 800bf04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf0e:	61fa      	str	r2, [r7, #28]
 800bf10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	69b9      	ldr	r1, [r7, #24]
 800bf14:	69fa      	ldr	r2, [r7, #28]
 800bf16:	e841 2300 	strex	r3, r2, [r1]
 800bf1a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e5      	bne.n	800beee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e012      	b.n	800bf5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3758      	adds	r7, #88	@ 0x58
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	4613      	mov	r3, r2
 800bf72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf74:	e04f      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7c:	d04b      	beq.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf7e:	f7f6 fcf5 	bl	800296c <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d302      	bcc.n	800bf94 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e04e      	b.n	800c036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0304 	and.w	r3, r3, #4
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d037      	beq.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b80      	cmp	r3, #128	@ 0x80
 800bfaa:	d034      	beq.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b40      	cmp	r3, #64	@ 0x40
 800bfb0:	d031      	beq.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	f003 0308 	and.w	r3, r3, #8
 800bfbc:	2b08      	cmp	r3, #8
 800bfbe:	d110      	bne.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2208      	movs	r2, #8
 800bfc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f879 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2208      	movs	r2, #8
 800bfd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e029      	b.n	800c036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bff0:	d111      	bne.n	800c016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f85f 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e00f      	b.n	800c036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	69da      	ldr	r2, [r3, #28]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4013      	ands	r3, r2
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	429a      	cmp	r2, r3
 800c024:	bf0c      	ite	eq
 800c026:	2301      	moveq	r3, #1
 800c028:	2300      	movne	r3, #0
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	461a      	mov	r2, r3
 800c02e:	79fb      	ldrb	r3, [r7, #7]
 800c030:	429a      	cmp	r2, r3
 800c032:	d0a0      	beq.n	800bf76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c03e:	b480      	push	{r7}
 800c040:	b08f      	sub	sp, #60	@ 0x3c
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	e853 3f00 	ldrex	r3, [r3]
 800c052:	61fb      	str	r3, [r7, #28]
   return(result);
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c066:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e6      	bne.n	800c046 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3308      	adds	r3, #8
 800c07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	60bb      	str	r3, [r7, #8]
   return(result);
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c08e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3308      	adds	r3, #8
 800c096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c098:	61ba      	str	r2, [r7, #24]
 800c09a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09c:	6979      	ldr	r1, [r7, #20]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	e841 2300 	strex	r3, r2, [r1]
 800c0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e5      	bne.n	800c078 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c0b4:	bf00      	nop
 800c0b6:	373c      	adds	r7, #60	@ 0x3c
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b095      	sub	sp, #84	@ 0x54
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	61fb      	str	r3, [r7, #28]
   return(result);
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c110:	f023 0301 	bic.w	r3, r3, #1
 800c114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c11e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c126:	e841 2300 	strex	r3, r2, [r1]
 800c12a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1e3      	bne.n	800c0fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c136:	2b01      	cmp	r3, #1
 800c138:	d118      	bne.n	800c16c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	60bb      	str	r3, [r7, #8]
   return(result);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f023 0310 	bic.w	r3, r3, #16
 800c14e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	6979      	ldr	r1, [r7, #20]
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	613b      	str	r3, [r7, #16]
   return(result);
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e6      	bne.n	800c13a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2220      	movs	r2, #32
 800c170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c180:	bf00      	nop
 800c182:	3754      	adds	r7, #84	@ 0x54
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b090      	sub	sp, #64	@ 0x40
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c198:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0320 	and.w	r3, r3, #32
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d137      	bne.n	800c218 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ba:	e853 3f00 	ldrex	r3, [r3]
 800c1be:	623b      	str	r3, [r7, #32]
   return(result);
 800c1c0:	6a3b      	ldr	r3, [r7, #32]
 800c1c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e5      	bne.n	800c1b0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	69b9      	ldr	r1, [r7, #24]
 800c208:	69fa      	ldr	r2, [r7, #28]
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	617b      	str	r3, [r7, #20]
   return(result);
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e6      	bne.n	800c1e4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c216:	e002      	b.n	800c21e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c218:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c21a:	f7f5 fdcf 	bl	8001dbc <HAL_UART_TxCpltCallback>
}
 800c21e:	bf00      	nop
 800c220:	3740      	adds	r7, #64	@ 0x40
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c232:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f7ff fa2d 	bl	800b694 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c23a:	bf00      	nop
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b086      	sub	sp, #24
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c256:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c25e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c26a:	2b80      	cmp	r3, #128	@ 0x80
 800c26c:	d109      	bne.n	800c282 <UART_DMAError+0x40>
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b21      	cmp	r3, #33	@ 0x21
 800c272:	d106      	bne.n	800c282 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2200      	movs	r2, #0
 800c278:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c27c:	6978      	ldr	r0, [r7, #20]
 800c27e:	f7ff fede 	bl	800c03e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c28c:	2b40      	cmp	r3, #64	@ 0x40
 800c28e:	d109      	bne.n	800c2a4 <UART_DMAError+0x62>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b22      	cmp	r3, #34	@ 0x22
 800c294:	d106      	bne.n	800c2a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c29e:	6978      	ldr	r0, [r7, #20]
 800c2a0:	f7ff ff0e 	bl	800c0c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2aa:	f043 0210 	orr.w	r2, r3, #16
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2b4:	6978      	ldr	r0, [r7, #20]
 800c2b6:	f7ff f9f7 	bl	800b6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2ba:	bf00      	nop
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f7ff f9e5 	bl	800b6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2de:	bf00      	nop
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c302:	61fb      	str	r3, [r7, #28]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	61bb      	str	r3, [r7, #24]
 800c30e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	6979      	ldr	r1, [r7, #20]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	613b      	str	r3, [r7, #16]
   return(result);
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e6      	bne.n	800c2ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2220      	movs	r2, #32
 800c324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7f5 fd44 	bl	8001dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c334:	bf00      	nop
 800c336:	3720      	adds	r7, #32
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c386:	2b01      	cmp	r3, #1
 800c388:	d101      	bne.n	800c38e <HAL_UARTEx_DisableFifoMode+0x16>
 800c38a:	2302      	movs	r3, #2
 800c38c:	e027      	b.n	800c3de <HAL_UARTEx_DisableFifoMode+0x66>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2224      	movs	r2, #36	@ 0x24
 800c39a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f022 0201 	bic.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c3bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d101      	bne.n	800c402 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3fe:	2302      	movs	r3, #2
 800c400:	e02d      	b.n	800c45e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2224      	movs	r2, #36	@ 0x24
 800c40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 0201 	bic.w	r2, r2, #1
 800c428:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f850 	bl	800c4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2220      	movs	r2, #32
 800c450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b084      	sub	sp, #16
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c476:	2b01      	cmp	r3, #1
 800c478:	d101      	bne.n	800c47e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c47a:	2302      	movs	r3, #2
 800c47c:	e02d      	b.n	800c4da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2224      	movs	r2, #36	@ 0x24
 800c48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 0201 	bic.w	r2, r2, #1
 800c4a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f812 	bl	800c4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d108      	bne.n	800c506 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c504:	e031      	b.n	800c56a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c506:	2308      	movs	r3, #8
 800c508:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c50a:	2308      	movs	r3, #8
 800c50c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	0e5b      	lsrs	r3, r3, #25
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0307 	and.w	r3, r3, #7
 800c51c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	0f5b      	lsrs	r3, r3, #29
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 0307 	and.w	r3, r3, #7
 800c52c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	7b3a      	ldrb	r2, [r7, #12]
 800c532:	4911      	ldr	r1, [pc, #68]	@ (800c578 <UARTEx_SetNbDataToProcess+0x94>)
 800c534:	5c8a      	ldrb	r2, [r1, r2]
 800c536:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c53a:	7b3a      	ldrb	r2, [r7, #12]
 800c53c:	490f      	ldr	r1, [pc, #60]	@ (800c57c <UARTEx_SetNbDataToProcess+0x98>)
 800c53e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c540:	fb93 f3f2 	sdiv	r3, r3, r2
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	7b7a      	ldrb	r2, [r7, #13]
 800c550:	4909      	ldr	r1, [pc, #36]	@ (800c578 <UARTEx_SetNbDataToProcess+0x94>)
 800c552:	5c8a      	ldrb	r2, [r1, r2]
 800c554:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c558:	7b7a      	ldrb	r2, [r7, #13]
 800c55a:	4908      	ldr	r1, [pc, #32]	@ (800c57c <UARTEx_SetNbDataToProcess+0x98>)
 800c55c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c55e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c56a:	bf00      	nop
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	0800e718 	.word	0x0800e718
 800c57c:	0800e720 	.word	0x0800e720

0800c580 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c580:	b480      	push	{r7}
 800c582:	b08b      	sub	sp, #44	@ 0x2c
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	fa93 f3a3 	rbit	r3, r3
 800c59a:	613b      	str	r3, [r7, #16]
  return result;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800c5a6:	2320      	movs	r3, #32
 800c5a8:	e003      	b.n	800c5b2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	fab3 f383 	clz	r3, r3
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	2103      	movs	r1, #3
 800c5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ba:	43db      	mvns	r3, r3
 800c5bc:	401a      	ands	r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	fa93 f3a3 	rbit	r3, r3
 800c5c8:	61fb      	str	r3, [r7, #28]
  return result;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800c5d4:	2320      	movs	r3, #32
 800c5d6:	e003      	b.n	800c5e0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	fab3 f383 	clz	r3, r3
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e8:	431a      	orrs	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	601a      	str	r2, [r3, #0]
}
 800c5ee:	bf00      	nop
 800c5f0:	372c      	adds	r7, #44	@ 0x2c
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60f8      	str	r0, [r7, #12]
 800c602:	60b9      	str	r1, [r7, #8]
 800c604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	43db      	mvns	r3, r3
 800c60e:	401a      	ands	r2, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	6879      	ldr	r1, [r7, #4]
 800c614:	fb01 f303 	mul.w	r3, r1, r3
 800c618:	431a      	orrs	r2, r3
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	605a      	str	r2, [r3, #4]
}
 800c61e:	bf00      	nop
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b08b      	sub	sp, #44	@ 0x2c
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	fa93 f3a3 	rbit	r3, r3
 800c644:	613b      	str	r3, [r7, #16]
  return result;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d101      	bne.n	800c654 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800c650:	2320      	movs	r3, #32
 800c652:	e003      	b.n	800c65c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	fab3 f383 	clz	r3, r3
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	2103      	movs	r1, #3
 800c660:	fa01 f303 	lsl.w	r3, r1, r3
 800c664:	43db      	mvns	r3, r3
 800c666:	401a      	ands	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	fa93 f3a3 	rbit	r3, r3
 800c672:	61fb      	str	r3, [r7, #28]
  return result;
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800c67e:	2320      	movs	r3, #32
 800c680:	e003      	b.n	800c68a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	fab3 f383 	clz	r3, r3
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	005b      	lsls	r3, r3, #1
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	fa01 f303 	lsl.w	r3, r1, r3
 800c692:	431a      	orrs	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800c698:	bf00      	nop
 800c69a:	372c      	adds	r7, #44	@ 0x2c
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b08b      	sub	sp, #44	@ 0x2c
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	68da      	ldr	r2, [r3, #12]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	fa93 f3a3 	rbit	r3, r3
 800c6be:	613b      	str	r3, [r7, #16]
  return result;
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800c6ca:	2320      	movs	r3, #32
 800c6cc:	e003      	b.n	800c6d6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	fab3 f383 	clz	r3, r3
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	2103      	movs	r1, #3
 800c6da:	fa01 f303 	lsl.w	r3, r1, r3
 800c6de:	43db      	mvns	r3, r3
 800c6e0:	401a      	ands	r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	fa93 f3a3 	rbit	r3, r3
 800c6ec:	61fb      	str	r3, [r7, #28]
  return result;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800c6f8:	2320      	movs	r3, #32
 800c6fa:	e003      	b.n	800c704 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	fab3 f383 	clz	r3, r3
 800c702:	b2db      	uxtb	r3, r3
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	6879      	ldr	r1, [r7, #4]
 800c708:	fa01 f303 	lsl.w	r3, r1, r3
 800c70c:	431a      	orrs	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	60da      	str	r2, [r3, #12]
}
 800c712:	bf00      	nop
 800c714:	372c      	adds	r7, #44	@ 0x2c
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c71e:	b480      	push	{r7}
 800c720:	b08b      	sub	sp, #44	@ 0x2c
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6a1a      	ldr	r2, [r3, #32]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	fa93 f3a3 	rbit	r3, r3
 800c738:	613b      	str	r3, [r7, #16]
  return result;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800c744:	2320      	movs	r3, #32
 800c746:	e003      	b.n	800c750 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	fab3 f383 	clz	r3, r3
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	210f      	movs	r1, #15
 800c754:	fa01 f303 	lsl.w	r3, r1, r3
 800c758:	43db      	mvns	r3, r3
 800c75a:	401a      	ands	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	fa93 f3a3 	rbit	r3, r3
 800c766:	61fb      	str	r3, [r7, #28]
  return result;
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800c772:	2320      	movs	r3, #32
 800c774:	e003      	b.n	800c77e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	fab3 f383 	clz	r3, r3
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	fa01 f303 	lsl.w	r3, r1, r3
 800c786:	431a      	orrs	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800c78c:	bf00      	nop
 800c78e:	372c      	adds	r7, #44	@ 0x2c
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c798:	b480      	push	{r7}
 800c79a:	b08b      	sub	sp, #44	@ 0x2c
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	0a1b      	lsrs	r3, r3, #8
 800c7ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	fa93 f3a3 	rbit	r3, r3
 800c7b4:	613b      	str	r3, [r7, #16]
  return result;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	e003      	b.n	800c7cc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	fab3 f383 	clz	r3, r3
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	210f      	movs	r1, #15
 800c7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d4:	43db      	mvns	r3, r3
 800c7d6:	401a      	ands	r2, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	0a1b      	lsrs	r3, r3, #8
 800c7dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	fa93 f3a3 	rbit	r3, r3
 800c7e4:	61fb      	str	r3, [r7, #28]
  return result;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	e003      	b.n	800c7fc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	fab3 f383 	clz	r3, r3
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	fa01 f303 	lsl.w	r3, r1, r3
 800c804:	431a      	orrs	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800c80a:	bf00      	nop
 800c80c:	372c      	adds	r7, #44	@ 0x2c
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b088      	sub	sp, #32
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	fa93 f3a3 	rbit	r3, r3
 800c82c:	60fb      	str	r3, [r7, #12]
  return result;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <LL_GPIO_Init+0x26>
    return 32U;
 800c838:	2320      	movs	r3, #32
 800c83a:	e003      	b.n	800c844 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	fab3 f383 	clz	r3, r3
 800c842:	b2db      	uxtb	r3, r3
 800c844:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c846:	e048      	b.n	800c8da <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	2101      	movs	r1, #1
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	fa01 f303 	lsl.w	r3, r1, r3
 800c854:	4013      	ands	r3, r2
 800c856:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d03a      	beq.n	800c8d4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d003      	beq.n	800c86e <LL_GPIO_Init+0x58>
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d10e      	bne.n	800c88c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	461a      	mov	r2, r3
 800c874:	69b9      	ldr	r1, [r7, #24]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7ff fed7 	bl	800c62a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	6819      	ldr	r1, [r3, #0]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	461a      	mov	r2, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff feb7 	bl	800c5fa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	461a      	mov	r2, r3
 800c892:	69b9      	ldr	r1, [r7, #24]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff ff05 	bl	800c6a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d111      	bne.n	800c8c6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	2bff      	cmp	r3, #255	@ 0xff
 800c8a6:	d807      	bhi.n	800c8b8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	69b9      	ldr	r1, [r7, #24]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff ff34 	bl	800c71e <LL_GPIO_SetAFPin_0_7>
 800c8b6:	e006      	b.n	800c8c6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	69b9      	ldr	r1, [r7, #24]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff ff69 	bl	800c798 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	69b9      	ldr	r1, [r7, #24]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff fe56 	bl	800c580 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1af      	bne.n	800c848 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3720      	adds	r7, #32
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c8fa:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c8fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c906:	b29a      	uxth	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	43db      	mvns	r3, r3
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4013      	ands	r3, r2
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	1d3b      	adds	r3, r7, #4
 800c932:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2201      	movs	r2, #1
 800c93a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b0ac      	sub	sp, #176	@ 0xb0
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	2b01      	cmp	r3, #1
 800c974:	f040 84ca 	bne.w	800d30c <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	699a      	ldr	r2, [r3, #24]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	429a      	cmp	r2, r3
 800c982:	d904      	bls.n	800c98e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c98c:	e003      	b.n	800c996 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	7b1b      	ldrb	r3, [r3, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d122      	bne.n	800c9e4 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	6959      	ldr	r1, [r3, #20]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	88da      	ldrh	r2, [r3, #6]
 800c9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fdac 	bl	800d50a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	613b      	str	r3, [r7, #16]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	461a      	mov	r2, r3
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	00da      	lsls	r2, r3, #3
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	801a      	strh	r2, [r3, #0]
 800c9e0:	f000 bc6f 	b.w	800d2c2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	78db      	ldrb	r3, [r3, #3]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	f040 831e 	bne.w	800d02a <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6a1a      	ldr	r2, [r3, #32]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	f240 82cf 	bls.w	800cf9a <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca12:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	441a      	add	r2, r3
 800ca20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	6a1a      	ldr	r2, [r3, #32]
 800ca3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca40:	1ad2      	subs	r2, r2, r3
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 814f 	beq.w	800ccfc <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	785b      	ldrb	r3, [r3, #1]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d16b      	bne.n	800cb42 <USB_EPStartXfer+0x1de>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	461a      	mov	r2, r3
 800ca78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7a:	4413      	add	r3, r2
 800ca7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	00da      	lsls	r2, r3, #3
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	4413      	add	r3, r2
 800ca88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9c:	801a      	strh	r2, [r3, #0]
 800ca9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10a      	bne.n	800cabc <USB_EPStartXfer+0x158>
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab8:	801a      	strh	r2, [r3, #0]
 800caba:	e05b      	b.n	800cb74 <USB_EPStartXfer+0x210>
 800cabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cac2:	d81c      	bhi.n	800cafe <USB_EPStartXfer+0x19a>
 800cac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac8:	085b      	lsrs	r3, r3, #1
 800caca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d004      	beq.n	800cae4 <USB_EPStartXfer+0x180>
 800cada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cade:	3301      	adds	r3, #1
 800cae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	b29a      	uxth	r2, r3
 800caea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800caee:	b29b      	uxth	r3, r3
 800caf0:	029b      	lsls	r3, r3, #10
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	4313      	orrs	r3, r2
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	801a      	strh	r2, [r3, #0]
 800cafc:	e03a      	b.n	800cb74 <USB_EPStartXfer+0x210>
 800cafe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb0c:	f003 031f 	and.w	r3, r3, #31
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d104      	bne.n	800cb1e <USB_EPStartXfer+0x1ba>
 800cb14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	029b      	lsls	r3, r3, #10
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	801a      	strh	r2, [r3, #0]
 800cb40:	e018      	b.n	800cb74 <USB_EPStartXfer+0x210>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	785b      	ldrb	r3, [r3, #1]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d114      	bne.n	800cb74 <USB_EPStartXfer+0x210>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	4413      	add	r3, r2
 800cb58:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	00da      	lsls	r2, r3, #3
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	4413      	add	r3, r2
 800cb64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	895b      	ldrh	r3, [r3, #10]
 800cb78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	6959      	ldr	r1, [r3, #20]
 800cb80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fcbd 	bl	800d50a <USB_WritePMA>
            ep->xfer_buff += len;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	695a      	ldr	r2, [r3, #20]
 800cb94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb98:	441a      	add	r2, r3
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	6a1a      	ldr	r2, [r3, #32]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d907      	bls.n	800cbba <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	6a1a      	ldr	r2, [r3, #32]
 800cbae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	621a      	str	r2, [r3, #32]
 800cbb8:	e006      	b.n	800cbc8 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d16b      	bne.n	800cca8 <USB_EPStartXfer+0x344>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	61bb      	str	r3, [r7, #24]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	00da      	lsls	r2, r3, #3
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	4413      	add	r3, r2
 800cbee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbf2:	617b      	str	r3, [r7, #20]
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	801a      	strh	r2, [r3, #0]
 800cc04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <USB_EPStartXfer+0x2be>
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	801a      	strh	r2, [r3, #0]
 800cc20:	e05d      	b.n	800ccde <USB_EPStartXfer+0x37a>
 800cc22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc26:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc28:	d81c      	bhi.n	800cc64 <USB_EPStartXfer+0x300>
 800cc2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d004      	beq.n	800cc4a <USB_EPStartXfer+0x2e6>
 800cc40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc44:	3301      	adds	r3, #1
 800cc46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	029b      	lsls	r3, r3, #10
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	801a      	strh	r2, [r3, #0]
 800cc62:	e03c      	b.n	800ccde <USB_EPStartXfer+0x37a>
 800cc64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc72:	f003 031f 	and.w	r3, r3, #31
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d104      	bne.n	800cc84 <USB_EPStartXfer+0x320>
 800cc7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	029b      	lsls	r3, r3, #10
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4313      	orrs	r3, r2
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	801a      	strh	r2, [r3, #0]
 800cca6:	e01a      	b.n	800ccde <USB_EPStartXfer+0x37a>
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d116      	bne.n	800ccde <USB_EPStartXfer+0x37a>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	623b      	str	r3, [r7, #32]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	623b      	str	r3, [r7, #32]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	00da      	lsls	r2, r3, #3
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	4413      	add	r3, r2
 800ccce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccd2:	61fb      	str	r3, [r7, #28]
 800ccd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	891b      	ldrh	r3, [r3, #8]
 800cce2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	6959      	ldr	r1, [r3, #20]
 800ccea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fc08 	bl	800d50a <USB_WritePMA>
 800ccfa:	e2e2      	b.n	800d2c2 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d16b      	bne.n	800cddc <USB_EPStartXfer+0x478>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	461a      	mov	r2, r3
 800cd12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd14:	4413      	add	r3, r2
 800cd16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	00da      	lsls	r2, r3, #3
 800cd1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd20:	4413      	add	r3, r2
 800cd22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd26:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd36:	801a      	strh	r2, [r3, #0]
 800cd38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <USB_EPStartXfer+0x3f2>
 800cd40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd52:	801a      	strh	r2, [r3, #0]
 800cd54:	e05d      	b.n	800ce12 <USB_EPStartXfer+0x4ae>
 800cd56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd5a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd5c:	d81c      	bhi.n	800cd98 <USB_EPStartXfer+0x434>
 800cd5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd62:	085b      	lsrs	r3, r3, #1
 800cd64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <USB_EPStartXfer+0x41a>
 800cd74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd78:	3301      	adds	r3, #1
 800cd7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	029b      	lsls	r3, r3, #10
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd94:	801a      	strh	r2, [r3, #0]
 800cd96:	e03c      	b.n	800ce12 <USB_EPStartXfer+0x4ae>
 800cd98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd9c:	095b      	lsrs	r3, r3, #5
 800cd9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cda6:	f003 031f 	and.w	r3, r3, #31
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d104      	bne.n	800cdb8 <USB_EPStartXfer+0x454>
 800cdae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	029b      	lsls	r3, r3, #10
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdd8:	801a      	strh	r2, [r3, #0]
 800cdda:	e01a      	b.n	800ce12 <USB_EPStartXfer+0x4ae>
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d116      	bne.n	800ce12 <USB_EPStartXfer+0x4ae>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf4:	4413      	add	r3, r2
 800cdf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	00da      	lsls	r2, r3, #3
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce00:	4413      	add	r3, r2
 800ce02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	891b      	ldrh	r3, [r3, #8]
 800ce16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	6959      	ldr	r1, [r3, #20]
 800ce1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fb6e 	bl	800d50a <USB_WritePMA>
            ep->xfer_buff += len;
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	695a      	ldr	r2, [r3, #20]
 800ce32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce36:	441a      	add	r2, r3
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	6a1a      	ldr	r2, [r3, #32]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d907      	bls.n	800ce58 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6a1a      	ldr	r2, [r3, #32]
 800ce4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce50:	1ad2      	subs	r2, r2, r3
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	621a      	str	r2, [r3, #32]
 800ce56:	e006      	b.n	800ce66 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2200      	movs	r2, #0
 800ce64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	785b      	ldrb	r3, [r3, #1]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d16b      	bne.n	800cf4a <USB_EPStartXfer+0x5e6>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	4413      	add	r3, r2
 800ce84:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	00da      	lsls	r2, r3, #3
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8e:	4413      	add	r3, r2
 800ce90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea4:	801a      	strh	r2, [r3, #0]
 800cea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <USB_EPStartXfer+0x560>
 800ceae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	e05b      	b.n	800cf7c <USB_EPStartXfer+0x618>
 800cec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceca:	d81c      	bhi.n	800cf06 <USB_EPStartXfer+0x5a2>
 800cecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced0:	085b      	lsrs	r3, r3, #1
 800ced2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ced6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <USB_EPStartXfer+0x588>
 800cee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cee6:	3301      	adds	r3, #1
 800cee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ceec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	029b      	lsls	r3, r3, #10
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	4313      	orrs	r3, r2
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf02:	801a      	strh	r2, [r3, #0]
 800cf04:	e03a      	b.n	800cf7c <USB_EPStartXfer+0x618>
 800cf06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf0a:	095b      	lsrs	r3, r3, #5
 800cf0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf14:	f003 031f 	and.w	r3, r3, #31
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d104      	bne.n	800cf26 <USB_EPStartXfer+0x5c2>
 800cf1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf20:	3b01      	subs	r3, #1
 800cf22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	029b      	lsls	r3, r3, #10
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	4313      	orrs	r3, r2
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf46:	801a      	strh	r2, [r3, #0]
 800cf48:	e018      	b.n	800cf7c <USB_EPStartXfer+0x618>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d114      	bne.n	800cf7c <USB_EPStartXfer+0x618>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf5e:	4413      	add	r3, r2
 800cf60:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	00da      	lsls	r2, r3, #3
 800cf68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	895b      	ldrh	r3, [r3, #10]
 800cf80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	6959      	ldr	r1, [r3, #20]
 800cf88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fab9 	bl	800d50a <USB_WritePMA>
 800cf98:	e193      	b.n	800d2c2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cfb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfb8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	441a      	add	r2, r3
 800cfc6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	461a      	mov	r2, r3
 800cfec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfee:	4413      	add	r3, r2
 800cff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	00da      	lsls	r2, r3, #3
 800cff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cffa:	4413      	add	r3, r2
 800cffc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d000:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d006:	b29a      	uxth	r2, r3
 800d008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d00a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	891b      	ldrh	r3, [r3, #8]
 800d010:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	6959      	ldr	r1, [r3, #20]
 800d018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa71 	bl	800d50a <USB_WritePMA>
 800d028:	e14b      	b.n	800d2c2 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	6a1a      	ldr	r2, [r3, #32]
 800d02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d032:	1ad2      	subs	r2, r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	b29b      	uxth	r3, r3
 800d046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 809a 	beq.w	800d184 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	673b      	str	r3, [r7, #112]	@ 0x70
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	785b      	ldrb	r3, [r3, #1]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d16b      	bne.n	800d134 <USB_EPStartXfer+0x7d0>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d066:	b29b      	uxth	r3, r3
 800d068:	461a      	mov	r2, r3
 800d06a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d06c:	4413      	add	r3, r2
 800d06e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	00da      	lsls	r2, r3, #3
 800d076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d078:	4413      	add	r3, r2
 800d07a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d07e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d082:	881b      	ldrh	r3, [r3, #0]
 800d084:	b29b      	uxth	r3, r3
 800d086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d08e:	801a      	strh	r2, [r3, #0]
 800d090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10a      	bne.n	800d0ae <USB_EPStartXfer+0x74a>
 800d098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d09a:	881b      	ldrh	r3, [r3, #0]
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0aa:	801a      	strh	r2, [r3, #0]
 800d0ac:	e05b      	b.n	800d166 <USB_EPStartXfer+0x802>
 800d0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0b4:	d81c      	bhi.n	800d0f0 <USB_EPStartXfer+0x78c>
 800d0b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ba:	085b      	lsrs	r3, r3, #1
 800d0bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d004      	beq.n	800d0d6 <USB_EPStartXfer+0x772>
 800d0cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	029b      	lsls	r3, r3, #10
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0ec:	801a      	strh	r2, [r3, #0]
 800d0ee:	e03a      	b.n	800d166 <USB_EPStartXfer+0x802>
 800d0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0fe:	f003 031f 	and.w	r3, r3, #31
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <USB_EPStartXfer+0x7ac>
 800d106:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d10a:	3b01      	subs	r3, #1
 800d10c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	b29a      	uxth	r2, r3
 800d116:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	029b      	lsls	r3, r3, #10
 800d11e:	b29b      	uxth	r3, r3
 800d120:	4313      	orrs	r3, r2
 800d122:	b29b      	uxth	r3, r3
 800d124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d130:	801a      	strh	r2, [r3, #0]
 800d132:	e018      	b.n	800d166 <USB_EPStartXfer+0x802>
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d114      	bne.n	800d166 <USB_EPStartXfer+0x802>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d142:	b29b      	uxth	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d148:	4413      	add	r3, r2
 800d14a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	00da      	lsls	r2, r3, #3
 800d152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d154:	4413      	add	r3, r2
 800d156:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d15a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d15c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d160:	b29a      	uxth	r2, r3
 800d162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	895b      	ldrh	r3, [r3, #10]
 800d16a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	6959      	ldr	r1, [r3, #20]
 800d172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d176:	b29b      	uxth	r3, r3
 800d178:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f9c4 	bl	800d50a <USB_WritePMA>
 800d182:	e09e      	b.n	800d2c2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	785b      	ldrb	r3, [r3, #1]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d16b      	bne.n	800d264 <USB_EPStartXfer+0x900>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d196:	b29b      	uxth	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d19c:	4413      	add	r3, r2
 800d19e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	00da      	lsls	r2, r3, #3
 800d1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1be:	801a      	strh	r2, [r3, #0]
 800d1c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10a      	bne.n	800d1de <USB_EPStartXfer+0x87a>
 800d1c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1da:	801a      	strh	r2, [r3, #0]
 800d1dc:	e063      	b.n	800d2a6 <USB_EPStartXfer+0x942>
 800d1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1e4:	d81c      	bhi.n	800d220 <USB_EPStartXfer+0x8bc>
 800d1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1ea:	085b      	lsrs	r3, r3, #1
 800d1ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d004      	beq.n	800d206 <USB_EPStartXfer+0x8a2>
 800d1fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d200:	3301      	adds	r3, #1
 800d202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d210:	b29b      	uxth	r3, r3
 800d212:	029b      	lsls	r3, r3, #10
 800d214:	b29b      	uxth	r3, r3
 800d216:	4313      	orrs	r3, r2
 800d218:	b29a      	uxth	r2, r3
 800d21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d21c:	801a      	strh	r2, [r3, #0]
 800d21e:	e042      	b.n	800d2a6 <USB_EPStartXfer+0x942>
 800d220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d224:	095b      	lsrs	r3, r3, #5
 800d226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d22a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d22e:	f003 031f 	and.w	r3, r3, #31
 800d232:	2b00      	cmp	r3, #0
 800d234:	d104      	bne.n	800d240 <USB_EPStartXfer+0x8dc>
 800d236:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d23a:	3b01      	subs	r3, #1
 800d23c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	b29a      	uxth	r2, r3
 800d246:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	029b      	lsls	r3, r3, #10
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4313      	orrs	r3, r2
 800d252:	b29b      	uxth	r3, r3
 800d254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d260:	801a      	strh	r2, [r3, #0]
 800d262:	e020      	b.n	800d2a6 <USB_EPStartXfer+0x942>
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	785b      	ldrb	r3, [r3, #1]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d11c      	bne.n	800d2a6 <USB_EPStartXfer+0x942>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d278:	b29b      	uxth	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d280:	4413      	add	r3, r2
 800d282:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	00da      	lsls	r2, r3, #3
 800d28c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d290:	4413      	add	r3, r2
 800d292:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d29a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d2a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	891b      	ldrh	r3, [r3, #8]
 800d2aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6959      	ldr	r1, [r3, #20]
 800d2b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f924 	bl	800d50a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2d8:	817b      	strh	r3, [r7, #10]
 800d2da:	897b      	ldrh	r3, [r7, #10]
 800d2dc:	f083 0310 	eor.w	r3, r3, #16
 800d2e0:	817b      	strh	r3, [r7, #10]
 800d2e2:	897b      	ldrh	r3, [r7, #10]
 800d2e4:	f083 0320 	eor.w	r3, r3, #32
 800d2e8:	817b      	strh	r3, [r7, #10]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	441a      	add	r2, r3
 800d2f4:	897b      	ldrh	r3, [r7, #10]
 800d2f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d306:	b29b      	uxth	r3, r3
 800d308:	8013      	strh	r3, [r2, #0]
 800d30a:	e0d5      	b.n	800d4b8 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	7b1b      	ldrb	r3, [r3, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d156      	bne.n	800d3c2 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d122      	bne.n	800d362 <USB_EPStartXfer+0x9fe>
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	78db      	ldrb	r3, [r3, #3]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d11e      	bne.n	800d362 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	b29b      	uxth	r3, r3
 800d332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d33a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	441a      	add	r2, r3
 800d348:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d34c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d354:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	8013      	strh	r3, [r2, #0]
 800d360:	e01d      	b.n	800d39e <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	b29b      	uxth	r3, r3
 800d370:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d378:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	441a      	add	r2, r3
 800d386:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d38a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d38e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	699a      	ldr	r2, [r3, #24]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d907      	bls.n	800d3ba <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	1ad2      	subs	r2, r2, r3
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	619a      	str	r2, [r3, #24]
 800d3b8:	e054      	b.n	800d464 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	619a      	str	r2, [r3, #24]
 800d3c0:	e050      	b.n	800d464 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	78db      	ldrb	r3, [r3, #3]
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d142      	bne.n	800d450 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d048      	beq.n	800d464 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <USB_EPStartXfer+0xa96>
 800d3ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10b      	bne.n	800d412 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d3fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d3fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d402:	2b00      	cmp	r3, #0
 800d404:	d12e      	bne.n	800d464 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d406:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d128      	bne.n	800d464 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d428:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	441a      	add	r2, r3
 800d436:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d43a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d43e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d446:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	8013      	strh	r3, [r2, #0]
 800d44e:	e009      	b.n	800d464 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	78db      	ldrb	r3, [r3, #3]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d103      	bne.n	800d460 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2200      	movs	r2, #0
 800d45c:	619a      	str	r2, [r3, #24]
 800d45e:	e001      	b.n	800d464 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e02a      	b.n	800d4ba <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	b29b      	uxth	r3, r3
 800d472:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d47a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d47e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d482:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d486:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d48a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d48e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d492:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	441a      	add	r2, r3
 800d4a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d4a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	37b0      	adds	r7, #176	@ 0xb0
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d4ce:	78fb      	ldrb	r3, [r7, #3]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2280      	movs	r2, #128	@ 0x80
 800d4d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr

0800d4ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d4ea:	b480      	push	{r7}
 800d4ec:	b085      	sub	sp, #20
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b08b      	sub	sp, #44	@ 0x2c
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	4611      	mov	r1, r2
 800d516:	461a      	mov	r2, r3
 800d518:	460b      	mov	r3, r1
 800d51a:	80fb      	strh	r3, [r7, #6]
 800d51c:	4613      	mov	r3, r2
 800d51e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d520:	88bb      	ldrh	r3, [r7, #4]
 800d522:	3301      	adds	r3, #1
 800d524:	085b      	lsrs	r3, r3, #1
 800d526:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d530:	88fa      	ldrh	r2, [r7, #6]
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	4413      	add	r3, r2
 800d536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d53a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d540:	e01c      	b.n	800d57c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	3301      	adds	r3, #1
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	b21b      	sxth	r3, r3
 800d550:	021b      	lsls	r3, r3, #8
 800d552:	b21a      	sxth	r2, r3
 800d554:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d558:	4313      	orrs	r3, r2
 800d55a:	b21b      	sxth	r3, r3
 800d55c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	8a7a      	ldrh	r2, [r7, #18]
 800d562:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	3302      	adds	r3, #2
 800d568:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	3301      	adds	r3, #1
 800d56e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	3301      	adds	r3, #1
 800d574:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	3b01      	subs	r3, #1
 800d57a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1df      	bne.n	800d542 <USB_WritePMA+0x38>
  }
}
 800d582:	bf00      	nop
 800d584:	bf00      	nop
 800d586:	372c      	adds	r7, #44	@ 0x2c
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d590:	b480      	push	{r7}
 800d592:	b08b      	sub	sp, #44	@ 0x2c
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4611      	mov	r1, r2
 800d59c:	461a      	mov	r2, r3
 800d59e:	460b      	mov	r3, r1
 800d5a0:	80fb      	strh	r3, [r7, #6]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d5a6:	88bb      	ldrh	r3, [r7, #4]
 800d5a8:	085b      	lsrs	r3, r3, #1
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d5b6:	88fa      	ldrh	r2, [r7, #6]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d5c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5c6:	e018      	b.n	800d5fa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d5d0:	6a3b      	ldr	r3, [r7, #32]
 800d5d2:	3302      	adds	r3, #2
 800d5d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	0a1b      	lsrs	r3, r3, #8
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1e3      	bne.n	800d5c8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d600:	88bb      	ldrh	r3, [r7, #4]
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	b29b      	uxth	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	b29b      	uxth	r3, r3
 800d612:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	b2da      	uxtb	r2, r3
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	701a      	strb	r2, [r3, #0]
  }
}
 800d61c:	bf00      	nop
 800d61e:	372c      	adds	r7, #44	@ 0x2c
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <memset>:
 800d628:	4402      	add	r2, r0
 800d62a:	4603      	mov	r3, r0
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d100      	bne.n	800d632 <memset+0xa>
 800d630:	4770      	bx	lr
 800d632:	f803 1b01 	strb.w	r1, [r3], #1
 800d636:	e7f9      	b.n	800d62c <memset+0x4>

0800d638 <__libc_init_array>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	4d0d      	ldr	r5, [pc, #52]	@ (800d670 <__libc_init_array+0x38>)
 800d63c:	4c0d      	ldr	r4, [pc, #52]	@ (800d674 <__libc_init_array+0x3c>)
 800d63e:	1b64      	subs	r4, r4, r5
 800d640:	10a4      	asrs	r4, r4, #2
 800d642:	2600      	movs	r6, #0
 800d644:	42a6      	cmp	r6, r4
 800d646:	d109      	bne.n	800d65c <__libc_init_array+0x24>
 800d648:	4d0b      	ldr	r5, [pc, #44]	@ (800d678 <__libc_init_array+0x40>)
 800d64a:	4c0c      	ldr	r4, [pc, #48]	@ (800d67c <__libc_init_array+0x44>)
 800d64c:	f001 f83c 	bl	800e6c8 <_init>
 800d650:	1b64      	subs	r4, r4, r5
 800d652:	10a4      	asrs	r4, r4, #2
 800d654:	2600      	movs	r6, #0
 800d656:	42a6      	cmp	r6, r4
 800d658:	d105      	bne.n	800d666 <__libc_init_array+0x2e>
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d660:	4798      	blx	r3
 800d662:	3601      	adds	r6, #1
 800d664:	e7ee      	b.n	800d644 <__libc_init_array+0xc>
 800d666:	f855 3b04 	ldr.w	r3, [r5], #4
 800d66a:	4798      	blx	r3
 800d66c:	3601      	adds	r6, #1
 800d66e:	e7f2      	b.n	800d656 <__libc_init_array+0x1e>
 800d670:	0800e908 	.word	0x0800e908
 800d674:	0800e908 	.word	0x0800e908
 800d678:	0800e908 	.word	0x0800e908
 800d67c:	0800e90c 	.word	0x0800e90c

0800d680 <sin>:
 800d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d682:	ec53 2b10 	vmov	r2, r3, d0
 800d686:	4826      	ldr	r0, [pc, #152]	@ (800d720 <sin+0xa0>)
 800d688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d68c:	4281      	cmp	r1, r0
 800d68e:	d807      	bhi.n	800d6a0 <sin+0x20>
 800d690:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d718 <sin+0x98>
 800d694:	2000      	movs	r0, #0
 800d696:	b005      	add	sp, #20
 800d698:	f85d eb04 	ldr.w	lr, [sp], #4
 800d69c:	f000 b90c 	b.w	800d8b8 <__kernel_sin>
 800d6a0:	4820      	ldr	r0, [pc, #128]	@ (800d724 <sin+0xa4>)
 800d6a2:	4281      	cmp	r1, r0
 800d6a4:	d908      	bls.n	800d6b8 <sin+0x38>
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7f2 fdc1 	bl	8000230 <__aeabi_dsub>
 800d6ae:	ec41 0b10 	vmov	d0, r0, r1
 800d6b2:	b005      	add	sp, #20
 800d6b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6b8:	4668      	mov	r0, sp
 800d6ba:	f000 f9b9 	bl	800da30 <__ieee754_rem_pio2>
 800d6be:	f000 0003 	and.w	r0, r0, #3
 800d6c2:	2801      	cmp	r0, #1
 800d6c4:	d00c      	beq.n	800d6e0 <sin+0x60>
 800d6c6:	2802      	cmp	r0, #2
 800d6c8:	d011      	beq.n	800d6ee <sin+0x6e>
 800d6ca:	b9e8      	cbnz	r0, 800d708 <sin+0x88>
 800d6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d0:	ed9d 0b00 	vldr	d0, [sp]
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f000 f8ef 	bl	800d8b8 <__kernel_sin>
 800d6da:	ec51 0b10 	vmov	r0, r1, d0
 800d6de:	e7e6      	b.n	800d6ae <sin+0x2e>
 800d6e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e4:	ed9d 0b00 	vldr	d0, [sp]
 800d6e8:	f000 f81e 	bl	800d728 <__kernel_cos>
 800d6ec:	e7f5      	b.n	800d6da <sin+0x5a>
 800d6ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6f2:	ed9d 0b00 	vldr	d0, [sp]
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	f000 f8de 	bl	800d8b8 <__kernel_sin>
 800d6fc:	ec53 2b10 	vmov	r2, r3, d0
 800d700:	4610      	mov	r0, r2
 800d702:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d706:	e7d2      	b.n	800d6ae <sin+0x2e>
 800d708:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d70c:	ed9d 0b00 	vldr	d0, [sp]
 800d710:	f000 f80a 	bl	800d728 <__kernel_cos>
 800d714:	e7f2      	b.n	800d6fc <sin+0x7c>
 800d716:	bf00      	nop
	...
 800d720:	3fe921fb 	.word	0x3fe921fb
 800d724:	7fefffff 	.word	0x7fefffff

0800d728 <__kernel_cos>:
 800d728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	ec57 6b10 	vmov	r6, r7, d0
 800d730:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d734:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d738:	ed8d 1b00 	vstr	d1, [sp]
 800d73c:	d206      	bcs.n	800d74c <__kernel_cos+0x24>
 800d73e:	4630      	mov	r0, r6
 800d740:	4639      	mov	r1, r7
 800d742:	f7f3 f9c7 	bl	8000ad4 <__aeabi_d2iz>
 800d746:	2800      	cmp	r0, #0
 800d748:	f000 8088 	beq.w	800d85c <__kernel_cos+0x134>
 800d74c:	4632      	mov	r2, r6
 800d74e:	463b      	mov	r3, r7
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 ff24 	bl	80005a0 <__aeabi_dmul>
 800d758:	4b51      	ldr	r3, [pc, #324]	@ (800d8a0 <__kernel_cos+0x178>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	4604      	mov	r4, r0
 800d75e:	460d      	mov	r5, r1
 800d760:	f7f2 ff1e 	bl	80005a0 <__aeabi_dmul>
 800d764:	a340      	add	r3, pc, #256	@ (adr r3, 800d868 <__kernel_cos+0x140>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	4682      	mov	sl, r0
 800d76c:	468b      	mov	fp, r1
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f2 ff15 	bl	80005a0 <__aeabi_dmul>
 800d776:	a33e      	add	r3, pc, #248	@ (adr r3, 800d870 <__kernel_cos+0x148>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 fd5a 	bl	8000234 <__adddf3>
 800d780:	4622      	mov	r2, r4
 800d782:	462b      	mov	r3, r5
 800d784:	f7f2 ff0c 	bl	80005a0 <__aeabi_dmul>
 800d788:	a33b      	add	r3, pc, #236	@ (adr r3, 800d878 <__kernel_cos+0x150>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	f7f2 fd4f 	bl	8000230 <__aeabi_dsub>
 800d792:	4622      	mov	r2, r4
 800d794:	462b      	mov	r3, r5
 800d796:	f7f2 ff03 	bl	80005a0 <__aeabi_dmul>
 800d79a:	a339      	add	r3, pc, #228	@ (adr r3, 800d880 <__kernel_cos+0x158>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd48 	bl	8000234 <__adddf3>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f7f2 fefa 	bl	80005a0 <__aeabi_dmul>
 800d7ac:	a336      	add	r3, pc, #216	@ (adr r3, 800d888 <__kernel_cos+0x160>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd3d 	bl	8000230 <__aeabi_dsub>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	f7f2 fef1 	bl	80005a0 <__aeabi_dmul>
 800d7be:	a334      	add	r3, pc, #208	@ (adr r3, 800d890 <__kernel_cos+0x168>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f7f2 fd36 	bl	8000234 <__adddf3>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f7f2 fee8 	bl	80005a0 <__aeabi_dmul>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	462b      	mov	r3, r5
 800d7d4:	f7f2 fee4 	bl	80005a0 <__aeabi_dmul>
 800d7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7dc:	4604      	mov	r4, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	f7f2 fedc 	bl	80005a0 <__aeabi_dmul>
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7f2 fd1e 	bl	8000230 <__aeabi_dsub>
 800d7f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d8a4 <__kernel_cos+0x17c>)
 800d7f6:	4598      	cmp	r8, r3
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	d810      	bhi.n	800d820 <__kernel_cos+0xf8>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fd13 	bl	8000230 <__aeabi_dsub>
 800d80a:	460b      	mov	r3, r1
 800d80c:	4926      	ldr	r1, [pc, #152]	@ (800d8a8 <__kernel_cos+0x180>)
 800d80e:	4602      	mov	r2, r0
 800d810:	2000      	movs	r0, #0
 800d812:	f7f2 fd0d 	bl	8000230 <__aeabi_dsub>
 800d816:	ec41 0b10 	vmov	d0, r0, r1
 800d81a:	b003      	add	sp, #12
 800d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d820:	4b22      	ldr	r3, [pc, #136]	@ (800d8ac <__kernel_cos+0x184>)
 800d822:	4921      	ldr	r1, [pc, #132]	@ (800d8a8 <__kernel_cos+0x180>)
 800d824:	4598      	cmp	r8, r3
 800d826:	bf8c      	ite	hi
 800d828:	4d21      	ldrhi	r5, [pc, #132]	@ (800d8b0 <__kernel_cos+0x188>)
 800d82a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d82e:	2400      	movs	r4, #0
 800d830:	4622      	mov	r2, r4
 800d832:	462b      	mov	r3, r5
 800d834:	2000      	movs	r0, #0
 800d836:	f7f2 fcfb 	bl	8000230 <__aeabi_dsub>
 800d83a:	4622      	mov	r2, r4
 800d83c:	4680      	mov	r8, r0
 800d83e:	4689      	mov	r9, r1
 800d840:	462b      	mov	r3, r5
 800d842:	4650      	mov	r0, sl
 800d844:	4659      	mov	r1, fp
 800d846:	f7f2 fcf3 	bl	8000230 <__aeabi_dsub>
 800d84a:	4632      	mov	r2, r6
 800d84c:	463b      	mov	r3, r7
 800d84e:	f7f2 fcef 	bl	8000230 <__aeabi_dsub>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	e7da      	b.n	800d812 <__kernel_cos+0xea>
 800d85c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d898 <__kernel_cos+0x170>
 800d860:	e7db      	b.n	800d81a <__kernel_cos+0xf2>
 800d862:	bf00      	nop
 800d864:	f3af 8000 	nop.w
 800d868:	be8838d4 	.word	0xbe8838d4
 800d86c:	bda8fae9 	.word	0xbda8fae9
 800d870:	bdb4b1c4 	.word	0xbdb4b1c4
 800d874:	3e21ee9e 	.word	0x3e21ee9e
 800d878:	809c52ad 	.word	0x809c52ad
 800d87c:	3e927e4f 	.word	0x3e927e4f
 800d880:	19cb1590 	.word	0x19cb1590
 800d884:	3efa01a0 	.word	0x3efa01a0
 800d888:	16c15177 	.word	0x16c15177
 800d88c:	3f56c16c 	.word	0x3f56c16c
 800d890:	5555554c 	.word	0x5555554c
 800d894:	3fa55555 	.word	0x3fa55555
 800d898:	00000000 	.word	0x00000000
 800d89c:	3ff00000 	.word	0x3ff00000
 800d8a0:	3fe00000 	.word	0x3fe00000
 800d8a4:	3fd33332 	.word	0x3fd33332
 800d8a8:	3ff00000 	.word	0x3ff00000
 800d8ac:	3fe90000 	.word	0x3fe90000
 800d8b0:	3fd20000 	.word	0x3fd20000
 800d8b4:	00000000 	.word	0x00000000

0800d8b8 <__kernel_sin>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	ec55 4b10 	vmov	r4, r5, d0
 800d8c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d8ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d8ce:	4680      	mov	r8, r0
 800d8d0:	d205      	bcs.n	800d8de <__kernel_sin+0x26>
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7f3 f8fd 	bl	8000ad4 <__aeabi_d2iz>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d052      	beq.n	800d984 <__kernel_sin+0xcc>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	f7f2 fe5b 	bl	80005a0 <__aeabi_dmul>
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	468b      	mov	fp, r1
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f2 fe53 	bl	80005a0 <__aeabi_dmul>
 800d8fa:	a342      	add	r3, pc, #264	@ (adr r3, 800da04 <__kernel_sin+0x14c>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	e9cd 0100 	strd	r0, r1, [sp]
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	f7f2 fe4a 	bl	80005a0 <__aeabi_dmul>
 800d90c:	a33f      	add	r3, pc, #252	@ (adr r3, 800da0c <__kernel_sin+0x154>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fc8d 	bl	8000230 <__aeabi_dsub>
 800d916:	4652      	mov	r2, sl
 800d918:	465b      	mov	r3, fp
 800d91a:	f7f2 fe41 	bl	80005a0 <__aeabi_dmul>
 800d91e:	a33d      	add	r3, pc, #244	@ (adr r3, 800da14 <__kernel_sin+0x15c>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fc86 	bl	8000234 <__adddf3>
 800d928:	4652      	mov	r2, sl
 800d92a:	465b      	mov	r3, fp
 800d92c:	f7f2 fe38 	bl	80005a0 <__aeabi_dmul>
 800d930:	a33a      	add	r3, pc, #232	@ (adr r3, 800da1c <__kernel_sin+0x164>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fc7b 	bl	8000230 <__aeabi_dsub>
 800d93a:	4652      	mov	r2, sl
 800d93c:	465b      	mov	r3, fp
 800d93e:	f7f2 fe2f 	bl	80005a0 <__aeabi_dmul>
 800d942:	a338      	add	r3, pc, #224	@ (adr r3, 800da24 <__kernel_sin+0x16c>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fc74 	bl	8000234 <__adddf3>
 800d94c:	4606      	mov	r6, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	d11b      	bne.n	800d98e <__kernel_sin+0xd6>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4650      	mov	r0, sl
 800d95c:	4659      	mov	r1, fp
 800d95e:	f7f2 fe1f 	bl	80005a0 <__aeabi_dmul>
 800d962:	a325      	add	r3, pc, #148	@ (adr r3, 800d9f8 <__kernel_sin+0x140>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	f7f2 fc62 	bl	8000230 <__aeabi_dsub>
 800d96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d970:	f7f2 fe16 	bl	80005a0 <__aeabi_dmul>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4620      	mov	r0, r4
 800d97a:	4629      	mov	r1, r5
 800d97c:	f7f2 fc5a 	bl	8000234 <__adddf3>
 800d980:	4604      	mov	r4, r0
 800d982:	460d      	mov	r5, r1
 800d984:	ec45 4b10 	vmov	d0, r4, r5
 800d988:	b005      	add	sp, #20
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d992:	4b1b      	ldr	r3, [pc, #108]	@ (800da00 <__kernel_sin+0x148>)
 800d994:	2200      	movs	r2, #0
 800d996:	f7f2 fe03 	bl	80005a0 <__aeabi_dmul>
 800d99a:	4632      	mov	r2, r6
 800d99c:	4680      	mov	r8, r0
 800d99e:	4689      	mov	r9, r1
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9a6:	f7f2 fdfb 	bl	80005a0 <__aeabi_dmul>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	f7f2 fc3d 	bl	8000230 <__aeabi_dsub>
 800d9b6:	4652      	mov	r2, sl
 800d9b8:	465b      	mov	r3, fp
 800d9ba:	f7f2 fdf1 	bl	80005a0 <__aeabi_dmul>
 800d9be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c2:	f7f2 fc35 	bl	8000230 <__aeabi_dsub>
 800d9c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d9f8 <__kernel_sin+0x140>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9d4:	f7f2 fde4 	bl	80005a0 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f2 fc28 	bl	8000234 <__adddf3>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7f2 fc20 	bl	8000230 <__aeabi_dsub>
 800d9f0:	e7c6      	b.n	800d980 <__kernel_sin+0xc8>
 800d9f2:	bf00      	nop
 800d9f4:	f3af 8000 	nop.w
 800d9f8:	55555549 	.word	0x55555549
 800d9fc:	3fc55555 	.word	0x3fc55555
 800da00:	3fe00000 	.word	0x3fe00000
 800da04:	5acfd57c 	.word	0x5acfd57c
 800da08:	3de5d93a 	.word	0x3de5d93a
 800da0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800da10:	3e5ae5e6 	.word	0x3e5ae5e6
 800da14:	57b1fe7d 	.word	0x57b1fe7d
 800da18:	3ec71de3 	.word	0x3ec71de3
 800da1c:	19c161d5 	.word	0x19c161d5
 800da20:	3f2a01a0 	.word	0x3f2a01a0
 800da24:	1110f8a6 	.word	0x1110f8a6
 800da28:	3f811111 	.word	0x3f811111
 800da2c:	00000000 	.word	0x00000000

0800da30 <__ieee754_rem_pio2>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ec57 6b10 	vmov	r6, r7, d0
 800da38:	4bc5      	ldr	r3, [pc, #788]	@ (800dd50 <__ieee754_rem_pio2+0x320>)
 800da3a:	b08d      	sub	sp, #52	@ 0x34
 800da3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800da40:	4598      	cmp	r8, r3
 800da42:	4604      	mov	r4, r0
 800da44:	9704      	str	r7, [sp, #16]
 800da46:	d807      	bhi.n	800da58 <__ieee754_rem_pio2+0x28>
 800da48:	2200      	movs	r2, #0
 800da4a:	2300      	movs	r3, #0
 800da4c:	ed80 0b00 	vstr	d0, [r0]
 800da50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da54:	2500      	movs	r5, #0
 800da56:	e028      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800da58:	4bbe      	ldr	r3, [pc, #760]	@ (800dd54 <__ieee754_rem_pio2+0x324>)
 800da5a:	4598      	cmp	r8, r3
 800da5c:	d878      	bhi.n	800db50 <__ieee754_rem_pio2+0x120>
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	4dbd      	ldr	r5, [pc, #756]	@ (800dd58 <__ieee754_rem_pio2+0x328>)
 800da62:	2b00      	cmp	r3, #0
 800da64:	4630      	mov	r0, r6
 800da66:	a3ac      	add	r3, pc, #688	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2e8>)
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	4639      	mov	r1, r7
 800da6e:	dd38      	ble.n	800dae2 <__ieee754_rem_pio2+0xb2>
 800da70:	f7f2 fbde 	bl	8000230 <__aeabi_dsub>
 800da74:	45a8      	cmp	r8, r5
 800da76:	4606      	mov	r6, r0
 800da78:	460f      	mov	r7, r1
 800da7a:	d01a      	beq.n	800dab2 <__ieee754_rem_pio2+0x82>
 800da7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f7f2 fbd5 	bl	8000230 <__aeabi_dsub>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	4680      	mov	r8, r0
 800da8c:	4689      	mov	r9, r1
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fbcd 	bl	8000230 <__aeabi_dsub>
 800da96:	a3a2      	add	r3, pc, #648	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fbc8 	bl	8000230 <__aeabi_dsub>
 800daa0:	e9c4 8900 	strd	r8, r9, [r4]
 800daa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800daa8:	2501      	movs	r5, #1
 800daaa:	4628      	mov	r0, r5
 800daac:	b00d      	add	sp, #52	@ 0x34
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	a39d      	add	r3, pc, #628	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fbba 	bl	8000230 <__aeabi_dsub>
 800dabc:	a39c      	add	r3, pc, #624	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	f7f2 fbb3 	bl	8000230 <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4680      	mov	r8, r0
 800dad0:	4689      	mov	r9, r1
 800dad2:	4630      	mov	r0, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f7f2 fbab 	bl	8000230 <__aeabi_dsub>
 800dada:	a395      	add	r3, pc, #596	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	e7dc      	b.n	800da9c <__ieee754_rem_pio2+0x6c>
 800dae2:	f7f2 fba7 	bl	8000234 <__adddf3>
 800dae6:	45a8      	cmp	r8, r5
 800dae8:	4606      	mov	r6, r0
 800daea:	460f      	mov	r7, r1
 800daec:	d018      	beq.n	800db20 <__ieee754_rem_pio2+0xf0>
 800daee:	a38c      	add	r3, pc, #560	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	f7f2 fb9e 	bl	8000234 <__adddf3>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 fb94 	bl	8000230 <__aeabi_dsub>
 800db08:	a385      	add	r3, pc, #532	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fb91 	bl	8000234 <__adddf3>
 800db12:	f04f 35ff 	mov.w	r5, #4294967295
 800db16:	e9c4 8900 	strd	r8, r9, [r4]
 800db1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db1e:	e7c4      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800db20:	a381      	add	r3, pc, #516	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fb85 	bl	8000234 <__adddf3>
 800db2a:	a381      	add	r3, pc, #516	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	4606      	mov	r6, r0
 800db32:	460f      	mov	r7, r1
 800db34:	f7f2 fb7e 	bl	8000234 <__adddf3>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4680      	mov	r8, r0
 800db3e:	4689      	mov	r9, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fb74 	bl	8000230 <__aeabi_dsub>
 800db48:	a379      	add	r3, pc, #484	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	e7de      	b.n	800db0e <__ieee754_rem_pio2+0xde>
 800db50:	4b82      	ldr	r3, [pc, #520]	@ (800dd5c <__ieee754_rem_pio2+0x32c>)
 800db52:	4598      	cmp	r8, r3
 800db54:	f200 80d1 	bhi.w	800dcfa <__ieee754_rem_pio2+0x2ca>
 800db58:	f000 f966 	bl	800de28 <fabs>
 800db5c:	ec57 6b10 	vmov	r6, r7, d0
 800db60:	a375      	add	r3, pc, #468	@ (adr r3, 800dd38 <__ieee754_rem_pio2+0x308>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	4630      	mov	r0, r6
 800db68:	4639      	mov	r1, r7
 800db6a:	f7f2 fd19 	bl	80005a0 <__aeabi_dmul>
 800db6e:	4b7c      	ldr	r3, [pc, #496]	@ (800dd60 <__ieee754_rem_pio2+0x330>)
 800db70:	2200      	movs	r2, #0
 800db72:	f7f2 fb5f 	bl	8000234 <__adddf3>
 800db76:	f7f2 ffad 	bl	8000ad4 <__aeabi_d2iz>
 800db7a:	4605      	mov	r5, r0
 800db7c:	f7f2 fca6 	bl	80004cc <__aeabi_i2d>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db88:	a363      	add	r3, pc, #396	@ (adr r3, 800dd18 <__ieee754_rem_pio2+0x2e8>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	f7f2 fd07 	bl	80005a0 <__aeabi_dmul>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4630      	mov	r0, r6
 800db98:	4639      	mov	r1, r7
 800db9a:	f7f2 fb49 	bl	8000230 <__aeabi_dsub>
 800db9e:	a360      	add	r3, pc, #384	@ (adr r3, 800dd20 <__ieee754_rem_pio2+0x2f0>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbac:	f7f2 fcf8 	bl	80005a0 <__aeabi_dmul>
 800dbb0:	2d1f      	cmp	r5, #31
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	dc0c      	bgt.n	800dbd2 <__ieee754_rem_pio2+0x1a2>
 800dbb8:	4b6a      	ldr	r3, [pc, #424]	@ (800dd64 <__ieee754_rem_pio2+0x334>)
 800dbba:	1e6a      	subs	r2, r5, #1
 800dbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc0:	4543      	cmp	r3, r8
 800dbc2:	d006      	beq.n	800dbd2 <__ieee754_rem_pio2+0x1a2>
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	463b      	mov	r3, r7
 800dbc8:	4650      	mov	r0, sl
 800dbca:	4659      	mov	r1, fp
 800dbcc:	f7f2 fb30 	bl	8000230 <__aeabi_dsub>
 800dbd0:	e00e      	b.n	800dbf0 <__ieee754_rem_pio2+0x1c0>
 800dbd2:	463b      	mov	r3, r7
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	4659      	mov	r1, fp
 800dbda:	f7f2 fb29 	bl	8000230 <__aeabi_dsub>
 800dbde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dbe8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	dc02      	bgt.n	800dbf6 <__ieee754_rem_pio2+0x1c6>
 800dbf0:	e9c4 0100 	strd	r0, r1, [r4]
 800dbf4:	e039      	b.n	800dc6a <__ieee754_rem_pio2+0x23a>
 800dbf6:	a34c      	add	r3, pc, #304	@ (adr r3, 800dd28 <__ieee754_rem_pio2+0x2f8>)
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc00:	f7f2 fcce 	bl	80005a0 <__aeabi_dmul>
 800dc04:	4606      	mov	r6, r0
 800dc06:	460f      	mov	r7, r1
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	4659      	mov	r1, fp
 800dc10:	f7f2 fb0e 	bl	8000230 <__aeabi_dsub>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4680      	mov	r8, r0
 800dc1a:	4689      	mov	r9, r1
 800dc1c:	4650      	mov	r0, sl
 800dc1e:	4659      	mov	r1, fp
 800dc20:	f7f2 fb06 	bl	8000230 <__aeabi_dsub>
 800dc24:	4632      	mov	r2, r6
 800dc26:	463b      	mov	r3, r7
 800dc28:	f7f2 fb02 	bl	8000230 <__aeabi_dsub>
 800dc2c:	a340      	add	r3, pc, #256	@ (adr r3, 800dd30 <__ieee754_rem_pio2+0x300>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc3a:	f7f2 fcb1 	bl	80005a0 <__aeabi_dmul>
 800dc3e:	4632      	mov	r2, r6
 800dc40:	463b      	mov	r3, r7
 800dc42:	f7f2 faf5 	bl	8000230 <__aeabi_dsub>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460f      	mov	r7, r1
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f2 faed 	bl	8000230 <__aeabi_dsub>
 800dc56:	9a05      	ldr	r2, [sp, #20]
 800dc58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	2b31      	cmp	r3, #49	@ 0x31
 800dc60:	dc20      	bgt.n	800dca4 <__ieee754_rem_pio2+0x274>
 800dc62:	e9c4 0100 	strd	r0, r1, [r4]
 800dc66:	46c2      	mov	sl, r8
 800dc68:	46cb      	mov	fp, r9
 800dc6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dc6e:	4650      	mov	r0, sl
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	4659      	mov	r1, fp
 800dc76:	f7f2 fadb 	bl	8000230 <__aeabi_dsub>
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	f7f2 fad7 	bl	8000230 <__aeabi_dsub>
 800dc82:	9b04      	ldr	r3, [sp, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc8a:	f6bf af0e 	bge.w	800daaa <__ieee754_rem_pio2+0x7a>
 800dc8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dc92:	6063      	str	r3, [r4, #4]
 800dc94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc98:	f8c4 8000 	str.w	r8, [r4]
 800dc9c:	60a0      	str	r0, [r4, #8]
 800dc9e:	60e3      	str	r3, [r4, #12]
 800dca0:	426d      	negs	r5, r5
 800dca2:	e702      	b.n	800daaa <__ieee754_rem_pio2+0x7a>
 800dca4:	a326      	add	r3, pc, #152	@ (adr r3, 800dd40 <__ieee754_rem_pio2+0x310>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcae:	f7f2 fc77 	bl	80005a0 <__aeabi_dmul>
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 fab7 	bl	8000230 <__aeabi_dsub>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4682      	mov	sl, r0
 800dcc8:	468b      	mov	fp, r1
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f2 faaf 	bl	8000230 <__aeabi_dsub>
 800dcd2:	4632      	mov	r2, r6
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	f7f2 faab 	bl	8000230 <__aeabi_dsub>
 800dcda:	a31b      	add	r3, pc, #108	@ (adr r3, 800dd48 <__ieee754_rem_pio2+0x318>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	4606      	mov	r6, r0
 800dce2:	460f      	mov	r7, r1
 800dce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce8:	f7f2 fc5a 	bl	80005a0 <__aeabi_dmul>
 800dcec:	4632      	mov	r2, r6
 800dcee:	463b      	mov	r3, r7
 800dcf0:	f7f2 fa9e 	bl	8000230 <__aeabi_dsub>
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460f      	mov	r7, r1
 800dcf8:	e764      	b.n	800dbc4 <__ieee754_rem_pio2+0x194>
 800dcfa:	4b1b      	ldr	r3, [pc, #108]	@ (800dd68 <__ieee754_rem_pio2+0x338>)
 800dcfc:	4598      	cmp	r8, r3
 800dcfe:	d935      	bls.n	800dd6c <__ieee754_rem_pio2+0x33c>
 800dd00:	4632      	mov	r2, r6
 800dd02:	463b      	mov	r3, r7
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	f7f2 fa92 	bl	8000230 <__aeabi_dsub>
 800dd0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd10:	e9c4 0100 	strd	r0, r1, [r4]
 800dd14:	e69e      	b.n	800da54 <__ieee754_rem_pio2+0x24>
 800dd16:	bf00      	nop
 800dd18:	54400000 	.word	0x54400000
 800dd1c:	3ff921fb 	.word	0x3ff921fb
 800dd20:	1a626331 	.word	0x1a626331
 800dd24:	3dd0b461 	.word	0x3dd0b461
 800dd28:	1a600000 	.word	0x1a600000
 800dd2c:	3dd0b461 	.word	0x3dd0b461
 800dd30:	2e037073 	.word	0x2e037073
 800dd34:	3ba3198a 	.word	0x3ba3198a
 800dd38:	6dc9c883 	.word	0x6dc9c883
 800dd3c:	3fe45f30 	.word	0x3fe45f30
 800dd40:	2e000000 	.word	0x2e000000
 800dd44:	3ba3198a 	.word	0x3ba3198a
 800dd48:	252049c1 	.word	0x252049c1
 800dd4c:	397b839a 	.word	0x397b839a
 800dd50:	3fe921fb 	.word	0x3fe921fb
 800dd54:	4002d97b 	.word	0x4002d97b
 800dd58:	3ff921fb 	.word	0x3ff921fb
 800dd5c:	413921fb 	.word	0x413921fb
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	0800e728 	.word	0x0800e728
 800dd68:	7fefffff 	.word	0x7fefffff
 800dd6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dd70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800dd74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dd78:	4630      	mov	r0, r6
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	f7f2 feaa 	bl	8000ad4 <__aeabi_d2iz>
 800dd80:	f7f2 fba4 	bl	80004cc <__aeabi_i2d>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd90:	f7f2 fa4e 	bl	8000230 <__aeabi_dsub>
 800dd94:	4b22      	ldr	r3, [pc, #136]	@ (800de20 <__ieee754_rem_pio2+0x3f0>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	f7f2 fc02 	bl	80005a0 <__aeabi_dmul>
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	4606      	mov	r6, r0
 800dda0:	f7f2 fe98 	bl	8000ad4 <__aeabi_d2iz>
 800dda4:	f7f2 fb92 	bl	80004cc <__aeabi_i2d>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddb4:	f7f2 fa3c 	bl	8000230 <__aeabi_dsub>
 800ddb8:	4b19      	ldr	r3, [pc, #100]	@ (800de20 <__ieee754_rem_pio2+0x3f0>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f7f2 fbf0 	bl	80005a0 <__aeabi_dmul>
 800ddc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ddc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ddc8:	f04f 0803 	mov.w	r8, #3
 800ddcc:	2600      	movs	r6, #0
 800ddce:	2700      	movs	r7, #0
 800ddd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	46c2      	mov	sl, r8
 800ddda:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddde:	f7f2 fe47 	bl	8000a70 <__aeabi_dcmpeq>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d1f4      	bne.n	800ddd0 <__ieee754_rem_pio2+0x3a0>
 800dde6:	4b0f      	ldr	r3, [pc, #60]	@ (800de24 <__ieee754_rem_pio2+0x3f4>)
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	2302      	movs	r3, #2
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4653      	mov	r3, sl
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	a806      	add	r0, sp, #24
 800ddf6:	f000 f81f 	bl	800de38 <__kernel_rem_pio2>
 800ddfa:	9b04      	ldr	r3, [sp, #16]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	4605      	mov	r5, r0
 800de00:	f6bf ae53 	bge.w	800daaa <__ieee754_rem_pio2+0x7a>
 800de04:	e9d4 2100 	ldrd	r2, r1, [r4]
 800de08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de0c:	e9c4 2300 	strd	r2, r3, [r4]
 800de10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800de14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800de1c:	e740      	b.n	800dca0 <__ieee754_rem_pio2+0x270>
 800de1e:	bf00      	nop
 800de20:	41700000 	.word	0x41700000
 800de24:	0800e7a8 	.word	0x0800e7a8

0800de28 <fabs>:
 800de28:	ec51 0b10 	vmov	r0, r1, d0
 800de2c:	4602      	mov	r2, r0
 800de2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de32:	ec43 2b10 	vmov	d0, r2, r3
 800de36:	4770      	bx	lr

0800de38 <__kernel_rem_pio2>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b02 	vpush	{d8}
 800de40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800de44:	f112 0f14 	cmn.w	r2, #20
 800de48:	9306      	str	r3, [sp, #24]
 800de4a:	9104      	str	r1, [sp, #16]
 800de4c:	4bc2      	ldr	r3, [pc, #776]	@ (800e158 <__kernel_rem_pio2+0x320>)
 800de4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800de50:	9008      	str	r0, [sp, #32]
 800de52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	9b06      	ldr	r3, [sp, #24]
 800de5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800de5e:	bfa8      	it	ge
 800de60:	1ed4      	subge	r4, r2, #3
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	bfb2      	itee	lt
 800de66:	2400      	movlt	r4, #0
 800de68:	2318      	movge	r3, #24
 800de6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800de6e:	f06f 0317 	mvn.w	r3, #23
 800de72:	fb04 3303 	mla	r3, r4, r3, r3
 800de76:	eb03 0b02 	add.w	fp, r3, r2
 800de7a:	9b00      	ldr	r3, [sp, #0]
 800de7c:	9a05      	ldr	r2, [sp, #20]
 800de7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800e148 <__kernel_rem_pio2+0x310>
 800de82:	eb03 0802 	add.w	r8, r3, r2
 800de86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800de88:	1aa7      	subs	r7, r4, r2
 800de8a:	ae20      	add	r6, sp, #128	@ 0x80
 800de8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de90:	2500      	movs	r5, #0
 800de92:	4545      	cmp	r5, r8
 800de94:	dd12      	ble.n	800debc <__kernel_rem_pio2+0x84>
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	aa20      	add	r2, sp, #128	@ 0x80
 800de9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800de9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800dea2:	2700      	movs	r7, #0
 800dea4:	9b00      	ldr	r3, [sp, #0]
 800dea6:	429f      	cmp	r7, r3
 800dea8:	dc2e      	bgt.n	800df08 <__kernel_rem_pio2+0xd0>
 800deaa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800e148 <__kernel_rem_pio2+0x310>
 800deae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800deb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800deb6:	46a8      	mov	r8, r5
 800deb8:	2600      	movs	r6, #0
 800deba:	e01b      	b.n	800def4 <__kernel_rem_pio2+0xbc>
 800debc:	42ef      	cmn	r7, r5
 800debe:	d407      	bmi.n	800ded0 <__kernel_rem_pio2+0x98>
 800dec0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dec4:	f7f2 fb02 	bl	80004cc <__aeabi_i2d>
 800dec8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800decc:	3501      	adds	r5, #1
 800dece:	e7e0      	b.n	800de92 <__kernel_rem_pio2+0x5a>
 800ded0:	ec51 0b18 	vmov	r0, r1, d8
 800ded4:	e7f8      	b.n	800dec8 <__kernel_rem_pio2+0x90>
 800ded6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800deda:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dede:	f7f2 fb5f 	bl	80005a0 <__aeabi_dmul>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deea:	f7f2 f9a3 	bl	8000234 <__adddf3>
 800deee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def2:	3601      	adds	r6, #1
 800def4:	9b05      	ldr	r3, [sp, #20]
 800def6:	429e      	cmp	r6, r3
 800def8:	dded      	ble.n	800ded6 <__kernel_rem_pio2+0x9e>
 800defa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800defe:	3701      	adds	r7, #1
 800df00:	ecaa 7b02 	vstmia	sl!, {d7}
 800df04:	3508      	adds	r5, #8
 800df06:	e7cd      	b.n	800dea4 <__kernel_rem_pio2+0x6c>
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	f8dd 8000 	ldr.w	r8, [sp]
 800df0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800df10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df14:	930a      	str	r3, [sp, #40]	@ 0x28
 800df16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800df18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800df22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df24:	ab98      	add	r3, sp, #608	@ 0x260
 800df26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800df2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df32:	ac0c      	add	r4, sp, #48	@ 0x30
 800df34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800df36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800df3a:	46a1      	mov	r9, r4
 800df3c:	46c2      	mov	sl, r8
 800df3e:	f1ba 0f00 	cmp.w	sl, #0
 800df42:	dc77      	bgt.n	800e034 <__kernel_rem_pio2+0x1fc>
 800df44:	4658      	mov	r0, fp
 800df46:	ed9d 0b02 	vldr	d0, [sp, #8]
 800df4a:	f000 fac5 	bl	800e4d8 <scalbn>
 800df4e:	ec57 6b10 	vmov	r6, r7, d0
 800df52:	2200      	movs	r2, #0
 800df54:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fb20 	bl	80005a0 <__aeabi_dmul>
 800df60:	ec41 0b10 	vmov	d0, r0, r1
 800df64:	f000 fb34 	bl	800e5d0 <floor>
 800df68:	4b7c      	ldr	r3, [pc, #496]	@ (800e15c <__kernel_rem_pio2+0x324>)
 800df6a:	ec51 0b10 	vmov	r0, r1, d0
 800df6e:	2200      	movs	r2, #0
 800df70:	f7f2 fb16 	bl	80005a0 <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4630      	mov	r0, r6
 800df7a:	4639      	mov	r1, r7
 800df7c:	f7f2 f958 	bl	8000230 <__aeabi_dsub>
 800df80:	460f      	mov	r7, r1
 800df82:	4606      	mov	r6, r0
 800df84:	f7f2 fda6 	bl	8000ad4 <__aeabi_d2iz>
 800df88:	9002      	str	r0, [sp, #8]
 800df8a:	f7f2 fa9f 	bl	80004cc <__aeabi_i2d>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 f94b 	bl	8000230 <__aeabi_dsub>
 800df9a:	f1bb 0f00 	cmp.w	fp, #0
 800df9e:	4606      	mov	r6, r0
 800dfa0:	460f      	mov	r7, r1
 800dfa2:	dd6c      	ble.n	800e07e <__kernel_rem_pio2+0x246>
 800dfa4:	f108 31ff 	add.w	r1, r8, #4294967295
 800dfa8:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfaa:	9d02      	ldr	r5, [sp, #8]
 800dfac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfb0:	f1cb 0018 	rsb	r0, fp, #24
 800dfb4:	fa43 f200 	asr.w	r2, r3, r0
 800dfb8:	4415      	add	r5, r2
 800dfba:	4082      	lsls	r2, r0
 800dfbc:	1a9b      	subs	r3, r3, r2
 800dfbe:	aa0c      	add	r2, sp, #48	@ 0x30
 800dfc0:	9502      	str	r5, [sp, #8]
 800dfc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dfc6:	f1cb 0217 	rsb	r2, fp, #23
 800dfca:	fa43 f902 	asr.w	r9, r3, r2
 800dfce:	f1b9 0f00 	cmp.w	r9, #0
 800dfd2:	dd64      	ble.n	800e09e <__kernel_rem_pio2+0x266>
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	4615      	mov	r5, r2
 800dfde:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dfe2:	4590      	cmp	r8, r2
 800dfe4:	f300 80a1 	bgt.w	800e12a <__kernel_rem_pio2+0x2f2>
 800dfe8:	f1bb 0f00 	cmp.w	fp, #0
 800dfec:	dd07      	ble.n	800dffe <__kernel_rem_pio2+0x1c6>
 800dfee:	f1bb 0f01 	cmp.w	fp, #1
 800dff2:	f000 80c1 	beq.w	800e178 <__kernel_rem_pio2+0x340>
 800dff6:	f1bb 0f02 	cmp.w	fp, #2
 800dffa:	f000 80c8 	beq.w	800e18e <__kernel_rem_pio2+0x356>
 800dffe:	f1b9 0f02 	cmp.w	r9, #2
 800e002:	d14c      	bne.n	800e09e <__kernel_rem_pio2+0x266>
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	4955      	ldr	r1, [pc, #340]	@ (800e160 <__kernel_rem_pio2+0x328>)
 800e00a:	2000      	movs	r0, #0
 800e00c:	f7f2 f910 	bl	8000230 <__aeabi_dsub>
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	2d00      	cmp	r5, #0
 800e016:	d042      	beq.n	800e09e <__kernel_rem_pio2+0x266>
 800e018:	4658      	mov	r0, fp
 800e01a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800e150 <__kernel_rem_pio2+0x318>
 800e01e:	f000 fa5b 	bl	800e4d8 <scalbn>
 800e022:	4630      	mov	r0, r6
 800e024:	4639      	mov	r1, r7
 800e026:	ec53 2b10 	vmov	r2, r3, d0
 800e02a:	f7f2 f901 	bl	8000230 <__aeabi_dsub>
 800e02e:	4606      	mov	r6, r0
 800e030:	460f      	mov	r7, r1
 800e032:	e034      	b.n	800e09e <__kernel_rem_pio2+0x266>
 800e034:	4b4b      	ldr	r3, [pc, #300]	@ (800e164 <__kernel_rem_pio2+0x32c>)
 800e036:	2200      	movs	r2, #0
 800e038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e03c:	f7f2 fab0 	bl	80005a0 <__aeabi_dmul>
 800e040:	f7f2 fd48 	bl	8000ad4 <__aeabi_d2iz>
 800e044:	f7f2 fa42 	bl	80004cc <__aeabi_i2d>
 800e048:	4b47      	ldr	r3, [pc, #284]	@ (800e168 <__kernel_rem_pio2+0x330>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	4606      	mov	r6, r0
 800e04e:	460f      	mov	r7, r1
 800e050:	f7f2 faa6 	bl	80005a0 <__aeabi_dmul>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e05c:	f7f2 f8e8 	bl	8000230 <__aeabi_dsub>
 800e060:	f7f2 fd38 	bl	8000ad4 <__aeabi_d2iz>
 800e064:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e068:	f849 0b04 	str.w	r0, [r9], #4
 800e06c:	4639      	mov	r1, r7
 800e06e:	4630      	mov	r0, r6
 800e070:	f7f2 f8e0 	bl	8000234 <__adddf3>
 800e074:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e07c:	e75f      	b.n	800df3e <__kernel_rem_pio2+0x106>
 800e07e:	d107      	bne.n	800e090 <__kernel_rem_pio2+0x258>
 800e080:	f108 33ff 	add.w	r3, r8, #4294967295
 800e084:	aa0c      	add	r2, sp, #48	@ 0x30
 800e086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e08a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e08e:	e79e      	b.n	800dfce <__kernel_rem_pio2+0x196>
 800e090:	4b36      	ldr	r3, [pc, #216]	@ (800e16c <__kernel_rem_pio2+0x334>)
 800e092:	2200      	movs	r2, #0
 800e094:	f7f2 fd0a 	bl	8000aac <__aeabi_dcmpge>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d143      	bne.n	800e124 <__kernel_rem_pio2+0x2ec>
 800e09c:	4681      	mov	r9, r0
 800e09e:	2200      	movs	r2, #0
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fce3 	bl	8000a70 <__aeabi_dcmpeq>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	f000 80c1 	beq.w	800e232 <__kernel_rem_pio2+0x3fa>
 800e0b0:	f108 33ff 	add.w	r3, r8, #4294967295
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	9900      	ldr	r1, [sp, #0]
 800e0b8:	428b      	cmp	r3, r1
 800e0ba:	da70      	bge.n	800e19e <__kernel_rem_pio2+0x366>
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	f000 808b 	beq.w	800e1d8 <__kernel_rem_pio2+0x3a0>
 800e0c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0c6:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0c8:	f1ab 0b18 	sub.w	fp, fp, #24
 800e0cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0f6      	beq.n	800e0c2 <__kernel_rem_pio2+0x28a>
 800e0d4:	4658      	mov	r0, fp
 800e0d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800e150 <__kernel_rem_pio2+0x318>
 800e0da:	f000 f9fd 	bl	800e4d8 <scalbn>
 800e0de:	f108 0301 	add.w	r3, r8, #1
 800e0e2:	00da      	lsls	r2, r3, #3
 800e0e4:	9205      	str	r2, [sp, #20]
 800e0e6:	ec55 4b10 	vmov	r4, r5, d0
 800e0ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e0ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800e164 <__kernel_rem_pio2+0x32c>
 800e0f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e0f4:	4646      	mov	r6, r8
 800e0f6:	f04f 0a00 	mov.w	sl, #0
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	f280 80d1 	bge.w	800e2a2 <__kernel_rem_pio2+0x46a>
 800e100:	4644      	mov	r4, r8
 800e102:	2c00      	cmp	r4, #0
 800e104:	f2c0 80ff 	blt.w	800e306 <__kernel_rem_pio2+0x4ce>
 800e108:	4b19      	ldr	r3, [pc, #100]	@ (800e170 <__kernel_rem_pio2+0x338>)
 800e10a:	461f      	mov	r7, r3
 800e10c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e10e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e112:	9306      	str	r3, [sp, #24]
 800e114:	f04f 0a00 	mov.w	sl, #0
 800e118:	f04f 0b00 	mov.w	fp, #0
 800e11c:	2600      	movs	r6, #0
 800e11e:	eba8 0504 	sub.w	r5, r8, r4
 800e122:	e0e4      	b.n	800e2ee <__kernel_rem_pio2+0x4b6>
 800e124:	f04f 0902 	mov.w	r9, #2
 800e128:	e754      	b.n	800dfd4 <__kernel_rem_pio2+0x19c>
 800e12a:	f854 3b04 	ldr.w	r3, [r4], #4
 800e12e:	bb0d      	cbnz	r5, 800e174 <__kernel_rem_pio2+0x33c>
 800e130:	b123      	cbz	r3, 800e13c <__kernel_rem_pio2+0x304>
 800e132:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e136:	f844 3c04 	str.w	r3, [r4, #-4]
 800e13a:	2301      	movs	r3, #1
 800e13c:	3201      	adds	r2, #1
 800e13e:	461d      	mov	r5, r3
 800e140:	e74f      	b.n	800dfe2 <__kernel_rem_pio2+0x1aa>
 800e142:	bf00      	nop
 800e144:	f3af 8000 	nop.w
	...
 800e154:	3ff00000 	.word	0x3ff00000
 800e158:	0800e8f0 	.word	0x0800e8f0
 800e15c:	40200000 	.word	0x40200000
 800e160:	3ff00000 	.word	0x3ff00000
 800e164:	3e700000 	.word	0x3e700000
 800e168:	41700000 	.word	0x41700000
 800e16c:	3fe00000 	.word	0x3fe00000
 800e170:	0800e8b0 	.word	0x0800e8b0
 800e174:	1acb      	subs	r3, r1, r3
 800e176:	e7de      	b.n	800e136 <__kernel_rem_pio2+0x2fe>
 800e178:	f108 32ff 	add.w	r2, r8, #4294967295
 800e17c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e182:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e186:	a90c      	add	r1, sp, #48	@ 0x30
 800e188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e18c:	e737      	b.n	800dffe <__kernel_rem_pio2+0x1c6>
 800e18e:	f108 32ff 	add.w	r2, r8, #4294967295
 800e192:	ab0c      	add	r3, sp, #48	@ 0x30
 800e194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e198:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e19c:	e7f3      	b.n	800e186 <__kernel_rem_pio2+0x34e>
 800e19e:	a90c      	add	r1, sp, #48	@ 0x30
 800e1a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	e785      	b.n	800e0b6 <__kernel_rem_pio2+0x27e>
 800e1aa:	3401      	adds	r4, #1
 800e1ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d0fa      	beq.n	800e1aa <__kernel_rem_pio2+0x372>
 800e1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e1ba:	eb0d 0503 	add.w	r5, sp, r3
 800e1be:	9b06      	ldr	r3, [sp, #24]
 800e1c0:	aa20      	add	r2, sp, #128	@ 0x80
 800e1c2:	4443      	add	r3, r8
 800e1c4:	f108 0701 	add.w	r7, r8, #1
 800e1c8:	3d98      	subs	r5, #152	@ 0x98
 800e1ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e1ce:	4444      	add	r4, r8
 800e1d0:	42bc      	cmp	r4, r7
 800e1d2:	da04      	bge.n	800e1de <__kernel_rem_pio2+0x3a6>
 800e1d4:	46a0      	mov	r8, r4
 800e1d6:	e6a2      	b.n	800df1e <__kernel_rem_pio2+0xe6>
 800e1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1da:	2401      	movs	r4, #1
 800e1dc:	e7e6      	b.n	800e1ac <__kernel_rem_pio2+0x374>
 800e1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e1e4:	f7f2 f972 	bl	80004cc <__aeabi_i2d>
 800e1e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800e4a8 <__kernel_rem_pio2+0x670>
 800e1ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e1f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1f8:	46b2      	mov	sl, r6
 800e1fa:	f04f 0800 	mov.w	r8, #0
 800e1fe:	9b05      	ldr	r3, [sp, #20]
 800e200:	4598      	cmp	r8, r3
 800e202:	dd05      	ble.n	800e210 <__kernel_rem_pio2+0x3d8>
 800e204:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e208:	3701      	adds	r7, #1
 800e20a:	eca5 7b02 	vstmia	r5!, {d7}
 800e20e:	e7df      	b.n	800e1d0 <__kernel_rem_pio2+0x398>
 800e210:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e214:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e218:	f7f2 f9c2 	bl	80005a0 <__aeabi_dmul>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e224:	f7f2 f806 	bl	8000234 <__adddf3>
 800e228:	f108 0801 	add.w	r8, r8, #1
 800e22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e230:	e7e5      	b.n	800e1fe <__kernel_rem_pio2+0x3c6>
 800e232:	f1cb 0000 	rsb	r0, fp, #0
 800e236:	ec47 6b10 	vmov	d0, r6, r7
 800e23a:	f000 f94d 	bl	800e4d8 <scalbn>
 800e23e:	ec55 4b10 	vmov	r4, r5, d0
 800e242:	4b9b      	ldr	r3, [pc, #620]	@ (800e4b0 <__kernel_rem_pio2+0x678>)
 800e244:	2200      	movs	r2, #0
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 fc2f 	bl	8000aac <__aeabi_dcmpge>
 800e24e:	b300      	cbz	r0, 800e292 <__kernel_rem_pio2+0x45a>
 800e250:	4b98      	ldr	r3, [pc, #608]	@ (800e4b4 <__kernel_rem_pio2+0x67c>)
 800e252:	2200      	movs	r2, #0
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 f9a2 	bl	80005a0 <__aeabi_dmul>
 800e25c:	f7f2 fc3a 	bl	8000ad4 <__aeabi_d2iz>
 800e260:	4606      	mov	r6, r0
 800e262:	f7f2 f933 	bl	80004cc <__aeabi_i2d>
 800e266:	4b92      	ldr	r3, [pc, #584]	@ (800e4b0 <__kernel_rem_pio2+0x678>)
 800e268:	2200      	movs	r2, #0
 800e26a:	f7f2 f999 	bl	80005a0 <__aeabi_dmul>
 800e26e:	460b      	mov	r3, r1
 800e270:	4602      	mov	r2, r0
 800e272:	4629      	mov	r1, r5
 800e274:	4620      	mov	r0, r4
 800e276:	f7f1 ffdb 	bl	8000230 <__aeabi_dsub>
 800e27a:	f7f2 fc2b 	bl	8000ad4 <__aeabi_d2iz>
 800e27e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e280:	f10b 0b18 	add.w	fp, fp, #24
 800e284:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e290:	e720      	b.n	800e0d4 <__kernel_rem_pio2+0x29c>
 800e292:	4620      	mov	r0, r4
 800e294:	4629      	mov	r1, r5
 800e296:	f7f2 fc1d 	bl	8000ad4 <__aeabi_d2iz>
 800e29a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e29c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e2a0:	e718      	b.n	800e0d4 <__kernel_rem_pio2+0x29c>
 800e2a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e2a8:	f7f2 f910 	bl	80004cc <__aeabi_i2d>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	f7f2 f976 	bl	80005a0 <__aeabi_dmul>
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e2ba:	465b      	mov	r3, fp
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f2 f96e 	bl	80005a0 <__aeabi_dmul>
 800e2c4:	3e01      	subs	r6, #1
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	e716      	b.n	800e0fa <__kernel_rem_pio2+0x2c2>
 800e2cc:	9906      	ldr	r1, [sp, #24]
 800e2ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e2d2:	9106      	str	r1, [sp, #24]
 800e2d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e2d8:	f7f2 f962 	bl	80005a0 <__aeabi_dmul>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	4659      	mov	r1, fp
 800e2e4:	f7f1 ffa6 	bl	8000234 <__adddf3>
 800e2e8:	3601      	adds	r6, #1
 800e2ea:	4682      	mov	sl, r0
 800e2ec:	468b      	mov	fp, r1
 800e2ee:	9b00      	ldr	r3, [sp, #0]
 800e2f0:	429e      	cmp	r6, r3
 800e2f2:	dc01      	bgt.n	800e2f8 <__kernel_rem_pio2+0x4c0>
 800e2f4:	42ae      	cmp	r6, r5
 800e2f6:	dde9      	ble.n	800e2cc <__kernel_rem_pio2+0x494>
 800e2f8:	ab48      	add	r3, sp, #288	@ 0x120
 800e2fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e2fe:	e9c5 ab00 	strd	sl, fp, [r5]
 800e302:	3c01      	subs	r4, #1
 800e304:	e6fd      	b.n	800e102 <__kernel_rem_pio2+0x2ca>
 800e306:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e308:	2b02      	cmp	r3, #2
 800e30a:	dc0b      	bgt.n	800e324 <__kernel_rem_pio2+0x4ec>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dc35      	bgt.n	800e37c <__kernel_rem_pio2+0x544>
 800e310:	d059      	beq.n	800e3c6 <__kernel_rem_pio2+0x58e>
 800e312:	9b02      	ldr	r3, [sp, #8]
 800e314:	f003 0007 	and.w	r0, r3, #7
 800e318:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e31c:	ecbd 8b02 	vpop	{d8}
 800e320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e324:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e326:	2b03      	cmp	r3, #3
 800e328:	d1f3      	bne.n	800e312 <__kernel_rem_pio2+0x4da>
 800e32a:	9b05      	ldr	r3, [sp, #20]
 800e32c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e330:	eb0d 0403 	add.w	r4, sp, r3
 800e334:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e338:	4625      	mov	r5, r4
 800e33a:	46c2      	mov	sl, r8
 800e33c:	f1ba 0f00 	cmp.w	sl, #0
 800e340:	dc69      	bgt.n	800e416 <__kernel_rem_pio2+0x5de>
 800e342:	4645      	mov	r5, r8
 800e344:	2d01      	cmp	r5, #1
 800e346:	f300 8087 	bgt.w	800e458 <__kernel_rem_pio2+0x620>
 800e34a:	9c05      	ldr	r4, [sp, #20]
 800e34c:	ab48      	add	r3, sp, #288	@ 0x120
 800e34e:	441c      	add	r4, r3
 800e350:	2000      	movs	r0, #0
 800e352:	2100      	movs	r1, #0
 800e354:	f1b8 0f01 	cmp.w	r8, #1
 800e358:	f300 809c 	bgt.w	800e494 <__kernel_rem_pio2+0x65c>
 800e35c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800e360:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800e364:	f1b9 0f00 	cmp.w	r9, #0
 800e368:	f040 80a6 	bne.w	800e4b8 <__kernel_rem_pio2+0x680>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	e9c3 5600 	strd	r5, r6, [r3]
 800e372:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e376:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e37a:	e7ca      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e37c:	9d05      	ldr	r5, [sp, #20]
 800e37e:	ab48      	add	r3, sp, #288	@ 0x120
 800e380:	441d      	add	r5, r3
 800e382:	4644      	mov	r4, r8
 800e384:	2000      	movs	r0, #0
 800e386:	2100      	movs	r1, #0
 800e388:	2c00      	cmp	r4, #0
 800e38a:	da35      	bge.n	800e3f8 <__kernel_rem_pio2+0x5c0>
 800e38c:	f1b9 0f00 	cmp.w	r9, #0
 800e390:	d038      	beq.n	800e404 <__kernel_rem_pio2+0x5cc>
 800e392:	4602      	mov	r2, r0
 800e394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e398:	9c04      	ldr	r4, [sp, #16]
 800e39a:	e9c4 2300 	strd	r2, r3, [r4]
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e3a6:	f7f1 ff43 	bl	8000230 <__aeabi_dsub>
 800e3aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800e3ac:	2401      	movs	r4, #1
 800e3ae:	45a0      	cmp	r8, r4
 800e3b0:	da2b      	bge.n	800e40a <__kernel_rem_pio2+0x5d2>
 800e3b2:	f1b9 0f00 	cmp.w	r9, #0
 800e3b6:	d002      	beq.n	800e3be <__kernel_rem_pio2+0x586>
 800e3b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3bc:	4619      	mov	r1, r3
 800e3be:	9b04      	ldr	r3, [sp, #16]
 800e3c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3c4:	e7a5      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e3c6:	9c05      	ldr	r4, [sp, #20]
 800e3c8:	ab48      	add	r3, sp, #288	@ 0x120
 800e3ca:	441c      	add	r4, r3
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	f1b8 0f00 	cmp.w	r8, #0
 800e3d4:	da09      	bge.n	800e3ea <__kernel_rem_pio2+0x5b2>
 800e3d6:	f1b9 0f00 	cmp.w	r9, #0
 800e3da:	d002      	beq.n	800e3e2 <__kernel_rem_pio2+0x5aa>
 800e3dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	9b04      	ldr	r3, [sp, #16]
 800e3e4:	e9c3 0100 	strd	r0, r1, [r3]
 800e3e8:	e793      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3ee:	f7f1 ff21 	bl	8000234 <__adddf3>
 800e3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3f6:	e7eb      	b.n	800e3d0 <__kernel_rem_pio2+0x598>
 800e3f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e3fc:	f7f1 ff1a 	bl	8000234 <__adddf3>
 800e400:	3c01      	subs	r4, #1
 800e402:	e7c1      	b.n	800e388 <__kernel_rem_pio2+0x550>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	e7c6      	b.n	800e398 <__kernel_rem_pio2+0x560>
 800e40a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e40e:	f7f1 ff11 	bl	8000234 <__adddf3>
 800e412:	3401      	adds	r4, #1
 800e414:	e7cb      	b.n	800e3ae <__kernel_rem_pio2+0x576>
 800e416:	ed35 7b02 	vldmdb	r5!, {d7}
 800e41a:	ed8d 7b00 	vstr	d7, [sp]
 800e41e:	ed95 7b02 	vldr	d7, [r5, #8]
 800e422:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e426:	ec53 2b17 	vmov	r2, r3, d7
 800e42a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e42e:	f7f1 ff01 	bl	8000234 <__adddf3>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e43e:	f7f1 fef7 	bl	8000230 <__aeabi_dsub>
 800e442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e446:	f7f1 fef5 	bl	8000234 <__adddf3>
 800e44a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e44e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e452:	e9c5 6700 	strd	r6, r7, [r5]
 800e456:	e771      	b.n	800e33c <__kernel_rem_pio2+0x504>
 800e458:	ed34 7b02 	vldmdb	r4!, {d7}
 800e45c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e460:	ec51 0b17 	vmov	r0, r1, d7
 800e464:	4652      	mov	r2, sl
 800e466:	465b      	mov	r3, fp
 800e468:	ed8d 7b00 	vstr	d7, [sp]
 800e46c:	f7f1 fee2 	bl	8000234 <__adddf3>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4606      	mov	r6, r0
 800e476:	460f      	mov	r7, r1
 800e478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e47c:	f7f1 fed8 	bl	8000230 <__aeabi_dsub>
 800e480:	4652      	mov	r2, sl
 800e482:	465b      	mov	r3, fp
 800e484:	f7f1 fed6 	bl	8000234 <__adddf3>
 800e488:	3d01      	subs	r5, #1
 800e48a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e48e:	e9c4 6700 	strd	r6, r7, [r4]
 800e492:	e757      	b.n	800e344 <__kernel_rem_pio2+0x50c>
 800e494:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e498:	f7f1 fecc 	bl	8000234 <__adddf3>
 800e49c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4a0:	e758      	b.n	800e354 <__kernel_rem_pio2+0x51c>
 800e4a2:	bf00      	nop
 800e4a4:	f3af 8000 	nop.w
	...
 800e4b0:	41700000 	.word	0x41700000
 800e4b4:	3e700000 	.word	0x3e700000
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	9a04      	ldr	r2, [sp, #16]
 800e4bc:	601d      	str	r5, [r3, #0]
 800e4be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800e4c2:	605c      	str	r4, [r3, #4]
 800e4c4:	609f      	str	r7, [r3, #8]
 800e4c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800e4ca:	60d3      	str	r3, [r2, #12]
 800e4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4d0:	6110      	str	r0, [r2, #16]
 800e4d2:	6153      	str	r3, [r2, #20]
 800e4d4:	e71d      	b.n	800e312 <__kernel_rem_pio2+0x4da>
 800e4d6:	bf00      	nop

0800e4d8 <scalbn>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	ec55 4b10 	vmov	r4, r5, d0
 800e4de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	b991      	cbnz	r1, 800e50e <scalbn+0x36>
 800e4e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e4ec:	4323      	orrs	r3, r4
 800e4ee:	d03b      	beq.n	800e568 <scalbn+0x90>
 800e4f0:	4b33      	ldr	r3, [pc, #204]	@ (800e5c0 <scalbn+0xe8>)
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 f852 	bl	80005a0 <__aeabi_dmul>
 800e4fc:	4b31      	ldr	r3, [pc, #196]	@ (800e5c4 <scalbn+0xec>)
 800e4fe:	429e      	cmp	r6, r3
 800e500:	4604      	mov	r4, r0
 800e502:	460d      	mov	r5, r1
 800e504:	da0f      	bge.n	800e526 <scalbn+0x4e>
 800e506:	a326      	add	r3, pc, #152	@ (adr r3, 800e5a0 <scalbn+0xc8>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	e01e      	b.n	800e54c <scalbn+0x74>
 800e50e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e512:	4291      	cmp	r1, r2
 800e514:	d10b      	bne.n	800e52e <scalbn+0x56>
 800e516:	4622      	mov	r2, r4
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f1 fe8a 	bl	8000234 <__adddf3>
 800e520:	4604      	mov	r4, r0
 800e522:	460d      	mov	r5, r1
 800e524:	e020      	b.n	800e568 <scalbn+0x90>
 800e526:	460b      	mov	r3, r1
 800e528:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e52c:	3936      	subs	r1, #54	@ 0x36
 800e52e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e532:	4296      	cmp	r6, r2
 800e534:	dd0d      	ble.n	800e552 <scalbn+0x7a>
 800e536:	2d00      	cmp	r5, #0
 800e538:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5a8 <scalbn+0xd0>)
 800e53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e53e:	da02      	bge.n	800e546 <scalbn+0x6e>
 800e540:	a11b      	add	r1, pc, #108	@ (adr r1, 800e5b0 <scalbn+0xd8>)
 800e542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e546:	a318      	add	r3, pc, #96	@ (adr r3, 800e5a8 <scalbn+0xd0>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f2 f828 	bl	80005a0 <__aeabi_dmul>
 800e550:	e7e6      	b.n	800e520 <scalbn+0x48>
 800e552:	1872      	adds	r2, r6, r1
 800e554:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e558:	428a      	cmp	r2, r1
 800e55a:	dcec      	bgt.n	800e536 <scalbn+0x5e>
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	dd06      	ble.n	800e56e <scalbn+0x96>
 800e560:	f36f 531e 	bfc	r3, #20, #11
 800e564:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e568:	ec45 4b10 	vmov	d0, r4, r5
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
 800e56e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e572:	da08      	bge.n	800e586 <scalbn+0xae>
 800e574:	2d00      	cmp	r5, #0
 800e576:	a10a      	add	r1, pc, #40	@ (adr r1, 800e5a0 <scalbn+0xc8>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	dac3      	bge.n	800e506 <scalbn+0x2e>
 800e57e:	a10e      	add	r1, pc, #56	@ (adr r1, 800e5b8 <scalbn+0xe0>)
 800e580:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e584:	e7bf      	b.n	800e506 <scalbn+0x2e>
 800e586:	3236      	adds	r2, #54	@ 0x36
 800e588:	f36f 531e 	bfc	r3, #20, #11
 800e58c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e590:	4620      	mov	r0, r4
 800e592:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <scalbn+0xf0>)
 800e594:	4629      	mov	r1, r5
 800e596:	2200      	movs	r2, #0
 800e598:	e7d8      	b.n	800e54c <scalbn+0x74>
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w
 800e5a0:	c2f8f359 	.word	0xc2f8f359
 800e5a4:	01a56e1f 	.word	0x01a56e1f
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	7e37e43c 	.word	0x7e37e43c
 800e5b0:	8800759c 	.word	0x8800759c
 800e5b4:	fe37e43c 	.word	0xfe37e43c
 800e5b8:	c2f8f359 	.word	0xc2f8f359
 800e5bc:	81a56e1f 	.word	0x81a56e1f
 800e5c0:	43500000 	.word	0x43500000
 800e5c4:	ffff3cb0 	.word	0xffff3cb0
 800e5c8:	3c900000 	.word	0x3c900000
 800e5cc:	00000000 	.word	0x00000000

0800e5d0 <floor>:
 800e5d0:	ec51 0b10 	vmov	r0, r1, d0
 800e5d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e5e0:	2e13      	cmp	r6, #19
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	dc34      	bgt.n	800e654 <floor+0x84>
 800e5ea:	2e00      	cmp	r6, #0
 800e5ec:	da17      	bge.n	800e61e <floor+0x4e>
 800e5ee:	a332      	add	r3, pc, #200	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	f7f1 fe1e 	bl	8000234 <__adddf3>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	f7f2 fa60 	bl	8000ac0 <__aeabi_dcmpgt>
 800e600:	b150      	cbz	r0, 800e618 <floor+0x48>
 800e602:	2c00      	cmp	r4, #0
 800e604:	da55      	bge.n	800e6b2 <floor+0xe2>
 800e606:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e60a:	432c      	orrs	r4, r5
 800e60c:	2500      	movs	r5, #0
 800e60e:	42ac      	cmp	r4, r5
 800e610:	4c2b      	ldr	r4, [pc, #172]	@ (800e6c0 <floor+0xf0>)
 800e612:	bf08      	it	eq
 800e614:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e618:	4621      	mov	r1, r4
 800e61a:	4628      	mov	r0, r5
 800e61c:	e023      	b.n	800e666 <floor+0x96>
 800e61e:	4f29      	ldr	r7, [pc, #164]	@ (800e6c4 <floor+0xf4>)
 800e620:	4137      	asrs	r7, r6
 800e622:	ea01 0307 	and.w	r3, r1, r7
 800e626:	4303      	orrs	r3, r0
 800e628:	d01d      	beq.n	800e666 <floor+0x96>
 800e62a:	a323      	add	r3, pc, #140	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	f7f1 fe00 	bl	8000234 <__adddf3>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	f7f2 fa42 	bl	8000ac0 <__aeabi_dcmpgt>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0eb      	beq.n	800e618 <floor+0x48>
 800e640:	2c00      	cmp	r4, #0
 800e642:	bfbe      	ittt	lt
 800e644:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e648:	4133      	asrlt	r3, r6
 800e64a:	18e4      	addlt	r4, r4, r3
 800e64c:	ea24 0407 	bic.w	r4, r4, r7
 800e650:	2500      	movs	r5, #0
 800e652:	e7e1      	b.n	800e618 <floor+0x48>
 800e654:	2e33      	cmp	r6, #51	@ 0x33
 800e656:	dd0a      	ble.n	800e66e <floor+0x9e>
 800e658:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e65c:	d103      	bne.n	800e666 <floor+0x96>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	f7f1 fde7 	bl	8000234 <__adddf3>
 800e666:	ec41 0b10 	vmov	d0, r0, r1
 800e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e672:	f04f 37ff 	mov.w	r7, #4294967295
 800e676:	40df      	lsrs	r7, r3
 800e678:	4207      	tst	r7, r0
 800e67a:	d0f4      	beq.n	800e666 <floor+0x96>
 800e67c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e6b8 <floor+0xe8>)
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f7f1 fdd7 	bl	8000234 <__adddf3>
 800e686:	2200      	movs	r2, #0
 800e688:	2300      	movs	r3, #0
 800e68a:	f7f2 fa19 	bl	8000ac0 <__aeabi_dcmpgt>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0c2      	beq.n	800e618 <floor+0x48>
 800e692:	2c00      	cmp	r4, #0
 800e694:	da0a      	bge.n	800e6ac <floor+0xdc>
 800e696:	2e14      	cmp	r6, #20
 800e698:	d101      	bne.n	800e69e <floor+0xce>
 800e69a:	3401      	adds	r4, #1
 800e69c:	e006      	b.n	800e6ac <floor+0xdc>
 800e69e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	40b3      	lsls	r3, r6
 800e6a6:	441d      	add	r5, r3
 800e6a8:	4545      	cmp	r5, r8
 800e6aa:	d3f6      	bcc.n	800e69a <floor+0xca>
 800e6ac:	ea25 0507 	bic.w	r5, r5, r7
 800e6b0:	e7b2      	b.n	800e618 <floor+0x48>
 800e6b2:	2500      	movs	r5, #0
 800e6b4:	462c      	mov	r4, r5
 800e6b6:	e7af      	b.n	800e618 <floor+0x48>
 800e6b8:	8800759c 	.word	0x8800759c
 800e6bc:	7e37e43c 	.word	0x7e37e43c
 800e6c0:	bff00000 	.word	0xbff00000
 800e6c4:	000fffff 	.word	0x000fffff

0800e6c8 <_init>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	bf00      	nop
 800e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ce:	bc08      	pop	{r3}
 800e6d0:	469e      	mov	lr, r3
 800e6d2:	4770      	bx	lr

0800e6d4 <_fini>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	bf00      	nop
 800e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6da:	bc08      	pop	{r3}
 800e6dc:	469e      	mov	lr, r3
 800e6de:	4770      	bx	lr
