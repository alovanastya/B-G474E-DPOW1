
pr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc60  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800be40  0800be40  0000ce40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800becc  0800becc  0000d05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800becc  0800becc  0000cecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bed4  0800bed4  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bed4  0800bed4  0000ced4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800bedc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  2000005c  0800bf38  0000d05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800bf38  0000d7fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232a9  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e5  00000000  00000000  00030335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e20  00000000  00000000  00033d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001781  00000000  00000000  00035b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eafb  00000000  00000000  000372c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021673  00000000  00000000  00065dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c16a  00000000  00000000  0008742f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d3599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a54  00000000  00000000  001d35dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001dc030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be28 	.word	0x0800be28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800be28 	.word	0x0800be28

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000608:	4907      	ldr	r1, [pc, #28]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4313      	orrs	r3, r2
 800060e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4013      	ands	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000

0800062c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000638:	4907      	ldr	r1, [pc, #28]	@ (8000658 <LL_APB1_GRP2_EnableClock+0x2c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000642:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f001 fa60 	bl	8001b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f909 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fd63 	bl	8001134 <MX_GPIO_Init>
  MX_ADC1_Init();
 800066e:	f000 f953 	bl	8000918 <MX_ADC1_Init>
  MX_COMP2_Init();
 8000672:	f000 f9c9 	bl	8000a08 <MX_COMP2_Init>
  MX_COMP3_Init();
 8000676:	f000 f9ed 	bl	8000a54 <MX_COMP3_Init>
  MX_COMP4_Init();
 800067a:	f000 fa11 	bl	8000aa0 <MX_COMP4_Init>
  MX_COMP6_Init();
 800067e:	f000 fa35 	bl	8000aec <MX_COMP6_Init>
  MX_DAC1_Init();
 8000682:	f000 fa59 	bl	8000b38 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000686:	f000 fa91 	bl	8000bac <MX_DAC2_Init>
  MX_DAC3_Init();
 800068a:	f000 fac9 	bl	8000c20 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 800068e:	f000 fb0b 	bl	8000ca8 <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 8000692:	f000 fcad 	bl	8000ff0 <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 8000696:	f000 fcd9 	bl	800104c <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 800069a:	f000 fd23 	bl	80010e4 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 800069e:	f000 fc13 	bl	8000ec8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006a2:	2108      	movs	r1, #8
 80006a4:	4868      	ldr	r0, [pc, #416]	@ (8000848 <main+0x1ec>)
 80006a6:	f008 f867 	bl	8008778 <HAL_TIM_PWM_Start>
  // HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

  char msg[] = "MEOW!\r\n";
 80006aa:	4a68      	ldr	r2, [pc, #416]	@ (800084c <main+0x1f0>)
 80006ac:	463b      	mov	r3, r7
 80006ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b2:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fdb1 	bl	8000220 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4639      	mov	r1, r7
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	4861      	ldr	r0, [pc, #388]	@ (8000850 <main+0x1f4>)
 80006ca:	f008 fff9 	bl	80096c0 <HAL_UART_Transmit>
  HAL_Delay(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f001 fa9a 	bl	8001c08 <HAL_Delay>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006d4:	217f      	movs	r1, #127	@ 0x7f
 80006d6:	485f      	ldr	r0, [pc, #380]	@ (8000854 <main+0x1f8>)
 80006d8:	f003 f8d8 	bl	800388c <HAL_ADCEx_Calibration_Start>

  //int curr_voltage_mV = (ch_res * 3300) / 4095;
  //printf("  CH%d=%d.%dV\r", chn, curr_voltage_mV / 1000, (curr_voltage_mV % 1000) / 100);
  while (1)
  {
	    HAL_ADC_Start(&hadc1);
 80006dc:	485d      	ldr	r0, [pc, #372]	@ (8000854 <main+0x1f8>)
 80006de:	f001 fed7 	bl	8002490 <HAL_ADC_Start>
	       if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80006e2:	2164      	movs	r1, #100	@ 0x64
 80006e4:	485b      	ldr	r0, [pc, #364]	@ (8000854 <main+0x1f8>)
 80006e6:	f001 ffb7 	bl	8002658 <HAL_ADC_PollForConversion>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d136      	bne.n	800075e <main+0x102>
	       {
	           uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 80006f0:	4858      	ldr	r0, [pc, #352]	@ (8000854 <main+0x1f8>)
 80006f2:	f002 f8b7 	bl	8002864 <HAL_ADC_GetValue>
 80006f6:	4603      	mov	r3, r0
 80006f8:	81fb      	strh	r3, [r7, #14]
	           uint32_t voltage_mV = (adc_value * 3300) / 4095;
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	4a54      	ldr	r2, [pc, #336]	@ (8000858 <main+0x1fc>)
 8000706:	fb82 1203 	smull	r1, r2, r2, r3
 800070a:	441a      	add	r2, r3
 800070c:	12d2      	asrs	r2, r2, #11
 800070e:	17db      	asrs	r3, r3, #31
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	60bb      	str	r3, [r7, #8]

	           snprintf(trans_str, sizeof(trans_str), "ADC: %lu.%luV\r",
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4a51      	ldr	r2, [pc, #324]	@ (800085c <main+0x200>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0999      	lsrs	r1, r3, #6
	                    voltage_mV / 1000,
	                    (voltage_mV % 1000) / 100);
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	4b4e      	ldr	r3, [pc, #312]	@ (800085c <main+0x200>)
 8000722:	fba3 0302 	umull	r0, r3, r3, r2
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072c:	fb00 f303 	mul.w	r3, r0, r3
 8000730:	1ad3      	subs	r3, r2, r3
	           snprintf(trans_str, sizeof(trans_str), "ADC: %lu.%luV\r",
 8000732:	4a4b      	ldr	r2, [pc, #300]	@ (8000860 <main+0x204>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	095b      	lsrs	r3, r3, #5
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	460b      	mov	r3, r1
 800073e:	4a49      	ldr	r2, [pc, #292]	@ (8000864 <main+0x208>)
 8000740:	2140      	movs	r1, #64	@ 0x40
 8000742:	4849      	ldr	r0, [pc, #292]	@ (8000868 <main+0x20c>)
 8000744:	f00a febc 	bl	800b4c0 <sniprintf>

	           HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000748:	4847      	ldr	r0, [pc, #284]	@ (8000868 <main+0x20c>)
 800074a:	f7ff fd69 	bl	8000220 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	b29a      	uxth	r2, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	4944      	ldr	r1, [pc, #272]	@ (8000868 <main+0x20c>)
 8000758:	483d      	ldr	r0, [pc, #244]	@ (8000850 <main+0x1f4>)
 800075a:	f008 ffb1 	bl	80096c0 <HAL_UART_Transmit>
	       }
	       HAL_Delay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f001 fa52 	bl	8001c08 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(pwm_value == 0) step = 1;
 8000764:	4b41      	ldr	r3, [pc, #260]	@ (800086c <main+0x210>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <main+0x116>
 800076c:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <main+0x214>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
    if(pwm_value == 50) step = -1;
 8000772:	4b3e      	ldr	r3, [pc, #248]	@ (800086c <main+0x210>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b32      	cmp	r3, #50	@ 0x32
 8000778:	d102      	bne.n	8000780 <main+0x124>
 800077a:	4b3d      	ldr	r3, [pc, #244]	@ (8000870 <main+0x214>)
 800077c:	22ff      	movs	r2, #255	@ 0xff
 800077e:	701a      	strb	r2, [r3, #0]
	pwm_value += step;
 8000780:	4b3b      	ldr	r3, [pc, #236]	@ (8000870 <main+0x214>)
 8000782:	f993 3000 	ldrsb.w	r3, [r3]
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <main+0x210>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b36      	ldr	r3, [pc, #216]	@ (800086c <main+0x210>)
 8000792:	801a      	strh	r2, [r3, #0]
	setPWM(pwm_value);
 8000794:	4b35      	ldr	r3, [pc, #212]	@ (800086c <main+0x210>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fd9f 	bl	80012dc <setPWM>
	HAL_Delay(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f001 fa32 	bl	8001c08 <HAL_Delay>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET)
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	4832      	ldr	r0, [pc, #200]	@ (8000874 <main+0x218>)
 80007aa:	f004 f963 	bl	8004a74 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d105      	bne.n	80007c0 <main+0x164>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2120      	movs	r1, #32
 80007b8:	482e      	ldr	r0, [pc, #184]	@ (8000874 <main+0x218>)
 80007ba:	f004 f973 	bl	8004aa4 <HAL_GPIO_WritePin>
 80007be:	e004      	b.n	80007ca <main+0x16e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2120      	movs	r1, #32
 80007c4:	482b      	ldr	r0, [pc, #172]	@ (8000874 <main+0x218>)
 80007c6:	f004 f96d 	bl	8004aa4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 80007ca:	2120      	movs	r1, #32
 80007cc:	482a      	ldr	r0, [pc, #168]	@ (8000878 <main+0x21c>)
 80007ce:	f004 f951 	bl	8004a74 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d107      	bne.n	80007e8 <main+0x18c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f004 f95f 	bl	8004aa4 <HAL_GPIO_WritePin>
 80007e6:	e006      	b.n	80007f6 <main+0x19a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f004 f957 	bl	8004aa4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 80007f6:	2110      	movs	r1, #16
 80007f8:	481f      	ldr	r0, [pc, #124]	@ (8000878 <main+0x21c>)
 80007fa:	f004 f93b 	bl	8004a74 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d105      	bne.n	8000810 <main+0x1b4>
	{
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2102      	movs	r1, #2
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <main+0x218>)
 800080a:	f004 f94b 	bl	8004aa4 <HAL_GPIO_WritePin>
 800080e:	e004      	b.n	800081a <main+0x1be>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	4817      	ldr	r0, [pc, #92]	@ (8000874 <main+0x218>)
 8000816:	f004 f945 	bl	8004aa4 <HAL_GPIO_WritePin>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 800081a:	2104      	movs	r1, #4
 800081c:	4815      	ldr	r0, [pc, #84]	@ (8000874 <main+0x218>)
 800081e:	f004 f929 	bl	8004a74 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d105      	bne.n	8000834 <main+0x1d8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <main+0x218>)
 800082e:	f004 f939 	bl	8004aa4 <HAL_GPIO_WritePin>
 8000832:	e004      	b.n	800083e <main+0x1e2>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <main+0x218>)
 800083a:	f004 f933 	bl	8004aa4 <HAL_GPIO_WritePin>
	}
	    HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	@ 0x64
 8000840:	f001 f9e2 	bl	8001c08 <HAL_Delay>
	    HAL_ADC_Start(&hadc1);
 8000844:	e74a      	b.n	80006dc <main+0x80>
 8000846:	bf00      	nop
 8000848:	200002ac 	.word	0x200002ac
 800084c:	0800be50 	.word	0x0800be50
 8000850:	200002f8 	.word	0x200002f8
 8000854:	20000078 	.word	0x20000078
 8000858:	80080081 	.word	0x80080081
 800085c:	10624dd3 	.word	0x10624dd3
 8000860:	51eb851f 	.word	0x51eb851f
 8000864:	0800be40 	.word	0x0800be40
 8000868:	20000668 	.word	0x20000668
 800086c:	200006a8 	.word	0x200006a8
 8000870:	200006aa 	.word	0x200006aa
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	2238      	movs	r2, #56	@ 0x38
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f00a fe4e 	bl	800b52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800089e:	2000      	movs	r0, #0
 80008a0:	f006 fee2 	bl	8007668 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80008a4:	2322      	movs	r3, #34	@ 0x22
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	@ 0x40
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008be:	2304      	movs	r3, #4
 80008c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008c2:	2355      	movs	r3, #85	@ 0x55
 80008c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80008ca:	2308      	movs	r3, #8
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 ff7a 	bl	80077d0 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008e2:	f000 fd19 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 fa78 	bl	8007df4 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800090a:	f000 fd05 	bl	8001318 <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3750      	adds	r7, #80	@ 0x50
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00a fdfb 	bl	800b52c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000936:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000938:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800093c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000940:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000946:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000960:	2204      	movs	r2, #4
 8000962:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000970:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000972:	2201      	movs	r2, #1
 8000974:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000984:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a0:	4817      	ldr	r0, [pc, #92]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 80009a2:	f001 fbb9 	bl	8002118 <HAL_ADC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009ac:	f000 fcb4 	bl	8001318 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 80009bc:	f002 fffa 	bl	80039b4 <HAL_ADCEx_MultiModeConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009c6:	f000 fca7 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_ADC1_Init+0xec>)
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ce:	2306      	movs	r3, #6
 80009d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d6:	237f      	movs	r3, #127	@ 0x7f
 80009d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009da:	2304      	movs	r3, #4
 80009dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_ADC1_Init+0xe8>)
 80009e8:	f002 f9c8 	bl	8002d7c <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009f2:	f000 fc91 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	@ 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000078 	.word	0x20000078
 8000a04:	08600004 	.word	0x08600004

08000a08 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <MX_COMP2_Init+0x48>)
 8000a10:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a1a:	2240      	movs	r2, #64	@ 0x40
 8000a1c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_COMP2_Init+0x44>)
 8000a38:	f003 fa14 	bl	8003e64 <HAL_COMP_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000a42:	f000 fc69 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e4 	.word	0x200000e4
 8000a50:	40010204 	.word	0x40010204

08000a54 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <MX_COMP3_Init+0x48>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a66:	2240      	movs	r2, #64	@ 0x40
 8000a68:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_COMP3_Init+0x44>)
 8000a84:	f003 f9ee 	bl	8003e64 <HAL_COMP_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 8000a8e:	f000 fc43 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000108 	.word	0x20000108
 8000a9c:	40010208 	.word	0x40010208

08000aa0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <MX_COMP4_Init+0x48>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000ab2:	2250      	movs	r2, #80	@ 0x50
 8000ab4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_COMP4_Init+0x44>)
 8000ad0:	f003 f9c8 	bl	8003e64 <HAL_COMP_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8000ada:	f000 fc1d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000012c 	.word	0x2000012c
 8000ae8:	4001020c 	.word	0x4001020c

08000aec <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <MX_COMP6_Init+0x48>)
 8000af4:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000afe:	2250      	movs	r2, #80	@ 0x50
 8000b00:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_COMP6_Init+0x44>)
 8000b1c:	f003 f9a2 	bl	8003e64 <HAL_COMP_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000b26:	f000 fbf7 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000150 	.word	0x20000150
 8000b34:	40010214 	.word	0x40010214

08000b38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2230      	movs	r2, #48	@ 0x30
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00a fcf1 	bl	800b52c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_DAC1_Init+0x6c>)
 8000b4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ba8 <MX_DAC1_Init+0x70>)
 8000b4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b50:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <MX_DAC1_Init+0x6c>)
 8000b52:	f003 fc30 	bl	80043b6 <HAL_DAC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b5c:	f000 fbdc 	bl	8001318 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b60:	2302      	movs	r3, #2
 8000b62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_DAC1_Init+0x6c>)
 8000b8c:	f003 fc36 	bl	80043fc <HAL_DAC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b96:	f000 fbbf 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	@ 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000174 	.word	0x20000174
 8000ba8:	50000800 	.word	0x50000800

08000bac <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2230      	movs	r2, #48	@ 0x30
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00a fcb7 	bl	800b52c <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_DAC2_Init+0x6c>)
 8000bc0:	4a16      	ldr	r2, [pc, #88]	@ (8000c1c <MX_DAC2_Init+0x70>)
 8000bc2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000bc4:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <MX_DAC2_Init+0x6c>)
 8000bc6:	f003 fbf6 	bl	80043b6 <HAL_DAC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000bd0:	f000 fba2 	bl	8001318 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_DAC2_Init+0x6c>)
 8000c00:	f003 fbfc 	bl	80043fc <HAL_DAC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000c0a:	f000 fb85 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000188 	.word	0x20000188
 8000c1c:	50000c00 	.word	0x50000c00

08000c20 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2230      	movs	r2, #48	@ 0x30
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00a fc7d 	bl	800b52c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_DAC3_Init+0x80>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <MX_DAC3_Init+0x84>)
 8000c36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000c38:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <MX_DAC3_Init+0x80>)
 8000c3a:	f003 fbbc 	bl	80043b6 <HAL_DAC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000c44:	f000 fb68 	bl	8001318 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <MX_DAC3_Init+0x80>)
 8000c74:	f003 fbc2 	bl	80043fc <HAL_DAC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000c7e:	f000 fb4b 	bl	8001318 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	2210      	movs	r2, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_DAC3_Init+0x80>)
 8000c8a:	f003 fbb7 	bl	80043fc <HAL_DAC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000c94:	f000 fb40 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000019c 	.word	0x2000019c
 8000ca4:	50001000 	.word	0x50001000

08000ca8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ac      	sub	sp, #176	@ 0xb0
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000cae:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000cbc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	2260      	movs	r2, #96	@ 0x60
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00a fc27 	bl	800b52c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00a fc21 	bl	800b52c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000cea:	4b75      	ldr	r3, [pc, #468]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000cec:	4a75      	ldr	r2, [pc, #468]	@ (8000ec4 <MX_HRTIM1_Init+0x21c>)
 8000cee:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000cf0:	4b73      	ldr	r3, [pc, #460]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000cf6:	4b72      	ldr	r3, [pc, #456]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000cfc:	4870      	ldr	r0, [pc, #448]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000cfe:	f003 ff0d 	bl	8004b1c <HAL_HRTIM_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000d08:	f000 fb06 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000d0c:	210c      	movs	r1, #12
 8000d0e:	486c      	ldr	r0, [pc, #432]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000d10:	f003 ffd4 	bl	8004cbc <HAL_HRTIM_DLLCalibrationStart>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f000 fafd 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000d1e:	210a      	movs	r1, #10
 8000d20:	4867      	ldr	r0, [pc, #412]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000d22:	f004 f823 	bl	8004d6c <HAL_HRTIM_PollForDLLCalibration>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000d2c:	f000 faf4 	bl	8001318 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000d30:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000d34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000d44:	2308      	movs	r3, #8
 8000d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000d4a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2104      	movs	r1, #4
 8000d52:	485b      	ldr	r0, [pc, #364]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000d54:	f004 f83e 	bl	8004dd4 <HAL_HRTIM_TimeBaseConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000d5e:	f000 fadb 	bl	8001318 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000d6e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d72:	461a      	mov	r2, r3
 8000d74:	2104      	movs	r1, #4
 8000d76:	4852      	ldr	r0, [pc, #328]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000d78:	f004 f8e1 	bl	8004f3e <HAL_HRTIM_WaveformTimerControl>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000d82:	f000 fac9 	bl	8001318 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000dae:	2300      	movs	r3, #0
 8000db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	461a      	mov	r2, r3
 8000dea:	2104      	movs	r1, #4
 8000dec:	4834      	ldr	r0, [pc, #208]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000dee:	f004 f819 	bl	8004e24 <HAL_HRTIM_WaveformTimerConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000df8:	f000 fa8e 	bl	8001318 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	461a      	mov	r2, r3
 8000e06:	2105      	movs	r1, #5
 8000e08:	482d      	ldr	r0, [pc, #180]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000e0a:	f004 f80b 	bl	8004e24 <HAL_HRTIM_WaveformTimerConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_HRTIM1_Init+0x170>
  {
    Error_Handler();
 8000e14:	f000 fa80 	bl	8001318 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e3e:	2104      	movs	r1, #4
 8000e40:	481f      	ldr	r0, [pc, #124]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000e42:	f004 f8af 	bl	8004fa4 <HAL_HRTIM_WaveformOutputConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_HRTIM1_Init+0x1a8>
  {
    Error_Handler();
 8000e4c:	f000 fa64 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e56:	2105      	movs	r1, #5
 8000e58:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000e5a:	f004 f8a3 	bl	8004fa4 <HAL_HRTIM_WaveformOutputConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_HRTIM1_Init+0x1c0>
  {
    Error_Handler();
 8000e64:	f000 fa58 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8000e68:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2105      	movs	r1, #5
 8000e70:	4813      	ldr	r0, [pc, #76]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000e72:	f003 ffaf 	bl	8004dd4 <HAL_HRTIM_TimeBaseConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8000e7c:	f000 fa4c 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8000e80:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e84:	461a      	mov	r2, r3
 8000e86:	2105      	movs	r1, #5
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000e8a:	f004 f858 	bl	8004f3e <HAL_HRTIM_WaveformTimerControl>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_HRTIM1_Init+0x1f0>
  {
    Error_Handler();
 8000e94:	f000 fa40 	bl	8001318 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e9e:	2105      	movs	r1, #5
 8000ea0:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000ea2:	f004 f87f 	bl	8004fa4 <HAL_HRTIM_WaveformOutputConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8000eac:	f000 fa34 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <MX_HRTIM1_Init+0x218>)
 8000eb2:	f000 fbdd 	bl	8001670 <HAL_HRTIM_MspPostInit>

}
 8000eb6:	bf00      	nop
 8000eb8:	37b0      	adds	r7, #176	@ 0xb0
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001b0 	.word	0x200001b0
 8000ec4:	40016800 	.word	0x40016800

08000ec8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b098      	sub	sp, #96	@ 0x60
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ece:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2234      	movs	r2, #52	@ 0x34
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00a fb19 	bl	800b52c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000efa:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000efc:	4a3b      	ldr	r2, [pc, #236]	@ (8000fec <MX_TIM1_Init+0x124>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1700;
 8000f00:	4b39      	ldr	r3, [pc, #228]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f02:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000f0e:	4b36      	ldr	r3, [pc, #216]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f10:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f28:	482f      	ldr	r0, [pc, #188]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f2a:	f007 fbcd 	bl	80086c8 <HAL_TIM_PWM_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000f34:	f000 f9f0 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4827      	ldr	r0, [pc, #156]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f4c:	f008 fa3e 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000f56:	f000 f9df 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	@ 0x60
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481a      	ldr	r0, [pc, #104]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000f80:	f007 fd0c 	bl	800899c <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f8a:	f000 f9c5 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000fcc:	f008 fa94 	bl	80094f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000fd6:	f000 f99f 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fda:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <MX_TIM1_Init+0x120>)
 8000fdc:	f000 fbee 	bl	80017bc <HAL_TIM_MspPostInit>

}
 8000fe0:	bf00      	nop
 8000fe2:	3760      	adds	r7, #96	@ 0x60
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002ac 	.word	0x200002ac
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001006:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800100a:	f7ff fb0f 	bl	800062c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800100e:	2002      	movs	r0, #2
 8001010:	f7ff faf4 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001014:	2310      	movs	r3, #16
 8001016:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001018:	2303      	movs	r3, #3
 800101a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MX_UCPD1_Init+0x58>)
 8001026:	f009 fb42 	bl	800a6ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800102a:	2340      	movs	r3, #64	@ 0x40
 800102c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_UCPD1_Init+0x58>)
 800103c:	f009 fb37 	bl	800a6ae <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	48000400 	.word	0x48000400

0800104c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001052:	4a23      	ldr	r2, [pc, #140]	@ (80010e0 <MX_USART3_UART_Init+0x94>)
 8001054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001096:	f008 fac3 	bl	8009620 <HAL_UART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010a0:	f000 f93a 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010a8:	f009 f8ec 	bl	800a284 <HAL_UARTEx_SetTxFifoThreshold>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010b2:	f000 f931 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010ba:	f009 f921 	bl	800a300 <HAL_UARTEx_SetRxFifoThreshold>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f000 f928 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010ca:	f009 f8a2 	bl	800a212 <HAL_UARTEx_DisableFifoMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 f920 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002f8 	.word	0x200002f8
 80010e0:	40004800 	.word	0x40004800

080010e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_USB_PCD_Init+0x48>)
 80010ea:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <MX_USB_PCD_Init+0x4c>)
 80010ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_USB_PCD_Init+0x48>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <MX_USB_PCD_Init+0x48>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USB_PCD_Init+0x48>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <MX_USB_PCD_Init+0x48>)
 8001102:	2200      	movs	r2, #0
 8001104:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USB_PCD_Init+0x48>)
 8001108:	2200      	movs	r2, #0
 800110a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <MX_USB_PCD_Init+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USB_PCD_Init+0x48>)
 8001114:	2200      	movs	r2, #0
 8001116:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_USB_PCD_Init+0x48>)
 800111a:	f004 ff7f 	bl	800601c <HAL_PCD_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001124:	f000 f8f8 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000038c 	.word	0x2000038c
 8001130:	40005c00 	.word	0x40005c00

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b60      	ldr	r3, [pc, #384]	@ (80012cc <MX_GPIO_Init+0x198>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b5d      	ldr	r3, [pc, #372]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b5a      	ldr	r3, [pc, #360]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a59      	ldr	r2, [pc, #356]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b57      	ldr	r3, [pc, #348]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b54      	ldr	r3, [pc, #336]	@ (80012cc <MX_GPIO_Init+0x198>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a53      	ldr	r2, [pc, #332]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b4e      	ldr	r3, [pc, #312]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a4d      	ldr	r2, [pc, #308]	@ (80012cc <MX_GPIO_Init+0x198>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b4b      	ldr	r3, [pc, #300]	@ (80012cc <MX_GPIO_Init+0x198>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f24c 0108 	movw	r1, #49160	@ 0xc008
 80011b0:	4847      	ldr	r0, [pc, #284]	@ (80012d0 <MX_GPIO_Init+0x19c>)
 80011b2:	f003 fc77 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21a2      	movs	r1, #162	@ 0xa2
 80011ba:	4846      	ldr	r0, [pc, #280]	@ (80012d4 <MX_GPIO_Init+0x1a0>)
 80011bc:	f003 fc72 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 4102 	mov.w	r1, #33280	@ 0x8200
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f003 fc6b 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2104      	movs	r1, #4
 80011d2:	4841      	ldr	r0, [pc, #260]	@ (80012d8 <MX_GPIO_Init+0x1a4>)
 80011d4:	f003 fc66 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 80011d8:	f24c 0308 	movw	r3, #49160	@ 0xc008
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4837      	ldr	r0, [pc, #220]	@ (80012d0 <MX_GPIO_Init+0x19c>)
 80011f2:	f003 fabd 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 80011f6:	2330      	movs	r3, #48	@ 0x30
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4831      	ldr	r0, [pc, #196]	@ (80012d0 <MX_GPIO_Init+0x19c>)
 800120c:	f003 fab0 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 8001210:	23a2      	movs	r3, #162	@ 0xa2
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <MX_GPIO_Init+0x1a0>)
 8001228:	f003 faa2 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 800122c:	f240 4304 	movw	r3, #1028	@ 0x404
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4824      	ldr	r0, [pc, #144]	@ (80012d4 <MX_GPIO_Init+0x1a0>)
 8001244:	f003 fa94 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD2_Pin;
 8001248:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001264:	f003 fa84 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001268:	2304      	movs	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4816      	ldr	r0, [pc, #88]	@ (80012d8 <MX_GPIO_Init+0x1a4>)
 8001280:	f003 fa76 	bl	8004770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2008      	movs	r0, #8
 800128a:	f003 f860 	bl	800434e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800128e:	2008      	movs	r0, #8
 8001290:	f003 f877 	bl	8004382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	200a      	movs	r0, #10
 800129a:	f003 f858 	bl	800434e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800129e:	200a      	movs	r0, #10
 80012a0:	f003 f86f 	bl	8004382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2017      	movs	r0, #23
 80012aa:	f003 f850 	bl	800434e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ae:	2017      	movs	r0, #23
 80012b0:	f003 f867 	bl	8004382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2028      	movs	r0, #40	@ 0x28
 80012ba:	f003 f848 	bl	800434e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012be:	2028      	movs	r0, #40	@ 0x28
 80012c0:	f003 f85f 	bl	8004382 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000c00 	.word	0x48000c00

080012dc <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(uint16_t value)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	@ 0x60
 80012e8:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3); // таймер №1, канал №3
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2208      	movs	r2, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <setPWM+0x38>)
 8001300:	f007 fb4c 	bl	800899c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001304:	2108      	movs	r1, #8
 8001306:	4803      	ldr	r0, [pc, #12]	@ (8001314 <setPWM+0x38>)
 8001308:	f007 fa36 	bl	8008778 <HAL_TIM_PWM_Start>
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200002ac 	.word	0x200002ac

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <Error_Handler+0x8>

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	@ 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800135a:	f006 fa29 	bl	80077b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0a0      	sub	sp, #128	@ 0x80
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	2254      	movs	r2, #84	@ 0x54
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f00a f8cd 	bl	800b52c <memset>
  if(hadc->Instance==ADC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800139a:	d154      	bne.n	8001446 <HAL_ADC_MspInit+0xda>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800139c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 ff3d 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013b8:	f7ff ffae 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_ADC_MspInit+0xe4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001408:	2303      	movs	r3, #3
 800140a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <HAL_ADC_MspInit+0xe8>)
 8001418:	f003 f9aa 	bl	8004770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 800141c:	230e      	movs	r3, #14
 800141e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001432:	f003 f99d 	bl	8004770 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2012      	movs	r0, #18
 800143c:	f002 ff87 	bl	800434e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001440:	2012      	movs	r0, #18
 8001442:	f002 ff9e 	bl	8004382 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3780      	adds	r7, #128	@ 0x80
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	48000800 	.word	0x48000800

08001458 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3d      	ldr	r2, [pc, #244]	@ (800156c <HAL_COMP_MspInit+0x114>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d119      	bne.n	80014ae <HAL_COMP_MspInit+0x56>
  {
    /* USER CODE BEGIN COMP2_MspInit 0 */

    /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b3d      	ldr	r3, [pc, #244]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a3c      	ldr	r2, [pc, #240]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f003 f962 	bl	8004770 <HAL_GPIO_Init>
    /* USER CODE BEGIN COMP6_MspInit 1 */

    /* USER CODE END COMP6_MspInit 1 */
  }

}
 80014ac:	e05a      	b.n	8001564 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a30      	ldr	r2, [pc, #192]	@ (8001574 <HAL_COMP_MspInit+0x11c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d119      	bne.n	80014ec <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e6:	f003 f943 	bl	8004770 <HAL_GPIO_Init>
}
 80014ea:	e03b      	b.n	8001564 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_COMP_MspInit+0x120>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d118      	bne.n	8001528 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	4816      	ldr	r0, [pc, #88]	@ (800157c <HAL_COMP_MspInit+0x124>)
 8001522:	f003 f925 	bl	8004770 <HAL_GPIO_Init>
}
 8001526:	e01d      	b.n	8001564 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <HAL_COMP_MspInit+0x128>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d118      	bne.n	8001564 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_COMP_MspInit+0x118>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 800154a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <HAL_COMP_MspInit+0x124>)
 8001560:	f003 f906 	bl	8004770 <HAL_GPIO_Init>
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	@ 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010204 	.word	0x40010204
 8001570:	40021000 	.word	0x40021000
 8001574:	40010208 	.word	0x40010208
 8001578:	4001020c 	.word	0x4001020c
 800157c:	48000400 	.word	0x48000400
 8001580:	40010214 	.word	0x40010214

08001584 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_DAC_MspInit+0x80>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10c      	bne.n	80015b0 <HAL_DAC_MspInit+0x2c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a1b      	ldr	r2, [pc, #108]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN DAC3_MspInit 1 */

    /* USER CODE END DAC3_MspInit 1 */
  }

}
 80015ae:	e022      	b.n	80015f6 <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_DAC_MspInit+0x88>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10c      	bne.n	80015d4 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
}
 80015d2:	e010      	b.n	80015f6 <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_DAC_MspInit+0x8c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10b      	bne.n	80015f6 <HAL_DAC_MspInit+0x72>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_DAC_MspInit+0x84>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	50000800 	.word	0x50000800
 8001608:	40021000 	.word	0x40021000
 800160c:	50000c00 	.word	0x50000c00
 8001610:	50001000 	.word	0x50001000

08001614 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <HAL_HRTIM_MspInit+0x54>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11b      	bne.n	800165e <HAL_HRTIM_MspInit+0x4a>
  {
    /* USER CODE BEGIN HRTIM1_MspInit 0 */

    /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_HRTIM_MspInit+0x58>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_HRTIM_MspInit+0x58>)
 800162c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001630:	6613      	str	r3, [r2, #96]	@ 0x60
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_HRTIM_MspInit+0x58>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2043      	movs	r0, #67	@ 0x43
 8001644:	f002 fe83 	bl	800434e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001648:	2043      	movs	r0, #67	@ 0x43
 800164a:	f002 fe9a 	bl	8004382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	204a      	movs	r0, #74	@ 0x4a
 8001654:	f002 fe7b 	bl	800434e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8001658:	204a      	movs	r0, #74	@ 0x4a
 800165a:	f002 fe92 	bl	8004382 <HAL_NVIC_EnableIRQ>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40016800 	.word	0x40016800
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a37      	ldr	r2, [pc, #220]	@ (800176c <HAL_HRTIM_MspPostInit+0xfc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d167      	bne.n	8001762 <HAL_HRTIM_MspPostInit+0xf2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a36      	ldr	r2, [pc, #216]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a30      	ldr	r2, [pc, #192]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_HRTIM_MspPostInit+0x100>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80016da:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80016ec:	230d      	movs	r3, #13
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	481f      	ldr	r0, [pc, #124]	@ (8001774 <HAL_HRTIM_MspPostInit+0x104>)
 80016f8:	f003 f83a 	bl	8004770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80016fc:	23c0      	movs	r3, #192	@ 0xc0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800170c:	230d      	movs	r3, #13
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <HAL_HRTIM_MspPostInit+0x108>)
 8001718:	f003 f82a 	bl	8004770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 800171c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 800172e:	2303      	movs	r3, #3
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480f      	ldr	r0, [pc, #60]	@ (8001778 <HAL_HRTIM_MspPostInit+0x108>)
 800173a:	f003 f819 	bl	8004770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 800173e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001750:	230d      	movs	r3, #13
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800175e:	f003 f807 	bl	8004770 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40016800 	.word	0x40016800
 8001770:	40021000 	.word	0x40021000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800

0800177c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_TIM_PWM_MspInit+0x38>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10b      	bne.n	80017a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001794:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001798:	6613      	str	r3, [r2, #96]	@ 0x60
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <HAL_TIM_MspPostInit+0x68>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d11d      	bne.n	800181a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_TIM_MspPostInit+0x6c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_TIM_MspPostInit+0x6c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001808:	2306      	movs	r3, #6
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f002 ffab 	bl	8004770 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012c00 	.word	0x40012c00
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b09e      	sub	sp, #120	@ 0x78
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2254      	movs	r2, #84	@ 0x54
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f009 fe6d 	bl	800b52c <memset>
  if(huart->Instance==USART3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <HAL_UART_MspInit+0xa8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d136      	bne.n	80018ca <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800185c:	2304      	movs	r3, #4
 800185e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fcdf 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001874:	f7ff fd50 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187c:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 800187e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001882:	6593      	str	r3, [r2, #88]	@ 0x58
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001894:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_MspInit+0xac>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80018a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018b6:	2301      	movs	r3, #1
 80018b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ba:	2307      	movs	r3, #7
 80018bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_UART_MspInit+0xb0>)
 80018c6:	f002 ff53 	bl	8004770 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80018ca:	bf00      	nop
 80018cc:	3778      	adds	r7, #120	@ 0x78
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004800 	.word	0x40004800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000800 	.word	0x48000800

080018e0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b098      	sub	sp, #96	@ 0x60
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2254      	movs	r2, #84	@ 0x54
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f009 fe1b 	bl	800b52c <memset>
  if(hpcd->Instance==USB)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <HAL_PCD_MspInit+0x70>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d122      	bne.n	8001946 <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001904:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001906:	2300      	movs	r3, #0
 8001908:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f006 fc8c 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800191a:	f7ff fcfd 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_PCD_MspInit+0x74>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <HAL_PCD_MspInit+0x74>)
 8001924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_PCD_MspInit+0x74>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2013      	movs	r0, #19
 800193c:	f002 fd07 	bl	800434e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8001940:	2013      	movs	r0, #19
 8001942:	f002 fd1e 	bl	8004382 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001946:	bf00      	nop
 8001948:	3760      	adds	r7, #96	@ 0x60
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40005c00 	.word	0x40005c00
 8001954:	40021000 	.word	0x40021000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f90d 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 80019ba:	2004      	movs	r0, #4
 80019bc:	f003 f88a 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 80019c8:	2010      	movs	r0, #16
 80019ca:	f003 f883 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <ADC1_2_IRQHandler+0x10>)
 80019da:	f000 ff51 	bl	8002880 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000078 	.word	0x20000078

080019e8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <USB_HP_IRQHandler+0x10>)
 80019ee:	f004 fbe3 	bl	80061b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000038c 	.word	0x2000038c

080019fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 8001a00:	2020      	movs	r0, #32
 8001a02:	f003 f867 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 8001a0e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a12:	f003 f85f 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8001a20:	2106      	movs	r1, #6
 8001a22:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <HRTIM1_Master_IRQHandler+0x10>)
 8001a24:	f003 faef 	bl	8005006 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001b0 	.word	0x200001b0

08001a30 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 8001a34:	2105      	movs	r1, #5
 8001a36:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <HRTIM1_TIMF_IRQHandler+0x10>)
 8001a38:	f003 fae5 	bl	8005006 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200001b0 	.word	0x200001b0

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f009 fd62 	bl	800b53c <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20020000 	.word	0x20020000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	200006ac 	.word	0x200006ac
 8001aac:	20000800 	.word	0x20000800

08001ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ad6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff ffea 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480c      	ldr	r0, [pc, #48]	@ (8001b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ade:	490d      	ldr	r1, [pc, #52]	@ (8001b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <LoopForever+0xe>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b20 <LoopForever+0x16>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f009 fd21 	bl	800b548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b06:	f7fe fda9 	bl	800065c <main>

08001b0a <LoopForever>:

LoopForever:
    b LoopForever
 8001b0a:	e7fe      	b.n	8001b0a <LoopForever>
  ldr   r0, =_estack
 8001b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b18:	0800bedc 	.word	0x0800bedc
  ldr r2, =_sbss
 8001b1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b20:	200007fc 	.word	0x200007fc

08001b24 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC3_IRQHandler>

08001b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f002 fc01 	bl	8004338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f80e 	bl	8001b58 <HAL_InitTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	e001      	b.n	8001b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b48:	f7ff fbec 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b64:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_InitTick+0x68>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d022      	beq.n	8001bb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b6c:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_InitTick+0x6c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_InitTick+0x68>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fc0c 	bl	800439e <HAL_SYSTICK_Config>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10f      	bne.n	8001bac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	d809      	bhi.n	8001ba6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b92:	2200      	movs	r2, #0
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9a:	f002 fbd8 	bl	800434e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <HAL_InitTick+0x70>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e004      	b.n	8001bb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_IncTick+0x20>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <HAL_IncTick+0x1c>)
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	200006b0 	.word	0x200006b0
 8001bec:	20000008 	.word	0x20000008

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200006b0 	.word	0x200006b0

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d004      	beq.n	8001c2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_Delay+0x40>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2c:	bf00      	nop
 8001c2e:	f7ff ffdf 	bl	8001bf0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d8f7      	bhi.n	8001c2e <HAL_Delay+0x26>
  {
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008

08001c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3360      	adds	r3, #96	@ 0x60
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <LL_ADC_SetOffset+0x44>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	03fff000 	.word	0x03fff000

08001cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3360      	adds	r3, #96	@ 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3360      	adds	r3, #96	@ 0x60
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b087      	sub	sp, #28
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3360      	adds	r3, #96	@ 0x60
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	@ 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	615a      	str	r2, [r3, #20]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3330      	adds	r3, #48	@ 0x30
 8001e26:	461a      	mov	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	4413      	add	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	211f      	movs	r1, #31
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0e9b      	lsrs	r3, r3, #26
 8001e4e:	f003 011f 	and.w	r1, r3, #31
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	0e5b      	lsrs	r3, r3, #25
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0d1b      	lsrs	r3, r3, #20
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0d1b      	lsrs	r3, r3, #20
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0318 	and.w	r3, r3, #24
 8001f0e:	4908      	ldr	r1, [pc, #32]	@ (8001f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f10:	40d9      	lsrs	r1, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	400b      	ands	r3, r1
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	0007ffff 	.word	0x0007ffff

08001f34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 031f 	and.w	r3, r3, #31
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_ADC_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDisableOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDisableOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d101      	bne.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d101      	bne.n	800210a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e1a9      	b.n	8002486 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff f913 	bl	800136c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff19 	bl	8001f90 <LL_ADC_IsDeepPowerDownEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff feff 	bl	8001f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff34 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff18 	bl	8001fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b9c      	ldr	r3, [pc, #624]	@ (80023fc <HAL_ADC_Init+0x2e4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a9c      	ldr	r2, [pc, #624]	@ (8002400 <HAL_ADC_Init+0x2e8>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff16 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff76 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8142 	bne.w	8002474 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 813e 	bne.w	8002474 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff23 	bl	8002058 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d141      	bne.n	800229c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002220:	d004      	beq.n	800222c <HAL_ADC_Init+0x114>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a77      	ldr	r2, [pc, #476]	@ (8002404 <HAL_ADC_Init+0x2ec>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10f      	bne.n	800224c <HAL_ADC_Init+0x134>
 800222c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002230:	f7ff ff12 	bl	8002058 <LL_ADC_IsEnabled>
 8002234:	4604      	mov	r4, r0
 8002236:	4873      	ldr	r0, [pc, #460]	@ (8002404 <HAL_ADC_Init+0x2ec>)
 8002238:	f7ff ff0e 	bl	8002058 <LL_ADC_IsEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	4323      	orrs	r3, r4
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e012      	b.n	8002272 <HAL_ADC_Init+0x15a>
 800224c:	486e      	ldr	r0, [pc, #440]	@ (8002408 <HAL_ADC_Init+0x2f0>)
 800224e:	f7ff ff03 	bl	8002058 <LL_ADC_IsEnabled>
 8002252:	4604      	mov	r4, r0
 8002254:	486d      	ldr	r0, [pc, #436]	@ (800240c <HAL_ADC_Init+0x2f4>)
 8002256:	f7ff feff 	bl	8002058 <LL_ADC_IsEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	431c      	orrs	r4, r3
 800225e:	486c      	ldr	r0, [pc, #432]	@ (8002410 <HAL_ADC_Init+0x2f8>)
 8002260:	f7ff fefa 	bl	8002058 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	4323      	orrs	r3, r4
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800227e:	d004      	beq.n	800228a <HAL_ADC_Init+0x172>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5f      	ldr	r2, [pc, #380]	@ (8002404 <HAL_ADC_Init+0x2ec>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_ADC_Init+0x176>
 800228a:	4a62      	ldr	r2, [pc, #392]	@ (8002414 <HAL_ADC_Init+0x2fc>)
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x178>
 800228e:	4a62      	ldr	r2, [pc, #392]	@ (8002418 <HAL_ADC_Init+0x300>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f7ff fcd8 	bl	8001c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7f5b      	ldrb	r3, [r3, #29]
 80022a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_ADC_Init+0x304>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	430b      	orrs	r3, r1
 8002306:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fee5 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 8002328:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d17f      	bne.n	8002430 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d17c      	bne.n	8002430 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800233a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002342:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	430b      	orrs	r3, r1
 800235e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d017      	beq.n	8002398 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002376:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002380:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002384:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6911      	ldr	r1, [r2, #16]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002396:	e013      	b.n	80023c0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12a      	bne.n	8002420 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ec:	430a      	orrs	r2, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
 80023fa:	e019      	b.n	8002430 <HAL_ADC_Init+0x318>
 80023fc:	20000000 	.word	0x20000000
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	50000100 	.word	0x50000100
 8002408:	50000400 	.word	0x50000400
 800240c:	50000500 	.word	0x50000500
 8002410:	50000600 	.word	0x50000600
 8002414:	50000300 	.word	0x50000300
 8002418:	50000700 	.word	0x50000700
 800241c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f023 010f 	bic.w	r1, r3, #15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020f 	bic.w	r2, r2, #15
 8002460:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop

08002490 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_Start+0x1c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a67      	ldr	r2, [pc, #412]	@ (8002644 <HAL_ADC_Start+0x1b4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_Start+0x20>
 80024ac:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <HAL_ADC_Start+0x1b8>)
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_Start+0x22>
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_ADC_Start+0x1bc>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fd3e 	bl	8001f34 <LL_ADC_GetMultimode>
 80024b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fe04 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80b4 	bne.w	8002634 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Start+0x4a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0af      	b.n	800263a <HAL_ADC_Start+0x1aa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f001 f88a 	bl	80035fc <ADC_Enable>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 809b 	bne.w	800262a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4d      	ldr	r2, [pc, #308]	@ (8002644 <HAL_ADC_Start+0x1b4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_ADC_Start+0x96>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4e      	ldr	r2, [pc, #312]	@ (8002650 <HAL_ADC_Start+0x1c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d002      	beq.n	8002522 <HAL_ADC_Start+0x92>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e003      	b.n	800252a <HAL_ADC_Start+0x9a>
 8002522:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <HAL_ADC_Start+0x1c4>)
 8002524:	e001      	b.n	800252a <HAL_ADC_Start+0x9a>
 8002526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4293      	cmp	r3, r2
 8002530:	d002      	beq.n	8002538 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002550:	d106      	bne.n	8002560 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	f023 0206 	bic.w	r2, r3, #6
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	661a      	str	r2, [r3, #96]	@ 0x60
 800255e:	e002      	b.n	8002566 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	221c      	movs	r2, #28
 800256c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a32      	ldr	r2, [pc, #200]	@ (8002644 <HAL_ADC_Start+0x1b4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_ADC_Start+0x104>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a32      	ldr	r2, [pc, #200]	@ (8002650 <HAL_ADC_Start+0x1c0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d002      	beq.n	8002590 <HAL_ADC_Start+0x100>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e003      	b.n	8002598 <HAL_ADC_Start+0x108>
 8002590:	4b30      	ldr	r3, [pc, #192]	@ (8002654 <HAL_ADC_Start+0x1c4>)
 8002592:	e001      	b.n	8002598 <HAL_ADC_Start+0x108>
 8002594:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4293      	cmp	r3, r2
 800259e:	d008      	beq.n	80025b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d002      	beq.n	80025b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d114      	bne.n	80025dc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fd65 	bl	80020a4 <LL_ADC_REG_StartConversion>
 80025da:	e02d      	b.n	8002638 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_ADC_Start+0x1b4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_ADC_Start+0x176>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a16      	ldr	r2, [pc, #88]	@ (8002650 <HAL_ADC_Start+0x1c0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d002      	beq.n	8002602 <HAL_ADC_Start+0x172>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e003      	b.n	800260a <HAL_ADC_Start+0x17a>
 8002602:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <HAL_ADC_Start+0x1c4>)
 8002604:	e001      	b.n	800260a <HAL_ADC_Start+0x17a>
 8002606:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00f      	beq.n	8002638 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002620:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002628:	e006      	b.n	8002638 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002632:	e001      	b.n	8002638 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	50000100 	.word	0x50000100
 8002648:	50000300 	.word	0x50000300
 800264c:	50000700 	.word	0x50000700
 8002650:	50000500 	.word	0x50000500
 8002654:	50000400 	.word	0x50000400

08002658 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800266a:	d004      	beq.n	8002676 <HAL_ADC_PollForConversion+0x1e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a77      	ldr	r2, [pc, #476]	@ (8002850 <HAL_ADC_PollForConversion+0x1f8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_ADC_PollForConversion+0x22>
 8002676:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <HAL_ADC_PollForConversion+0x1fc>)
 8002678:	e000      	b.n	800267c <HAL_ADC_PollForConversion+0x24>
 800267a:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_ADC_PollForConversion+0x200>)
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fc59 	bl	8001f34 <LL_ADC_GetMultimode>
 8002682:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d102      	bne.n	8002692 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800268c:	2308      	movs	r3, #8
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e037      	b.n	8002702 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d002      	beq.n	80026a4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b09      	cmp	r3, #9
 80026a2:	d111      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0c1      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026c2:	2304      	movs	r3, #4
 80026c4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026c6:	e01c      	b.n	8002702 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d0:	d004      	beq.n	80026dc <HAL_ADC_PollForConversion+0x84>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002850 <HAL_ADC_PollForConversion+0x1f8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x88>
 80026dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002854 <HAL_ADC_PollForConversion+0x1fc>)
 80026de:	e000      	b.n	80026e2 <HAL_ADC_PollForConversion+0x8a>
 80026e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002858 <HAL_ADC_PollForConversion+0x200>)
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc34 	bl	8001f50 <LL_ADC_GetMultiDMATransfer>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0a3      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026fe:	2304      	movs	r3, #4
 8002700:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002702:	f7ff fa75 	bl	8001bf0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002708:	e021      	b.n	800274e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d01d      	beq.n	800274e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002712:	f7ff fa6d 	bl	8001bf0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <HAL_ADC_PollForConversion+0xd0>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f043 0204 	orr.w	r2, r3, #4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e07b      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0d6      	beq.n	800270a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb3f 	bl	8001df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01c      	beq.n	80027b2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7f5b      	ldrb	r3, [r3, #29]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d111      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a26      	ldr	r2, [pc, #152]	@ (8002850 <HAL_ADC_PollForConversion+0x1f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_ADC_PollForConversion+0x178>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <HAL_ADC_PollForConversion+0x204>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d002      	beq.n	80027cc <HAL_ADC_PollForConversion+0x174>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_PollForConversion+0x17c>
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_ADC_PollForConversion+0x208>)
 80027ce:	e001      	b.n	80027d4 <HAL_ADC_PollForConversion+0x17c>
 80027d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4293      	cmp	r3, r2
 80027da:	d008      	beq.n	80027ee <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d002      	beq.n	80027ee <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d104      	bne.n	80027f8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e014      	b.n	8002822 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <HAL_ADC_PollForConversion+0x1f8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_ADC_PollForConversion+0x1be>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_ADC_PollForConversion+0x204>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d002      	beq.n	8002812 <HAL_ADC_PollForConversion+0x1ba>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	e003      	b.n	800281a <HAL_ADC_PollForConversion+0x1c2>
 8002812:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_ADC_PollForConversion+0x208>)
 8002814:	e001      	b.n	800281a <HAL_ADC_PollForConversion+0x1c2>
 8002816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800281a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d104      	bne.n	8002832 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e008      	b.n	8002844 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	220c      	movs	r2, #12
 8002842:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	50000100 	.word	0x50000100
 8002854:	50000300 	.word	0x50000300
 8002858:	50000700 	.word	0x50000700
 800285c:	50000500 	.word	0x50000500
 8002860:	50000400 	.word	0x50000400

08002864 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_IRQHandler+0x30>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a8e      	ldr	r2, [pc, #568]	@ (8002ae4 <HAL_ADC_IRQHandler+0x264>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x34>
 80028b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <HAL_ADC_IRQHandler+0x268>)
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_IRQHandler+0x36>
 80028b4:	4b8d      	ldr	r3, [pc, #564]	@ (8002aec <HAL_ADC_IRQHandler+0x26c>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb3c 	bl	8001f34 <LL_ADC_GetMultimode>
 80028bc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_ADC_IRQHandler+0x78>
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f001 f858 	bl	80039a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_ADC_IRQHandler+0x8c>
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8094 	beq.w	8002a40 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808e 	beq.w	8002a40 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fa55 	bl	8001df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d072      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a64      	ldr	r2, [pc, #400]	@ (8002ae4 <HAL_ADC_IRQHandler+0x264>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_ADC_IRQHandler+0xea>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a65      	ldr	r2, [pc, #404]	@ (8002af0 <HAL_ADC_IRQHandler+0x270>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d002      	beq.n	8002966 <HAL_ADC_IRQHandler+0xe6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e003      	b.n	800296e <HAL_ADC_IRQHandler+0xee>
 8002966:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_ADC_IRQHandler+0x274>)
 8002968:	e001      	b.n	800296e <HAL_ADC_IRQHandler+0xee>
 800296a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4293      	cmp	r3, r2
 8002974:	d008      	beq.n	8002988 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d002      	beq.n	8002988 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b09      	cmp	r3, #9
 8002986:	d104      	bne.n	8002992 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	e014      	b.n	80029bc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a53      	ldr	r2, [pc, #332]	@ (8002ae4 <HAL_ADC_IRQHandler+0x264>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_ADC_IRQHandler+0x130>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a53      	ldr	r2, [pc, #332]	@ (8002af0 <HAL_ADC_IRQHandler+0x270>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d002      	beq.n	80029ac <HAL_ADC_IRQHandler+0x12c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_IRQHandler+0x134>
 80029ac:	4b51      	ldr	r3, [pc, #324]	@ (8002af4 <HAL_ADC_IRQHandler+0x274>)
 80029ae:	e001      	b.n	80029b4 <HAL_ADC_IRQHandler+0x134>
 80029b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029b4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d135      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d12e      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb77 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11a      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020c 	bic.w	r2, r2, #12
 80029f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d112      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a18:	e00b      	b.n	8002a32 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f984 	bl	8002d40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x1d4>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80b3 	beq.w	8002bc6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80ad 	beq.w	8002bc6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f9f0 	bl	8001e6e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f9ab 	bl	8001df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a9a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_ADC_IRQHandler+0x264>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_ADC_IRQHandler+0x23a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <HAL_ADC_IRQHandler+0x270>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d002      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x236>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_IRQHandler+0x23e>
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <HAL_ADC_IRQHandler+0x274>)
 8002ab8:	e001      	b.n	8002abe <HAL_ADC_IRQHandler+0x23e>
 8002aba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d008      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d002      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	d10f      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	e01f      	b.n	8002b22 <HAL_ADC_IRQHandler+0x2a2>
 8002ae2:	bf00      	nop
 8002ae4:	50000100 	.word	0x50000100
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	50000700 	.word	0x50000700
 8002af0:	50000500 	.word	0x50000500
 8002af4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a8b      	ldr	r2, [pc, #556]	@ (8002d2c <HAL_ADC_IRQHandler+0x4ac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x296>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8a      	ldr	r2, [pc, #552]	@ (8002d30 <HAL_ADC_IRQHandler+0x4b0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d002      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x292>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_IRQHandler+0x29a>
 8002b12:	4b88      	ldr	r3, [pc, #544]	@ (8002d34 <HAL_ADC_IRQHandler+0x4b4>)
 8002b14:	e001      	b.n	8002b1a <HAL_ADC_IRQHandler+0x29a>
 8002b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d047      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x2c2>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03f      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13a      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d133      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d12e      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fac7 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11a      	bne.n	8002ba0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d112      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b9e:	e00b      	b.n	8002bb8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fec9 	bl	8003950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2260      	movs	r2, #96	@ 0x60
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d011      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x374>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8b4 	bl	8002d54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x3a4>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 feaf 	bl	8003978 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x3d4>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fea1 	bl	800398c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d043      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x466>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d03e      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002c70:	2301      	movs	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e021      	b.n	8002cba <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c84:	d004      	beq.n	8002c90 <HAL_ADC_IRQHandler+0x410>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <HAL_ADC_IRQHandler+0x4ac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_IRQHandler+0x414>
 8002c90:	4b29      	ldr	r3, [pc, #164]	@ (8002d38 <HAL_ADC_IRQHandler+0x4b8>)
 8002c92:	e000      	b.n	8002c96 <HAL_ADC_IRQHandler+0x416>
 8002c94:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <HAL_ADC_IRQHandler+0x4bc>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f95a 	bl	8001f50 <LL_ADC_GetMultiDMATransfer>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca6:	e008      	b.n	8002cba <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10e      	bne.n	8002cde <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f845 	bl	8002d68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x4a2>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d013      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fe21 	bl	8003964 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	50000100 	.word	0x50000100
 8002d30:	50000500 	.word	0x50000500
 8002d34:	50000400 	.word	0x50000400
 8002d38:	50000300 	.word	0x50000300
 8002d3c:	50000700 	.word	0x50000700

08002d40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x24>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f000 bc13 	b.w	80035c6 <HAL_ADC_ConfigChannel+0x84a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff f98d 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 83f3 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7ff f825 	bl	8001e16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f97b 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 8002dd6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f987 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 8002de4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 81d9 	bne.w	80031a4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 81d4 	bne.w	80031a4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e04:	d10f      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7ff f83f 	bl	8001e94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe ffd3 	bl	8001dca <LL_ADC_SetSamplingTimeCommonConfig>
 8002e24:	e00e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f7ff f82e 	bl	8001e94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe ffc3 	bl	8001dca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	08db      	lsrs	r3, r3, #3
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d022      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e76:	f7fe ff1d 	bl	8001cb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6919      	ldr	r1, [r3, #16]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f7fe ff69 	bl	8001d5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x126>
 8002e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea0:	e000      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x128>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f7fe ff75 	bl	8001d94 <LL_ADC_SetOffsetSaturation>
 8002eaa:	e17b      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ff22 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x15c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe ff17 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	f003 021f 	and.w	r2, r3, #31
 8002ed6:	e01e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x19a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe ff0c 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002efa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f06:	2320      	movs	r3, #32
 8002f08:	e004      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x1b2>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	e018      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x1e4>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f52:	2320      	movs	r3, #32
 8002f54:	e004      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fedb 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe febf 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x222>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe feb4 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	e01e      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x260>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fea9 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e004      	b.n	8002fda <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x278>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	e018      	b.n	8003026 <HAL_ADC_ConfigChannel+0x2aa>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800300c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800301c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fe78 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2102      	movs	r1, #2
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fe5c 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x2e8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fe51 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x326>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2102      	movs	r1, #2
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fe46 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003082:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800308a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x33e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	e016      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x36c>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2102      	movs	r1, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fe17 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2103      	movs	r1, #3
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fdfb 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x3aa>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2103      	movs	r1, #3
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fdf0 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	e017      	b.n	8003156 <HAL_ADC_ConfigChannel+0x3da>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2103      	movs	r1, #3
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fde5 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800313e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003140:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800314c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_ADC_ConfigChannel+0x3f2>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	e011      	b.n	8003192 <HAL_ADC_ConfigChannel+0x416>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800317c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800317e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e003      	b.n	8003192 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800318a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003192:	429a      	cmp	r2, r3
 8003194:	d106      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	2103      	movs	r1, #3
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fdc2 	bl	8001d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe ff55 	bl	8002058 <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 813d 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f7fe fe92 	bl	8001eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4aa2      	ldr	r2, [pc, #648]	@ (8003458 <HAL_ADC_ConfigChannel+0x6dc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	f040 812e 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x480>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e019      	b.n	8003230 <HAL_ADC_ConfigChannel+0x4b4>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800320a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800320c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800320e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e003      	b.n	8003220 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3301      	adds	r3, #1
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2b09      	cmp	r3, #9
 8003228:	bf94      	ite	ls
 800322a:	2301      	movls	r3, #1
 800322c:	2300      	movhi	r3, #0
 800322e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003230:	2b00      	cmp	r3, #0
 8003232:	d079      	beq.n	8003328 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x4d4>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	3301      	adds	r3, #1
 8003248:	069b      	lsls	r3, r3, #26
 800324a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800324e:	e015      	b.n	800327c <HAL_ADC_ConfigChannel+0x500>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800325e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003260:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e003      	b.n	8003274 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800326c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_ConfigChannel+0x520>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	e017      	b.n	80032cc <HAL_ADC_ConfigChannel+0x550>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x576>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	051b      	lsls	r3, r3, #20
 80032f0:	e018      	b.n	8003324 <HAL_ADC_ConfigChannel+0x5a8>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800330e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003324:	430b      	orrs	r3, r1
 8003326:	e07e      	b.n	8003426 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x5c8>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	3301      	adds	r3, #1
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003342:	e015      	b.n	8003370 <HAL_ADC_ConfigChannel+0x5f4>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003354:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x614>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	3301      	adds	r3, #1
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	e017      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x644>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	61fb      	str	r3, [r7, #28]
  return result;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x670>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	3b1e      	subs	r3, #30
 80033e4:	051b      	lsls	r3, r3, #20
 80033e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	e01b      	b.n	8003424 <HAL_ADC_ConfigChannel+0x6a8>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	613b      	str	r3, [r7, #16]
  return result;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e003      	b.n	8003410 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	051b      	lsls	r3, r3, #20
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003424:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342a:	4619      	mov	r1, r3
 800342c:	f7fe fd32 	bl	8001e94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_ADC_ConfigChannel+0x6e0>)
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80be 	beq.w	80035ba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d004      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x6d6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_ADC_ConfigChannel+0x6e4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10a      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x6ec>
 8003452:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_ADC_ConfigChannel+0x6e8>)
 8003454:	e009      	b.n	800346a <HAL_ADC_ConfigChannel+0x6ee>
 8003456:	bf00      	nop
 8003458:	407f0000 	.word	0x407f0000
 800345c:	80080000 	.word	0x80080000
 8003460:	50000100 	.word	0x50000100
 8003464:	50000300 	.word	0x50000300
 8003468:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_ADC_ConfigChannel+0x854>)
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fc14 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 8003470:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a56      	ldr	r2, [pc, #344]	@ (80035d4 <HAL_ADC_ConfigChannel+0x858>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x70c>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a55      	ldr	r2, [pc, #340]	@ (80035d8 <HAL_ADC_ConfigChannel+0x85c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d13a      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800348c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d134      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349c:	d005      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x72e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4e      	ldr	r2, [pc, #312]	@ (80035dc <HAL_ADC_ConfigChannel+0x860>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f040 8085 	bne.w	80035b4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b2:	d004      	beq.n	80034be <HAL_ADC_ConfigChannel+0x742>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a49      	ldr	r2, [pc, #292]	@ (80035e0 <HAL_ADC_ConfigChannel+0x864>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x746>
 80034be:	4a49      	ldr	r2, [pc, #292]	@ (80035e4 <HAL_ADC_ConfigChannel+0x868>)
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x748>
 80034c2:	4a43      	ldr	r2, [pc, #268]	@ (80035d0 <HAL_ADC_ConfigChannel+0x854>)
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7fe fbcf 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d4:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <HAL_ADC_ConfigChannel+0x86c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	4a44      	ldr	r2, [pc, #272]	@ (80035ec <HAL_ADC_ConfigChannel+0x870>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034fc:	e05a      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3b      	ldr	r2, [pc, #236]	@ (80035f0 <HAL_ADC_ConfigChannel+0x874>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d125      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800350c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11f      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a31      	ldr	r2, [pc, #196]	@ (80035e0 <HAL_ADC_ConfigChannel+0x864>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d104      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x7ac>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a34      	ldr	r2, [pc, #208]	@ (80035f4 <HAL_ADC_ConfigChannel+0x878>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d047      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003530:	d004      	beq.n	800353c <HAL_ADC_ConfigChannel+0x7c0>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2a      	ldr	r2, [pc, #168]	@ (80035e0 <HAL_ADC_ConfigChannel+0x864>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x7c4>
 800353c:	4a29      	ldr	r2, [pc, #164]	@ (80035e4 <HAL_ADC_ConfigChannel+0x868>)
 800353e:	e000      	b.n	8003542 <HAL_ADC_ConfigChannel+0x7c6>
 8003540:	4a23      	ldr	r2, [pc, #140]	@ (80035d0 <HAL_ADC_ConfigChannel+0x854>)
 8003542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7fe fb90 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003552:	e031      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a27      	ldr	r2, [pc, #156]	@ (80035f8 <HAL_ADC_ConfigChannel+0x87c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d12d      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800355e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d127      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <HAL_ADC_ConfigChannel+0x864>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357c:	d004      	beq.n	8003588 <HAL_ADC_ConfigChannel+0x80c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <HAL_ADC_ConfigChannel+0x864>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x810>
 8003588:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <HAL_ADC_ConfigChannel+0x868>)
 800358a:	e000      	b.n	800358e <HAL_ADC_ConfigChannel+0x812>
 800358c:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <HAL_ADC_ConfigChannel+0x854>)
 800358e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003592:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7fe fb6a 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
 800359e:	e00c      	b.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035b2:	e002      	b.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	37d8      	adds	r7, #216	@ 0xd8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	50000700 	.word	0x50000700
 80035d4:	c3210000 	.word	0xc3210000
 80035d8:	90c00010 	.word	0x90c00010
 80035dc:	50000600 	.word	0x50000600
 80035e0:	50000100 	.word	0x50000100
 80035e4:	50000300 	.word	0x50000300
 80035e8:	20000000 	.word	0x20000000
 80035ec:	053e2d63 	.word	0x053e2d63
 80035f0:	c7520000 	.word	0xc7520000
 80035f4:	50000500 	.word	0x50000500
 80035f8:	cb840000 	.word	0xcb840000

080035fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fd23 	bl	8002058 <LL_ADC_IsEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d176      	bne.n	8003706 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <ADC_Enable+0x114>)
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362a:	f043 0210 	orr.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e062      	b.n	8003708 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fcde 	bl	8002008 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003654:	d004      	beq.n	8003660 <ADC_Enable+0x64>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2e      	ldr	r2, [pc, #184]	@ (8003714 <ADC_Enable+0x118>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <ADC_Enable+0x68>
 8003660:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <ADC_Enable+0x11c>)
 8003662:	e000      	b.n	8003666 <ADC_Enable+0x6a>
 8003664:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <ADC_Enable+0x120>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fb16 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 800366c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800366e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003676:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <ADC_Enable+0x124>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	4a29      	ldr	r2, [pc, #164]	@ (8003724 <ADC_Enable+0x128>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003690:	e002      	b.n	8003698 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3b01      	subs	r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f9      	bne.n	8003692 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800369e:	f7fe faa7 	bl	8001bf0 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a4:	e028      	b.n	80036f8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fcd4 	bl	8002058 <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fca4 	bl	8002008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c0:	f7fe fa96 	bl	8001bf0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d914      	bls.n	80036f8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d00d      	beq.n	80036f8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d1cf      	bne.n	80036a6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	8000003f 	.word	0x8000003f
 8003714:	50000100 	.word	0x50000100
 8003718:	50000300 	.word	0x50000300
 800371c:	50000700 	.word	0x50000700
 8003720:	20000000 	.word	0x20000000
 8003724:	053e2d63 	.word	0x053e2d63

08003728 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fca2 	bl	800207e <LL_ADC_IsDisableOngoing>
 800373a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fc89 	bl	8002058 <LL_ADC_IsEnabled>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d047      	beq.n	80037dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d144      	bne.n	80037dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030d 	and.w	r3, r3, #13
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fc63 	bl	8002030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2203      	movs	r2, #3
 8003770:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003772:	f7fe fa3d 	bl	8001bf0 <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003778:	e029      	b.n	80037ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e023      	b.n	80037de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003796:	f7fe fa2b 	bl	8001bf0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d914      	bls.n	80037ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f043 0210 	orr.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1dc      	bne.n	8003796 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <LL_ADC_IsEnabled>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <LL_ADC_IsEnabled+0x18>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_ADC_IsEnabled+0x1a>
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_StartCalibration>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800381e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003828:	4313      	orrs	r3, r2
 800382a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_IsCalibrationOnGoing>:
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800384e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_REG_IsConversionOngoing>:
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d101      	bne.n	800387e <LL_ADC_REG_IsConversionOngoing+0x18>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e04d      	b.n	8003944 <HAL_ADCEx_Calibration_Start+0xb8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff39 	bl	8003728 <ADC_Disable>
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d136      	bne.n	800392e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038c8:	f023 0302 	bic.w	r3, r3, #2
 80038cc:	f043 0202 	orr.w	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff96 	bl	800380c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038e0:	e014      	b.n	800390c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_ADCEx_Calibration_Start+0xc0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d90d      	bls.n	800390c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	f023 0312 	bic.w	r3, r3, #18
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01b      	b.n	8003944 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff94 	bl	800383e <LL_ADC_IsCalibrationOnGoing>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e2      	bne.n	80038e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800392c:	e005      	b.n	800393a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	0004de01 	.word	0x0004de01

08003950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b0a1      	sub	sp, #132	@ 0x84
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0e7      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039da:	2300      	movs	r3, #0
 80039dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039de:	2300      	movs	r3, #0
 80039e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ea:	d102      	bne.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	e009      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d102      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039fc:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e001      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0be      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff1d 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff17 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 80a0 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 809c 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a55      	ldr	r2, [pc, #340]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a5c:	4b56      	ldr	r3, [pc, #344]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a60:	4b56      	ldr	r3, [pc, #344]	@ (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a62:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04b      	beq.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7e:	035b      	lsls	r3, r3, #13
 8003a80:	430b      	orrs	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a90:	d004      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a45      	ldr	r2, [pc, #276]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10f      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003aa0:	f7ff fea1 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4841      	ldr	r0, [pc, #260]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aa8:	f7ff fe9d 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4323      	orrs	r3, r4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003abc:	483c      	ldr	r0, [pc, #240]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003abe:	f7ff fe92 	bl	80037e6 <LL_ADC_IsEnabled>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	483b      	ldr	r0, [pc, #236]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ac6:	f7ff fe8e 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	431c      	orrs	r4, r3
 8003ace:	483c      	ldr	r0, [pc, #240]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ad0:	f7ff fe89 	bl	80037e6 <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d056      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b00:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b02:	e047      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b18:	d004      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10f      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b28:	f7ff fe5d 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	481f      	ldr	r0, [pc, #124]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b30:	f7ff fe59 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4323      	orrs	r3, r4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e012      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b44:	481a      	ldr	r0, [pc, #104]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b46:	f7ff fe4e 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4819      	ldr	r0, [pc, #100]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4e:	f7ff fe4a 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	431c      	orrs	r4, r3
 8003b56:	481a      	ldr	r0, [pc, #104]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b58:	f7ff fe45 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7e:	e009      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3784      	adds	r7, #132	@ 0x84
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000400 	.word	0x50000400
 8003bb4:	50000500 	.word	0x50000500
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	50000600 	.word	0x50000600

08003bc4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <LL_EXTI_EnableIT_0_31+0x20>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4904      	ldr	r1, [pc, #16]	@ (8003be4 <LL_EXTI_EnableIT_0_31+0x20>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40010400 	.word	0x40010400

08003be8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <LL_EXTI_EnableIT_32_63+0x20>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4904      	ldr	r1, [pc, #16]	@ (8003c08 <LL_EXTI_EnableIT_32_63+0x20>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	620b      	str	r3, [r1, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40010400 	.word	0x40010400

08003c0c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <LL_EXTI_DisableIT_0_31+0x24>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	4904      	ldr	r1, [pc, #16]	@ (8003c30 <LL_EXTI_DisableIT_0_31+0x24>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010400 	.word	0x40010400

08003c34 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <LL_EXTI_DisableIT_32_63+0x24>)
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	4904      	ldr	r1, [pc, #16]	@ (8003c58 <LL_EXTI_DisableIT_32_63+0x24>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	620b      	str	r3, [r1, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010400 	.word	0x40010400

08003c5c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4904      	ldr	r1, [pc, #16]	@ (8003c7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010400 	.word	0x40010400

08003c80 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c8c:	4904      	ldr	r1, [pc, #16]	@ (8003ca0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	4904      	ldr	r1, [pc, #16]	@ (8003cc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010400 	.word	0x40010400

08003ccc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	4904      	ldr	r1, [pc, #16]	@ (8003cf0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4904      	ldr	r1, [pc, #16]	@ (8003d14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]

}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40010400 	.word	0x40010400

08003d18 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d24:	4904      	ldr	r1, [pc, #16]	@ (8003d38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40010400 	.word	0x40010400

08003d3c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]

}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010400 	.word	0x40010400

08003d64 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	4904      	ldr	r1, [pc, #16]	@ (8003d88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010400 	.word	0x40010400

08003d8c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	4904      	ldr	r1, [pc, #16]	@ (8003dac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60cb      	str	r3, [r1, #12]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40010400 	.word	0x40010400

08003db0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbc:	4904      	ldr	r1, [pc, #16]	@ (8003dd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	4904      	ldr	r1, [pc, #16]	@ (8003df8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010400 	.word	0x40010400

08003dfc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40010400 	.word	0x40010400

08003e24 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6153      	str	r3, [r2, #20]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010400 	.word	0x40010400

08003e44 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e181      	b.n	8004184 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e8e:	d102      	bne.n	8003e96 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e176      	b.n	8004184 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7f5b      	ldrb	r3, [r3, #29]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d108      	bne.n	8003eb2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fad3 	bl	8001458 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ebc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b90      	ldr	r3, [pc, #576]	@ (8004124 <HAL_COMP_Init+0x2c0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	6979      	ldr	r1, [r7, #20]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_COMP_Init+0xc8>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d113      	bne.n	8003f2c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f04:	4b88      	ldr	r3, [pc, #544]	@ (8004128 <HAL_COMP_Init+0x2c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	4a88      	ldr	r2, [pc, #544]	@ (800412c <HAL_COMP_Init+0x2c8>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003f1e:	e002      	b.n	8003f26 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f9      	bne.n	8003f20 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7f      	ldr	r2, [pc, #508]	@ (8004130 <HAL_COMP_Init+0x2cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d028      	beq.n	8003f88 <HAL_COMP_Init+0x124>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_COMP_Init+0x2d0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d020      	beq.n	8003f82 <HAL_COMP_Init+0x11e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7c      	ldr	r2, [pc, #496]	@ (8004138 <HAL_COMP_Init+0x2d4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_COMP_Init+0x118>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a7b      	ldr	r2, [pc, #492]	@ (800413c <HAL_COMP_Init+0x2d8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d010      	beq.n	8003f76 <HAL_COMP_Init+0x112>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a79      	ldr	r2, [pc, #484]	@ (8004140 <HAL_COMP_Init+0x2dc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d008      	beq.n	8003f70 <HAL_COMP_Init+0x10c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a78      	ldr	r2, [pc, #480]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_COMP_Init+0x108>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e00f      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e00d      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f74:	e00a      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f7a:	e007      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f7c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003f80:	e004      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f86:	e001      	b.n	8003f8c <HAL_COMP_Init+0x128>
 8003f88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f8c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80b6 	beq.w	8004108 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a65      	ldr	r2, [pc, #404]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_COMP_Init+0x158>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a64      	ldr	r2, [pc, #400]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d103      	bne.n	8003fc4 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003fbc:	6938      	ldr	r0, [r7, #16]
 8003fbe:	f7ff feab 	bl	8003d18 <LL_EXTI_EnableRisingTrig_32_63>
 8003fc2:	e014      	b.n	8003fee <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003fc4:	6938      	ldr	r0, [r7, #16]
 8003fc6:	f7ff fe95 	bl	8003cf4 <LL_EXTI_EnableRisingTrig_0_31>
 8003fca:	e010      	b.n	8003fee <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_COMP_Init+0x17c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5b      	ldr	r2, [pc, #364]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003fe0:	6938      	ldr	r0, [r7, #16]
 8003fe2:	f7ff febf 	bl	8003d64 <LL_EXTI_DisableRisingTrig_32_63>
 8003fe6:	e002      	b.n	8003fee <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003fe8:	6938      	ldr	r0, [r7, #16]
 8003fea:	f7ff fea7 	bl	8003d3c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a51      	ldr	r2, [pc, #324]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_COMP_Init+0x1aa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4f      	ldr	r2, [pc, #316]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d103      	bne.n	8004016 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800400e:	6938      	ldr	r0, [r7, #16]
 8004010:	f7ff fece 	bl	8003db0 <LL_EXTI_EnableFallingTrig_32_63>
 8004014:	e014      	b.n	8004040 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004016:	6938      	ldr	r0, [r7, #16]
 8004018:	f7ff feb8 	bl	8003d8c <LL_EXTI_EnableFallingTrig_0_31>
 800401c:	e010      	b.n	8004040 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a48      	ldr	r2, [pc, #288]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_COMP_Init+0x1ce>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a46      	ldr	r2, [pc, #280]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d103      	bne.n	800403a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004032:	6938      	ldr	r0, [r7, #16]
 8004034:	f7ff fee2 	bl	8003dfc <LL_EXTI_DisableFallingTrig_32_63>
 8004038:	e002      	b.n	8004040 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800403a:	6938      	ldr	r0, [r7, #16]
 800403c:	f7ff feca 	bl	8003dd4 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_COMP_Init+0x1f0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a3e      	ldr	r2, [pc, #248]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d103      	bne.n	800405c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004054:	6938      	ldr	r0, [r7, #16]
 8004056:	f7ff fef5 	bl	8003e44 <LL_EXTI_ClearFlag_32_63>
 800405a:	e002      	b.n	8004062 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800405c:	6938      	ldr	r0, [r7, #16]
 800405e:	f7ff fee1 	bl	8003e24 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d011      	beq.n	8004092 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a34      	ldr	r2, [pc, #208]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_COMP_Init+0x21e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a32      	ldr	r2, [pc, #200]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d103      	bne.n	800408a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004082:	6938      	ldr	r0, [r7, #16]
 8004084:	f7ff fdfc 	bl	8003c80 <LL_EXTI_EnableEvent_32_63>
 8004088:	e014      	b.n	80040b4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800408a:	6938      	ldr	r0, [r7, #16]
 800408c:	f7ff fde6 	bl	8003c5c <LL_EXTI_EnableEvent_0_31>
 8004090:	e010      	b.n	80040b4 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2b      	ldr	r2, [pc, #172]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_COMP_Init+0x242>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a29      	ldr	r2, [pc, #164]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d103      	bne.n	80040ae <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80040a6:	6938      	ldr	r0, [r7, #16]
 80040a8:	f7ff fe10 	bl	8003ccc <LL_EXTI_DisableEvent_32_63>
 80040ac:	e002      	b.n	80040b4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80040ae:	6938      	ldr	r0, [r7, #16]
 80040b0:	f7ff fdf8 	bl	8003ca4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d011      	beq.n	80040e4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_COMP_Init+0x270>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80040d4:	6938      	ldr	r0, [r7, #16]
 80040d6:	f7ff fd87 	bl	8003be8 <LL_EXTI_EnableIT_32_63>
 80040da:	e04b      	b.n	8004174 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80040dc:	6938      	ldr	r0, [r7, #16]
 80040de:	f7ff fd71 	bl	8003bc4 <LL_EXTI_EnableIT_0_31>
 80040e2:	e047      	b.n	8004174 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_COMP_Init+0x294>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80040f8:	6938      	ldr	r0, [r7, #16]
 80040fa:	f7ff fd9b 	bl	8003c34 <LL_EXTI_DisableIT_32_63>
 80040fe:	e039      	b.n	8004174 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004100:	6938      	ldr	r0, [r7, #16]
 8004102:	f7ff fd83 	bl	8003c0c <LL_EXTI_DisableIT_0_31>
 8004106:	e035      	b.n	8004174 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <HAL_COMP_Init+0x2e0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_COMP_Init+0x2b8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a0c      	ldr	r2, [pc, #48]	@ (8004148 <HAL_COMP_Init+0x2e4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d117      	bne.n	800414c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800411c:	6938      	ldr	r0, [r7, #16]
 800411e:	f7ff fdd5 	bl	8003ccc <LL_EXTI_DisableEvent_32_63>
 8004122:	e016      	b.n	8004152 <HAL_COMP_Init+0x2ee>
 8004124:	ff007e0f 	.word	0xff007e0f
 8004128:	20000000 	.word	0x20000000
 800412c:	053e2d63 	.word	0x053e2d63
 8004130:	40010200 	.word	0x40010200
 8004134:	40010204 	.word	0x40010204
 8004138:	40010208 	.word	0x40010208
 800413c:	4001020c 	.word	0x4001020c
 8004140:	40010210 	.word	0x40010210
 8004144:	40010214 	.word	0x40010214
 8004148:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800414c:	6938      	ldr	r0, [r7, #16]
 800414e:	f7ff fda9 	bl	8003ca4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a0e      	ldr	r2, [pc, #56]	@ (8004190 <HAL_COMP_Init+0x32c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_COMP_Init+0x302>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <HAL_COMP_Init+0x330>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d103      	bne.n	800416e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004166:	6938      	ldr	r0, [r7, #16]
 8004168:	f7ff fd64 	bl	8003c34 <LL_EXTI_DisableIT_32_63>
 800416c:	e002      	b.n	8004174 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800416e:	6938      	ldr	r0, [r7, #16]
 8004170:	f7ff fd4c 	bl	8003c0c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7f5b      	ldrb	r3, [r3, #29]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004184:	7ffb      	ldrb	r3, [r7, #31]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40010214 	.word	0x40010214
 8004194:	40010218 	.word	0x40010218

08004198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <__NVIC_SetPriorityGrouping+0x44>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041b4:	4013      	ands	r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ca:	4a04      	ldr	r2, [pc, #16]	@ (80041dc <__NVIC_SetPriorityGrouping+0x44>)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	60d3      	str	r3, [r2, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e4:	4b04      	ldr	r3, [pc, #16]	@ (80041f8 <__NVIC_GetPriorityGrouping+0x18>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f003 0307 	and.w	r3, r3, #7
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	2b00      	cmp	r3, #0
 800420c:	db0b      	blt.n	8004226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	f003 021f 	and.w	r2, r3, #31
 8004214:	4907      	ldr	r1, [pc, #28]	@ (8004234 <__NVIC_EnableIRQ+0x38>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2001      	movs	r0, #1
 800421e:	fa00 f202 	lsl.w	r2, r0, r2
 8004222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e100 	.word	0xe000e100

08004238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004248:	2b00      	cmp	r3, #0
 800424a:	db0a      	blt.n	8004262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	490c      	ldr	r1, [pc, #48]	@ (8004284 <__NVIC_SetPriority+0x4c>)
 8004252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004256:	0112      	lsls	r2, r2, #4
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	440b      	add	r3, r1
 800425c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004260:	e00a      	b.n	8004278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4908      	ldr	r1, [pc, #32]	@ (8004288 <__NVIC_SetPriority+0x50>)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	3b04      	subs	r3, #4
 8004270:	0112      	lsls	r2, r2, #4
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	440b      	add	r3, r1
 8004276:	761a      	strb	r2, [r3, #24]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000e100 	.word	0xe000e100
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	@ 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f1c3 0307 	rsb	r3, r3, #7
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	bf28      	it	cs
 80042aa:	2304      	movcs	r3, #4
 80042ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d902      	bls.n	80042bc <NVIC_EncodePriority+0x30>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3b03      	subs	r3, #3
 80042ba:	e000      	b.n	80042be <NVIC_EncodePriority+0x32>
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	401a      	ands	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43d9      	mvns	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e4:	4313      	orrs	r3, r2
         );
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3724      	adds	r7, #36	@ 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3b01      	subs	r3, #1
 8004300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004304:	d301      	bcc.n	800430a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004306:	2301      	movs	r3, #1
 8004308:	e00f      	b.n	800432a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800430a:	4a0a      	ldr	r2, [pc, #40]	@ (8004334 <SysTick_Config+0x40>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004312:	210f      	movs	r1, #15
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	f7ff ff8e 	bl	8004238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <SysTick_Config+0x40>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004322:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <SysTick_Config+0x40>)
 8004324:	2207      	movs	r2, #7
 8004326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	e000e010 	.word	0xe000e010

08004338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff29 	bl	8004198 <__NVIC_SetPriorityGrouping>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800435c:	f7ff ff40 	bl	80041e0 <__NVIC_GetPriorityGrouping>
 8004360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7ff ff90 	bl	800428c <NVIC_EncodePriority>
 800436c:	4602      	mov	r2, r0
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff5f 	bl	8004238 <__NVIC_SetPriority>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff33 	bl	80041fc <__NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffa4 	bl	80042f4 <SysTick_Config>
 80043ac:	4603      	mov	r3, r0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e014      	b.n	80043f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fd f8d3 	bl	8001584 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_DAC_ConfigChannel+0x1c>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e1a1      	b.n	8004760 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	795b      	ldrb	r3, [r3, #5]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_DAC_ConfigChannel+0x32>
 800442a:	2302      	movs	r3, #2
 800442c:	e198      	b.n	8004760 <HAL_DAC_ConfigChannel+0x364>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2202      	movs	r2, #2
 8004438:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b04      	cmp	r3, #4
 8004440:	d17a      	bne.n	8004538 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004442:	f7fd fbd5 	bl	8001bf0 <HAL_GetTick>
 8004446:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d13d      	bne.n	80044ca <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800444e:	e018      	b.n	8004482 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004450:	f7fd fbce 	bl	8001bf0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d911      	bls.n	8004482 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f043 0208 	orr.w	r2, r3, #8
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2203      	movs	r2, #3
 800447c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e16e      	b.n	8004760 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1df      	bne.n	8004450 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40
 800449a:	e020      	b.n	80044de <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800449c:	f7fd fba8 	bl	8001bf0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d90f      	bls.n	80044ca <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da0a      	bge.n	80044ca <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f043 0208 	orr.w	r2, r3, #8
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2203      	movs	r2, #3
 80044c4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e14a      	b.n	8004760 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	dbe3      	blt.n	800449c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	ea02 0103 	and.w	r1, r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	21ff      	movs	r1, #255	@ 0xff
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	ea02 0103 	and.w	r1, r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	409a      	lsls	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11d      	bne.n	800457c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	221f      	movs	r2, #31
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	4013      	ands	r3, r2
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	4313      	orrs	r3, r2
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2207      	movs	r2, #7
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004594:	4013      	ands	r3, r2
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	e00f      	b.n	80045c6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d102      	bne.n	80045b4 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80045ae:	2301      	movs	r3, #1
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	e008      	b.n	80045c6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80045bc:	2301      	movs	r3, #1
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	e001      	b.n	80045c6 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	4013      	ands	r3, r2
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	791b      	ldrb	r3, [r3, #4]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <HAL_DAC_ConfigChannel+0x1fe>
 80045f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f8:	e000      	b.n	80045fc <HAL_DAC_ConfigChannel+0x200>
 80045fa:	2300      	movs	r3, #0
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	4013      	ands	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	795b      	ldrb	r3, [r3, #5]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d102      	bne.n	8004626 <HAL_DAC_ConfigChannel+0x22a>
 8004620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004624:	e000      	b.n	8004628 <HAL_DAC_ConfigChannel+0x22c>
 8004626:	2300      	movs	r3, #0
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d114      	bne.n	8004668 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800463e:	f003 fd77 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8004642:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4a48      	ldr	r2, [pc, #288]	@ (8004768 <HAL_DAC_ConfigChannel+0x36c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d904      	bls.n	8004656 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	e00f      	b.n	8004676 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4a44      	ldr	r2, [pc, #272]	@ (800476c <HAL_DAC_ConfigChannel+0x370>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d90a      	bls.n	8004674 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
 8004666:	e006      	b.n	8004676 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466e:	4313      	orrs	r3, r2
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
 8004672:	e000      	b.n	8004676 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004674:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	4313      	orrs	r3, r2
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43da      	mvns	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	400a      	ands	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c8:	4013      	ands	r3, r2
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	4313      	orrs	r3, r2
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	22c0      	movs	r2, #192	@ 0xc0
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43da      	mvns	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	ea02 0103 	and.w	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	409a      	lsls	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800475e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3728      	adds	r7, #40	@ 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	09896800 	.word	0x09896800
 800476c:	04c4b400 	.word	0x04c4b400

08004770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800477e:	e15a      	b.n	8004a36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 814c 	beq.w	8004a30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d005      	beq.n	80047b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d130      	bne.n	8004812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	2203      	movs	r2, #3
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047e6:	2201      	movs	r2, #1
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 0201 	and.w	r2, r3, #1
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d017      	beq.n	800484e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	2203      	movs	r2, #3
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d123      	bne.n	80048a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	08da      	lsrs	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3208      	adds	r2, #8
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	08da      	lsrs	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3208      	adds	r2, #8
 800489c:	6939      	ldr	r1, [r7, #16]
 800489e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2203      	movs	r2, #3
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80a6 	beq.w	8004a30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a54 <HAL_GPIO_Init+0x2e4>)
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a54 <HAL_GPIO_Init+0x2e4>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80048f0:	4b58      	ldr	r3, [pc, #352]	@ (8004a54 <HAL_GPIO_Init+0x2e4>)
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048fc:	4a56      	ldr	r2, [pc, #344]	@ (8004a58 <HAL_GPIO_Init+0x2e8>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	220f      	movs	r2, #15
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004926:	d01f      	beq.n	8004968 <HAL_GPIO_Init+0x1f8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a5c <HAL_GPIO_Init+0x2ec>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d019      	beq.n	8004964 <HAL_GPIO_Init+0x1f4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a4b      	ldr	r2, [pc, #300]	@ (8004a60 <HAL_GPIO_Init+0x2f0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_GPIO_Init+0x1f0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a4a      	ldr	r2, [pc, #296]	@ (8004a64 <HAL_GPIO_Init+0x2f4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00d      	beq.n	800495c <HAL_GPIO_Init+0x1ec>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a49      	ldr	r2, [pc, #292]	@ (8004a68 <HAL_GPIO_Init+0x2f8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <HAL_GPIO_Init+0x1e8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a48      	ldr	r2, [pc, #288]	@ (8004a6c <HAL_GPIO_Init+0x2fc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_GPIO_Init+0x1e4>
 8004950:	2305      	movs	r3, #5
 8004952:	e00a      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 8004954:	2306      	movs	r3, #6
 8004956:	e008      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 8004958:	2304      	movs	r3, #4
 800495a:	e006      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 800495c:	2303      	movs	r3, #3
 800495e:	e004      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 8004960:	2302      	movs	r3, #2
 8004962:	e002      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_GPIO_Init+0x1fa>
 8004968:	2300      	movs	r3, #0
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	f002 0203 	and.w	r2, r2, #3
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	4093      	lsls	r3, r2
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800497a:	4937      	ldr	r1, [pc, #220]	@ (8004a58 <HAL_GPIO_Init+0x2e8>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004988:	4b39      	ldr	r3, [pc, #228]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ac:	4a30      	ldr	r2, [pc, #192]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049d6:	4a26      	ldr	r2, [pc, #152]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80049dc:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a00:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a06:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a2a:	4a11      	ldr	r2, [pc, #68]	@ (8004a70 <HAL_GPIO_Init+0x300>)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3301      	adds	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f ae9d 	bne.w	8004780 <HAL_GPIO_Init+0x10>
  }
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	48000400 	.word	0x48000400
 8004a60:	48000800 	.word	0x48000800
 8004a64:	48000c00 	.word	0x48000c00
 8004a68:	48001000 	.word	0x48001000
 8004a6c:	48001400 	.word	0x48001400
 8004a70:	40010400 	.word	0x40010400

08004a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	e001      	b.n	8004a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab4:	787b      	ldrb	r3, [r7, #1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ac0:	e002      	b.n	8004ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aea:	4a05      	ldr	r2, [pc, #20]	@ (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f806 	bl	8004b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0be      	b.n	8004cac <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02e      	beq.n	8004bd8 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4d      	ldr	r2, [pc, #308]	@ (8004cb4 <HAL_HRTIM_Init+0x198>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10b      	bne.n	8004b9c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004b84:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb8 <HAL_HRTIM_Init+0x19c>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b88:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb8 <HAL_HRTIM_Init+0x19c>)
 8004b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b90:	4b49      	ldr	r3, [pc, #292]	@ (8004cb8 <HAL_HRTIM_Init+0x19c>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004baa:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004bc0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fc fd1b 	bl	8001614 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d012      	beq.n	8004c10 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004c20:	2300      	movs	r3, #0
 8004c22:	75fb      	strb	r3, [r7, #23]
 8004c24:	e03e      	b.n	8004ca4 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004c26:	7dfa      	ldrb	r2, [r7, #23]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3318      	adds	r3, #24
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004c3a:	7dfa      	ldrb	r2, [r7, #23]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	331c      	adds	r3, #28
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004c4e:	7dfa      	ldrb	r2, [r7, #23]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004c62:	7dfa      	ldrb	r2, [r7, #23]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3324      	adds	r3, #36	@ 0x24
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004c76:	7dfa      	ldrb	r2, [r7, #23]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	3328      	adds	r3, #40	@ 0x28
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004c8a:	7dfa      	ldrb	r2, [r7, #23]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3330      	adds	r3, #48	@ 0x30
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d9bd      	bls.n	8004c26 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40016800 	.word	0x40016800
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e045      	b.n	8004d60 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d114      	bne.n	8004d16 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0202 	bic.w	r2, r2, #2
 8004cfc:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004d14:	e01f      	b.n	8004d56 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0202 	orr.w	r2, r2, #2
 8004d26:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004d32:	f023 010c 	bic.w	r1, r3, #12
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004d76:	f7fc ff3b 	bl	8001bf0 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004d7c:	e014      	b.n	8004da8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d010      	beq.n	8004da8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fc ff33 	bl	8001bf0 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d105      	bne.n	8004da8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2207      	movs	r2, #7
 8004da0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e011      	b.n	8004dcc <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8004db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db8:	d1e1      	bne.n	8004d7e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d101      	bne.n	8004df0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
 8004dee:	e015      	b.n	8004e1c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d104      	bne.n	8004e08 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa19 	bl	8005238 <HRTIM_MasterBase_Config>
 8004e06:	e004      	b.n	8004e12 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fa42 	bl	8005296 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d101      	bne.n	8004e40 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e07a      	b.n	8004f36 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e073      	b.n	8004f36 <HAL_HRTIM_WaveformTimerConfig+0x112>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d104      	bne.n	8004e6e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa55 	bl	8005316 <HRTIM_MasterWaveform_Config>
 8004e6c:	e004      	b.n	8004e78 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 faec 	bl	8005450 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4403      	add	r3, r0
 8004e8a:	3320      	adds	r3, #32
 8004e8c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4403      	add	r3, r0
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4403      	add	r3, r0
 8004eb6:	3328      	adds	r3, #40	@ 0x28
 8004eb8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4403      	add	r3, r0
 8004ecc:	332c      	adds	r3, #44	@ 0x2c
 8004ece:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6919      	ldr	r1, [r3, #16]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4403      	add	r3, r0
 8004ee2:	3330      	adds	r3, #48	@ 0x30
 8004ee4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fd7f 	bl	80059ec <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d017      	beq.n	8004f24 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d113      	bne.n	8004f24 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	3301      	adds	r3, #1
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f12:	025b      	lsls	r3, r3, #9
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	6809      	ldr	r1, [r1, #0]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	440b      	add	r3, r1
 8004f22:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d101      	bne.n	8004f5a <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
 8004f58:	e020      	b.n	8004f9c <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e019      	b.n	8004f9c <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fbed 	bl	800575c <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fd31 	bl	80059ec <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e01d      	b.n	8004ffe <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e016      	b.n	8004ffe <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fc18 	bl	800581c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2bff      	cmp	r3, #255	@ 0xff
 8005014:	d103      	bne.n	800501e <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fd56 	bl	8005ac8 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800501c:	e00a      	b.n	8005034 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b06      	cmp	r3, #6
 8005022:	d103      	bne.n	800502c <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fddf 	bl	8005be8 <HRTIM_Master_ISR>
}
 800502a:	e003      	b.n	8005034 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fe9f 	bl	8005d72 <HRTIM_Timer_ISR>
}
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0307 	bic.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0318 	bic.w	r3, r3, #24
 8005262:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	6852      	ldr	r2, [r2, #4]
 8005288:	619a      	str	r2, [r3, #24]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3301      	adds	r3, #1
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0318 	bic.w	r3, r3, #24
 80052ca:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3301      	adds	r3, #1
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	4413      	add	r3, r2
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	440b      	add	r3, r1
 80052f4:	3394      	adds	r3, #148	@ 0x94
 80052f6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6819      	ldr	r1, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	01db      	lsls	r3, r3, #7
 8005304:	440b      	add	r3, r1
 8005306:	3398      	adds	r3, #152	@ 0x98
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005330:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f023 0320 	bic.w	r3, r3, #32
 8005338:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800534a:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b20      	cmp	r3, #32
 8005352:	d003      	beq.n	800535c <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d108      	bne.n	800536e <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005362:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f043 0320 	orr.w	r3, r3, #32
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e021      	b.n	80053b2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d108      	bne.n	8005388 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800537c:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e014      	b.n	80053b2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d108      	bne.n	80053a2 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005396:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e007      	b.n	80053b2 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0320 	bic.w	r3, r3, #32
 80053a8:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053b8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ca:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80053dc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80053ee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005400:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005414:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005426:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	4313      	orrs	r3, r2
 8005430:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005450:	b480      	push	{r7}
 8005452:	b08b      	sub	sp, #44	@ 0x2c
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	3301      	adds	r3, #1
 8005464:	01db      	lsls	r3, r3, #7
 8005466:	4413      	add	r3, r2
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3301      	adds	r3, #1
 8005476:	01db      	lsls	r3, r3, #7
 8005478:	440b      	add	r3, r1
 800547a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	3301      	adds	r3, #1
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	01db      	lsls	r3, r3, #7
 8005494:	4413      	add	r3, r2
 8005496:	33e8      	adds	r3, #232	@ 0xe8
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	01db      	lsls	r3, r3, #7
 80054a4:	4413      	add	r3, r2
 80054a6:	33e4      	adds	r3, #228	@ 0xe4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80054b4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	f023 0320 	bic.w	r3, r3, #32
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c4:	4313      	orrs	r3, r2
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d003      	beq.n	80054d8 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d108      	bne.n	80054ea <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e8:	e021      	b.n	800552e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d108      	bne.n	8005504 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
 8005502:	e014      	b.n	800552e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d108      	bne.n	800551e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
 800551c:	e007      	b.n	800552e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	f023 0320 	bic.w	r3, r3, #32
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	4313      	orrs	r3, r2
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	4313      	orrs	r3, r2
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005560:	4313      	orrs	r3, r2
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	4313      	orrs	r3, r2
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005584:	4313      	orrs	r3, r2
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005598:	d103      	bne.n	80055a2 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	4313      	orrs	r3, r2
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c2:	4313      	orrs	r3, r2
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d8:	4313      	orrs	r3, r2
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055e2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055f8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	4313      	orrs	r3, r2
 8005614:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800561e:	d004      	beq.n	800562a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005624:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8005628:	d103      	bne.n	8005632 <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	d108      	bne.n	8005644 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8005638:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	4313      	orrs	r3, r2
 8005642:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	4313      	orrs	r3, r2
 8005654:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d850      	bhi.n	8005704 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8005662:	a201      	add	r2, pc, #4	@ (adr r2, 8005668 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	08005681 	.word	0x08005681
 800566c:	08005697 	.word	0x08005697
 8005670:	080056ad 	.word	0x080056ad
 8005674:	080056c3 	.word	0x080056c3
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056ef 	.word	0x080056ef
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005686:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	4313      	orrs	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]
      break;
 8005694:	e037      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61fb      	str	r3, [r7, #28]
      break;
 80056aa:	e02c      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80056b2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]
      break;
 80056c0:	e021      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056c8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]
      break;
 80056d6:	e016      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056de:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61fb      	str	r3, [r7, #28]
      break;
 80056ec:	e00b      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80056f4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	019b      	lsls	r3, r3, #6
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61fb      	str	r3, [r7, #28]
      break;
 8005702:	e000      	b.n	8005706 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8005704:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	3301      	adds	r3, #1
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	4413      	add	r3, r2
 8005712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005714:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	01db      	lsls	r3, r3, #7
 800571e:	4413      	add	r3, r2
 8005720:	33e8      	adds	r3, #232	@ 0xe8
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	01db      	lsls	r3, r3, #7
 800572e:	4413      	add	r3, r2
 8005730:	33e4      	adds	r3, #228	@ 0xe4
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	01db      	lsls	r3, r3, #7
 800573e:	4413      	add	r3, r2
 8005740:	33d4      	adds	r3, #212	@ 0xd4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005750:	bf00      	nop
 8005752:	372c      	adds	r7, #44	@ 0x2c
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	01db      	lsls	r3, r3, #7
 8005770:	4413      	add	r3, r2
 8005772:	33ec      	adds	r3, #236	@ 0xec
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005792:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a4:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057b6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d11a      	bne.n	8005800 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0302 	bic.w	r3, r3, #2
 80057e2:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	01db      	lsls	r3, r3, #7
 8005808:	4413      	add	r3, r2
 800580a:	33ec      	adds	r3, #236	@ 0xec
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	601a      	str	r2, [r3, #0]

}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	@ 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	01db      	lsls	r3, r3, #7
 8005836:	4413      	add	r3, r2
 8005838:	33e4      	adds	r3, #228	@ 0xe4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	01db      	lsls	r3, r3, #7
 8005846:	4413      	add	r3, r2
 8005848:	33b8      	adds	r3, #184	@ 0xb8
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005854:	d05d      	beq.n	8005912 <HRTIM_OutputConfig+0xf6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d86e      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005864:	d042      	beq.n	80058ec <HRTIM_OutputConfig+0xd0>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586c:	d866      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005874:	d04d      	beq.n	8005912 <HRTIM_OutputConfig+0xf6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800587c:	d85e      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005884:	d032      	beq.n	80058ec <HRTIM_OutputConfig+0xd0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800588c:	d856      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b80      	cmp	r3, #128	@ 0x80
 8005892:	d03e      	beq.n	8005912 <HRTIM_OutputConfig+0xf6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b80      	cmp	r3, #128	@ 0x80
 8005898:	d850      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d025      	beq.n	80058ec <HRTIM_OutputConfig+0xd0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d84a      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d01f      	beq.n	80058ec <HRTIM_OutputConfig+0xd0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d044      	beq.n	800593c <HRTIM_OutputConfig+0x120>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d841      	bhi.n	800593c <HRTIM_OutputConfig+0x120>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d33e      	bcc.n	800593c <HRTIM_OutputConfig+0x120>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3b02      	subs	r3, #2
 80058c2:	2201      	movs	r2, #1
 80058c4:	409a      	lsls	r2, r3
 80058c6:	4b48      	ldr	r3, [pc, #288]	@ (80059e8 <HRTIM_OutputConfig+0x1cc>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11c      	bne.n	8005912 <HRTIM_OutputConfig+0xf6>
 80058d8:	f244 0304 	movw	r3, #16388	@ 0x4004
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d027      	beq.n	800593c <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	01db      	lsls	r3, r3, #7
 80058f8:	440b      	add	r3, r1
 80058fa:	33bc      	adds	r3, #188	@ 0xbc
 80058fc:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	01db      	lsls	r3, r3, #7
 800590a:	440b      	add	r3, r1
 800590c:	33c0      	adds	r3, #192	@ 0xc0
 800590e:	601a      	str	r2, [r3, #0]
      break;
 8005910:	e015      	b.n	800593e <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6819      	ldr	r1, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	01db      	lsls	r3, r3, #7
 800591e:	440b      	add	r3, r1
 8005920:	33c4      	adds	r3, #196	@ 0xc4
 8005922:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6819      	ldr	r1, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	440b      	add	r3, r1
 8005932:	33c8      	adds	r3, #200	@ 0xc8
 8005934:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005936:	2310      	movs	r3, #16
 8005938:	61bb      	str	r3, [r7, #24]
      break;
 800593a:	e000      	b.n	800593e <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 800593c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800593e:	22fe      	movs	r2, #254	@ 0xfe
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005946:	43db      	mvns	r3, r3
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	4013      	ands	r3, r2
 800594c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	4313      	orrs	r3, r2
 800595c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	4313      	orrs	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	4313      	orrs	r3, r2
 800598c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	4313      	orrs	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d111      	bne.n	80059ca <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10c      	bne.n	80059ca <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	69da      	ldr	r2, [r3, #28]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	01db      	lsls	r3, r3, #7
 80059d2:	4413      	add	r3, r2
 80059d4:	33e4      	adds	r3, #228	@ 0xe4
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	601a      	str	r2, [r3, #0]
}
 80059da:	bf00      	nop
 80059dc:	3724      	adds	r7, #36	@ 0x24
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40000041 	.word	0x40000041

080059ec <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d85e      	bhi.n	8005aba <HRTIM_ForceRegistersUpdate+0xce>
 80059fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <HRTIM_ForceRegistersUpdate+0x18>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a37 	.word	0x08005a37
 8005a08:	08005a4d 	.word	0x08005a4d
 8005a0c:	08005a63 	.word	0x08005a63
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	08005a8f 	.word	0x08005a8f
 8005a18:	08005aa5 	.word	0x08005aa5
 8005a1c:	08005a21 	.word	0x08005a21
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a34:	e042      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0202 	orr.w	r2, r2, #2
 8005a46:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a4a:	e037      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0204 	orr.w	r2, r2, #4
 8005a5c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a60:	e02c      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a76:	e021      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0210 	orr.w	r2, r2, #16
 8005a88:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a8c:	e016      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0220 	orr.w	r2, r2, #32
 8005a9e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005aa2:	e00b      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ab4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005ab8:	e000      	b.n	8005abc <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8005aba:	bf00      	nop
  }
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fa9a 	bl	800503c <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fa92 	bl	8005050 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2204      	movs	r2, #4
 8005b46:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fa8a 	bl	8005064 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00c      	beq.n	8005b74 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fa82 	bl	8005078 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2210      	movs	r2, #16
 8005b8e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fa7a 	bl	800508c <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2240      	movs	r2, #64	@ 0x40
 8005bb2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fa72 	bl	80050a0 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00c      	beq.n	8005be0 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fa6a 	bl	80050b4 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005c02:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d015      	beq.n	8005c4a <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c30:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fa3f 	bl	80050c8 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00d      	beq.n	8005c70 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c66:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fa36 	bl	80050dc <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005c8c:	2106      	movs	r1, #6
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff fa4e 	bl	8005130 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2202      	movs	r2, #2
 8005cae:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005cb0:	2106      	movs	r1, #6
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fa47 	bl	8005146 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005cd4:	2106      	movs	r1, #6
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff fa40 	bl	800515c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005cf8:	2106      	movs	r1, #6
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fa39 	bl	8005172 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005d1c:	2106      	movs	r1, #6
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff f9fb 	bl	800511a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f9d5 	bl	80050f0 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00c      	beq.n	8005d6a <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2240      	movs	r2, #64	@ 0x40
 8005d60:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005d62:	2106      	movs	r1, #6
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff f9cd 	bl	8005104 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	01db      	lsls	r3, r3, #7
 8005d86:	4413      	add	r3, r2
 8005d88:	3304      	adds	r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	01db      	lsls	r3, r3, #7
 8005d96:	4413      	add	r3, r2
 8005d98:	338c      	adds	r3, #140	@ 0x8c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d010      	beq.n	8005dca <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	01db      	lsls	r3, r3, #7
 8005dba:	4413      	add	r3, r2
 8005dbc:	3388      	adds	r3, #136	@ 0x88
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff f9b3 	bl	8005130 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	01db      	lsls	r3, r3, #7
 8005de6:	4413      	add	r3, r2
 8005de8:	3388      	adds	r3, #136	@ 0x88
 8005dea:	2202      	movs	r2, #2
 8005dec:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff f9a8 	bl	8005146 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	01db      	lsls	r3, r3, #7
 8005e12:	4413      	add	r3, r2
 8005e14:	3388      	adds	r3, #136	@ 0x88
 8005e16:	2204      	movs	r2, #4
 8005e18:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f99d 	bl	800515c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	01db      	lsls	r3, r3, #7
 8005e3e:	4413      	add	r3, r2
 8005e40:	3388      	adds	r3, #136	@ 0x88
 8005e42:	2208      	movs	r2, #8
 8005e44:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff f992 	bl	8005172 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3388      	adds	r3, #136	@ 0x88
 8005e6e:	2210      	movs	r2, #16
 8005e70:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f950 	bl	800511a <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	01db      	lsls	r3, r3, #7
 8005e96:	4413      	add	r3, r2
 8005e98:	3388      	adds	r3, #136	@ 0x88
 8005e9a:	2240      	movs	r2, #64	@ 0x40
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff f92f 	bl	8005104 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d010      	beq.n	8005ed2 <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	01db      	lsls	r3, r3, #7
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3388      	adds	r3, #136	@ 0x88
 8005ec6:	2280      	movs	r2, #128	@ 0x80
 8005ec8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f95b 	bl	8005188 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d011      	beq.n	8005f00 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	4413      	add	r3, r2
 8005ef0:	3388      	adds	r3, #136	@ 0x88
 8005ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff f94f 	bl	800519e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	01db      	lsls	r3, r3, #7
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3388      	adds	r3, #136	@ 0x88
 8005f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f24:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff f959 	bl	80051e0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00c      	beq.n	8005f5c <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	01db      	lsls	r3, r3, #7
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3388      	adds	r3, #136	@ 0x88
 8005f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f52:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff f94d 	bl	80051f6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d011      	beq.n	8005f8a <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	4413      	add	r3, r2
 8005f7a:	3388      	adds	r3, #136	@ 0x88
 8005f7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f80:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff f941 	bl	800520c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	01db      	lsls	r3, r3, #7
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3388      	adds	r3, #136	@ 0x88
 8005faa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fae:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff f935 	bl	8005222 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d011      	beq.n	8005fe6 <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	01db      	lsls	r3, r3, #7
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3388      	adds	r3, #136	@ 0x88
 8005fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fdc:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f8f2 	bl	80051ca <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d011      	beq.n	8006014 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	01db      	lsls	r3, r3, #7
 8006002:	4413      	add	r3, r2
 8006004:	3388      	adds	r3, #136	@ 0x88
 8006006:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800600a:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff f8d0 	bl	80051b4 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e0c0      	b.n	80061b0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb fc4c 	bl	80018e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2203      	movs	r2, #3
 800604c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f004 fb98 	bl	800a78a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	e03e      	b.n	80060de <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	3311      	adds	r3, #17
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	440b      	add	r3, r1
 8006082:	3310      	adds	r3, #16
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006088:	7bfa      	ldrb	r2, [r7, #15]
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	440b      	add	r3, r1
 8006096:	3313      	adds	r3, #19
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3320      	adds	r3, #32
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060b0:	7bfa      	ldrb	r2, [r7, #15]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3324      	adds	r3, #36	@ 0x24
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	3301      	adds	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d3bb      	bcc.n	8006060 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e044      	b.n	8006178 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	440b      	add	r3, r1
 8006112:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	440b      	add	r3, r1
 8006128:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	440b      	add	r3, r1
 8006154:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	440b      	add	r3, r1
 800616a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	3301      	adds	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	429a      	cmp	r2, r3
 8006180:	d3b5      	bcc.n	80060ee <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800618e:	f004 fb17 	bl	800a7c0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7a9b      	ldrb	r3, [r3, #10]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d102      	bne.n	80061ae <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fa26 	bl	80075fa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f005 f8dc 	bl	800b382 <USB_ReadInterrupts>
 80061ca:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f983 	bl	80064e2 <PCD_EP_ISR_Handler>

    return;
 80061dc:	e110      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d013      	beq.n	8006210 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fa:	b292      	uxth	r2, r2
 80061fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f92c 	bl	800645e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f946 	bl	800649a <HAL_PCD_SetAddress>

    return;
 800620e:	e0f7      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800622c:	b292      	uxth	r2, r2
 800622e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006232:	e0e5      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006250:	b292      	uxth	r2, r2
 8006252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006256:	e0d3      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d034      	beq.n	80062cc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0204 	bic.w	r2, r2, #4
 8006274:	b292      	uxth	r2, r2
 8006276:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0208 	bic.w	r2, r2, #8
 800628c:	b292      	uxth	r2, r2
 800628e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 f9d1 	bl	800764e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8ea 	bl	8006486 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062c4:	b292      	uxth	r2, r2
 80062c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80062ca:	e099      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d027      	beq.n	8006326 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0208 	orr.w	r2, r2, #8
 80062e8:	b292      	uxth	r2, r2
 80062ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006300:	b292      	uxth	r2, r2
 8006302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0204 	orr.w	r2, r2, #4
 8006318:	b292      	uxth	r2, r2
 800631a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8a7 	bl	8006472 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006324:	e06c      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632c:	2b00      	cmp	r3, #0
 800632e:	d040      	beq.n	80063b2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006342:	b292      	uxth	r2, r2
 8006344:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d12b      	bne.n	80063aa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800635a:	b29a      	uxth	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0204 	orr.w	r2, r2, #4
 8006364:	b292      	uxth	r2, r2
 8006366:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0208 	orr.w	r2, r2, #8
 800637c:	b292      	uxth	r2, r2
 800637e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006392:	b29b      	uxth	r3, r3
 8006394:	089b      	lsrs	r3, r3, #2
 8006396:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80063a0:	2101      	movs	r1, #1
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 f953 	bl	800764e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80063a8:	e02a      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f861 	bl	8006472 <HAL_PCD_SuspendCallback>
    return;
 80063b0:	e026      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80063ce:	b292      	uxth	r2, r2
 80063d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f838 	bl	800644a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80063da:	e011      	b.n	8006400 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00c      	beq.n	8006400 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063f8:	b292      	uxth	r2, r2
 80063fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80063fe:	bf00      	nop
  }
}
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_PCD_SetAddress+0x1a>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e012      	b.n	80064da <HAL_PCD_SetAddress+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f004 ff45 	bl	800b35a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b092      	sub	sp, #72	@ 0x48
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80064ea:	e333      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064f4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80064f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006502:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8108 	bne.w	800671c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800650c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d14c      	bne.n	80065b0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	813b      	strh	r3, [r7, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	893b      	ldrh	r3, [r7, #8]
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3310      	adds	r3, #16
 800653e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	4413      	add	r3, r2
 800655a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006566:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	441a      	add	r2, r3
 8006572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006574:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff50 	bl	800641e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7b1b      	ldrb	r3, [r3, #12]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 82e5 	beq.w	8006b54 <PCD_EP_ISR_Handler+0x672>
 800658a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 82e0 	bne.w	8006b54 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7b1b      	ldrb	r3, [r3, #12]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	731a      	strb	r2, [r3, #12]
 80065ae:	e2d1      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065b6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80065c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d032      	beq.n	8006630 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80065fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006602:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006604:	b29b      	uxth	r3, r3
 8006606:	f004 ff0f 	bl	800b428 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29a      	uxth	r2, r3
 8006612:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006616:	4013      	ands	r3, r2
 8006618:	817b      	strh	r3, [r7, #10]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	897a      	ldrh	r2, [r7, #10]
 8006620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006624:	b292      	uxth	r2, r2
 8006626:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff04 	bl	8006436 <HAL_PCD_SetupStageCallback>
 800662e:	e291      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006630:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006634:	2b00      	cmp	r3, #0
 8006636:	f280 828d 	bge.w	8006b54 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29a      	uxth	r2, r3
 8006642:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006646:	4013      	ands	r3, r2
 8006648:	81fb      	strh	r3, [r7, #14]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	89fa      	ldrh	r2, [r7, #14]
 8006650:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006654:	b292      	uxth	r2, r2
 8006656:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	4413      	add	r3, r2
 8006672:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800667c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800667e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d019      	beq.n	80066bc <PCD_EP_ISR_Handler+0x1da>
 8006688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006696:	6959      	ldr	r1, [r3, #20]
 8006698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800669c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f004 fec1 	bl	800b428 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80066a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	441a      	add	r2, r3
 80066b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80066b4:	2100      	movs	r1, #0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fea5 	bl	8006406 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80066c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8242 	bne.w	8006b54 <PCD_EP_ISR_Handler+0x672>
 80066d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80066d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066da:	f000 823b 	beq.w	8006b54 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	81bb      	strh	r3, [r7, #12]
 80066f0:	89bb      	ldrh	r3, [r7, #12]
 80066f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066f6:	81bb      	strh	r3, [r7, #12]
 80066f8:	89bb      	ldrh	r3, [r7, #12]
 80066fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066fe:	81bb      	strh	r3, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	89bb      	ldrh	r3, [r7, #12]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	e21b      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800672e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006732:	2b00      	cmp	r3, #0
 8006734:	f280 80f1 	bge.w	800691a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29a      	uxth	r2, r3
 800674a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800674e:	4013      	ands	r3, r2
 8006750:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006762:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006766:	b292      	uxth	r2, r2
 8006768:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800676a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006782:	7b1b      	ldrb	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d123      	bne.n	80067d0 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4413      	add	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	4413      	add	r3, r2
 80067a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80067b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 808b 	beq.w	80068d0 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c0:	6959      	ldr	r1, [r3, #20]
 80067c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c4:	88da      	ldrh	r2, [r3, #6]
 80067c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067ca:	f004 fe2d 	bl	800b428 <USB_ReadPMA>
 80067ce:	e07f      	b.n	80068d0 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80067d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d109      	bne.n	80067ec <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80067d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067da:	461a      	mov	r2, r3
 80067dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9c6 	bl	8006b70 <HAL_PCD_EP_DB_Receive>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80067ea:	e071      	b.n	80068d0 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006806:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006824:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d022      	beq.n	800688c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4413      	add	r3, r2
 8006860:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800686a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800686e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006872:	2b00      	cmp	r3, #0
 8006874:	d02c      	beq.n	80068d0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687c:	6959      	ldr	r1, [r3, #20]
 800687e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006880:	891a      	ldrh	r2, [r3, #8]
 8006882:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006886:	f004 fdcf 	bl	800b428 <USB_ReadPMA>
 800688a:	e021      	b.n	80068d0 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006894:	b29b      	uxth	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80068b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c2:	6959      	ldr	r1, [r3, #20]
 80068c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c6:	895a      	ldrh	r2, [r3, #10]
 80068c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068cc:	f004 fdac 	bl	800b428 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80068d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068d8:	441a      	add	r2, r3
 80068da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80068de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068e6:	441a      	add	r2, r3
 80068e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80068ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <PCD_EP_ISR_Handler+0x41e>
 80068f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80068f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d206      	bcs.n	800690e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fd7d 	bl	8006406 <HAL_PCD_DataOutStageCallback>
 800690c:	e005      	b.n	800691a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006914:	4618      	mov	r0, r3
 8006916:	f003 ff71 	bl	800a7fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800691a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800691c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8117 	beq.w	8006b54 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006926:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	3310      	adds	r3, #16
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	4413      	add	r3, r2
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006954:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006974:	78db      	ldrb	r3, [r3, #3]
 8006976:	2b01      	cmp	r3, #1
 8006978:	f040 80a1 	bne.w	8006abe <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800697c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697e:	2200      	movs	r2, #0
 8006980:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006984:	7b1b      	ldrb	r3, [r3, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8092 	beq.w	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800698c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d046      	beq.n	8006a24 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d126      	bne.n	80069ec <PCD_EP_ISR_Handler+0x50a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4413      	add	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	00da      	lsls	r2, r3, #3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e061      	b.n	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
 80069ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d15d      	bne.n	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	00da      	lsls	r2, r3, #3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e045      	b.n	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d126      	bne.n	8006a80 <PCD_EP_ISR_Handler+0x59e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	4413      	add	r3, r2
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	00da      	lsls	r2, r3, #3
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e017      	b.n	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
 8006a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d113      	bne.n	8006ab0 <PCD_EP_ISR_Handler+0x5ce>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	4413      	add	r3, r2
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	00da      	lsls	r2, r3, #3
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	2200      	movs	r2, #0
 8006aae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fcb1 	bl	800641e <HAL_PCD_DataInStageCallback>
 8006abc:	e04a      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006abe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d13f      	bne.n	8006b48 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aec:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d906      	bls.n	8006b06 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	619a      	str	r2, [r3, #24]
 8006b04:	e002      	b.n	8006b0c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	2200      	movs	r2, #0
 8006b0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fc7f 	bl	800641e <HAL_PCD_DataInStageCallback>
 8006b20:	e018      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006b28:	441a      	add	r2, r3
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006b34:	441a      	add	r2, r3
 8006b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b38:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b40:	4618      	mov	r0, r3
 8006b42:	f003 fe5b 	bl	800a7fc <USB_EPStartXfer>
 8006b46:	e005      	b.n	8006b54 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006b48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f917 	bl	8006d82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f6ff acc3 	blt.w	80064ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3748      	adds	r7, #72	@ 0x48
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d07c      	beq.n	8006c82 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	8b7b      	ldrh	r3, [r7, #26]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d306      	bcc.n	8006bc6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	8b7b      	ldrh	r3, [r7, #26]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	619a      	str	r2, [r3, #24]
 8006bc4:	e002      	b.n	8006bcc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d123      	bne.n	8006c1c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	833b      	strh	r3, [r7, #24]
 8006bf0:	8b3b      	ldrh	r3, [r7, #24]
 8006bf2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bf6:	833b      	strh	r3, [r7, #24]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	8b3b      	ldrh	r3, [r7, #24]
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01f      	beq.n	8006c66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c40:	82fb      	strh	r3, [r7, #22]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	8afb      	ldrh	r3, [r7, #22]
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c66:	8b7b      	ldrh	r3, [r7, #26]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8085 	beq.w	8006d78 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	891a      	ldrh	r2, [r3, #8]
 8006c7a:	8b7b      	ldrh	r3, [r7, #26]
 8006c7c:	f004 fbd4 	bl	800b428 <USB_ReadPMA>
 8006c80:	e07a      	b.n	8006d78 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	4413      	add	r3, r2
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ca6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	8b7b      	ldrh	r3, [r7, #26]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d306      	bcc.n	8006cc0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	8b7b      	ldrh	r3, [r7, #26]
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	619a      	str	r2, [r3, #24]
 8006cbe:	e002      	b.n	8006cc6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d123      	bne.n	8006d16 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce8:	83fb      	strh	r3, [r7, #30]
 8006cea:	8bfb      	ldrh	r3, [r7, #30]
 8006cec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006cf0:	83fb      	strh	r3, [r7, #30]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8bfb      	ldrh	r3, [r7, #30]
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11f      	bne.n	8006d60 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	83bb      	strh	r3, [r7, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8bbb      	ldrh	r3, [r7, #28]
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006d60:	8b7b      	ldrh	r3, [r7, #26]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6959      	ldr	r1, [r3, #20]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	895a      	ldrh	r2, [r3, #10]
 8006d72:	8b7b      	ldrh	r3, [r7, #26]
 8006d74:	f004 fb58 	bl	800b428 <USB_ReadPMA>
    }
  }

  return count;
 8006d78:	8b7b      	ldrh	r3, [r7, #26]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b0a6      	sub	sp, #152	@ 0x98
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 81f7 	beq.w	800718a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	4413      	add	r3, r2
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d907      	bls.n	8006de0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dd8:	1ad2      	subs	r2, r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	619a      	str	r2, [r3, #24]
 8006dde:	e002      	b.n	8006de6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 80e1 	bne.w	8006fb2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d126      	bne.n	8006e46 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	4413      	add	r3, r2
 8006e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	00da      	lsls	r2, r3, #3
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e01a      	b.n	8006e7c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d116      	bne.n	8006e7c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	4413      	add	r3, r2
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	00da      	lsls	r2, r3, #3
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e78:	2200      	movs	r2, #0
 8006e7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d126      	bne.n	8006ed8 <HAL_PCD_EP_DB_Transmit+0x156>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	623b      	str	r3, [r7, #32]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	623b      	str	r3, [r7, #32]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	00da      	lsls	r2, r3, #3
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e017      	b.n	8006f08 <HAL_PCD_EP_DB_Transmit+0x186>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d113      	bne.n	8006f08 <HAL_PCD_EP_DB_Transmit+0x186>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	4413      	add	r3, r2
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	00da      	lsls	r2, r3, #3
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	2200      	movs	r2, #0
 8006f06:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	78db      	ldrb	r3, [r3, #3]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d123      	bne.n	8006f58 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2a:	837b      	strh	r3, [r7, #26]
 8006f2c:	8b7b      	ldrh	r3, [r7, #26]
 8006f2e:	f083 0320 	eor.w	r3, r3, #32
 8006f32:	837b      	strh	r3, [r7, #26]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	8b7b      	ldrh	r3, [r7, #26]
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff fa5d 	bl	800641e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01f      	beq.n	8006fae <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f88:	833b      	strh	r3, [r7, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	8b3b      	ldrh	r3, [r7, #24]
 8006f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e31f      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d021      	beq.n	8007000 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007006:	2b01      	cmp	r3, #1
 8007008:	f040 82ca 	bne.w	80075a0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	695a      	ldr	r2, [r3, #20]
 8007010:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007014:	441a      	add	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007022:	441a      	add	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d309      	bcc.n	8007048 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007040:	1ad2      	subs	r2, r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	621a      	str	r2, [r3, #32]
 8007046:	e015      	b.n	8007074 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007050:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007054:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800705e:	e009      	b.n	8007074 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15f      	bne.n	800713c <HAL_PCD_EP_DB_Transmit+0x3ba>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	643b      	str	r3, [r7, #64]	@ 0x40
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708a:	b29b      	uxth	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007090:	4413      	add	r3, r2
 8007092:	643b      	str	r3, [r7, #64]	@ 0x40
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	00da      	lsls	r2, r3, #3
 800709a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800709c:	4413      	add	r3, r2
 800709e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x34e>
 80070ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e051      	b.n	8007174 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80070d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80070d4:	d816      	bhi.n	8007104 <HAL_PCD_EP_DB_Transmit+0x382>
 80070d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	653b      	str	r3, [r7, #80]	@ 0x50
 80070dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_PCD_EP_DB_Transmit+0x36a>
 80070e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e8:	3301      	adds	r3, #1
 80070ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	029b      	lsls	r3, r3, #10
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e037      	b.n	8007174 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	653b      	str	r3, [r7, #80]	@ 0x50
 800710a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <HAL_PCD_EP_DB_Transmit+0x398>
 8007114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007116:	3b01      	subs	r3, #1
 8007118:	653b      	str	r3, [r7, #80]	@ 0x50
 800711a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007122:	b29b      	uxth	r3, r3
 8007124:	029b      	lsls	r3, r3, #10
 8007126:	b29b      	uxth	r3, r3
 8007128:	4313      	orrs	r3, r2
 800712a:	b29b      	uxth	r3, r3
 800712c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007134:	b29a      	uxth	r2, r3
 8007136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	e01b      	b.n	8007174 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d117      	bne.n	8007174 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007158:	4413      	add	r3, r2
 800715a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007164:	4413      	add	r3, r2
 8007166:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800716a:	647b      	str	r3, [r7, #68]	@ 0x44
 800716c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800716e:	b29a      	uxth	r2, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007172:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6959      	ldr	r1, [r3, #20]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	891a      	ldrh	r2, [r3, #8]
 8007180:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007182:	b29b      	uxth	r3, r3
 8007184:	f004 f90d 	bl	800b3a2 <USB_WritePMA>
 8007188:	e20a      	b.n	80075a0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d307      	bcc.n	80071ce <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	619a      	str	r2, [r3, #24]
 80071cc:	e002      	b.n	80071d4 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2200      	movs	r2, #0
 80071d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 80f6 	bne.w	80073ca <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d126      	bne.n	8007234 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071fa:	4413      	add	r3, r2
 80071fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	00da      	lsls	r2, r3, #3
 8007204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007206:	4413      	add	r3, r2
 8007208:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800720c:	673b      	str	r3, [r7, #112]	@ 0x70
 800720e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007218:	b29a      	uxth	r2, r3
 800721a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722c:	b29a      	uxth	r2, r3
 800722e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	e01a      	b.n	800726a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d116      	bne.n	800726a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007250:	4413      	add	r3, r2
 8007252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	00da      	lsls	r2, r3, #3
 800725a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800725c:	4413      	add	r3, r2
 800725e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007266:	2200      	movs	r2, #0
 8007268:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d12f      	bne.n	80072da <HAL_PCD_EP_DB_Transmit+0x558>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007292:	4413      	add	r3, r2
 8007294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	00da      	lsls	r2, r3, #3
 800729e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a2:	4413      	add	r3, r2
 80072a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e01c      	b.n	8007314 <HAL_PCD_EP_DB_Transmit+0x592>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d118      	bne.n	8007314 <HAL_PCD_EP_DB_Transmit+0x592>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072f2:	4413      	add	r3, r2
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	00da      	lsls	r2, r3, #3
 80072fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007302:	4413      	add	r3, r2
 8007304:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800730c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007310:	2200      	movs	r2, #0
 8007312:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	78db      	ldrb	r3, [r3, #3]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d127      	bne.n	800736c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007336:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800733a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800733e:	f083 0320 	eor.w	r3, r3, #32
 8007342:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	441a      	add	r2, r3
 8007354:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800735c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007368:	b29b      	uxth	r3, r3
 800736a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff f853 	bl	800641e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d121      	bne.n	80073c6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800739c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e113      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d121      	bne.n	8007418 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800740c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800741e:	2b01      	cmp	r3, #1
 8007420:	f040 80be 	bne.w	80075a0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800742c:	441a      	add	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	69da      	ldr	r2, [r3, #28]
 8007436:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800743a:	441a      	add	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d309      	bcc.n	8007460 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	621a      	str	r2, [r3, #32]
 800745e:	e015      	b.n	800748c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8007468:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800746c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007476:	e009      	b.n	800748c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d15f      	bne.n	800755a <HAL_PCD_EP_DB_Transmit+0x7d8>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ae:	4413      	add	r3, r2
 80074b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	00da      	lsls	r2, r3, #3
 80074b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ba:	4413      	add	r3, r2
 80074bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80074c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <HAL_PCD_EP_DB_Transmit+0x76c>
 80074d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	e04e      	b.n	800758c <HAL_PCD_EP_DB_Transmit+0x80a>
 80074ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f2:	d816      	bhi.n	8007522 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80074f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80074fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_PCD_EP_DB_Transmit+0x788>
 8007504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007506:	3301      	adds	r3, #1
 8007508:	663b      	str	r3, [r7, #96]	@ 0x60
 800750a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007512:	b29b      	uxth	r3, r3
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	b29b      	uxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e034      	b.n	800758c <HAL_PCD_EP_DB_Transmit+0x80a>
 8007522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	663b      	str	r3, [r7, #96]	@ 0x60
 8007528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007534:	3b01      	subs	r3, #1
 8007536:	663b      	str	r3, [r7, #96]	@ 0x60
 8007538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29a      	uxth	r2, r3
 800753e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007540:	b29b      	uxth	r3, r3
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007552:	b29a      	uxth	r2, r3
 8007554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e018      	b.n	800758c <HAL_PCD_EP_DB_Transmit+0x80a>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d114      	bne.n	800758c <HAL_PCD_EP_DB_Transmit+0x80a>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007570:	4413      	add	r3, r2
 8007572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	00da      	lsls	r2, r3, #3
 800757a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800757c:	4413      	add	r3, r2
 800757e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007586:	b29a      	uxth	r2, r3
 8007588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800758a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6959      	ldr	r1, [r3, #20]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	895a      	ldrh	r2, [r3, #10]
 8007598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800759a:	b29b      	uxth	r3, r3
 800759c:	f003 ff01 	bl	800b3a2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ba:	82fb      	strh	r3, [r7, #22]
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	f083 0310 	eor.w	r3, r3, #16
 80075c2:	82fb      	strh	r3, [r7, #22]
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	f083 0320 	eor.w	r3, r3, #32
 80075ca:	82fb      	strh	r3, [r7, #22]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	8afb      	ldrh	r3, [r7, #22]
 80075dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3798      	adds	r7, #152	@ 0x98
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800761e:	b29b      	uxth	r3, r3
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007632:	b29b      	uxth	r3, r3
 8007634:	f043 0302 	orr.w	r3, r3, #2
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d141      	bne.n	80076fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007676:	4b4b      	ldr	r3, [pc, #300]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007682:	d131      	bne.n	80076e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007684:	4b47      	ldr	r3, [pc, #284]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768a:	4a46      	ldr	r2, [pc, #280]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800768c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007690:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007694:	4b43      	ldr	r3, [pc, #268]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800769c:	4a41      	ldr	r2, [pc, #260]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800769e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076a4:	4b40      	ldr	r3, [pc, #256]	@ (80077a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2232      	movs	r2, #50	@ 0x32
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	4a3f      	ldr	r2, [pc, #252]	@ (80077ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076b0:	fba2 2303 	umull	r2, r3, r2, r3
 80076b4:	0c9b      	lsrs	r3, r3, #18
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076ba:	e002      	b.n	80076c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3b01      	subs	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076c2:	4b38      	ldr	r3, [pc, #224]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ce:	d102      	bne.n	80076d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f2      	bne.n	80076bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076d6:	4b33      	ldr	r3, [pc, #204]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e2:	d158      	bne.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e057      	b.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076e8:	4b2e      	ldr	r3, [pc, #184]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ee:	4a2d      	ldr	r2, [pc, #180]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80076f8:	e04d      	b.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007700:	d141      	bne.n	8007786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007702:	4b28      	ldr	r3, [pc, #160]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800770a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770e:	d131      	bne.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007710:	4b24      	ldr	r3, [pc, #144]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007716:	4a23      	ldr	r2, [pc, #140]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800771c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007720:	4b20      	ldr	r3, [pc, #128]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007728:	4a1e      	ldr	r2, [pc, #120]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800772a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800772e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2232      	movs	r2, #50	@ 0x32
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	4a1c      	ldr	r2, [pc, #112]	@ (80077ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	0c9b      	lsrs	r3, r3, #18
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007746:	e002      	b.n	800774e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3b01      	subs	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800775a:	d102      	bne.n	8007762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f2      	bne.n	8007748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776e:	d112      	bne.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e011      	b.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007774:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800777a:	4a0a      	ldr	r2, [pc, #40]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800777c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007784:	e007      	b.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007786:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800778e:	4a05      	ldr	r2, [pc, #20]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007794:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40007000 	.word	0x40007000
 80077a8:	20000000 	.word	0x20000000
 80077ac:	431bde83 	.word	0x431bde83

080077b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80077b4:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4a04      	ldr	r2, [pc, #16]	@ (80077cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077be:	6093      	str	r3, [r2, #8]
}
 80077c0:	bf00      	nop
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40007000 	.word	0x40007000

080077d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e2fe      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d075      	beq.n	80078da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ee:	4b97      	ldr	r3, [pc, #604]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 030c 	and.w	r3, r3, #12
 80077f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077f8:	4b94      	ldr	r3, [pc, #592]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b0c      	cmp	r3, #12
 8007806:	d102      	bne.n	800780e <HAL_RCC_OscConfig+0x3e>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b03      	cmp	r3, #3
 800780c:	d002      	beq.n	8007814 <HAL_RCC_OscConfig+0x44>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d10b      	bne.n	800782c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007814:	4b8d      	ldr	r3, [pc, #564]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05b      	beq.n	80078d8 <HAL_RCC_OscConfig+0x108>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d157      	bne.n	80078d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e2d9      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d106      	bne.n	8007844 <HAL_RCC_OscConfig+0x74>
 8007836:	4b85      	ldr	r3, [pc, #532]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a84      	ldr	r2, [pc, #528]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800783c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e01d      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800784c:	d10c      	bne.n	8007868 <HAL_RCC_OscConfig+0x98>
 800784e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a7e      	ldr	r2, [pc, #504]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	4b7c      	ldr	r3, [pc, #496]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a7b      	ldr	r2, [pc, #492]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e00b      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007868:	4b78      	ldr	r3, [pc, #480]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a77      	ldr	r2, [pc, #476]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800786e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4b75      	ldr	r3, [pc, #468]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a74      	ldr	r2, [pc, #464]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800787a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800787e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fa f9b2 	bl	8001bf0 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007890:	f7fa f9ae 	bl	8001bf0 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b64      	cmp	r3, #100	@ 0x64
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e29e      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a2:	4b6a      	ldr	r3, [pc, #424]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0xc0>
 80078ae:	e014      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b0:	f7fa f99e 	bl	8001bf0 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078b8:	f7fa f99a 	bl	8001bf0 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b64      	cmp	r3, #100	@ 0x64
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e28a      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078ca:	4b60      	ldr	r3, [pc, #384]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0xe8>
 80078d6:	e000      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d075      	beq.n	80079d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	4b59      	ldr	r3, [pc, #356]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078f0:	4b56      	ldr	r3, [pc, #344]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d102      	bne.n	8007906 <HAL_RCC_OscConfig+0x136>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d002      	beq.n	800790c <HAL_RCC_OscConfig+0x13c>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d11f      	bne.n	800794c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	4b4f      	ldr	r3, [pc, #316]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_OscConfig+0x154>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e25d      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007924:	4b49      	ldr	r3, [pc, #292]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	4946      	ldr	r1, [pc, #280]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007938:	4b45      	ldr	r3, [pc, #276]	@ (8007a50 <HAL_RCC_OscConfig+0x280>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f7fa f90b 	bl	8001b58 <HAL_InitTick>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d043      	beq.n	80079d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e249      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d023      	beq.n	800799c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007954:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3c      	ldr	r2, [pc, #240]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800795a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800795e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fa f946 	bl	8001bf0 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007968:	f7fa f942 	bl	8001bf0 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e232      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800797a:	4b34      	ldr	r3, [pc, #208]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007986:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	061b      	lsls	r3, r3, #24
 8007994:	492d      	ldr	r1, [pc, #180]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007996:	4313      	orrs	r3, r2
 8007998:	604b      	str	r3, [r1, #4]
 800799a:	e01a      	b.n	80079d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800799c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a8:	f7fa f922 	bl	8001bf0 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b0:	f7fa f91e 	bl	8001bf0 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e20e      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079c2:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f0      	bne.n	80079b0 <HAL_RCC_OscConfig+0x1e0>
 80079ce:	e000      	b.n	80079d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d041      	beq.n	8007a62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01c      	beq.n	8007a20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079e6:	4b19      	ldr	r3, [pc, #100]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ec:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fa f8fb 	bl	8001bf0 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079fe:	f7fa f8f7 	bl	8001bf0 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e1e7      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a10:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0ef      	beq.n	80079fe <HAL_RCC_OscConfig+0x22e>
 8007a1e:	e020      	b.n	8007a62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a20:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a30:	f7fa f8de 	bl	8001bf0 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a36:	e00d      	b.n	8007a54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a38:	f7fa f8da 	bl	8001bf0 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d906      	bls.n	8007a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e1ca      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
 8007a4a:	bf00      	nop
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a54:	4b8c      	ldr	r3, [pc, #560]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1ea      	bne.n	8007a38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a6 	beq.w	8007bbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a74:	4b84      	ldr	r3, [pc, #528]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_RCC_OscConfig+0x2b4>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_RCC_OscConfig+0x2b6>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a96:	4b7c      	ldr	r3, [pc, #496]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aa6:	4b79      	ldr	r3, [pc, #484]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d118      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ab2:	4b76      	ldr	r3, [pc, #472]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a75      	ldr	r2, [pc, #468]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007abe:	f7fa f897 	bl	8001bf0 <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac6:	f7fa f893 	bl	8001bf0 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e183      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d108      	bne.n	8007afe <HAL_RCC_OscConfig+0x32e>
 8007aec:	4b66      	ldr	r3, [pc, #408]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	4a65      	ldr	r2, [pc, #404]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007afc:	e024      	b.n	8007b48 <HAL_RCC_OscConfig+0x378>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d110      	bne.n	8007b28 <HAL_RCC_OscConfig+0x358>
 8007b06:	4b60      	ldr	r3, [pc, #384]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b0e:	f043 0304 	orr.w	r3, r3, #4
 8007b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b16:	4b5c      	ldr	r3, [pc, #368]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b26:	e00f      	b.n	8007b48 <HAL_RCC_OscConfig+0x378>
 8007b28:	4b57      	ldr	r3, [pc, #348]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2e:	4a56      	ldr	r2, [pc, #344]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b38:	4b53      	ldr	r3, [pc, #332]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	4a52      	ldr	r2, [pc, #328]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b40:	f023 0304 	bic.w	r3, r3, #4
 8007b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d016      	beq.n	8007b7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b50:	f7fa f84e 	bl	8001bf0 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b58:	f7fa f84a 	bl	8001bf0 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e138      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b6e:	4b46      	ldr	r3, [pc, #280]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0ed      	beq.n	8007b58 <HAL_RCC_OscConfig+0x388>
 8007b7c:	e015      	b.n	8007baa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fa f837 	bl	8001bf0 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b84:	e00a      	b.n	8007b9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b86:	f7fa f833 	bl	8001bf0 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e121      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1ed      	bne.n	8007b86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007baa:	7ffb      	ldrb	r3, [r7, #31]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d105      	bne.n	8007bbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb0:	4b35      	ldr	r3, [pc, #212]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb4:	4a34      	ldr	r2, [pc, #208]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d03c      	beq.n	8007c42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01c      	beq.n	8007c0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be0:	f7fa f806 	bl	8001bf0 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be8:	f7fa f802 	bl	8001bf0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e0f2      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bfa:	4b23      	ldr	r3, [pc, #140]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0ef      	beq.n	8007be8 <HAL_RCC_OscConfig+0x418>
 8007c08:	e01b      	b.n	8007c42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c10:	4a1d      	ldr	r2, [pc, #116]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1a:	f7f9 ffe9 	bl	8001bf0 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c20:	e008      	b.n	8007c34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c22:	f7f9 ffe5 	bl	8001bf0 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e0d5      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c34:	4b14      	ldr	r3, [pc, #80]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1ef      	bne.n	8007c22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80c9 	beq.w	8007dde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	f000 8083 	beq.w	8007d60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d15e      	bne.n	8007d20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c62:	4b09      	ldr	r3, [pc, #36]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a08      	ldr	r2, [pc, #32]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6e:	f7f9 ffbf 	bl	8001bf0 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c74:	e00c      	b.n	8007c90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c76:	f7f9 ffbb 	bl	8001bf0 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d905      	bls.n	8007c90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e0ab      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c90:	4b55      	ldr	r3, [pc, #340]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ec      	bne.n	8007c76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c9c:	4b52      	ldr	r3, [pc, #328]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	4b52      	ldr	r3, [pc, #328]	@ (8007dec <HAL_RCC_OscConfig+0x61c>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6a11      	ldr	r1, [r2, #32]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cac:	3a01      	subs	r2, #1
 8007cae:	0112      	lsls	r2, r2, #4
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007cb6:	0212      	lsls	r2, r2, #8
 8007cb8:	4311      	orrs	r1, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007cbe:	0852      	lsrs	r2, r2, #1
 8007cc0:	3a01      	subs	r2, #1
 8007cc2:	0552      	lsls	r2, r2, #21
 8007cc4:	4311      	orrs	r1, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007cca:	0852      	lsrs	r2, r2, #1
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	0652      	lsls	r2, r2, #25
 8007cd0:	4311      	orrs	r1, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cd6:	06d2      	lsls	r2, r2, #27
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	4943      	ldr	r1, [pc, #268]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ce0:	4b41      	ldr	r3, [pc, #260]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a40      	ldr	r2, [pc, #256]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cec:	4b3e      	ldr	r3, [pc, #248]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7f9 ff7a 	bl	8001bf0 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d00:	f7f9 ff76 	bl	8001bf0 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e066      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d12:	4b35      	ldr	r3, [pc, #212]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x530>
 8007d1e:	e05e      	b.n	8007dde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d20:	4b31      	ldr	r3, [pc, #196]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a30      	ldr	r2, [pc, #192]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7f9 ff60 	bl	8001bf0 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d34:	f7f9 ff5c 	bl	8001bf0 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e04c      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d46:	4b28      	ldr	r3, [pc, #160]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007d52:	4b25      	ldr	r3, [pc, #148]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	4924      	ldr	r1, [pc, #144]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d58:	4b25      	ldr	r3, [pc, #148]	@ (8007df0 <HAL_RCC_OscConfig+0x620>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	60cb      	str	r3, [r1, #12]
 8007d5e:	e03e      	b.n	8007dde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e039      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f003 0203 	and.w	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d12c      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d123      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d11b      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d113      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d109      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d001      	beq.n	8007dde <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40021000 	.word	0x40021000
 8007dec:	019f800c 	.word	0x019f800c
 8007df0:	feeefffc 	.word	0xfeeefffc

08007df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e11e      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e0c:	4b91      	ldr	r3, [pc, #580]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d910      	bls.n	8007e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 020f 	bic.w	r2, r3, #15
 8007e22:	498c      	ldr	r1, [pc, #560]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e106      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d073      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d129      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e50:	4b81      	ldr	r3, [pc, #516]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0f4      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007e60:	f000 f99e 	bl	80081a0 <RCC_GetSysClockFreqFromPLLSource>
 8007e64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4a7c      	ldr	r2, [pc, #496]	@ (800805c <HAL_RCC_ClockConfig+0x268>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d93f      	bls.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d033      	beq.n	8007eee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d12f      	bne.n	8007eee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e8e:	4b72      	ldr	r3, [pc, #456]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e96:	4a70      	ldr	r2, [pc, #448]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007e9e:	2380      	movs	r3, #128	@ 0x80
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e024      	b.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eac:	4b6a      	ldr	r3, [pc, #424]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d109      	bne.n	8007ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0c6      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ebc:	4b66      	ldr	r3, [pc, #408]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0be      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ecc:	f000 f8ce 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4a61      	ldr	r2, [pc, #388]	@ (800805c <HAL_RCC_ClockConfig+0x268>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d909      	bls.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007eda:	4b5f      	ldr	r3, [pc, #380]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007eea:	2380      	movs	r3, #128	@ 0x80
 8007eec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eee:	4b5a      	ldr	r3, [pc, #360]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4957      	ldr	r1, [pc, #348]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f00:	f7f9 fe76 	bl	8001bf0 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f08:	f7f9 fe72 	bl	8001bf0 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e095      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 020c 	and.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1eb      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d023      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f48:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4a42      	ldr	r2, [pc, #264]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f60:	4b3d      	ldr	r3, [pc, #244]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f68:	4a3b      	ldr	r2, [pc, #236]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f70:	4b39      	ldr	r3, [pc, #228]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4936      	ldr	r1, [pc, #216]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	608b      	str	r3, [r1, #8]
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d105      	bne.n	8007f96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007f8a:	4b33      	ldr	r3, [pc, #204]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	4a32      	ldr	r2, [pc, #200]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f96:	4b2f      	ldr	r3, [pc, #188]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d21d      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f023 020f 	bic.w	r2, r3, #15
 8007fac:	4929      	ldr	r1, [pc, #164]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007fb4:	f7f9 fe1c 	bl	8001bf0 <HAL_GetTick>
 8007fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fbc:	f7f9 fe18 	bl	8001bf0 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e03b      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd2:	4b20      	ldr	r3, [pc, #128]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1ed      	bne.n	8007fbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fec:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4917      	ldr	r1, [pc, #92]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800800a:	4b13      	ldr	r3, [pc, #76]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	490f      	ldr	r1, [pc, #60]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 800801a:	4313      	orrs	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800801e:	f000 f825 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8008022:	4602      	mov	r2, r0
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	490c      	ldr	r1, [pc, #48]	@ (8008060 <HAL_RCC_ClockConfig+0x26c>)
 8008030:	5ccb      	ldrb	r3, [r1, r3]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	4a0a      	ldr	r2, [pc, #40]	@ (8008064 <HAL_RCC_ClockConfig+0x270>)
 800803c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800803e:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <HAL_RCC_ClockConfig+0x274>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 fd88 	bl	8001b58 <HAL_InitTick>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40022000 	.word	0x40022000
 8008058:	40021000 	.word	0x40021000
 800805c:	04c4b400 	.word	0x04c4b400
 8008060:	0800be58 	.word	0x0800be58
 8008064:	20000000 	.word	0x20000000
 8008068:	20000004 	.word	0x20000004

0800806c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008072:	4b2c      	ldr	r3, [pc, #176]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 030c 	and.w	r3, r3, #12
 800807a:	2b04      	cmp	r3, #4
 800807c:	d102      	bne.n	8008084 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800807e:	4b2a      	ldr	r3, [pc, #168]	@ (8008128 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	e047      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008084:	4b27      	ldr	r3, [pc, #156]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b08      	cmp	r3, #8
 800808e:	d102      	bne.n	8008096 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008090:	4b26      	ldr	r3, [pc, #152]	@ (800812c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e03e      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008096:	4b23      	ldr	r3, [pc, #140]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 030c 	and.w	r3, r3, #12
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d136      	bne.n	8008110 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080a2:	4b20      	ldr	r3, [pc, #128]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	3301      	adds	r3, #1
 80080b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d10c      	bne.n	80080da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080c0:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_RCC_GetSysClockFreq+0xc0>)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c8:	4a16      	ldr	r2, [pc, #88]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ca:	68d2      	ldr	r2, [r2, #12]
 80080cc:	0a12      	lsrs	r2, r2, #8
 80080ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	617b      	str	r3, [r7, #20]
      break;
 80080d8:	e00c      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080da:	4a13      	ldr	r2, [pc, #76]	@ (8008128 <HAL_RCC_GetSysClockFreq+0xbc>)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	4a10      	ldr	r2, [pc, #64]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080e4:	68d2      	ldr	r2, [r2, #12]
 80080e6:	0a12      	lsrs	r2, r2, #8
 80080e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080ec:	fb02 f303 	mul.w	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]
      break;
 80080f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	0e5b      	lsrs	r3, r3, #25
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	3301      	adds	r3, #1
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	e001      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008114:	693b      	ldr	r3, [r7, #16]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	00f42400 	.word	0x00f42400
 800812c:	007a1200 	.word	0x007a1200

08008130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008134:	4b03      	ldr	r3, [pc, #12]	@ (8008144 <HAL_RCC_GetHCLKFreq+0x14>)
 8008136:	681b      	ldr	r3, [r3, #0]
}
 8008138:	4618      	mov	r0, r3
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000000 	.word	0x20000000

08008148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800814c:	f7ff fff0 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b06      	ldr	r3, [pc, #24]	@ (800816c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4904      	ldr	r1, [pc, #16]	@ (8008170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008168:	4618      	mov	r0, r3
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40021000 	.word	0x40021000
 8008170:	0800be68 	.word	0x0800be68

08008174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008178:	f7ff ffda 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 800817c:	4602      	mov	r2, r0
 800817e:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0adb      	lsrs	r3, r3, #11
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	4904      	ldr	r1, [pc, #16]	@ (800819c <HAL_RCC_GetPCLK2Freq+0x28>)
 800818a:	5ccb      	ldrb	r3, [r1, r3]
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008194:	4618      	mov	r0, r3
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000
 800819c:	0800be68 	.word	0x0800be68

080081a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d10c      	bne.n	80081de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081c4:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081cc:	4a14      	ldr	r2, [pc, #80]	@ (8008220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081ce:	68d2      	ldr	r2, [r2, #12]
 80081d0:	0a12      	lsrs	r2, r2, #8
 80081d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	617b      	str	r3, [r7, #20]
    break;
 80081dc:	e00c      	b.n	80081f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081de:	4a12      	ldr	r2, [pc, #72]	@ (8008228 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081e8:	68d2      	ldr	r2, [r2, #12]
 80081ea:	0a12      	lsrs	r2, r2, #8
 80081ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
 80081f4:	617b      	str	r3, [r7, #20]
    break;
 80081f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081f8:	4b09      	ldr	r3, [pc, #36]	@ (8008220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	0e5b      	lsrs	r3, r3, #25
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	3301      	adds	r3, #1
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008210:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008212:	687b      	ldr	r3, [r7, #4]
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	40021000 	.word	0x40021000
 8008224:	007a1200 	.word	0x007a1200
 8008228:	00f42400 	.word	0x00f42400

0800822c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008234:	2300      	movs	r3, #0
 8008236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008238:	2300      	movs	r3, #0
 800823a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8098 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800824a:	2300      	movs	r3, #0
 800824c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800824e:	4b43      	ldr	r3, [pc, #268]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10d      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800825a:	4b40      	ldr	r3, [pc, #256]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825e:	4a3f      	ldr	r2, [pc, #252]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008264:	6593      	str	r3, [r2, #88]	@ 0x58
 8008266:	4b3d      	ldr	r3, [pc, #244]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800826e:	60bb      	str	r3, [r7, #8]
 8008270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008272:	2301      	movs	r3, #1
 8008274:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008276:	4b3a      	ldr	r3, [pc, #232]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a39      	ldr	r2, [pc, #228]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800827c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008280:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008282:	f7f9 fcb5 	bl	8001bf0 <HAL_GetTick>
 8008286:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008288:	e009      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828a:	f7f9 fcb1 	bl	8001bf0 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d902      	bls.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	74fb      	strb	r3, [r7, #19]
        break;
 800829c:	e005      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800829e:	4b30      	ldr	r3, [pc, #192]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0ef      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80082aa:	7cfb      	ldrb	r3, [r7, #19]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d159      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082b0:	4b2a      	ldr	r3, [pc, #168]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01e      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d019      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082cc:	4b23      	ldr	r3, [pc, #140]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082d8:	4b20      	ldr	r3, [pc, #128]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082de:	4a1f      	ldr	r2, [pc, #124]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082e8:	4b1c      	ldr	r3, [pc, #112]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ee:	4a1b      	ldr	r2, [pc, #108]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082f8:	4a18      	ldr	r2, [pc, #96]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830a:	f7f9 fc71 	bl	8001bf0 <HAL_GetTick>
 800830e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008310:	e00b      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008312:	f7f9 fc6d 	bl	8001bf0 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008320:	4293      	cmp	r3, r2
 8008322:	d902      	bls.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	74fb      	strb	r3, [r7, #19]
            break;
 8008328:	e006      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800832a:	4b0c      	ldr	r3, [pc, #48]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0ec      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800833e:	4b07      	ldr	r3, [pc, #28]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800834c:	4903      	ldr	r1, [pc, #12]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800834e:	4313      	orrs	r3, r2
 8008350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008354:	e008      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008356:	7cfb      	ldrb	r3, [r7, #19]
 8008358:	74bb      	strb	r3, [r7, #18]
 800835a:	e005      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800835c:	40021000 	.word	0x40021000
 8008360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	7cfb      	ldrb	r3, [r7, #19]
 8008366:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008368:	7c7b      	ldrb	r3, [r7, #17]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d105      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800836e:	4ba7      	ldr	r3, [pc, #668]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008372:	4aa6      	ldr	r2, [pc, #664]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008378:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008386:	4ba1      	ldr	r3, [pc, #644]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838c:	f023 0203 	bic.w	r2, r3, #3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	499d      	ldr	r1, [pc, #628]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083a8:	4b98      	ldr	r3, [pc, #608]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ae:	f023 020c 	bic.w	r2, r3, #12
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4995      	ldr	r1, [pc, #596]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083ca:	4b90      	ldr	r3, [pc, #576]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	498c      	ldr	r1, [pc, #560]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083ec:	4b87      	ldr	r3, [pc, #540]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	4984      	ldr	r1, [pc, #528]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800840e:	4b7f      	ldr	r3, [pc, #508]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008414:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	497b      	ldr	r1, [pc, #492]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008430:	4b76      	ldr	r3, [pc, #472]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008436:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	4973      	ldr	r1, [pc, #460]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008452:	4b6e      	ldr	r3, [pc, #440]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008458:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	496a      	ldr	r1, [pc, #424]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008462:	4313      	orrs	r3, r2
 8008464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008474:	4b65      	ldr	r3, [pc, #404]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800847a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4962      	ldr	r1, [pc, #392]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008484:	4313      	orrs	r3, r2
 8008486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008496:	4b5d      	ldr	r3, [pc, #372]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	4959      	ldr	r1, [pc, #356]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084b8:	4b54      	ldr	r3, [pc, #336]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084be:	f023 0203 	bic.w	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	4951      	ldr	r1, [pc, #324]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084da:	4b4c      	ldr	r3, [pc, #304]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	4948      	ldr	r1, [pc, #288]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d015      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084fc:	4b43      	ldr	r3, [pc, #268]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850a:	4940      	ldr	r1, [pc, #256]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800850c:	4313      	orrs	r3, r2
 800850e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851a:	d105      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800851c:	4b3b      	ldr	r3, [pc, #236]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	4a3a      	ldr	r2, [pc, #232]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008526:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008530:	2b00      	cmp	r3, #0
 8008532:	d015      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008534:	4b35      	ldr	r3, [pc, #212]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008542:	4932      	ldr	r1, [pc, #200]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800854e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008552:	d105      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008554:	4b2d      	ldr	r3, [pc, #180]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4a2c      	ldr	r2, [pc, #176]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800855a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800855e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800856c:	4b27      	ldr	r3, [pc, #156]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857a:	4924      	ldr	r1, [pc, #144]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800858a:	d105      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800858c:	4b1f      	ldr	r3, [pc, #124]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	4a1e      	ldr	r2, [pc, #120]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008596:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d015      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085a4:	4b19      	ldr	r3, [pc, #100]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	4916      	ldr	r1, [pc, #88]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c2:	d105      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085c4:	4b11      	ldr	r3, [pc, #68]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4a10      	ldr	r2, [pc, #64]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d019      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	4908      	ldr	r1, [pc, #32]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fa:	d109      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085fc:	4b03      	ldr	r3, [pc, #12]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4a02      	ldr	r2, [pc, #8]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008606:	60d3      	str	r3, [r2, #12]
 8008608:	e002      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d015      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800861c:	4b29      	ldr	r3, [pc, #164]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008622:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862a:	4926      	ldr	r1, [pc, #152]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800862c:	4313      	orrs	r3, r2
 800862e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800863a:	d105      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800863c:	4b21      	ldr	r3, [pc, #132]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4a20      	ldr	r2, [pc, #128]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008646:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d015      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008654:	4b1b      	ldr	r3, [pc, #108]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008662:	4918      	ldr	r1, [pc, #96]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008672:	d105      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008674:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	4a12      	ldr	r2, [pc, #72]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800867a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800867e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d015      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800868c:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800868e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869a:	490a      	ldr	r1, [pc, #40]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086aa:	d105      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	4a04      	ldr	r2, [pc, #16]	@ (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80086b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80086b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40021000 	.word	0x40021000

080086c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e049      	b.n	800876e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7f9 f844 	bl	800177c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f000 fa5c 	bl	8008bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_TIM_PWM_Start+0x24>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	e03c      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d109      	bne.n	80087b6 <HAL_TIM_PWM_Start+0x3e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	e02f      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d109      	bne.n	80087d0 <HAL_TIM_PWM_Start+0x58>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e022      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b0c      	cmp	r3, #12
 80087d4:	d109      	bne.n	80087ea <HAL_TIM_PWM_Start+0x72>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	bf14      	ite	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	2300      	moveq	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	e015      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d109      	bne.n	8008804 <HAL_TIM_PWM_Start+0x8c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e008      	b.n	8008816 <HAL_TIM_PWM_Start+0x9e>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	bf14      	ite	ne
 8008810:	2301      	movne	r3, #1
 8008812:	2300      	moveq	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e0a6      	b.n	800896c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <HAL_TIM_PWM_Start+0xb6>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800882c:	e023      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b04      	cmp	r3, #4
 8008832:	d104      	bne.n	800883e <HAL_TIM_PWM_Start+0xc6>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800883c:	e01b      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b08      	cmp	r3, #8
 8008842:	d104      	bne.n	800884e <HAL_TIM_PWM_Start+0xd6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800884c:	e013      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d104      	bne.n	800885e <HAL_TIM_PWM_Start+0xe6>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800885c:	e00b      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b10      	cmp	r3, #16
 8008862:	d104      	bne.n	800886e <HAL_TIM_PWM_Start+0xf6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800886c:	e003      	b.n	8008876 <HAL_TIM_PWM_Start+0xfe>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fd7e 	bl	8009380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a3a      	ldr	r2, [pc, #232]	@ (8008974 <HAL_TIM_PWM_Start+0x1fc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d018      	beq.n	80088c0 <HAL_TIM_PWM_Start+0x148>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a39      	ldr	r2, [pc, #228]	@ (8008978 <HAL_TIM_PWM_Start+0x200>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <HAL_TIM_PWM_Start+0x148>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a37      	ldr	r2, [pc, #220]	@ (800897c <HAL_TIM_PWM_Start+0x204>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00e      	beq.n	80088c0 <HAL_TIM_PWM_Start+0x148>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a36      	ldr	r2, [pc, #216]	@ (8008980 <HAL_TIM_PWM_Start+0x208>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d009      	beq.n	80088c0 <HAL_TIM_PWM_Start+0x148>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a34      	ldr	r2, [pc, #208]	@ (8008984 <HAL_TIM_PWM_Start+0x20c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d004      	beq.n	80088c0 <HAL_TIM_PWM_Start+0x148>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a33      	ldr	r2, [pc, #204]	@ (8008988 <HAL_TIM_PWM_Start+0x210>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d101      	bne.n	80088c4 <HAL_TIM_PWM_Start+0x14c>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <HAL_TIM_PWM_Start+0x14e>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a25      	ldr	r2, [pc, #148]	@ (8008974 <HAL_TIM_PWM_Start+0x1fc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ec:	d01d      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a26      	ldr	r2, [pc, #152]	@ (800898c <HAL_TIM_PWM_Start+0x214>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a24      	ldr	r2, [pc, #144]	@ (8008990 <HAL_TIM_PWM_Start+0x218>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a23      	ldr	r2, [pc, #140]	@ (8008994 <HAL_TIM_PWM_Start+0x21c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a19      	ldr	r2, [pc, #100]	@ (8008978 <HAL_TIM_PWM_Start+0x200>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a18      	ldr	r2, [pc, #96]	@ (800897c <HAL_TIM_PWM_Start+0x204>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_TIM_PWM_Start+0x1b2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a18      	ldr	r2, [pc, #96]	@ (8008988 <HAL_TIM_PWM_Start+0x210>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d115      	bne.n	8008956 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	4b19      	ldr	r3, [pc, #100]	@ (8008998 <HAL_TIM_PWM_Start+0x220>)
 8008932:	4013      	ands	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b06      	cmp	r3, #6
 800893a:	d015      	beq.n	8008968 <HAL_TIM_PWM_Start+0x1f0>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008942:	d011      	beq.n	8008968 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008954:	e008      	b.n	8008968 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0201 	orr.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e000      	b.n	800896a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008968:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40012c00 	.word	0x40012c00
 8008978:	40013400 	.word	0x40013400
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400
 8008984:	40014800 	.word	0x40014800
 8008988:	40015000 	.word	0x40015000
 800898c:	40000400 	.word	0x40000400
 8008990:	40000800 	.word	0x40000800
 8008994:	40000c00 	.word	0x40000c00
 8008998:	00010007 	.word	0x00010007

0800899c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e0ff      	b.n	8008bba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b14      	cmp	r3, #20
 80089c6:	f200 80f0 	bhi.w	8008baa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089ca:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	08008a25 	.word	0x08008a25
 80089d4:	08008bab 	.word	0x08008bab
 80089d8:	08008bab 	.word	0x08008bab
 80089dc:	08008bab 	.word	0x08008bab
 80089e0:	08008a65 	.word	0x08008a65
 80089e4:	08008bab 	.word	0x08008bab
 80089e8:	08008bab 	.word	0x08008bab
 80089ec:	08008bab 	.word	0x08008bab
 80089f0:	08008aa7 	.word	0x08008aa7
 80089f4:	08008bab 	.word	0x08008bab
 80089f8:	08008bab 	.word	0x08008bab
 80089fc:	08008bab 	.word	0x08008bab
 8008a00:	08008ae7 	.word	0x08008ae7
 8008a04:	08008bab 	.word	0x08008bab
 8008a08:	08008bab 	.word	0x08008bab
 8008a0c:	08008bab 	.word	0x08008bab
 8008a10:	08008b29 	.word	0x08008b29
 8008a14:	08008bab 	.word	0x08008bab
 8008a18:	08008bab 	.word	0x08008bab
 8008a1c:	08008bab 	.word	0x08008bab
 8008a20:	08008b69 	.word	0x08008b69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f97e 	bl	8008d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0208 	orr.w	r2, r2, #8
 8008a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0204 	bic.w	r2, r2, #4
 8008a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6999      	ldr	r1, [r3, #24]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	619a      	str	r2, [r3, #24]
      break;
 8008a62:	e0a5      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f9f8 	bl	8008e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6999      	ldr	r1, [r3, #24]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	021a      	lsls	r2, r3, #8
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	619a      	str	r2, [r3, #24]
      break;
 8008aa4:	e084      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fa6b 	bl	8008f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f042 0208 	orr.w	r2, r2, #8
 8008ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69da      	ldr	r2, [r3, #28]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0204 	bic.w	r2, r2, #4
 8008ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69d9      	ldr	r1, [r3, #28]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	61da      	str	r2, [r3, #28]
      break;
 8008ae4:	e064      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fadd 	bl	80090ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69da      	ldr	r2, [r3, #28]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69da      	ldr	r2, [r3, #28]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69d9      	ldr	r1, [r3, #28]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	021a      	lsls	r2, r3, #8
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	61da      	str	r2, [r3, #28]
      break;
 8008b26:	e043      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fb50 	bl	80091d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0208 	orr.w	r2, r2, #8
 8008b42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0204 	bic.w	r2, r2, #4
 8008b52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b66:	e023      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fb9a 	bl	80092a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	021a      	lsls	r2, r3, #8
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ba8:	e002      	b.n	8008bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	75fb      	strb	r3, [r7, #23]
      break;
 8008bae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop

08008bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a4c      	ldr	r2, [pc, #304]	@ (8008d08 <TIM_Base_SetConfig+0x144>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d017      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be2:	d013      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a49      	ldr	r2, [pc, #292]	@ (8008d0c <TIM_Base_SetConfig+0x148>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00f      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a48      	ldr	r2, [pc, #288]	@ (8008d10 <TIM_Base_SetConfig+0x14c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00b      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a47      	ldr	r2, [pc, #284]	@ (8008d14 <TIM_Base_SetConfig+0x150>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a46      	ldr	r2, [pc, #280]	@ (8008d18 <TIM_Base_SetConfig+0x154>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d003      	beq.n	8008c0c <TIM_Base_SetConfig+0x48>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a45      	ldr	r2, [pc, #276]	@ (8008d1c <TIM_Base_SetConfig+0x158>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d108      	bne.n	8008c1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a39      	ldr	r2, [pc, #228]	@ (8008d08 <TIM_Base_SetConfig+0x144>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d023      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2c:	d01f      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a36      	ldr	r2, [pc, #216]	@ (8008d0c <TIM_Base_SetConfig+0x148>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01b      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a35      	ldr	r2, [pc, #212]	@ (8008d10 <TIM_Base_SetConfig+0x14c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d017      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a34      	ldr	r2, [pc, #208]	@ (8008d14 <TIM_Base_SetConfig+0x150>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a33      	ldr	r2, [pc, #204]	@ (8008d18 <TIM_Base_SetConfig+0x154>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a33      	ldr	r2, [pc, #204]	@ (8008d20 <TIM_Base_SetConfig+0x15c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00b      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a32      	ldr	r2, [pc, #200]	@ (8008d24 <TIM_Base_SetConfig+0x160>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d007      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a31      	ldr	r2, [pc, #196]	@ (8008d28 <TIM_Base_SetConfig+0x164>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d003      	beq.n	8008c6e <TIM_Base_SetConfig+0xaa>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a2c      	ldr	r2, [pc, #176]	@ (8008d1c <TIM_Base_SetConfig+0x158>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d108      	bne.n	8008c80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a18      	ldr	r2, [pc, #96]	@ (8008d08 <TIM_Base_SetConfig+0x144>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d013      	beq.n	8008cd4 <TIM_Base_SetConfig+0x110>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1a      	ldr	r2, [pc, #104]	@ (8008d18 <TIM_Base_SetConfig+0x154>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00f      	beq.n	8008cd4 <TIM_Base_SetConfig+0x110>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d20 <TIM_Base_SetConfig+0x15c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00b      	beq.n	8008cd4 <TIM_Base_SetConfig+0x110>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a19      	ldr	r2, [pc, #100]	@ (8008d24 <TIM_Base_SetConfig+0x160>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d007      	beq.n	8008cd4 <TIM_Base_SetConfig+0x110>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	@ (8008d28 <TIM_Base_SetConfig+0x164>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_Base_SetConfig+0x110>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a13      	ldr	r2, [pc, #76]	@ (8008d1c <TIM_Base_SetConfig+0x158>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d103      	bne.n	8008cdc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d105      	bne.n	8008cfa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f023 0201 	bic.w	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	611a      	str	r2, [r3, #16]
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40012c00 	.word	0x40012c00
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40015000 	.word	0x40015000
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800

08008d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f023 0201 	bic.w	r2, r3, #1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0303 	bic.w	r3, r3, #3
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 0302 	bic.w	r3, r3, #2
 8008d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a30      	ldr	r2, [pc, #192]	@ (8008e48 <TIM_OC1_SetConfig+0x11c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d013      	beq.n	8008db4 <TIM_OC1_SetConfig+0x88>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008e4c <TIM_OC1_SetConfig+0x120>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00f      	beq.n	8008db4 <TIM_OC1_SetConfig+0x88>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a2e      	ldr	r2, [pc, #184]	@ (8008e50 <TIM_OC1_SetConfig+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <TIM_OC1_SetConfig+0x88>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8008e54 <TIM_OC1_SetConfig+0x128>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d007      	beq.n	8008db4 <TIM_OC1_SetConfig+0x88>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e58 <TIM_OC1_SetConfig+0x12c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <TIM_OC1_SetConfig+0x88>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a2b      	ldr	r2, [pc, #172]	@ (8008e5c <TIM_OC1_SetConfig+0x130>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d10c      	bne.n	8008dce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f023 0308 	bic.w	r3, r3, #8
 8008dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 0304 	bic.w	r3, r3, #4
 8008dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e48 <TIM_OC1_SetConfig+0x11c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <TIM_OC1_SetConfig+0xd2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e4c <TIM_OC1_SetConfig+0x120>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <TIM_OC1_SetConfig+0xd2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e50 <TIM_OC1_SetConfig+0x124>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <TIM_OC1_SetConfig+0xd2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e54 <TIM_OC1_SetConfig+0x128>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <TIM_OC1_SetConfig+0xd2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a19      	ldr	r2, [pc, #100]	@ (8008e58 <TIM_OC1_SetConfig+0x12c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <TIM_OC1_SetConfig+0xd2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <TIM_OC1_SetConfig+0x130>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d111      	bne.n	8008e22 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	621a      	str	r2, [r3, #32]
}
 8008e3c:	bf00      	nop
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	40013400 	.word	0x40013400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800
 8008e5c:	40015000 	.word	0x40015000

08008e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	f023 0210 	bic.w	r2, r3, #16
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0320 	bic.w	r3, r3, #32
 8008eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8008f70 <TIM_OC2_SetConfig+0x110>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d007      	beq.n	8008ed4 <TIM_OC2_SetConfig+0x74>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8008f74 <TIM_OC2_SetConfig+0x114>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC2_SetConfig+0x74>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a2a      	ldr	r2, [pc, #168]	@ (8008f78 <TIM_OC2_SetConfig+0x118>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d10d      	bne.n	8008ef0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8008f70 <TIM_OC2_SetConfig+0x110>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d013      	beq.n	8008f20 <TIM_OC2_SetConfig+0xc0>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a1e      	ldr	r2, [pc, #120]	@ (8008f74 <TIM_OC2_SetConfig+0x114>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00f      	beq.n	8008f20 <TIM_OC2_SetConfig+0xc0>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1e      	ldr	r2, [pc, #120]	@ (8008f7c <TIM_OC2_SetConfig+0x11c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00b      	beq.n	8008f20 <TIM_OC2_SetConfig+0xc0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f80 <TIM_OC2_SetConfig+0x120>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d007      	beq.n	8008f20 <TIM_OC2_SetConfig+0xc0>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a1c      	ldr	r2, [pc, #112]	@ (8008f84 <TIM_OC2_SetConfig+0x124>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d003      	beq.n	8008f20 <TIM_OC2_SetConfig+0xc0>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a17      	ldr	r2, [pc, #92]	@ (8008f78 <TIM_OC2_SetConfig+0x118>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d113      	bne.n	8008f48 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40012c00 	.word	0x40012c00
 8008f74:	40013400 	.word	0x40013400
 8008f78:	40015000 	.word	0x40015000
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40014400 	.word	0x40014400
 8008f84:	40014800 	.word	0x40014800

08008f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8009094 <TIM_OC3_SetConfig+0x10c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d007      	beq.n	8008ffa <TIM_OC3_SetConfig+0x72>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2a      	ldr	r2, [pc, #168]	@ (8009098 <TIM_OC3_SetConfig+0x110>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_OC3_SetConfig+0x72>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a29      	ldr	r2, [pc, #164]	@ (800909c <TIM_OC3_SetConfig+0x114>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d10d      	bne.n	8009016 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <TIM_OC3_SetConfig+0x10c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <TIM_OC3_SetConfig+0xbe>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a1d      	ldr	r2, [pc, #116]	@ (8009098 <TIM_OC3_SetConfig+0x110>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00f      	beq.n	8009046 <TIM_OC3_SetConfig+0xbe>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a1d      	ldr	r2, [pc, #116]	@ (80090a0 <TIM_OC3_SetConfig+0x118>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00b      	beq.n	8009046 <TIM_OC3_SetConfig+0xbe>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a1c      	ldr	r2, [pc, #112]	@ (80090a4 <TIM_OC3_SetConfig+0x11c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d007      	beq.n	8009046 <TIM_OC3_SetConfig+0xbe>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a1b      	ldr	r2, [pc, #108]	@ (80090a8 <TIM_OC3_SetConfig+0x120>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d003      	beq.n	8009046 <TIM_OC3_SetConfig+0xbe>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a16      	ldr	r2, [pc, #88]	@ (800909c <TIM_OC3_SetConfig+0x114>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d113      	bne.n	800906e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800904c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	621a      	str	r2, [r3, #32]
}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40013400 	.word	0x40013400
 800909c:	40015000 	.word	0x40015000
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40014400 	.word	0x40014400
 80090a8:	40014800 	.word	0x40014800

080090ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	031b      	lsls	r3, r3, #12
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a2c      	ldr	r2, [pc, #176]	@ (80091bc <TIM_OC4_SetConfig+0x110>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_OC4_SetConfig+0x74>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a2b      	ldr	r2, [pc, #172]	@ (80091c0 <TIM_OC4_SetConfig+0x114>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_OC4_SetConfig+0x74>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a2a      	ldr	r2, [pc, #168]	@ (80091c4 <TIM_OC4_SetConfig+0x118>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d10d      	bne.n	800913c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	031b      	lsls	r3, r3, #12
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800913a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a1f      	ldr	r2, [pc, #124]	@ (80091bc <TIM_OC4_SetConfig+0x110>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d013      	beq.n	800916c <TIM_OC4_SetConfig+0xc0>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a1e      	ldr	r2, [pc, #120]	@ (80091c0 <TIM_OC4_SetConfig+0x114>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00f      	beq.n	800916c <TIM_OC4_SetConfig+0xc0>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1e      	ldr	r2, [pc, #120]	@ (80091c8 <TIM_OC4_SetConfig+0x11c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <TIM_OC4_SetConfig+0xc0>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a1d      	ldr	r2, [pc, #116]	@ (80091cc <TIM_OC4_SetConfig+0x120>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_OC4_SetConfig+0xc0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a1c      	ldr	r2, [pc, #112]	@ (80091d0 <TIM_OC4_SetConfig+0x124>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_OC4_SetConfig+0xc0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a17      	ldr	r2, [pc, #92]	@ (80091c4 <TIM_OC4_SetConfig+0x118>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d113      	bne.n	8009194 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009172:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800917a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	019b      	lsls	r3, r3, #6
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	019b      	lsls	r3, r3, #6
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40013400 	.word	0x40013400
 80091c4:	40015000 	.word	0x40015000
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40014800 	.word	0x40014800

080091d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009218:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a19      	ldr	r2, [pc, #100]	@ (8009290 <TIM_OC5_SetConfig+0xbc>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d013      	beq.n	8009256 <TIM_OC5_SetConfig+0x82>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a18      	ldr	r2, [pc, #96]	@ (8009294 <TIM_OC5_SetConfig+0xc0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00f      	beq.n	8009256 <TIM_OC5_SetConfig+0x82>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a17      	ldr	r2, [pc, #92]	@ (8009298 <TIM_OC5_SetConfig+0xc4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d00b      	beq.n	8009256 <TIM_OC5_SetConfig+0x82>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a16      	ldr	r2, [pc, #88]	@ (800929c <TIM_OC5_SetConfig+0xc8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d007      	beq.n	8009256 <TIM_OC5_SetConfig+0x82>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a15      	ldr	r2, [pc, #84]	@ (80092a0 <TIM_OC5_SetConfig+0xcc>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d003      	beq.n	8009256 <TIM_OC5_SetConfig+0x82>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a14      	ldr	r2, [pc, #80]	@ (80092a4 <TIM_OC5_SetConfig+0xd0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d109      	bne.n	800926a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800925c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	621a      	str	r2, [r3, #32]
}
 8009284:	bf00      	nop
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40013400 	.word	0x40013400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800
 80092a4:	40015000 	.word	0x40015000

080092a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	051b      	lsls	r3, r3, #20
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009368 <TIM_OC6_SetConfig+0xc0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d013      	beq.n	800932c <TIM_OC6_SetConfig+0x84>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a19      	ldr	r2, [pc, #100]	@ (800936c <TIM_OC6_SetConfig+0xc4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00f      	beq.n	800932c <TIM_OC6_SetConfig+0x84>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a18      	ldr	r2, [pc, #96]	@ (8009370 <TIM_OC6_SetConfig+0xc8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00b      	beq.n	800932c <TIM_OC6_SetConfig+0x84>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a17      	ldr	r2, [pc, #92]	@ (8009374 <TIM_OC6_SetConfig+0xcc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d007      	beq.n	800932c <TIM_OC6_SetConfig+0x84>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a16      	ldr	r2, [pc, #88]	@ (8009378 <TIM_OC6_SetConfig+0xd0>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_OC6_SetConfig+0x84>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a15      	ldr	r2, [pc, #84]	@ (800937c <TIM_OC6_SetConfig+0xd4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d109      	bne.n	8009340 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40012c00 	.word	0x40012c00
 800936c:	40013400 	.word	0x40013400
 8009370:	40014000 	.word	0x40014000
 8009374:	40014400 	.word	0x40014400
 8009378:	40014800 	.word	0x40014800
 800937c:	40015000 	.word	0x40015000

08009380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2201      	movs	r2, #1
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a1a      	ldr	r2, [r3, #32]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	43db      	mvns	r3, r3
 80093a2:	401a      	ands	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1a      	ldr	r2, [r3, #32]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e074      	b.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a34      	ldr	r2, [pc, #208]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d009      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a33      	ldr	r2, [pc, #204]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d004      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a31      	ldr	r2, [pc, #196]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d108      	bne.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800943a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a21      	ldr	r2, [pc, #132]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d022      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009464:	d01d      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a1f      	ldr	r2, [pc, #124]	@ (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d018      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a1d      	ldr	r2, [pc, #116]	@ (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d013      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a1c      	ldr	r2, [pc, #112]	@ (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00e      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d009      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a18      	ldr	r2, [pc, #96]	@ (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d004      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a11      	ldr	r2, [pc, #68]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d10c      	bne.n	80094bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40012c00 	.word	0x40012c00
 80094e0:	40013400 	.word	0x40013400
 80094e4:	40015000 	.word	0x40015000
 80094e8:	40000400 	.word	0x40000400
 80094ec:	40000800 	.word	0x40000800
 80094f0:	40000c00 	.word	0x40000c00
 80094f4:	40014000 	.word	0x40014000

080094f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d101      	bne.n	8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009510:	2302      	movs	r3, #2
 8009512:	e078      	b.n	8009606 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	4313      	orrs	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009614 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d009      	beq.n	80095ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d004      	beq.n	80095ba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a19      	ldr	r2, [pc, #100]	@ (800961c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d11c      	bne.n	80095f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c4:	051b      	lsls	r3, r3, #20
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40012c00 	.word	0x40012c00
 8009618:	40013400 	.word	0x40013400
 800961c:	40015000 	.word	0x40015000

08009620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e042      	b.n	80096b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f8 f8f1 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2224      	movs	r2, #36	@ 0x24
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0201 	bic.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fbb2 	bl	8009dd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f8b3 	bl	80097dc <UART_SetConfig>
 8009676:	4603      	mov	r3, r0
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e01b      	b.n	80096b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800968e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800969e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f042 0201 	orr.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fc31 	bl	8009f18 <UART_CheckIdleState>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08a      	sub	sp, #40	@ 0x28
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4613      	mov	r3, r2
 80096ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d17b      	bne.n	80097d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_UART_Transmit+0x26>
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e074      	b.n	80097d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2221      	movs	r2, #33	@ 0x21
 80096f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096fa:	f7f8 fa79 	bl	8001bf0 <HAL_GetTick>
 80096fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	88fa      	ldrh	r2, [r7, #6]
 8009704:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	88fa      	ldrh	r2, [r7, #6]
 800970c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009718:	d108      	bne.n	800972c <HAL_UART_Transmit+0x6c>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d104      	bne.n	800972c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	e003      	b.n	8009734 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009734:	e030      	b.n	8009798 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2200      	movs	r2, #0
 800973e:	2180      	movs	r1, #128	@ 0x80
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fc93 	bl	800a06c <UART_WaitOnFlagUntilTimeout>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e03d      	b.n	80097d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	3302      	adds	r3, #2
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	e007      	b.n	8009786 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3301      	adds	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800978c:	b29b      	uxth	r3, r3
 800978e:	3b01      	subs	r3, #1
 8009790:	b29a      	uxth	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1c8      	bne.n	8009736 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2200      	movs	r2, #0
 80097ac:	2140      	movs	r1, #64	@ 0x40
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fc5c 	bl	800a06c <UART_WaitOnFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d005      	beq.n	80097c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e006      	b.n	80097d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2220      	movs	r2, #32
 80097ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e000      	b.n	80097d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3720      	adds	r7, #32
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e0:	b08c      	sub	sp, #48	@ 0x30
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	4313      	orrs	r3, r2
 8009802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	4baa      	ldr	r3, [pc, #680]	@ (8009ab4 <UART_SetConfig+0x2d8>)
 800980c:	4013      	ands	r3, r2
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009814:	430b      	orrs	r3, r1
 8009816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a9f      	ldr	r2, [pc, #636]	@ (8009ab8 <UART_SetConfig+0x2dc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d004      	beq.n	8009848 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009844:	4313      	orrs	r3, r2
 8009846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009852:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985c:	430b      	orrs	r3, r1
 800985e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009866:	f023 010f 	bic.w	r1, r3, #15
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a90      	ldr	r2, [pc, #576]	@ (8009abc <UART_SetConfig+0x2e0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d125      	bne.n	80098cc <UART_SetConfig+0xf0>
 8009880:	4b8f      	ldr	r3, [pc, #572]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 8009882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d81a      	bhi.n	80098c4 <UART_SetConfig+0xe8>
 800988e:	a201      	add	r2, pc, #4	@ (adr r2, 8009894 <UART_SetConfig+0xb8>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098b5 	.word	0x080098b5
 800989c:	080098ad 	.word	0x080098ad
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098aa:	e116      	b.n	8009ada <UART_SetConfig+0x2fe>
 80098ac:	2302      	movs	r3, #2
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b2:	e112      	b.n	8009ada <UART_SetConfig+0x2fe>
 80098b4:	2304      	movs	r3, #4
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ba:	e10e      	b.n	8009ada <UART_SetConfig+0x2fe>
 80098bc:	2308      	movs	r3, #8
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e10a      	b.n	8009ada <UART_SetConfig+0x2fe>
 80098c4:	2310      	movs	r3, #16
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e106      	b.n	8009ada <UART_SetConfig+0x2fe>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a7c      	ldr	r2, [pc, #496]	@ (8009ac4 <UART_SetConfig+0x2e8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d138      	bne.n	8009948 <UART_SetConfig+0x16c>
 80098d6:	4b7a      	ldr	r3, [pc, #488]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 80098d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098dc:	f003 030c 	and.w	r3, r3, #12
 80098e0:	2b0c      	cmp	r3, #12
 80098e2:	d82d      	bhi.n	8009940 <UART_SetConfig+0x164>
 80098e4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <UART_SetConfig+0x110>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009921 	.word	0x08009921
 80098f0:	08009941 	.word	0x08009941
 80098f4:	08009941 	.word	0x08009941
 80098f8:	08009941 	.word	0x08009941
 80098fc:	08009931 	.word	0x08009931
 8009900:	08009941 	.word	0x08009941
 8009904:	08009941 	.word	0x08009941
 8009908:	08009941 	.word	0x08009941
 800990c:	08009929 	.word	0x08009929
 8009910:	08009941 	.word	0x08009941
 8009914:	08009941 	.word	0x08009941
 8009918:	08009941 	.word	0x08009941
 800991c:	08009939 	.word	0x08009939
 8009920:	2300      	movs	r3, #0
 8009922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009926:	e0d8      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009928:	2302      	movs	r3, #2
 800992a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992e:	e0d4      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009936:	e0d0      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993e:	e0cc      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009946:	e0c8      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ac8 <UART_SetConfig+0x2ec>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d125      	bne.n	800999e <UART_SetConfig+0x1c2>
 8009952:	4b5b      	ldr	r3, [pc, #364]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 8009954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009958:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800995c:	2b30      	cmp	r3, #48	@ 0x30
 800995e:	d016      	beq.n	800998e <UART_SetConfig+0x1b2>
 8009960:	2b30      	cmp	r3, #48	@ 0x30
 8009962:	d818      	bhi.n	8009996 <UART_SetConfig+0x1ba>
 8009964:	2b20      	cmp	r3, #32
 8009966:	d00a      	beq.n	800997e <UART_SetConfig+0x1a2>
 8009968:	2b20      	cmp	r3, #32
 800996a:	d814      	bhi.n	8009996 <UART_SetConfig+0x1ba>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <UART_SetConfig+0x19a>
 8009970:	2b10      	cmp	r3, #16
 8009972:	d008      	beq.n	8009986 <UART_SetConfig+0x1aa>
 8009974:	e00f      	b.n	8009996 <UART_SetConfig+0x1ba>
 8009976:	2300      	movs	r3, #0
 8009978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997c:	e0ad      	b.n	8009ada <UART_SetConfig+0x2fe>
 800997e:	2302      	movs	r3, #2
 8009980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009984:	e0a9      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009986:	2304      	movs	r3, #4
 8009988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998c:	e0a5      	b.n	8009ada <UART_SetConfig+0x2fe>
 800998e:	2308      	movs	r3, #8
 8009990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009994:	e0a1      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009996:	2310      	movs	r3, #16
 8009998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999c:	e09d      	b.n	8009ada <UART_SetConfig+0x2fe>
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a4a      	ldr	r2, [pc, #296]	@ (8009acc <UART_SetConfig+0x2f0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d125      	bne.n	80099f4 <UART_SetConfig+0x218>
 80099a8:	4b45      	ldr	r3, [pc, #276]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80099b4:	d016      	beq.n	80099e4 <UART_SetConfig+0x208>
 80099b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80099b8:	d818      	bhi.n	80099ec <UART_SetConfig+0x210>
 80099ba:	2b80      	cmp	r3, #128	@ 0x80
 80099bc:	d00a      	beq.n	80099d4 <UART_SetConfig+0x1f8>
 80099be:	2b80      	cmp	r3, #128	@ 0x80
 80099c0:	d814      	bhi.n	80099ec <UART_SetConfig+0x210>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <UART_SetConfig+0x1f0>
 80099c6:	2b40      	cmp	r3, #64	@ 0x40
 80099c8:	d008      	beq.n	80099dc <UART_SetConfig+0x200>
 80099ca:	e00f      	b.n	80099ec <UART_SetConfig+0x210>
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d2:	e082      	b.n	8009ada <UART_SetConfig+0x2fe>
 80099d4:	2302      	movs	r3, #2
 80099d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099da:	e07e      	b.n	8009ada <UART_SetConfig+0x2fe>
 80099dc:	2304      	movs	r3, #4
 80099de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e2:	e07a      	b.n	8009ada <UART_SetConfig+0x2fe>
 80099e4:	2308      	movs	r3, #8
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	e076      	b.n	8009ada <UART_SetConfig+0x2fe>
 80099ec:	2310      	movs	r3, #16
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e072      	b.n	8009ada <UART_SetConfig+0x2fe>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a35      	ldr	r2, [pc, #212]	@ (8009ad0 <UART_SetConfig+0x2f4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d12a      	bne.n	8009a54 <UART_SetConfig+0x278>
 80099fe:	4b30      	ldr	r3, [pc, #192]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 8009a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a0c:	d01a      	beq.n	8009a44 <UART_SetConfig+0x268>
 8009a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a12:	d81b      	bhi.n	8009a4c <UART_SetConfig+0x270>
 8009a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a18:	d00c      	beq.n	8009a34 <UART_SetConfig+0x258>
 8009a1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a1e:	d815      	bhi.n	8009a4c <UART_SetConfig+0x270>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <UART_SetConfig+0x250>
 8009a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a28:	d008      	beq.n	8009a3c <UART_SetConfig+0x260>
 8009a2a:	e00f      	b.n	8009a4c <UART_SetConfig+0x270>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e052      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a34:	2302      	movs	r3, #2
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3a:	e04e      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a3c:	2304      	movs	r3, #4
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	e04a      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a44:	2308      	movs	r3, #8
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e046      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e042      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a17      	ldr	r2, [pc, #92]	@ (8009ab8 <UART_SetConfig+0x2dc>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d13a      	bne.n	8009ad4 <UART_SetConfig+0x2f8>
 8009a5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ac0 <UART_SetConfig+0x2e4>)
 8009a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a6c:	d01a      	beq.n	8009aa4 <UART_SetConfig+0x2c8>
 8009a6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a72:	d81b      	bhi.n	8009aac <UART_SetConfig+0x2d0>
 8009a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a78:	d00c      	beq.n	8009a94 <UART_SetConfig+0x2b8>
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a7e:	d815      	bhi.n	8009aac <UART_SetConfig+0x2d0>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <UART_SetConfig+0x2b0>
 8009a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a88:	d008      	beq.n	8009a9c <UART_SetConfig+0x2c0>
 8009a8a:	e00f      	b.n	8009aac <UART_SetConfig+0x2d0>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a92:	e022      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a94:	2302      	movs	r3, #2
 8009a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9a:	e01e      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa2:	e01a      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009aa4:	2308      	movs	r3, #8
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aaa:	e016      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009aac:	2310      	movs	r3, #16
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e012      	b.n	8009ada <UART_SetConfig+0x2fe>
 8009ab4:	cfff69f3 	.word	0xcfff69f3
 8009ab8:	40008000 	.word	0x40008000
 8009abc:	40013800 	.word	0x40013800
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	40004400 	.word	0x40004400
 8009ac8:	40004800 	.word	0x40004800
 8009acc:	40004c00 	.word	0x40004c00
 8009ad0:	40005000 	.word	0x40005000
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4aae      	ldr	r2, [pc, #696]	@ (8009d98 <UART_SetConfig+0x5bc>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	f040 8097 	bne.w	8009c14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d823      	bhi.n	8009b36 <UART_SetConfig+0x35a>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0x318>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b37 	.word	0x08009b37
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b37 	.word	0x08009b37
 8009b04:	08009b27 	.word	0x08009b27
 8009b08:	08009b37 	.word	0x08009b37
 8009b0c:	08009b37 	.word	0x08009b37
 8009b10:	08009b37 	.word	0x08009b37
 8009b14:	08009b2f 	.word	0x08009b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b18:	f7fe fb16 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8009b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b1e:	e010      	b.n	8009b42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b20:	4b9e      	ldr	r3, [pc, #632]	@ (8009d9c <UART_SetConfig+0x5c0>)
 8009b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b24:	e00d      	b.n	8009b42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b26:	f7fe faa1 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8009b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b2c:	e009      	b.n	8009b42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b34:	e005      	b.n	8009b42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8130 	beq.w	8009daa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4e:	4a94      	ldr	r2, [pc, #592]	@ (8009da0 <UART_SetConfig+0x5c4>)
 8009b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d305      	bcc.n	8009b7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d903      	bls.n	8009b82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b80:	e113      	b.n	8009daa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b84:	2200      	movs	r2, #0
 8009b86:	60bb      	str	r3, [r7, #8]
 8009b88:	60fa      	str	r2, [r7, #12]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	4a84      	ldr	r2, [pc, #528]	@ (8009da0 <UART_SetConfig+0x5c4>)
 8009b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2200      	movs	r2, #0
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ba4:	f7f6 fb94 	bl	80002d0 <__aeabi_uldivmod>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	020b      	lsls	r3, r1, #8
 8009bba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bbe:	0202      	lsls	r2, r0, #8
 8009bc0:	6979      	ldr	r1, [r7, #20]
 8009bc2:	6849      	ldr	r1, [r1, #4]
 8009bc4:	0849      	lsrs	r1, r1, #1
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	460c      	mov	r4, r1
 8009bca:	4605      	mov	r5, r0
 8009bcc:	eb12 0804 	adds.w	r8, r2, r4
 8009bd0:	eb43 0905 	adc.w	r9, r3, r5
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	469a      	mov	sl, r3
 8009bdc:	4693      	mov	fp, r2
 8009bde:	4652      	mov	r2, sl
 8009be0:	465b      	mov	r3, fp
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	f7f6 fb73 	bl	80002d0 <__aeabi_uldivmod>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4613      	mov	r3, r2
 8009bf0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf8:	d308      	bcc.n	8009c0c <UART_SetConfig+0x430>
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c00:	d204      	bcs.n	8009c0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a3a      	ldr	r2, [r7, #32]
 8009c08:	60da      	str	r2, [r3, #12]
 8009c0a:	e0ce      	b.n	8009daa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c12:	e0ca      	b.n	8009daa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c1c:	d166      	bne.n	8009cec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	2b08      	cmp	r3, #8
 8009c24:	d827      	bhi.n	8009c76 <UART_SetConfig+0x49a>
 8009c26:	a201      	add	r2, pc, #4	@ (adr r2, 8009c2c <UART_SetConfig+0x450>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c59 	.word	0x08009c59
 8009c34:	08009c61 	.word	0x08009c61
 8009c38:	08009c77 	.word	0x08009c77
 8009c3c:	08009c67 	.word	0x08009c67
 8009c40:	08009c77 	.word	0x08009c77
 8009c44:	08009c77 	.word	0x08009c77
 8009c48:	08009c77 	.word	0x08009c77
 8009c4c:	08009c6f 	.word	0x08009c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c50:	f7fe fa7a 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8009c54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c56:	e014      	b.n	8009c82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c58:	f7fe fa8c 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 8009c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c5e:	e010      	b.n	8009c82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c60:	4b4e      	ldr	r3, [pc, #312]	@ (8009d9c <UART_SetConfig+0x5c0>)
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c64:	e00d      	b.n	8009c82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c66:	f7fe fa01 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8009c6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c6c:	e009      	b.n	8009c82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c74:	e005      	b.n	8009c82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8090 	beq.w	8009daa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	4a44      	ldr	r2, [pc, #272]	@ (8009da0 <UART_SetConfig+0x5c4>)
 8009c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c9c:	005a      	lsls	r2, r3, #1
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	441a      	add	r2, r3
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	2b0f      	cmp	r3, #15
 8009cb4:	d916      	bls.n	8009ce4 <UART_SetConfig+0x508>
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbc:	d212      	bcs.n	8009ce4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f023 030f 	bic.w	r3, r3, #15
 8009cc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	8bfb      	ldrh	r3, [r7, #30]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	8bfa      	ldrh	r2, [r7, #30]
 8009ce0:	60da      	str	r2, [r3, #12]
 8009ce2:	e062      	b.n	8009daa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cea:	e05e      	b.n	8009daa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d828      	bhi.n	8009d46 <UART_SetConfig+0x56a>
 8009cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <UART_SetConfig+0x520>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	08009d47 	.word	0x08009d47
 8009d0c:	08009d37 	.word	0x08009d37
 8009d10:	08009d47 	.word	0x08009d47
 8009d14:	08009d47 	.word	0x08009d47
 8009d18:	08009d47 	.word	0x08009d47
 8009d1c:	08009d3f 	.word	0x08009d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d20:	f7fe fa12 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8009d24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d26:	e014      	b.n	8009d52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d28:	f7fe fa24 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 8009d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d2e:	e010      	b.n	8009d52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d30:	4b1a      	ldr	r3, [pc, #104]	@ (8009d9c <UART_SetConfig+0x5c0>)
 8009d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d34:	e00d      	b.n	8009d52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d36:	f7fe f999 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8009d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d3c:	e009      	b.n	8009d52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d44:	e005      	b.n	8009d52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d50:	bf00      	nop
    }

    if (pclk != 0U)
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d028      	beq.n	8009daa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5c:	4a10      	ldr	r2, [pc, #64]	@ (8009da0 <UART_SetConfig+0x5c4>)
 8009d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d62:	461a      	mov	r2, r3
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	441a      	add	r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d910      	bls.n	8009da4 <UART_SetConfig+0x5c8>
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d88:	d20c      	bcs.n	8009da4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60da      	str	r2, [r3, #12]
 8009d94:	e009      	b.n	8009daa <UART_SetConfig+0x5ce>
 8009d96:	bf00      	nop
 8009d98:	40008000 	.word	0x40008000
 8009d9c:	00f42400 	.word	0x00f42400
 8009da0:	0800be70 	.word	0x0800be70
      }
      else
      {
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009dc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3730      	adds	r7, #48	@ 0x30
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	f003 0304 	and.w	r3, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	f003 0320 	and.w	r3, r3, #32
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01a      	beq.n	8009eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ed2:	d10a      	bne.n	8009eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b098      	sub	sp, #96	@ 0x60
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f28:	f7f7 fe62 	bl	8001bf0 <HAL_GetTick>
 8009f2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d12f      	bne.n	8009f9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f44:	2200      	movs	r2, #0
 8009f46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f88e 	bl	800a06c <UART_WaitOnFlagUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d022      	beq.n	8009f9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e063      	b.n	800a064 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	d149      	bne.n	800a03e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009faa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f857 	bl	800a06c <UART_WaitOnFlagUntilTimeout>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d03c      	beq.n	800a03e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e6      	bne.n	8009fc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	e853 3f00 	ldrex	r3, [r3]
 800a004:	60fb      	str	r3, [r7, #12]
   return(result);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3308      	adds	r3, #8
 800a014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a016:	61fa      	str	r2, [r7, #28]
 800a018:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01a:	69b9      	ldr	r1, [r7, #24]
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	e841 2300 	strex	r3, r2, [r1]
 800a022:	617b      	str	r3, [r7, #20]
   return(result);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1e5      	bne.n	8009ff6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e012      	b.n	800a064 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2220      	movs	r2, #32
 800a04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3758      	adds	r7, #88	@ 0x58
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	4613      	mov	r3, r2
 800a07a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a07c:	e04f      	b.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a084:	d04b      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a086:	f7f7 fdb3 	bl	8001bf0 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	429a      	cmp	r2, r3
 800a094:	d302      	bcc.n	800a09c <UART_WaitOnFlagUntilTimeout+0x30>
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e04e      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0304 	and.w	r3, r3, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d037      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b80      	cmp	r3, #128	@ 0x80
 800a0b2:	d034      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b40      	cmp	r3, #64	@ 0x40
 800a0b8:	d031      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d110      	bne.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f838 	bl	800a146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2208      	movs	r2, #8
 800a0da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e029      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0f8:	d111      	bne.n	800a11e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f81e 	bl	800a146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e00f      	b.n	800a13e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4013      	ands	r3, r2
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	bf0c      	ite	eq
 800a12e:	2301      	moveq	r3, #1
 800a130:	2300      	movne	r3, #0
 800a132:	b2db      	uxtb	r3, r3
 800a134:	461a      	mov	r2, r3
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d0a0      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a146:	b480      	push	{r7}
 800a148:	b095      	sub	sp, #84	@ 0x54
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a16c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a16e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e6      	bne.n	800a14e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a196:	f023 0301 	bic.w	r3, r3, #1
 800a19a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e3      	bne.n	800a180 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d118      	bne.n	800a1f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f023 0310 	bic.w	r3, r3, #16
 800a1d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1de:	61bb      	str	r3, [r7, #24]
 800a1e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6979      	ldr	r1, [r7, #20]
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a206:	bf00      	nop
 800a208:	3754      	adds	r7, #84	@ 0x54
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a212:	b480      	push	{r7}
 800a214:	b085      	sub	sp, #20
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_UARTEx_DisableFifoMode+0x16>
 800a224:	2302      	movs	r3, #2
 800a226:	e027      	b.n	800a278 <HAL_UARTEx_DisableFifoMode+0x66>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2224      	movs	r2, #36	@ 0x24
 800a234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0201 	bic.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a256:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a298:	2302      	movs	r3, #2
 800a29a:	e02d      	b.n	800a2f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2224      	movs	r2, #36	@ 0x24
 800a2a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0201 	bic.w	r2, r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f84f 	bl	800a37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a314:	2302      	movs	r3, #2
 800a316:	e02d      	b.n	800a374 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2224      	movs	r2, #36	@ 0x24
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0201 	bic.w	r2, r2, #1
 800a33e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f811 	bl	800a37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2220      	movs	r2, #32
 800a366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d108      	bne.n	800a39e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a39c:	e031      	b.n	800a402 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a39e:	2308      	movs	r3, #8
 800a3a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	0e5b      	lsrs	r3, r3, #25
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 0307 	and.w	r3, r3, #7
 800a3b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	0f5b      	lsrs	r3, r3, #29
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	7b3a      	ldrb	r2, [r7, #12]
 800a3ca:	4911      	ldr	r1, [pc, #68]	@ (800a410 <UARTEx_SetNbDataToProcess+0x94>)
 800a3cc:	5c8a      	ldrb	r2, [r1, r2]
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3d2:	7b3a      	ldrb	r2, [r7, #12]
 800a3d4:	490f      	ldr	r1, [pc, #60]	@ (800a414 <UARTEx_SetNbDataToProcess+0x98>)
 800a3d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	7b7a      	ldrb	r2, [r7, #13]
 800a3e8:	4909      	ldr	r1, [pc, #36]	@ (800a410 <UARTEx_SetNbDataToProcess+0x94>)
 800a3ea:	5c8a      	ldrb	r2, [r1, r2]
 800a3ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3f0:	7b7a      	ldrb	r2, [r7, #13]
 800a3f2:	4908      	ldr	r1, [pc, #32]	@ (800a414 <UARTEx_SetNbDataToProcess+0x98>)
 800a3f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	0800be88 	.word	0x0800be88
 800a414:	0800be90 	.word	0x0800be90

0800a418 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a418:	b480      	push	{r7}
 800a41a:	b08b      	sub	sp, #44	@ 0x2c
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	fa93 f3a3 	rbit	r3, r3
 800a432:	613b      	str	r3, [r7, #16]
  return result;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a43e:	2320      	movs	r3, #32
 800a440:	e003      	b.n	800a44a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	fab3 f383 	clz	r3, r3
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	2103      	movs	r1, #3
 800a44e:	fa01 f303 	lsl.w	r3, r1, r3
 800a452:	43db      	mvns	r3, r3
 800a454:	401a      	ands	r2, r3
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	fa93 f3a3 	rbit	r3, r3
 800a460:	61fb      	str	r3, [r7, #28]
  return result;
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a46c:	2320      	movs	r3, #32
 800a46e:	e003      	b.n	800a478 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	fab3 f383 	clz	r3, r3
 800a476:	b2db      	uxtb	r3, r3
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	fa01 f303 	lsl.w	r3, r1, r3
 800a480:	431a      	orrs	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	601a      	str	r2, [r3, #0]
}
 800a486:	bf00      	nop
 800a488:	372c      	adds	r7, #44	@ 0x2c
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	43db      	mvns	r3, r3
 800a4a6:	401a      	ands	r2, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	fb01 f303 	mul.w	r3, r1, r3
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
}
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b08b      	sub	sp, #44	@ 0x2c
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	fa93 f3a3 	rbit	r3, r3
 800a4dc:	613b      	str	r3, [r7, #16]
  return result;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a4e8:	2320      	movs	r3, #32
 800a4ea:	e003      	b.n	800a4f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	fab3 f383 	clz	r3, r3
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	2103      	movs	r1, #3
 800a4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4fc:	43db      	mvns	r3, r3
 800a4fe:	401a      	ands	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	fa93 f3a3 	rbit	r3, r3
 800a50a:	61fb      	str	r3, [r7, #28]
  return result;
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a516:	2320      	movs	r3, #32
 800a518:	e003      	b.n	800a522 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	fab3 f383 	clz	r3, r3
 800a520:	b2db      	uxtb	r3, r3
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	fa01 f303 	lsl.w	r3, r1, r3
 800a52a:	431a      	orrs	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a530:	bf00      	nop
 800a532:	372c      	adds	r7, #44	@ 0x2c
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b08b      	sub	sp, #44	@ 0x2c
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	fa93 f3a3 	rbit	r3, r3
 800a556:	613b      	str	r3, [r7, #16]
  return result;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a562:	2320      	movs	r3, #32
 800a564:	e003      	b.n	800a56e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	fab3 f383 	clz	r3, r3
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	2103      	movs	r1, #3
 800a572:	fa01 f303 	lsl.w	r3, r1, r3
 800a576:	43db      	mvns	r3, r3
 800a578:	401a      	ands	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	fa93 f3a3 	rbit	r3, r3
 800a584:	61fb      	str	r3, [r7, #28]
  return result;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a590:	2320      	movs	r3, #32
 800a592:	e003      	b.n	800a59c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	fab3 f383 	clz	r3, r3
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	60da      	str	r2, [r3, #12]
}
 800a5aa:	bf00      	nop
 800a5ac:	372c      	adds	r7, #44	@ 0x2c
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b08b      	sub	sp, #44	@ 0x2c
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1a      	ldr	r2, [r3, #32]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	fa93 f3a3 	rbit	r3, r3
 800a5d0:	613b      	str	r3, [r7, #16]
  return result;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a5dc:	2320      	movs	r3, #32
 800a5de:	e003      	b.n	800a5e8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	fab3 f383 	clz	r3, r3
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	210f      	movs	r1, #15
 800a5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	401a      	ands	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	fa93 f3a3 	rbit	r3, r3
 800a5fe:	61fb      	str	r3, [r7, #28]
  return result;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a60a:	2320      	movs	r3, #32
 800a60c:	e003      	b.n	800a616 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	fab3 f383 	clz	r3, r3
 800a614:	b2db      	uxtb	r3, r3
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	fa01 f303 	lsl.w	r3, r1, r3
 800a61e:	431a      	orrs	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a624:	bf00      	nop
 800a626:	372c      	adds	r7, #44	@ 0x2c
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a630:	b480      	push	{r7}
 800a632:	b08b      	sub	sp, #44	@ 0x2c
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	0a1b      	lsrs	r3, r3, #8
 800a644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	fa93 f3a3 	rbit	r3, r3
 800a64c:	613b      	str	r3, [r7, #16]
  return result;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a658:	2320      	movs	r3, #32
 800a65a:	e003      	b.n	800a664 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	fab3 f383 	clz	r3, r3
 800a662:	b2db      	uxtb	r3, r3
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	210f      	movs	r1, #15
 800a668:	fa01 f303 	lsl.w	r3, r1, r3
 800a66c:	43db      	mvns	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	fa93 f3a3 	rbit	r3, r3
 800a67c:	61fb      	str	r3, [r7, #28]
  return result;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d101      	bne.n	800a68c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a688:	2320      	movs	r3, #32
 800a68a:	e003      	b.n	800a694 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	fab3 f383 	clz	r3, r3
 800a692:	b2db      	uxtb	r3, r3
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	fa01 f303 	lsl.w	r3, r1, r3
 800a69c:	431a      	orrs	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a6a2:	bf00      	nop
 800a6a4:	372c      	adds	r7, #44	@ 0x2c
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b088      	sub	sp, #32
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	fa93 f3a3 	rbit	r3, r3
 800a6c4:	60fb      	str	r3, [r7, #12]
  return result;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <LL_GPIO_Init+0x26>
    return 32U;
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	e003      	b.n	800a6dc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	fab3 f383 	clz	r3, r3
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a6de:	e048      	b.n	800a772 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d03a      	beq.n	800a76c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d003      	beq.n	800a706 <LL_GPIO_Init+0x58>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d10e      	bne.n	800a724 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	461a      	mov	r2, r3
 800a70c:	69b9      	ldr	r1, [r7, #24]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fed7 	bl	800a4c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	6819      	ldr	r1, [r3, #0]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	461a      	mov	r2, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff feb7 	bl	800a492 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	461a      	mov	r2, r3
 800a72a:	69b9      	ldr	r1, [r7, #24]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ff05 	bl	800a53c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2b02      	cmp	r3, #2
 800a738:	d111      	bne.n	800a75e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2bff      	cmp	r3, #255	@ 0xff
 800a73e:	d807      	bhi.n	800a750 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	461a      	mov	r2, r3
 800a746:	69b9      	ldr	r1, [r7, #24]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff ff34 	bl	800a5b6 <LL_GPIO_SetAFPin_0_7>
 800a74e:	e006      	b.n	800a75e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	461a      	mov	r2, r3
 800a756:	69b9      	ldr	r1, [r7, #24]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff69 	bl	800a630 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	461a      	mov	r2, r3
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fe56 	bl	800a418 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	3301      	adds	r3, #1
 800a770:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1af      	bne.n	800a6e0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3720      	adds	r7, #32
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a792:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a796:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	43db      	mvns	r3, r3
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	1d3b      	adds	r3, r7, #4
 800a7ca:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b0ac      	sub	sp, #176	@ 0xb0
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	f040 84ca 	bne.w	800b1a4 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d904      	bls.n	800a826 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a824:	e003      	b.n	800a82e <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	7b1b      	ldrb	r3, [r3, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d122      	bne.n	800a87c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6959      	ldr	r1, [r3, #20]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	88da      	ldrh	r2, [r3, #6]
 800a83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a842:	b29b      	uxth	r3, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fdac 	bl	800b3a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	613b      	str	r3, [r7, #16]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	00da      	lsls	r2, r3, #3
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4413      	add	r3, r2
 800a868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	f000 bc6f 	b.w	800b15a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	78db      	ldrb	r3, [r3, #3]
 800a880:	2b02      	cmp	r3, #2
 800a882:	f040 831e 	bne.w	800aec2 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	429a      	cmp	r2, r3
 800a890:	f240 82cf 	bls.w	800ae32 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	441a      	add	r2, r3
 800a8b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a8bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a8c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	6a1a      	ldr	r2, [r3, #32]
 800a8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 814f 	beq.w	800ab94 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d16b      	bne.n	800a9da <USB_EPStartXfer+0x1de>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	4413      	add	r3, r2
 800a914:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	00da      	lsls	r2, r3, #3
 800a91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91e:	4413      	add	r3, r2
 800a920:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a924:	627b      	str	r3, [r7, #36]	@ 0x24
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a930:	b29a      	uxth	r2, r3
 800a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a934:	801a      	strh	r2, [r3, #0]
 800a936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <USB_EPStartXfer+0x158>
 800a93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	e05b      	b.n	800aa0c <USB_EPStartXfer+0x210>
 800a954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a958:	2b3e      	cmp	r3, #62	@ 0x3e
 800a95a:	d81c      	bhi.n	800a996 <USB_EPStartXfer+0x19a>
 800a95c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a960:	085b      	lsrs	r3, r3, #1
 800a962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <USB_EPStartXfer+0x180>
 800a972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a976:	3301      	adds	r3, #1
 800a978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	b29a      	uxth	r2, r3
 800a982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a986:	b29b      	uxth	r3, r3
 800a988:	029b      	lsls	r3, r3, #10
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4313      	orrs	r3, r2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	801a      	strh	r2, [r3, #0]
 800a994:	e03a      	b.n	800aa0c <USB_EPStartXfer+0x210>
 800a996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a9a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d104      	bne.n	800a9b6 <USB_EPStartXfer+0x1ba>
 800a9ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	029b      	lsls	r3, r3, #10
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	e018      	b.n	800aa0c <USB_EPStartXfer+0x210>
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	785b      	ldrb	r3, [r3, #1]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d114      	bne.n	800aa0c <USB_EPStartXfer+0x210>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	4413      	add	r3, r2
 800a9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	00da      	lsls	r2, r3, #3
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	895b      	ldrh	r3, [r3, #10]
 800aa10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	6959      	ldr	r1, [r3, #20]
 800aa18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fcbd 	bl	800b3a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695a      	ldr	r2, [r3, #20]
 800aa2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa30:	441a      	add	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6a1a      	ldr	r2, [r3, #32]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d907      	bls.n	800aa52 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6a1a      	ldr	r2, [r3, #32]
 800aa46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	621a      	str	r2, [r3, #32]
 800aa50:	e006      	b.n	800aa60 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d16b      	bne.n	800ab40 <USB_EPStartXfer+0x344>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	4413      	add	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	00da      	lsls	r2, r3, #3
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	4413      	add	r3, r2
 800aa86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <USB_EPStartXfer+0x2be>
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	801a      	strh	r2, [r3, #0]
 800aab8:	e05d      	b.n	800ab76 <USB_EPStartXfer+0x37a>
 800aaba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aabe:	2b3e      	cmp	r3, #62	@ 0x3e
 800aac0:	d81c      	bhi.n	800aafc <USB_EPStartXfer+0x300>
 800aac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aacc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <USB_EPStartXfer+0x2e6>
 800aad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aadc:	3301      	adds	r3, #1
 800aade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	029b      	lsls	r3, r3, #10
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	e03c      	b.n	800ab76 <USB_EPStartXfer+0x37a>
 800aafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab00:	095b      	lsrs	r3, r3, #5
 800ab02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ab06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <USB_EPStartXfer+0x320>
 800ab12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab16:	3b01      	subs	r3, #1
 800ab18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	029b      	lsls	r3, r3, #10
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	801a      	strh	r2, [r3, #0]
 800ab3e:	e01a      	b.n	800ab76 <USB_EPStartXfer+0x37a>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	785b      	ldrb	r3, [r3, #1]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d116      	bne.n	800ab76 <USB_EPStartXfer+0x37a>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	623b      	str	r3, [r7, #32]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	4413      	add	r3, r2
 800ab5a:	623b      	str	r3, [r7, #32]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	00da      	lsls	r2, r3, #3
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab6a:	61fb      	str	r3, [r7, #28]
 800ab6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	891b      	ldrh	r3, [r3, #8]
 800ab7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	6959      	ldr	r1, [r3, #20]
 800ab82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fc08 	bl	800b3a2 <USB_WritePMA>
 800ab92:	e2e2      	b.n	800b15a <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d16b      	bne.n	800ac74 <USB_EPStartXfer+0x478>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abac:	4413      	add	r3, r2
 800abae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	00da      	lsls	r2, r3, #3
 800abb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abb8:	4413      	add	r3, r2
 800abba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800abbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800abc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <USB_EPStartXfer+0x3f2>
 800abd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e05d      	b.n	800acaa <USB_EPStartXfer+0x4ae>
 800abee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abf2:	2b3e      	cmp	r3, #62	@ 0x3e
 800abf4:	d81c      	bhi.n	800ac30 <USB_EPStartXfer+0x434>
 800abf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <USB_EPStartXfer+0x41a>
 800ac0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac10:	3301      	adds	r3, #1
 800ac12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	029b      	lsls	r3, r3, #10
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2c:	801a      	strh	r2, [r3, #0]
 800ac2e:	e03c      	b.n	800acaa <USB_EPStartXfer+0x4ae>
 800ac30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac34:	095b      	lsrs	r3, r3, #5
 800ac36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3e:	f003 031f 	and.w	r3, r3, #31
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d104      	bne.n	800ac50 <USB_EPStartXfer+0x454>
 800ac46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	029b      	lsls	r3, r3, #10
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	4313      	orrs	r3, r2
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac70:	801a      	strh	r2, [r3, #0]
 800ac72:	e01a      	b.n	800acaa <USB_EPStartXfer+0x4ae>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	785b      	ldrb	r3, [r3, #1]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d116      	bne.n	800acaa <USB_EPStartXfer+0x4ae>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac8c:	4413      	add	r3, r2
 800ac8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	00da      	lsls	r2, r3, #3
 800ac96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac98:	4413      	add	r3, r2
 800ac9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	891b      	ldrh	r3, [r3, #8]
 800acae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6959      	ldr	r1, [r3, #20]
 800acb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb6e 	bl	800b3a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695a      	ldr	r2, [r3, #20]
 800acca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acce:	441a      	add	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	6a1a      	ldr	r2, [r3, #32]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d907      	bls.n	800acf0 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	6a1a      	ldr	r2, [r3, #32]
 800ace4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ace8:	1ad2      	subs	r2, r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	621a      	str	r2, [r3, #32]
 800acee:	e006      	b.n	800acfe <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2200      	movs	r2, #0
 800acfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d16b      	bne.n	800ade2 <USB_EPStartXfer+0x5e6>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	461a      	mov	r2, r3
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	4413      	add	r3, r2
 800ad1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	00da      	lsls	r2, r3, #3
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	4413      	add	r3, r2
 800ad28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3c:	801a      	strh	r2, [r3, #0]
 800ad3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10a      	bne.n	800ad5c <USB_EPStartXfer+0x560>
 800ad46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	801a      	strh	r2, [r3, #0]
 800ad5a:	e05b      	b.n	800ae14 <USB_EPStartXfer+0x618>
 800ad5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad60:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad62:	d81c      	bhi.n	800ad9e <USB_EPStartXfer+0x5a2>
 800ad64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad68:	085b      	lsrs	r3, r3, #1
 800ad6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <USB_EPStartXfer+0x588>
 800ad7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad7e:	3301      	adds	r3, #1
 800ad80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	029b      	lsls	r3, r3, #10
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	4313      	orrs	r3, r2
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad9a:	801a      	strh	r2, [r3, #0]
 800ad9c:	e03a      	b.n	800ae14 <USB_EPStartXfer+0x618>
 800ad9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ada2:	095b      	lsrs	r3, r3, #5
 800ada4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ada8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adac:	f003 031f 	and.w	r3, r3, #31
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d104      	bne.n	800adbe <USB_EPStartXfer+0x5c2>
 800adb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adb8:	3b01      	subs	r3, #1
 800adba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adc8:	b29b      	uxth	r3, r3
 800adca:	029b      	lsls	r3, r3, #10
 800adcc:	b29b      	uxth	r3, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	b29b      	uxth	r3, r3
 800add2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adda:	b29a      	uxth	r2, r3
 800addc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	e018      	b.n	800ae14 <USB_EPStartXfer+0x618>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	785b      	ldrb	r3, [r3, #1]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d114      	bne.n	800ae14 <USB_EPStartXfer+0x618>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	461a      	mov	r2, r3
 800adf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf6:	4413      	add	r3, r2
 800adf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	00da      	lsls	r2, r3, #3
 800ae00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae02:	4413      	add	r3, r2
 800ae04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	895b      	ldrh	r3, [r3, #10]
 800ae18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6959      	ldr	r1, [r3, #20]
 800ae20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fab9 	bl	800b3a2 <USB_WritePMA>
 800ae30:	e193      	b.n	800b15a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	441a      	add	r2, r3
 800ae5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ae62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae86:	4413      	add	r3, r2
 800ae88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00da      	lsls	r2, r3, #3
 800ae90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae92:	4413      	add	r3, r2
 800ae94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae98:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aea2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	891b      	ldrh	r3, [r3, #8]
 800aea8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	6959      	ldr	r1, [r3, #20]
 800aeb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa71 	bl	800b3a2 <USB_WritePMA>
 800aec0:	e14b      	b.n	800b15a <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	6a1a      	ldr	r2, [r3, #32]
 800aec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aeca:	1ad2      	subs	r2, r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 809a 	beq.w	800b01c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	673b      	str	r3, [r7, #112]	@ 0x70
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	785b      	ldrb	r3, [r3, #1]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d16b      	bne.n	800afcc <USB_EPStartXfer+0x7d0>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aefe:	b29b      	uxth	r3, r3
 800af00:	461a      	mov	r2, r3
 800af02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af04:	4413      	add	r3, r2
 800af06:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	00da      	lsls	r2, r3, #3
 800af0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af10:	4413      	add	r3, r2
 800af12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af16:	667b      	str	r3, [r7, #100]	@ 0x64
 800af18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af22:	b29a      	uxth	r2, r3
 800af24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af26:	801a      	strh	r2, [r3, #0]
 800af28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <USB_EPStartXfer+0x74a>
 800af30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	b29b      	uxth	r3, r3
 800af36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3e:	b29a      	uxth	r2, r3
 800af40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af42:	801a      	strh	r2, [r3, #0]
 800af44:	e05b      	b.n	800affe <USB_EPStartXfer+0x802>
 800af46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af4a:	2b3e      	cmp	r3, #62	@ 0x3e
 800af4c:	d81c      	bhi.n	800af88 <USB_EPStartXfer+0x78c>
 800af4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af52:	085b      	lsrs	r3, r3, #1
 800af54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d004      	beq.n	800af6e <USB_EPStartXfer+0x772>
 800af64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af68:	3301      	adds	r3, #1
 800af6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b29a      	uxth	r2, r3
 800af74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af78:	b29b      	uxth	r3, r3
 800af7a:	029b      	lsls	r3, r3, #10
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4313      	orrs	r3, r2
 800af80:	b29a      	uxth	r2, r3
 800af82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af84:	801a      	strh	r2, [r3, #0]
 800af86:	e03a      	b.n	800affe <USB_EPStartXfer+0x802>
 800af88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af8c:	095b      	lsrs	r3, r3, #5
 800af8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <USB_EPStartXfer+0x7ac>
 800af9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afa2:	3b01      	subs	r3, #1
 800afa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	b29a      	uxth	r2, r3
 800afae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	029b      	lsls	r3, r3, #10
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4313      	orrs	r3, r2
 800afba:	b29b      	uxth	r3, r3
 800afbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afc8:	801a      	strh	r2, [r3, #0]
 800afca:	e018      	b.n	800affe <USB_EPStartXfer+0x802>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d114      	bne.n	800affe <USB_EPStartXfer+0x802>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afda:	b29b      	uxth	r3, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afe0:	4413      	add	r3, r2
 800afe2:	673b      	str	r3, [r7, #112]	@ 0x70
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	00da      	lsls	r2, r3, #3
 800afea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afec:	4413      	add	r3, r2
 800afee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aff8:	b29a      	uxth	r2, r3
 800affa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800affc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	895b      	ldrh	r3, [r3, #10]
 800b002:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6959      	ldr	r1, [r3, #20]
 800b00a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9c4 	bl	800b3a2 <USB_WritePMA>
 800b01a:	e09e      	b.n	800b15a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d16b      	bne.n	800b0fc <USB_EPStartXfer+0x900>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b02e:	b29b      	uxth	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b034:	4413      	add	r3, r2
 800b036:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	00da      	lsls	r2, r3, #3
 800b03e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b040:	4413      	add	r3, r2
 800b042:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b046:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b052:	b29a      	uxth	r2, r3
 800b054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b056:	801a      	strh	r2, [r3, #0]
 800b058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <USB_EPStartXfer+0x87a>
 800b060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29b      	uxth	r3, r3
 800b066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b06e:	b29a      	uxth	r2, r3
 800b070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	e063      	b.n	800b13e <USB_EPStartXfer+0x942>
 800b076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b07a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b07c:	d81c      	bhi.n	800b0b8 <USB_EPStartXfer+0x8bc>
 800b07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b082:	085b      	lsrs	r3, r3, #1
 800b084:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <USB_EPStartXfer+0x8a2>
 800b094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b098:	3301      	adds	r3, #1
 800b09a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b09e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	029b      	lsls	r3, r3, #10
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0b4:	801a      	strh	r2, [r3, #0]
 800b0b6:	e042      	b.n	800b13e <USB_EPStartXfer+0x942>
 800b0b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <USB_EPStartXfer+0x8dc>
 800b0ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	029b      	lsls	r3, r3, #10
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0f8:	801a      	strh	r2, [r3, #0]
 800b0fa:	e020      	b.n	800b13e <USB_EPStartXfer+0x942>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d11c      	bne.n	800b13e <USB_EPStartXfer+0x942>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b110:	b29b      	uxth	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b118:	4413      	add	r3, r2
 800b11a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	00da      	lsls	r2, r3, #3
 800b124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b128:	4413      	add	r3, r2
 800b12a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b12e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b136:	b29a      	uxth	r2, r3
 800b138:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b13c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6959      	ldr	r1, [r3, #20]
 800b14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b14e:	b29b      	uxth	r3, r3
 800b150:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f924 	bl	800b3a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b16c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b170:	817b      	strh	r3, [r7, #10]
 800b172:	897b      	ldrh	r3, [r7, #10]
 800b174:	f083 0310 	eor.w	r3, r3, #16
 800b178:	817b      	strh	r3, [r7, #10]
 800b17a:	897b      	ldrh	r3, [r7, #10]
 800b17c:	f083 0320 	eor.w	r3, r3, #32
 800b180:	817b      	strh	r3, [r7, #10]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	441a      	add	r2, r3
 800b18c:	897b      	ldrh	r3, [r7, #10]
 800b18e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	8013      	strh	r3, [r2, #0]
 800b1a2:	e0d5      	b.n	800b350 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	7b1b      	ldrb	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d156      	bne.n	800b25a <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d122      	bne.n	800b1fa <USB_EPStartXfer+0x9fe>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	78db      	ldrb	r3, [r3, #3]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d11e      	bne.n	800b1fa <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	441a      	add	r2, r3
 800b1e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b1e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	8013      	strh	r3, [r2, #0]
 800b1f8:	e01d      	b.n	800b236 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	b29b      	uxth	r3, r3
 800b208:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b20c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b210:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	441a      	add	r2, r3
 800b21e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b22a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b22e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b232:	b29b      	uxth	r3, r3
 800b234:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	699a      	ldr	r2, [r3, #24]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d907      	bls.n	800b252 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	699a      	ldr	r2, [r3, #24]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	1ad2      	subs	r2, r2, r3
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	619a      	str	r2, [r3, #24]
 800b250:	e054      	b.n	800b2fc <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2200      	movs	r2, #0
 800b256:	619a      	str	r2, [r3, #24]
 800b258:	e050      	b.n	800b2fc <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	78db      	ldrb	r3, [r3, #3]
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d142      	bne.n	800b2e8 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d048      	beq.n	800b2fc <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b27a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b27e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <USB_EPStartXfer+0xa96>
 800b286:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b292:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d12e      	bne.n	800b2fc <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b29e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d128      	bne.n	800b2fc <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	441a      	add	r2, r3
 800b2ce:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800b2d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	8013      	strh	r3, [r2, #0]
 800b2e6:	e009      	b.n	800b2fc <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	78db      	ldrb	r3, [r3, #3]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d103      	bne.n	800b2f8 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	619a      	str	r2, [r3, #24]
 800b2f6:	e001      	b.n	800b2fc <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e02a      	b.n	800b352 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b312:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b316:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b31a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b31e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b322:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b326:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b32a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	441a      	add	r2, r3
 800b338:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b33c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	37b0      	adds	r7, #176	@ 0xb0
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b366:	78fb      	ldrb	r3, [r7, #3]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d103      	bne.n	800b374 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2280      	movs	r2, #128	@ 0x80
 800b370:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b390:	b29b      	uxth	r3, r3
 800b392:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b394:	68fb      	ldr	r3, [r7, #12]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b08b      	sub	sp, #44	@ 0x2c
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	80fb      	strh	r3, [r7, #6]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3b8:	88bb      	ldrh	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	085b      	lsrs	r3, r3, #1
 800b3be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b3c8:	88fa      	ldrh	r2, [r7, #6]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3d8:	e01c      	b.n	800b414 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	b21b      	sxth	r3, r3
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	b21a      	sxth	r2, r3
 800b3ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	b21b      	sxth	r3, r3
 800b3f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	8a7a      	ldrh	r2, [r7, #18]
 800b3fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	3302      	adds	r3, #2
 800b400:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	3301      	adds	r3, #1
 800b406:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	3301      	adds	r3, #1
 800b40c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	3b01      	subs	r3, #1
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1df      	bne.n	800b3da <USB_WritePMA+0x38>
  }
}
 800b41a:	bf00      	nop
 800b41c:	bf00      	nop
 800b41e:	372c      	adds	r7, #44	@ 0x2c
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b428:	b480      	push	{r7}
 800b42a:	b08b      	sub	sp, #44	@ 0x2c
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4611      	mov	r1, r2
 800b434:	461a      	mov	r2, r3
 800b436:	460b      	mov	r3, r1
 800b438:	80fb      	strh	r3, [r7, #6]
 800b43a:	4613      	mov	r3, r2
 800b43c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b43e:	88bb      	ldrh	r3, [r7, #4]
 800b440:	085b      	lsrs	r3, r3, #1
 800b442:	b29b      	uxth	r3, r3
 800b444:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b44e:	88fa      	ldrh	r2, [r7, #6]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	4413      	add	r3, r2
 800b454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b458:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b45e:	e018      	b.n	800b492 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	3302      	adds	r3, #2
 800b46c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	3301      	adds	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	0a1b      	lsrs	r3, r3, #8
 800b480:	b2da      	uxtb	r2, r3
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	3301      	adds	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	3b01      	subs	r3, #1
 800b490:	627b      	str	r3, [r7, #36]	@ 0x24
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e3      	bne.n	800b460 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b498:	88bb      	ldrh	r3, [r7, #4]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d007      	beq.n	800b4b4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	701a      	strb	r2, [r3, #0]
  }
}
 800b4b4:	bf00      	nop
 800b4b6:	372c      	adds	r7, #44	@ 0x2c
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <sniprintf>:
 800b4c0:	b40c      	push	{r2, r3}
 800b4c2:	b530      	push	{r4, r5, lr}
 800b4c4:	4b18      	ldr	r3, [pc, #96]	@ (800b528 <sniprintf+0x68>)
 800b4c6:	1e0c      	subs	r4, r1, #0
 800b4c8:	681d      	ldr	r5, [r3, #0]
 800b4ca:	b09d      	sub	sp, #116	@ 0x74
 800b4cc:	da08      	bge.n	800b4e0 <sniprintf+0x20>
 800b4ce:	238b      	movs	r3, #139	@ 0x8b
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d6:	b01d      	add	sp, #116	@ 0x74
 800b4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4dc:	b002      	add	sp, #8
 800b4de:	4770      	bx	lr
 800b4e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b4e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b4ee:	bf14      	ite	ne
 800b4f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4f4:	4623      	moveq	r3, r4
 800b4f6:	9304      	str	r3, [sp, #16]
 800b4f8:	9307      	str	r3, [sp, #28]
 800b4fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4fe:	9002      	str	r0, [sp, #8]
 800b500:	9006      	str	r0, [sp, #24]
 800b502:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b506:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b508:	ab21      	add	r3, sp, #132	@ 0x84
 800b50a:	a902      	add	r1, sp, #8
 800b50c:	4628      	mov	r0, r5
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	f000 f994 	bl	800b83c <_svfiprintf_r>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	bfbc      	itt	lt
 800b518:	238b      	movlt	r3, #139	@ 0x8b
 800b51a:	602b      	strlt	r3, [r5, #0]
 800b51c:	2c00      	cmp	r4, #0
 800b51e:	d0da      	beq.n	800b4d6 <sniprintf+0x16>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e7d6      	b.n	800b4d6 <sniprintf+0x16>
 800b528:	2000000c 	.word	0x2000000c

0800b52c <memset>:
 800b52c:	4402      	add	r2, r0
 800b52e:	4603      	mov	r3, r0
 800b530:	4293      	cmp	r3, r2
 800b532:	d100      	bne.n	800b536 <memset+0xa>
 800b534:	4770      	bx	lr
 800b536:	f803 1b01 	strb.w	r1, [r3], #1
 800b53a:	e7f9      	b.n	800b530 <memset+0x4>

0800b53c <__errno>:
 800b53c:	4b01      	ldr	r3, [pc, #4]	@ (800b544 <__errno+0x8>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	2000000c 	.word	0x2000000c

0800b548 <__libc_init_array>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	4d0d      	ldr	r5, [pc, #52]	@ (800b580 <__libc_init_array+0x38>)
 800b54c:	4c0d      	ldr	r4, [pc, #52]	@ (800b584 <__libc_init_array+0x3c>)
 800b54e:	1b64      	subs	r4, r4, r5
 800b550:	10a4      	asrs	r4, r4, #2
 800b552:	2600      	movs	r6, #0
 800b554:	42a6      	cmp	r6, r4
 800b556:	d109      	bne.n	800b56c <__libc_init_array+0x24>
 800b558:	4d0b      	ldr	r5, [pc, #44]	@ (800b588 <__libc_init_array+0x40>)
 800b55a:	4c0c      	ldr	r4, [pc, #48]	@ (800b58c <__libc_init_array+0x44>)
 800b55c:	f000 fc64 	bl	800be28 <_init>
 800b560:	1b64      	subs	r4, r4, r5
 800b562:	10a4      	asrs	r4, r4, #2
 800b564:	2600      	movs	r6, #0
 800b566:	42a6      	cmp	r6, r4
 800b568:	d105      	bne.n	800b576 <__libc_init_array+0x2e>
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b570:	4798      	blx	r3
 800b572:	3601      	adds	r6, #1
 800b574:	e7ee      	b.n	800b554 <__libc_init_array+0xc>
 800b576:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57a:	4798      	blx	r3
 800b57c:	3601      	adds	r6, #1
 800b57e:	e7f2      	b.n	800b566 <__libc_init_array+0x1e>
 800b580:	0800bed4 	.word	0x0800bed4
 800b584:	0800bed4 	.word	0x0800bed4
 800b588:	0800bed4 	.word	0x0800bed4
 800b58c:	0800bed8 	.word	0x0800bed8

0800b590 <__retarget_lock_acquire_recursive>:
 800b590:	4770      	bx	lr

0800b592 <__retarget_lock_release_recursive>:
 800b592:	4770      	bx	lr

0800b594 <_free_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4605      	mov	r5, r0
 800b598:	2900      	cmp	r1, #0
 800b59a:	d041      	beq.n	800b620 <_free_r+0x8c>
 800b59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a0:	1f0c      	subs	r4, r1, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfb8      	it	lt
 800b5a6:	18e4      	addlt	r4, r4, r3
 800b5a8:	f000 f8e0 	bl	800b76c <__malloc_lock>
 800b5ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b624 <_free_r+0x90>)
 800b5ae:	6813      	ldr	r3, [r2, #0]
 800b5b0:	b933      	cbnz	r3, 800b5c0 <_free_r+0x2c>
 800b5b2:	6063      	str	r3, [r4, #4]
 800b5b4:	6014      	str	r4, [r2, #0]
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5bc:	f000 b8dc 	b.w	800b778 <__malloc_unlock>
 800b5c0:	42a3      	cmp	r3, r4
 800b5c2:	d908      	bls.n	800b5d6 <_free_r+0x42>
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	1821      	adds	r1, r4, r0
 800b5c8:	428b      	cmp	r3, r1
 800b5ca:	bf01      	itttt	eq
 800b5cc:	6819      	ldreq	r1, [r3, #0]
 800b5ce:	685b      	ldreq	r3, [r3, #4]
 800b5d0:	1809      	addeq	r1, r1, r0
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	e7ed      	b.n	800b5b2 <_free_r+0x1e>
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	b10b      	cbz	r3, 800b5e0 <_free_r+0x4c>
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	d9fa      	bls.n	800b5d6 <_free_r+0x42>
 800b5e0:	6811      	ldr	r1, [r2, #0]
 800b5e2:	1850      	adds	r0, r2, r1
 800b5e4:	42a0      	cmp	r0, r4
 800b5e6:	d10b      	bne.n	800b600 <_free_r+0x6c>
 800b5e8:	6820      	ldr	r0, [r4, #0]
 800b5ea:	4401      	add	r1, r0
 800b5ec:	1850      	adds	r0, r2, r1
 800b5ee:	4283      	cmp	r3, r0
 800b5f0:	6011      	str	r1, [r2, #0]
 800b5f2:	d1e0      	bne.n	800b5b6 <_free_r+0x22>
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	6053      	str	r3, [r2, #4]
 800b5fa:	4408      	add	r0, r1
 800b5fc:	6010      	str	r0, [r2, #0]
 800b5fe:	e7da      	b.n	800b5b6 <_free_r+0x22>
 800b600:	d902      	bls.n	800b608 <_free_r+0x74>
 800b602:	230c      	movs	r3, #12
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	e7d6      	b.n	800b5b6 <_free_r+0x22>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	1821      	adds	r1, r4, r0
 800b60c:	428b      	cmp	r3, r1
 800b60e:	bf04      	itt	eq
 800b610:	6819      	ldreq	r1, [r3, #0]
 800b612:	685b      	ldreq	r3, [r3, #4]
 800b614:	6063      	str	r3, [r4, #4]
 800b616:	bf04      	itt	eq
 800b618:	1809      	addeq	r1, r1, r0
 800b61a:	6021      	streq	r1, [r4, #0]
 800b61c:	6054      	str	r4, [r2, #4]
 800b61e:	e7ca      	b.n	800b5b6 <_free_r+0x22>
 800b620:	bd38      	pop	{r3, r4, r5, pc}
 800b622:	bf00      	nop
 800b624:	200007f8 	.word	0x200007f8

0800b628 <sbrk_aligned>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	4e0f      	ldr	r6, [pc, #60]	@ (800b668 <sbrk_aligned+0x40>)
 800b62c:	460c      	mov	r4, r1
 800b62e:	6831      	ldr	r1, [r6, #0]
 800b630:	4605      	mov	r5, r0
 800b632:	b911      	cbnz	r1, 800b63a <sbrk_aligned+0x12>
 800b634:	f000 fba4 	bl	800bd80 <_sbrk_r>
 800b638:	6030      	str	r0, [r6, #0]
 800b63a:	4621      	mov	r1, r4
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 fb9f 	bl	800bd80 <_sbrk_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d103      	bne.n	800b64e <sbrk_aligned+0x26>
 800b646:	f04f 34ff 	mov.w	r4, #4294967295
 800b64a:	4620      	mov	r0, r4
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
 800b64e:	1cc4      	adds	r4, r0, #3
 800b650:	f024 0403 	bic.w	r4, r4, #3
 800b654:	42a0      	cmp	r0, r4
 800b656:	d0f8      	beq.n	800b64a <sbrk_aligned+0x22>
 800b658:	1a21      	subs	r1, r4, r0
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 fb90 	bl	800bd80 <_sbrk_r>
 800b660:	3001      	adds	r0, #1
 800b662:	d1f2      	bne.n	800b64a <sbrk_aligned+0x22>
 800b664:	e7ef      	b.n	800b646 <sbrk_aligned+0x1e>
 800b666:	bf00      	nop
 800b668:	200007f4 	.word	0x200007f4

0800b66c <_malloc_r>:
 800b66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b670:	1ccd      	adds	r5, r1, #3
 800b672:	f025 0503 	bic.w	r5, r5, #3
 800b676:	3508      	adds	r5, #8
 800b678:	2d0c      	cmp	r5, #12
 800b67a:	bf38      	it	cc
 800b67c:	250c      	movcc	r5, #12
 800b67e:	2d00      	cmp	r5, #0
 800b680:	4606      	mov	r6, r0
 800b682:	db01      	blt.n	800b688 <_malloc_r+0x1c>
 800b684:	42a9      	cmp	r1, r5
 800b686:	d904      	bls.n	800b692 <_malloc_r+0x26>
 800b688:	230c      	movs	r3, #12
 800b68a:	6033      	str	r3, [r6, #0]
 800b68c:	2000      	movs	r0, #0
 800b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b768 <_malloc_r+0xfc>
 800b696:	f000 f869 	bl	800b76c <__malloc_lock>
 800b69a:	f8d8 3000 	ldr.w	r3, [r8]
 800b69e:	461c      	mov	r4, r3
 800b6a0:	bb44      	cbnz	r4, 800b6f4 <_malloc_r+0x88>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7ff ffbf 	bl	800b628 <sbrk_aligned>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	d158      	bne.n	800b762 <_malloc_r+0xf6>
 800b6b0:	f8d8 4000 	ldr.w	r4, [r8]
 800b6b4:	4627      	mov	r7, r4
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	d143      	bne.n	800b742 <_malloc_r+0xd6>
 800b6ba:	2c00      	cmp	r4, #0
 800b6bc:	d04b      	beq.n	800b756 <_malloc_r+0xea>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	eb04 0903 	add.w	r9, r4, r3
 800b6c8:	f000 fb5a 	bl	800bd80 <_sbrk_r>
 800b6cc:	4581      	cmp	r9, r0
 800b6ce:	d142      	bne.n	800b756 <_malloc_r+0xea>
 800b6d0:	6821      	ldr	r1, [r4, #0]
 800b6d2:	1a6d      	subs	r5, r5, r1
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ffa6 	bl	800b628 <sbrk_aligned>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d03a      	beq.n	800b756 <_malloc_r+0xea>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	442b      	add	r3, r5
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	bb62      	cbnz	r2, 800b748 <_malloc_r+0xdc>
 800b6ee:	f8c8 7000 	str.w	r7, [r8]
 800b6f2:	e00f      	b.n	800b714 <_malloc_r+0xa8>
 800b6f4:	6822      	ldr	r2, [r4, #0]
 800b6f6:	1b52      	subs	r2, r2, r5
 800b6f8:	d420      	bmi.n	800b73c <_malloc_r+0xd0>
 800b6fa:	2a0b      	cmp	r2, #11
 800b6fc:	d917      	bls.n	800b72e <_malloc_r+0xc2>
 800b6fe:	1961      	adds	r1, r4, r5
 800b700:	42a3      	cmp	r3, r4
 800b702:	6025      	str	r5, [r4, #0]
 800b704:	bf18      	it	ne
 800b706:	6059      	strne	r1, [r3, #4]
 800b708:	6863      	ldr	r3, [r4, #4]
 800b70a:	bf08      	it	eq
 800b70c:	f8c8 1000 	streq.w	r1, [r8]
 800b710:	5162      	str	r2, [r4, r5]
 800b712:	604b      	str	r3, [r1, #4]
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f82f 	bl	800b778 <__malloc_unlock>
 800b71a:	f104 000b 	add.w	r0, r4, #11
 800b71e:	1d23      	adds	r3, r4, #4
 800b720:	f020 0007 	bic.w	r0, r0, #7
 800b724:	1ac2      	subs	r2, r0, r3
 800b726:	bf1c      	itt	ne
 800b728:	1a1b      	subne	r3, r3, r0
 800b72a:	50a3      	strne	r3, [r4, r2]
 800b72c:	e7af      	b.n	800b68e <_malloc_r+0x22>
 800b72e:	6862      	ldr	r2, [r4, #4]
 800b730:	42a3      	cmp	r3, r4
 800b732:	bf0c      	ite	eq
 800b734:	f8c8 2000 	streq.w	r2, [r8]
 800b738:	605a      	strne	r2, [r3, #4]
 800b73a:	e7eb      	b.n	800b714 <_malloc_r+0xa8>
 800b73c:	4623      	mov	r3, r4
 800b73e:	6864      	ldr	r4, [r4, #4]
 800b740:	e7ae      	b.n	800b6a0 <_malloc_r+0x34>
 800b742:	463c      	mov	r4, r7
 800b744:	687f      	ldr	r7, [r7, #4]
 800b746:	e7b6      	b.n	800b6b6 <_malloc_r+0x4a>
 800b748:	461a      	mov	r2, r3
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	d1fb      	bne.n	800b748 <_malloc_r+0xdc>
 800b750:	2300      	movs	r3, #0
 800b752:	6053      	str	r3, [r2, #4]
 800b754:	e7de      	b.n	800b714 <_malloc_r+0xa8>
 800b756:	230c      	movs	r3, #12
 800b758:	6033      	str	r3, [r6, #0]
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 f80c 	bl	800b778 <__malloc_unlock>
 800b760:	e794      	b.n	800b68c <_malloc_r+0x20>
 800b762:	6005      	str	r5, [r0, #0]
 800b764:	e7d6      	b.n	800b714 <_malloc_r+0xa8>
 800b766:	bf00      	nop
 800b768:	200007f8 	.word	0x200007f8

0800b76c <__malloc_lock>:
 800b76c:	4801      	ldr	r0, [pc, #4]	@ (800b774 <__malloc_lock+0x8>)
 800b76e:	f7ff bf0f 	b.w	800b590 <__retarget_lock_acquire_recursive>
 800b772:	bf00      	nop
 800b774:	200007f0 	.word	0x200007f0

0800b778 <__malloc_unlock>:
 800b778:	4801      	ldr	r0, [pc, #4]	@ (800b780 <__malloc_unlock+0x8>)
 800b77a:	f7ff bf0a 	b.w	800b592 <__retarget_lock_release_recursive>
 800b77e:	bf00      	nop
 800b780:	200007f0 	.word	0x200007f0

0800b784 <__ssputs_r>:
 800b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	688e      	ldr	r6, [r1, #8]
 800b78a:	461f      	mov	r7, r3
 800b78c:	42be      	cmp	r6, r7
 800b78e:	680b      	ldr	r3, [r1, #0]
 800b790:	4682      	mov	sl, r0
 800b792:	460c      	mov	r4, r1
 800b794:	4690      	mov	r8, r2
 800b796:	d82d      	bhi.n	800b7f4 <__ssputs_r+0x70>
 800b798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b79c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7a0:	d026      	beq.n	800b7f0 <__ssputs_r+0x6c>
 800b7a2:	6965      	ldr	r5, [r4, #20]
 800b7a4:	6909      	ldr	r1, [r1, #16]
 800b7a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7aa:	eba3 0901 	sub.w	r9, r3, r1
 800b7ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7b2:	1c7b      	adds	r3, r7, #1
 800b7b4:	444b      	add	r3, r9
 800b7b6:	106d      	asrs	r5, r5, #1
 800b7b8:	429d      	cmp	r5, r3
 800b7ba:	bf38      	it	cc
 800b7bc:	461d      	movcc	r5, r3
 800b7be:	0553      	lsls	r3, r2, #21
 800b7c0:	d527      	bpl.n	800b812 <__ssputs_r+0x8e>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f7ff ff52 	bl	800b66c <_malloc_r>
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	b360      	cbz	r0, 800b826 <__ssputs_r+0xa2>
 800b7cc:	6921      	ldr	r1, [r4, #16]
 800b7ce:	464a      	mov	r2, r9
 800b7d0:	f000 fae6 	bl	800bda0 <memcpy>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	6126      	str	r6, [r4, #16]
 800b7e2:	6165      	str	r5, [r4, #20]
 800b7e4:	444e      	add	r6, r9
 800b7e6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ea:	6026      	str	r6, [r4, #0]
 800b7ec:	60a5      	str	r5, [r4, #8]
 800b7ee:	463e      	mov	r6, r7
 800b7f0:	42be      	cmp	r6, r7
 800b7f2:	d900      	bls.n	800b7f6 <__ssputs_r+0x72>
 800b7f4:	463e      	mov	r6, r7
 800b7f6:	6820      	ldr	r0, [r4, #0]
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	4641      	mov	r1, r8
 800b7fc:	f000 faa6 	bl	800bd4c <memmove>
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	1b9b      	subs	r3, r3, r6
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	4433      	add	r3, r6
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	2000      	movs	r0, #0
 800b80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b812:	462a      	mov	r2, r5
 800b814:	f000 fad2 	bl	800bdbc <_realloc_r>
 800b818:	4606      	mov	r6, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d1e0      	bne.n	800b7e0 <__ssputs_r+0x5c>
 800b81e:	6921      	ldr	r1, [r4, #16]
 800b820:	4650      	mov	r0, sl
 800b822:	f7ff feb7 	bl	800b594 <_free_r>
 800b826:	230c      	movs	r3, #12
 800b828:	f8ca 3000 	str.w	r3, [sl]
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e7e9      	b.n	800b80e <__ssputs_r+0x8a>
	...

0800b83c <_svfiprintf_r>:
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	4698      	mov	r8, r3
 800b842:	898b      	ldrh	r3, [r1, #12]
 800b844:	061b      	lsls	r3, r3, #24
 800b846:	b09d      	sub	sp, #116	@ 0x74
 800b848:	4607      	mov	r7, r0
 800b84a:	460d      	mov	r5, r1
 800b84c:	4614      	mov	r4, r2
 800b84e:	d510      	bpl.n	800b872 <_svfiprintf_r+0x36>
 800b850:	690b      	ldr	r3, [r1, #16]
 800b852:	b973      	cbnz	r3, 800b872 <_svfiprintf_r+0x36>
 800b854:	2140      	movs	r1, #64	@ 0x40
 800b856:	f7ff ff09 	bl	800b66c <_malloc_r>
 800b85a:	6028      	str	r0, [r5, #0]
 800b85c:	6128      	str	r0, [r5, #16]
 800b85e:	b930      	cbnz	r0, 800b86e <_svfiprintf_r+0x32>
 800b860:	230c      	movs	r3, #12
 800b862:	603b      	str	r3, [r7, #0]
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	b01d      	add	sp, #116	@ 0x74
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	2340      	movs	r3, #64	@ 0x40
 800b870:	616b      	str	r3, [r5, #20]
 800b872:	2300      	movs	r3, #0
 800b874:	9309      	str	r3, [sp, #36]	@ 0x24
 800b876:	2320      	movs	r3, #32
 800b878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b880:	2330      	movs	r3, #48	@ 0x30
 800b882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba20 <_svfiprintf_r+0x1e4>
 800b886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b88a:	f04f 0901 	mov.w	r9, #1
 800b88e:	4623      	mov	r3, r4
 800b890:	469a      	mov	sl, r3
 800b892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b896:	b10a      	cbz	r2, 800b89c <_svfiprintf_r+0x60>
 800b898:	2a25      	cmp	r2, #37	@ 0x25
 800b89a:	d1f9      	bne.n	800b890 <_svfiprintf_r+0x54>
 800b89c:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a0:	d00b      	beq.n	800b8ba <_svfiprintf_r+0x7e>
 800b8a2:	465b      	mov	r3, fp
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f7ff ff6b 	bl	800b784 <__ssputs_r>
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	f000 80a7 	beq.w	800ba02 <_svfiprintf_r+0x1c6>
 800b8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8b6:	445a      	add	r2, fp
 800b8b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 809f 	beq.w	800ba02 <_svfiprintf_r+0x1c6>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ce:	f10a 0a01 	add.w	sl, sl, #1
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	9307      	str	r3, [sp, #28]
 800b8d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8da:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8dc:	4654      	mov	r4, sl
 800b8de:	2205      	movs	r2, #5
 800b8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e4:	484e      	ldr	r0, [pc, #312]	@ (800ba20 <_svfiprintf_r+0x1e4>)
 800b8e6:	f7f4 fca3 	bl	8000230 <memchr>
 800b8ea:	9a04      	ldr	r2, [sp, #16]
 800b8ec:	b9d8      	cbnz	r0, 800b926 <_svfiprintf_r+0xea>
 800b8ee:	06d0      	lsls	r0, r2, #27
 800b8f0:	bf44      	itt	mi
 800b8f2:	2320      	movmi	r3, #32
 800b8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8f8:	0711      	lsls	r1, r2, #28
 800b8fa:	bf44      	itt	mi
 800b8fc:	232b      	movmi	r3, #43	@ 0x2b
 800b8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b902:	f89a 3000 	ldrb.w	r3, [sl]
 800b906:	2b2a      	cmp	r3, #42	@ 0x2a
 800b908:	d015      	beq.n	800b936 <_svfiprintf_r+0xfa>
 800b90a:	9a07      	ldr	r2, [sp, #28]
 800b90c:	4654      	mov	r4, sl
 800b90e:	2000      	movs	r0, #0
 800b910:	f04f 0c0a 	mov.w	ip, #10
 800b914:	4621      	mov	r1, r4
 800b916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b91a:	3b30      	subs	r3, #48	@ 0x30
 800b91c:	2b09      	cmp	r3, #9
 800b91e:	d94b      	bls.n	800b9b8 <_svfiprintf_r+0x17c>
 800b920:	b1b0      	cbz	r0, 800b950 <_svfiprintf_r+0x114>
 800b922:	9207      	str	r2, [sp, #28]
 800b924:	e014      	b.n	800b950 <_svfiprintf_r+0x114>
 800b926:	eba0 0308 	sub.w	r3, r0, r8
 800b92a:	fa09 f303 	lsl.w	r3, r9, r3
 800b92e:	4313      	orrs	r3, r2
 800b930:	9304      	str	r3, [sp, #16]
 800b932:	46a2      	mov	sl, r4
 800b934:	e7d2      	b.n	800b8dc <_svfiprintf_r+0xa0>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	1d19      	adds	r1, r3, #4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	9103      	str	r1, [sp, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bfbb      	ittet	lt
 800b942:	425b      	neglt	r3, r3
 800b944:	f042 0202 	orrlt.w	r2, r2, #2
 800b948:	9307      	strge	r3, [sp, #28]
 800b94a:	9307      	strlt	r3, [sp, #28]
 800b94c:	bfb8      	it	lt
 800b94e:	9204      	strlt	r2, [sp, #16]
 800b950:	7823      	ldrb	r3, [r4, #0]
 800b952:	2b2e      	cmp	r3, #46	@ 0x2e
 800b954:	d10a      	bne.n	800b96c <_svfiprintf_r+0x130>
 800b956:	7863      	ldrb	r3, [r4, #1]
 800b958:	2b2a      	cmp	r3, #42	@ 0x2a
 800b95a:	d132      	bne.n	800b9c2 <_svfiprintf_r+0x186>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	1d1a      	adds	r2, r3, #4
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	9203      	str	r2, [sp, #12]
 800b964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b968:	3402      	adds	r4, #2
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba30 <_svfiprintf_r+0x1f4>
 800b970:	7821      	ldrb	r1, [r4, #0]
 800b972:	2203      	movs	r2, #3
 800b974:	4650      	mov	r0, sl
 800b976:	f7f4 fc5b 	bl	8000230 <memchr>
 800b97a:	b138      	cbz	r0, 800b98c <_svfiprintf_r+0x150>
 800b97c:	9b04      	ldr	r3, [sp, #16]
 800b97e:	eba0 000a 	sub.w	r0, r0, sl
 800b982:	2240      	movs	r2, #64	@ 0x40
 800b984:	4082      	lsls	r2, r0
 800b986:	4313      	orrs	r3, r2
 800b988:	3401      	adds	r4, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b990:	4824      	ldr	r0, [pc, #144]	@ (800ba24 <_svfiprintf_r+0x1e8>)
 800b992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b996:	2206      	movs	r2, #6
 800b998:	f7f4 fc4a 	bl	8000230 <memchr>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d036      	beq.n	800ba0e <_svfiprintf_r+0x1d2>
 800b9a0:	4b21      	ldr	r3, [pc, #132]	@ (800ba28 <_svfiprintf_r+0x1ec>)
 800b9a2:	bb1b      	cbnz	r3, 800b9ec <_svfiprintf_r+0x1b0>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	3307      	adds	r3, #7
 800b9a8:	f023 0307 	bic.w	r3, r3, #7
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	9303      	str	r3, [sp, #12]
 800b9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b2:	4433      	add	r3, r6
 800b9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b6:	e76a      	b.n	800b88e <_svfiprintf_r+0x52>
 800b9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9bc:	460c      	mov	r4, r1
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7a8      	b.n	800b914 <_svfiprintf_r+0xd8>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	3401      	adds	r4, #1
 800b9c6:	9305      	str	r3, [sp, #20]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f04f 0c0a 	mov.w	ip, #10
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d4:	3a30      	subs	r2, #48	@ 0x30
 800b9d6:	2a09      	cmp	r2, #9
 800b9d8:	d903      	bls.n	800b9e2 <_svfiprintf_r+0x1a6>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c6      	beq.n	800b96c <_svfiprintf_r+0x130>
 800b9de:	9105      	str	r1, [sp, #20]
 800b9e0:	e7c4      	b.n	800b96c <_svfiprintf_r+0x130>
 800b9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e7f0      	b.n	800b9ce <_svfiprintf_r+0x192>
 800b9ec:	ab03      	add	r3, sp, #12
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800ba2c <_svfiprintf_r+0x1f0>)
 800b9f4:	a904      	add	r1, sp, #16
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f3af 8000 	nop.w
 800b9fc:	1c42      	adds	r2, r0, #1
 800b9fe:	4606      	mov	r6, r0
 800ba00:	d1d6      	bne.n	800b9b0 <_svfiprintf_r+0x174>
 800ba02:	89ab      	ldrh	r3, [r5, #12]
 800ba04:	065b      	lsls	r3, r3, #25
 800ba06:	f53f af2d 	bmi.w	800b864 <_svfiprintf_r+0x28>
 800ba0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba0c:	e72c      	b.n	800b868 <_svfiprintf_r+0x2c>
 800ba0e:	ab03      	add	r3, sp, #12
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	462a      	mov	r2, r5
 800ba14:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <_svfiprintf_r+0x1f0>)
 800ba16:	a904      	add	r1, sp, #16
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f000 f879 	bl	800bb10 <_printf_i>
 800ba1e:	e7ed      	b.n	800b9fc <_svfiprintf_r+0x1c0>
 800ba20:	0800be98 	.word	0x0800be98
 800ba24:	0800bea2 	.word	0x0800bea2
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	0800b785 	.word	0x0800b785
 800ba30:	0800be9e 	.word	0x0800be9e

0800ba34 <_printf_common>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	4616      	mov	r6, r2
 800ba3a:	4698      	mov	r8, r3
 800ba3c:	688a      	ldr	r2, [r1, #8]
 800ba3e:	690b      	ldr	r3, [r1, #16]
 800ba40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba44:	4293      	cmp	r3, r2
 800ba46:	bfb8      	it	lt
 800ba48:	4613      	movlt	r3, r2
 800ba4a:	6033      	str	r3, [r6, #0]
 800ba4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba50:	4607      	mov	r7, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	b10a      	cbz	r2, 800ba5a <_printf_common+0x26>
 800ba56:	3301      	adds	r3, #1
 800ba58:	6033      	str	r3, [r6, #0]
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	0699      	lsls	r1, r3, #26
 800ba5e:	bf42      	ittt	mi
 800ba60:	6833      	ldrmi	r3, [r6, #0]
 800ba62:	3302      	addmi	r3, #2
 800ba64:	6033      	strmi	r3, [r6, #0]
 800ba66:	6825      	ldr	r5, [r4, #0]
 800ba68:	f015 0506 	ands.w	r5, r5, #6
 800ba6c:	d106      	bne.n	800ba7c <_printf_common+0x48>
 800ba6e:	f104 0a19 	add.w	sl, r4, #25
 800ba72:	68e3      	ldr	r3, [r4, #12]
 800ba74:	6832      	ldr	r2, [r6, #0]
 800ba76:	1a9b      	subs	r3, r3, r2
 800ba78:	42ab      	cmp	r3, r5
 800ba7a:	dc26      	bgt.n	800baca <_printf_common+0x96>
 800ba7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba80:	6822      	ldr	r2, [r4, #0]
 800ba82:	3b00      	subs	r3, #0
 800ba84:	bf18      	it	ne
 800ba86:	2301      	movne	r3, #1
 800ba88:	0692      	lsls	r2, r2, #26
 800ba8a:	d42b      	bmi.n	800bae4 <_printf_common+0xb0>
 800ba8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba90:	4641      	mov	r1, r8
 800ba92:	4638      	mov	r0, r7
 800ba94:	47c8      	blx	r9
 800ba96:	3001      	adds	r0, #1
 800ba98:	d01e      	beq.n	800bad8 <_printf_common+0xa4>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	6922      	ldr	r2, [r4, #16]
 800ba9e:	f003 0306 	and.w	r3, r3, #6
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	bf02      	ittt	eq
 800baa6:	68e5      	ldreq	r5, [r4, #12]
 800baa8:	6833      	ldreq	r3, [r6, #0]
 800baaa:	1aed      	subeq	r5, r5, r3
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	bf0c      	ite	eq
 800bab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bab4:	2500      	movne	r5, #0
 800bab6:	4293      	cmp	r3, r2
 800bab8:	bfc4      	itt	gt
 800baba:	1a9b      	subgt	r3, r3, r2
 800babc:	18ed      	addgt	r5, r5, r3
 800babe:	2600      	movs	r6, #0
 800bac0:	341a      	adds	r4, #26
 800bac2:	42b5      	cmp	r5, r6
 800bac4:	d11a      	bne.n	800bafc <_printf_common+0xc8>
 800bac6:	2000      	movs	r0, #0
 800bac8:	e008      	b.n	800badc <_printf_common+0xa8>
 800baca:	2301      	movs	r3, #1
 800bacc:	4652      	mov	r2, sl
 800bace:	4641      	mov	r1, r8
 800bad0:	4638      	mov	r0, r7
 800bad2:	47c8      	blx	r9
 800bad4:	3001      	adds	r0, #1
 800bad6:	d103      	bne.n	800bae0 <_printf_common+0xac>
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae0:	3501      	adds	r5, #1
 800bae2:	e7c6      	b.n	800ba72 <_printf_common+0x3e>
 800bae4:	18e1      	adds	r1, r4, r3
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	2030      	movs	r0, #48	@ 0x30
 800baea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baee:	4422      	add	r2, r4
 800baf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800baf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baf8:	3302      	adds	r3, #2
 800bafa:	e7c7      	b.n	800ba8c <_printf_common+0x58>
 800bafc:	2301      	movs	r3, #1
 800bafe:	4622      	mov	r2, r4
 800bb00:	4641      	mov	r1, r8
 800bb02:	4638      	mov	r0, r7
 800bb04:	47c8      	blx	r9
 800bb06:	3001      	adds	r0, #1
 800bb08:	d0e6      	beq.n	800bad8 <_printf_common+0xa4>
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	e7d9      	b.n	800bac2 <_printf_common+0x8e>
	...

0800bb10 <_printf_i>:
 800bb10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	7e0f      	ldrb	r7, [r1, #24]
 800bb16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb18:	2f78      	cmp	r7, #120	@ 0x78
 800bb1a:	4691      	mov	r9, r2
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	460c      	mov	r4, r1
 800bb20:	469a      	mov	sl, r3
 800bb22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb26:	d807      	bhi.n	800bb38 <_printf_i+0x28>
 800bb28:	2f62      	cmp	r7, #98	@ 0x62
 800bb2a:	d80a      	bhi.n	800bb42 <_printf_i+0x32>
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	f000 80d1 	beq.w	800bcd4 <_printf_i+0x1c4>
 800bb32:	2f58      	cmp	r7, #88	@ 0x58
 800bb34:	f000 80b8 	beq.w	800bca8 <_printf_i+0x198>
 800bb38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb40:	e03a      	b.n	800bbb8 <_printf_i+0xa8>
 800bb42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb46:	2b15      	cmp	r3, #21
 800bb48:	d8f6      	bhi.n	800bb38 <_printf_i+0x28>
 800bb4a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb50 <_printf_i+0x40>)
 800bb4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb50:	0800bba9 	.word	0x0800bba9
 800bb54:	0800bbbd 	.word	0x0800bbbd
 800bb58:	0800bb39 	.word	0x0800bb39
 800bb5c:	0800bb39 	.word	0x0800bb39
 800bb60:	0800bb39 	.word	0x0800bb39
 800bb64:	0800bb39 	.word	0x0800bb39
 800bb68:	0800bbbd 	.word	0x0800bbbd
 800bb6c:	0800bb39 	.word	0x0800bb39
 800bb70:	0800bb39 	.word	0x0800bb39
 800bb74:	0800bb39 	.word	0x0800bb39
 800bb78:	0800bb39 	.word	0x0800bb39
 800bb7c:	0800bcbb 	.word	0x0800bcbb
 800bb80:	0800bbe7 	.word	0x0800bbe7
 800bb84:	0800bc75 	.word	0x0800bc75
 800bb88:	0800bb39 	.word	0x0800bb39
 800bb8c:	0800bb39 	.word	0x0800bb39
 800bb90:	0800bcdd 	.word	0x0800bcdd
 800bb94:	0800bb39 	.word	0x0800bb39
 800bb98:	0800bbe7 	.word	0x0800bbe7
 800bb9c:	0800bb39 	.word	0x0800bb39
 800bba0:	0800bb39 	.word	0x0800bb39
 800bba4:	0800bc7d 	.word	0x0800bc7d
 800bba8:	6833      	ldr	r3, [r6, #0]
 800bbaa:	1d1a      	adds	r2, r3, #4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6032      	str	r2, [r6, #0]
 800bbb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e09c      	b.n	800bcf6 <_printf_i+0x1e6>
 800bbbc:	6833      	ldr	r3, [r6, #0]
 800bbbe:	6820      	ldr	r0, [r4, #0]
 800bbc0:	1d19      	adds	r1, r3, #4
 800bbc2:	6031      	str	r1, [r6, #0]
 800bbc4:	0606      	lsls	r6, r0, #24
 800bbc6:	d501      	bpl.n	800bbcc <_printf_i+0xbc>
 800bbc8:	681d      	ldr	r5, [r3, #0]
 800bbca:	e003      	b.n	800bbd4 <_printf_i+0xc4>
 800bbcc:	0645      	lsls	r5, r0, #25
 800bbce:	d5fb      	bpl.n	800bbc8 <_printf_i+0xb8>
 800bbd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbd4:	2d00      	cmp	r5, #0
 800bbd6:	da03      	bge.n	800bbe0 <_printf_i+0xd0>
 800bbd8:	232d      	movs	r3, #45	@ 0x2d
 800bbda:	426d      	negs	r5, r5
 800bbdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbe0:	4858      	ldr	r0, [pc, #352]	@ (800bd44 <_printf_i+0x234>)
 800bbe2:	230a      	movs	r3, #10
 800bbe4:	e011      	b.n	800bc0a <_printf_i+0xfa>
 800bbe6:	6821      	ldr	r1, [r4, #0]
 800bbe8:	6833      	ldr	r3, [r6, #0]
 800bbea:	0608      	lsls	r0, r1, #24
 800bbec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbf0:	d402      	bmi.n	800bbf8 <_printf_i+0xe8>
 800bbf2:	0649      	lsls	r1, r1, #25
 800bbf4:	bf48      	it	mi
 800bbf6:	b2ad      	uxthmi	r5, r5
 800bbf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbfa:	4852      	ldr	r0, [pc, #328]	@ (800bd44 <_printf_i+0x234>)
 800bbfc:	6033      	str	r3, [r6, #0]
 800bbfe:	bf14      	ite	ne
 800bc00:	230a      	movne	r3, #10
 800bc02:	2308      	moveq	r3, #8
 800bc04:	2100      	movs	r1, #0
 800bc06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc0a:	6866      	ldr	r6, [r4, #4]
 800bc0c:	60a6      	str	r6, [r4, #8]
 800bc0e:	2e00      	cmp	r6, #0
 800bc10:	db05      	blt.n	800bc1e <_printf_i+0x10e>
 800bc12:	6821      	ldr	r1, [r4, #0]
 800bc14:	432e      	orrs	r6, r5
 800bc16:	f021 0104 	bic.w	r1, r1, #4
 800bc1a:	6021      	str	r1, [r4, #0]
 800bc1c:	d04b      	beq.n	800bcb6 <_printf_i+0x1a6>
 800bc1e:	4616      	mov	r6, r2
 800bc20:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc24:	fb03 5711 	mls	r7, r3, r1, r5
 800bc28:	5dc7      	ldrb	r7, [r0, r7]
 800bc2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc2e:	462f      	mov	r7, r5
 800bc30:	42bb      	cmp	r3, r7
 800bc32:	460d      	mov	r5, r1
 800bc34:	d9f4      	bls.n	800bc20 <_printf_i+0x110>
 800bc36:	2b08      	cmp	r3, #8
 800bc38:	d10b      	bne.n	800bc52 <_printf_i+0x142>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	07df      	lsls	r7, r3, #31
 800bc3e:	d508      	bpl.n	800bc52 <_printf_i+0x142>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	6861      	ldr	r1, [r4, #4]
 800bc44:	4299      	cmp	r1, r3
 800bc46:	bfde      	ittt	le
 800bc48:	2330      	movle	r3, #48	@ 0x30
 800bc4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc52:	1b92      	subs	r2, r2, r6
 800bc54:	6122      	str	r2, [r4, #16]
 800bc56:	f8cd a000 	str.w	sl, [sp]
 800bc5a:	464b      	mov	r3, r9
 800bc5c:	aa03      	add	r2, sp, #12
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4640      	mov	r0, r8
 800bc62:	f7ff fee7 	bl	800ba34 <_printf_common>
 800bc66:	3001      	adds	r0, #1
 800bc68:	d14a      	bne.n	800bd00 <_printf_i+0x1f0>
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	b004      	add	sp, #16
 800bc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	f043 0320 	orr.w	r3, r3, #32
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	4832      	ldr	r0, [pc, #200]	@ (800bd48 <_printf_i+0x238>)
 800bc7e:	2778      	movs	r7, #120	@ 0x78
 800bc80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	6831      	ldr	r1, [r6, #0]
 800bc88:	061f      	lsls	r7, r3, #24
 800bc8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc8e:	d402      	bmi.n	800bc96 <_printf_i+0x186>
 800bc90:	065f      	lsls	r7, r3, #25
 800bc92:	bf48      	it	mi
 800bc94:	b2ad      	uxthmi	r5, r5
 800bc96:	6031      	str	r1, [r6, #0]
 800bc98:	07d9      	lsls	r1, r3, #31
 800bc9a:	bf44      	itt	mi
 800bc9c:	f043 0320 	orrmi.w	r3, r3, #32
 800bca0:	6023      	strmi	r3, [r4, #0]
 800bca2:	b11d      	cbz	r5, 800bcac <_printf_i+0x19c>
 800bca4:	2310      	movs	r3, #16
 800bca6:	e7ad      	b.n	800bc04 <_printf_i+0xf4>
 800bca8:	4826      	ldr	r0, [pc, #152]	@ (800bd44 <_printf_i+0x234>)
 800bcaa:	e7e9      	b.n	800bc80 <_printf_i+0x170>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	f023 0320 	bic.w	r3, r3, #32
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	e7f6      	b.n	800bca4 <_printf_i+0x194>
 800bcb6:	4616      	mov	r6, r2
 800bcb8:	e7bd      	b.n	800bc36 <_printf_i+0x126>
 800bcba:	6833      	ldr	r3, [r6, #0]
 800bcbc:	6825      	ldr	r5, [r4, #0]
 800bcbe:	6961      	ldr	r1, [r4, #20]
 800bcc0:	1d18      	adds	r0, r3, #4
 800bcc2:	6030      	str	r0, [r6, #0]
 800bcc4:	062e      	lsls	r6, r5, #24
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	d501      	bpl.n	800bcce <_printf_i+0x1be>
 800bcca:	6019      	str	r1, [r3, #0]
 800bccc:	e002      	b.n	800bcd4 <_printf_i+0x1c4>
 800bcce:	0668      	lsls	r0, r5, #25
 800bcd0:	d5fb      	bpl.n	800bcca <_printf_i+0x1ba>
 800bcd2:	8019      	strh	r1, [r3, #0]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6123      	str	r3, [r4, #16]
 800bcd8:	4616      	mov	r6, r2
 800bcda:	e7bc      	b.n	800bc56 <_printf_i+0x146>
 800bcdc:	6833      	ldr	r3, [r6, #0]
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	6032      	str	r2, [r6, #0]
 800bce2:	681e      	ldr	r6, [r3, #0]
 800bce4:	6862      	ldr	r2, [r4, #4]
 800bce6:	2100      	movs	r1, #0
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7f4 faa1 	bl	8000230 <memchr>
 800bcee:	b108      	cbz	r0, 800bcf4 <_printf_i+0x1e4>
 800bcf0:	1b80      	subs	r0, r0, r6
 800bcf2:	6060      	str	r0, [r4, #4]
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	6123      	str	r3, [r4, #16]
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcfe:	e7aa      	b.n	800bc56 <_printf_i+0x146>
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	4632      	mov	r2, r6
 800bd04:	4649      	mov	r1, r9
 800bd06:	4640      	mov	r0, r8
 800bd08:	47d0      	blx	sl
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d0ad      	beq.n	800bc6a <_printf_i+0x15a>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	079b      	lsls	r3, r3, #30
 800bd12:	d413      	bmi.n	800bd3c <_printf_i+0x22c>
 800bd14:	68e0      	ldr	r0, [r4, #12]
 800bd16:	9b03      	ldr	r3, [sp, #12]
 800bd18:	4298      	cmp	r0, r3
 800bd1a:	bfb8      	it	lt
 800bd1c:	4618      	movlt	r0, r3
 800bd1e:	e7a6      	b.n	800bc6e <_printf_i+0x15e>
 800bd20:	2301      	movs	r3, #1
 800bd22:	4632      	mov	r2, r6
 800bd24:	4649      	mov	r1, r9
 800bd26:	4640      	mov	r0, r8
 800bd28:	47d0      	blx	sl
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d09d      	beq.n	800bc6a <_printf_i+0x15a>
 800bd2e:	3501      	adds	r5, #1
 800bd30:	68e3      	ldr	r3, [r4, #12]
 800bd32:	9903      	ldr	r1, [sp, #12]
 800bd34:	1a5b      	subs	r3, r3, r1
 800bd36:	42ab      	cmp	r3, r5
 800bd38:	dcf2      	bgt.n	800bd20 <_printf_i+0x210>
 800bd3a:	e7eb      	b.n	800bd14 <_printf_i+0x204>
 800bd3c:	2500      	movs	r5, #0
 800bd3e:	f104 0619 	add.w	r6, r4, #25
 800bd42:	e7f5      	b.n	800bd30 <_printf_i+0x220>
 800bd44:	0800bea9 	.word	0x0800bea9
 800bd48:	0800beba 	.word	0x0800beba

0800bd4c <memmove>:
 800bd4c:	4288      	cmp	r0, r1
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	eb01 0402 	add.w	r4, r1, r2
 800bd54:	d902      	bls.n	800bd5c <memmove+0x10>
 800bd56:	4284      	cmp	r4, r0
 800bd58:	4623      	mov	r3, r4
 800bd5a:	d807      	bhi.n	800bd6c <memmove+0x20>
 800bd5c:	1e43      	subs	r3, r0, #1
 800bd5e:	42a1      	cmp	r1, r4
 800bd60:	d008      	beq.n	800bd74 <memmove+0x28>
 800bd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd6a:	e7f8      	b.n	800bd5e <memmove+0x12>
 800bd6c:	4402      	add	r2, r0
 800bd6e:	4601      	mov	r1, r0
 800bd70:	428a      	cmp	r2, r1
 800bd72:	d100      	bne.n	800bd76 <memmove+0x2a>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd7e:	e7f7      	b.n	800bd70 <memmove+0x24>

0800bd80 <_sbrk_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d06      	ldr	r5, [pc, #24]	@ (800bd9c <_sbrk_r+0x1c>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f5 fe5a 	bl	8001a44 <_sbrk>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_sbrk_r+0x1a>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_sbrk_r+0x1a>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	200007ec 	.word	0x200007ec

0800bda0 <memcpy>:
 800bda0:	440a      	add	r2, r1
 800bda2:	4291      	cmp	r1, r2
 800bda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bda8:	d100      	bne.n	800bdac <memcpy+0xc>
 800bdaa:	4770      	bx	lr
 800bdac:	b510      	push	{r4, lr}
 800bdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdb6:	4291      	cmp	r1, r2
 800bdb8:	d1f9      	bne.n	800bdae <memcpy+0xe>
 800bdba:	bd10      	pop	{r4, pc}

0800bdbc <_realloc_r>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	4614      	mov	r4, r2
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	b921      	cbnz	r1, 800bdd2 <_realloc_r+0x16>
 800bdc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	4611      	mov	r1, r2
 800bdce:	f7ff bc4d 	b.w	800b66c <_malloc_r>
 800bdd2:	b92a      	cbnz	r2, 800bde0 <_realloc_r+0x24>
 800bdd4:	f7ff fbde 	bl	800b594 <_free_r>
 800bdd8:	4625      	mov	r5, r4
 800bdda:	4628      	mov	r0, r5
 800bddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde0:	f000 f81a 	bl	800be18 <_malloc_usable_size_r>
 800bde4:	4284      	cmp	r4, r0
 800bde6:	4606      	mov	r6, r0
 800bde8:	d802      	bhi.n	800bdf0 <_realloc_r+0x34>
 800bdea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdee:	d8f4      	bhi.n	800bdda <_realloc_r+0x1e>
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f7ff fc3a 	bl	800b66c <_malloc_r>
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	b908      	cbnz	r0, 800be00 <_realloc_r+0x44>
 800bdfc:	4645      	mov	r5, r8
 800bdfe:	e7ec      	b.n	800bdda <_realloc_r+0x1e>
 800be00:	42b4      	cmp	r4, r6
 800be02:	4622      	mov	r2, r4
 800be04:	4629      	mov	r1, r5
 800be06:	bf28      	it	cs
 800be08:	4632      	movcs	r2, r6
 800be0a:	f7ff ffc9 	bl	800bda0 <memcpy>
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff fbbf 	bl	800b594 <_free_r>
 800be16:	e7f1      	b.n	800bdfc <_realloc_r+0x40>

0800be18 <_malloc_usable_size_r>:
 800be18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1c:	1f18      	subs	r0, r3, #4
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bfbc      	itt	lt
 800be22:	580b      	ldrlt	r3, [r1, r0]
 800be24:	18c0      	addlt	r0, r0, r3
 800be26:	4770      	bx	lr

0800be28 <_init>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr

0800be34 <_fini>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	bf00      	nop
 800be38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3a:	bc08      	pop	{r3}
 800be3c:	469e      	mov	lr, r3
 800be3e:	4770      	bx	lr
